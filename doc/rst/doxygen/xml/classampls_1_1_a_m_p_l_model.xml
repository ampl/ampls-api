<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classampls_1_1_a_m_p_l_model" kind="class" language="C++" prot="public">
    <compoundname>ampls::AMPLModel</compoundname>
    <derivedcompoundref refid="classampls_1_1_c_p_l_e_x_model" prot="public" virt="non-virtual">ampls::CPLEXModel</derivedcompoundref>
    <derivedcompoundref refid="classampls_1_1_gurobi_model" prot="public" virt="non-virtual">ampls::GurobiModel</derivedcompoundref>
    <derivedcompoundref refid="classampls_1_1_x_p_r_e_s_s_model" prot="public" virt="non-virtual">ampls::XPRESSModel</derivedcompoundref>
    <includes refid="ampls_8h" local="no">ampls.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classampls_1_1_a_m_p_l_model_1af937ef80465efdc2751d366ba5969f2a" prot="private" static="no" mutable="no">
        <type>std::map&lt; int, std::string &gt;</type>
        <definition>std::map&lt;int, std::string&gt; ampls::AMPLModel::varMapInverse_</definition>
        <argsstring></argsstring>
        <name>varMapInverse_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" line="424" column="12" bodyfile="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" bodystart="424" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classampls_1_1_a_m_p_l_model_1a81519bc2dc8d731d7e35f25200028a5d" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, int &gt;</type>
        <definition>std::map&lt;std::string, int&gt; ampls::AMPLModel::varMap_</definition>
        <argsstring></argsstring>
        <name>varMap_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" line="425" column="12" bodyfile="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" bodystart="425" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classampls_1_1_a_m_p_l_model_1a1b3c482a4666f3bc5001eab9f98ff686" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string ampls::AMPLModel::fileName_</definition>
        <argsstring></argsstring>
        <name>fileName_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" line="439" column="15" bodyfile="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" bodystart="439" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classampls_1_1_a_m_p_l_model_1aa6e24884a38094d0e749c29020e8773c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend std::map&lt; std::string, int &gt; &amp;</type>
        <definition>std::map&lt;std::string, int&gt;&amp; impl::BaseCallback::getVarMap</definition>
        <argsstring>()</argsstring>
        <name>impl::BaseCallback::getVarMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" line="422" column="19"/>
      </memberdef>
      <memberdef kind="friend" id="classampls_1_1_a_m_p_l_model_1ad6a149baa47abc03d4084c3063b95514" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend std::map&lt; int, std::string &gt; &amp;</type>
        <definition>std::map&lt;int, std::string&gt;&amp; impl::BaseCallback::getVarMapInverse</definition>
        <argsstring>()</argsstring>
        <name>impl::BaseCallback::getVarMapInverse</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" line="423" column="19"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classampls_1_1_a_m_p_l_model_1a97ab392992414092b1b043878df0b6a1" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ampls::AMPLModel::getVarMapsInternal</definition>
        <argsstring>()</argsstring>
        <name>getVarMapsInternal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" line="430" column="8" bodyfile="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" bodystart="430" bodyend="436"/>
      </memberdef>
      <memberdef kind="function" id="classampls_1_1_a_m_p_l_model_1a3431fa7976cea2dadc156ae9c0f9f4c7" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ampls::AMPLModel::AMPLModel</definition>
        <argsstring>()</argsstring>
        <name>AMPLModel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" line="440" column="3" bodyfile="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" bodystart="440" bodyend="440"/>
      </memberdef>
      <memberdef kind="function" id="classampls_1_1_a_m_p_l_model_1a3aeb4df66d9435fe4b87214bc26837a4" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ampls::AMPLModel::resetVarMapInternal</definition>
        <argsstring>()</argsstring>
        <name>resetVarMapInternal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" line="442" column="8" bodyfile="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" bodystart="442" bodyend="447"/>
      </memberdef>
      <memberdef kind="function" id="classampls_1_1_a_m_p_l_model_1a27190416a7add5411ea850feca3eb9b0" prot="private" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>int</type>
        <definition>virtual int ampls::AMPLModel::setCallbackDerived</definition>
        <argsstring>(impl::BaseCallback *callback)</argsstring>
        <name>setCallbackDerived</name>
        <reimplementedby refid="classampls_1_1_gurobi_model_1a0106335fca3e34e0fd55278cdb15472f">setCallbackDerived</reimplementedby>
        <reimplementedby refid="classampls_1_1_c_p_l_e_x_model_1a50a61cba49641cdce2687083ad92fda2">setCallbackDerived</reimplementedby>
        <reimplementedby refid="classampls_1_1_x_p_r_e_s_s_model_1a6e1af19528a96adf7944c40a8641a469">setCallbackDerived</reimplementedby>
        <param>
          <type>impl::BaseCallback *</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" line="448" column="15" bodyfile="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" bodystart="448" bodyend="450"/>
      </memberdef>
      <memberdef kind="function" id="classampls_1_1_a_m_p_l_model_1a08289f51a8292285dcdd2d472ff9924d" prot="private" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>impl::BaseCallback *</type>
        <definition>virtual impl::BaseCallback* ampls::AMPLModel::createCallbackImplDerived</definition>
        <argsstring>(GenericCallback *callback)</argsstring>
        <name>createCallbackImplDerived</name>
        <reimplementedby refid="classampls_1_1_gurobi_model_1a9d191db93833367d3e9ecf5bc445c69d">createCallbackImplDerived</reimplementedby>
        <reimplementedby refid="classampls_1_1_c_p_l_e_x_model_1a4e839dc013493e1d843d7ee3d7605430">createCallbackImplDerived</reimplementedby>
        <reimplementedby refid="classampls_1_1_x_p_r_e_s_s_model_1a13003dc9b666c13fcac5ed082ad4121f">createCallbackImplDerived</reimplementedby>
        <param>
          <type><ref refid="classampls_1_1_generic_callback" kindref="compound">GenericCallback</ref> *</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" line="451" column="30" bodyfile="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" bodystart="451" bodyend="453"/>
      </memberdef>
      <memberdef kind="function" id="classampls_1_1_a_m_p_l_model_1afce5959882c970916e545b69e71bd5c1" prot="private" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void ampls::AMPLModel::writeSolImpl</definition>
        <argsstring>(const char *solFileName)</argsstring>
        <name>writeSolImpl</name>
        <reimplementedby refid="classampls_1_1_gurobi_model_1a249b482be9404183a6caa16e74f42902">writeSolImpl</reimplementedby>
        <reimplementedby refid="classampls_1_1_c_p_l_e_x_model_1a187cb760b7112add8ad64a0d09af06fd">writeSolImpl</reimplementedby>
        <reimplementedby refid="classampls_1_1_x_p_r_e_s_s_model_1a933d4385ad4924bb97f2d9c87ac08351">writeSolImpl</reimplementedby>
        <param>
          <type>const char *</type>
          <declname>solFileName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" line="454" column="16" bodyfile="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" bodystart="454" bodyend="456"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classampls_1_1_a_m_p_l_model_1ae8938457c2e37d5f5e19e528f492b8c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string ampls::AMPLModel::getFileName</definition>
        <argsstring>()</argsstring>
        <name>getFileName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" line="458" column="15" bodyfile="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" bodystart="458" bodyend="460"/>
      </memberdef>
      <memberdef kind="function" id="classampls_1_1_a_m_p_l_model_1a15442f8b8c6cf29ba2bef3c986e3d246" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ampls::AMPLModel::AMPLModel</definition>
        <argsstring>(const AMPLModel &amp;other)</argsstring>
        <name>AMPLModel</name>
        <param>
          <type>const <ref refid="classampls_1_1_a_m_p_l_model" kindref="compound">AMPLModel</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" line="461" column="3" bodyfile="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" bodystart="461" bodyend="461"/>
      </memberdef>
      <memberdef kind="function" id="classampls_1_1_a_m_p_l_model_1a0a9ebfa649684a9d6faf6e13f85a32ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; int, std::string &gt;</type>
        <definition>std::map&lt;int, std::string&gt; ampls::AMPLModel::getVarMapInverse</definition>
        <argsstring>()</argsstring>
        <name>getVarMapInverse</name>
        <briefdescription>
<para>Get the map from variable name to index in the solver interface. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" line="466" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classampls_1_1_a_m_p_l_model_1a2f5456b17543eb0a6a0c2409617bdd1a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::map&lt; std::string, int &gt;</type>
        <definition>std::map&lt;std::string, int&gt; ampls::AMPLModel::getVarMap</definition>
        <argsstring>()</argsstring>
        <name>getVarMap</name>
        <briefdescription>
<para>Get the map from variable name to index in the solver interface. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" line="471" column="12" bodyfile="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" bodystart="471" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="classampls_1_1_a_m_p_l_model_1ab4fd6f2a6b0f91dd4983de98e7003c30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; std::string, int &gt;</type>
        <definition>std::map&lt;std::string, int&gt; ampls::AMPLModel::getVarMapFiltered</definition>
        <argsstring>(const char *beginWith)</argsstring>
        <name>getVarMapFiltered</name>
        <param>
          <type>const char *</type>
          <declname>beginWith</declname>
        </param>
        <briefdescription>
<para>Return the variable map, filtered by the variable name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" line="478" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classampls_1_1_a_m_p_l_model_1a5c20eba868bd9a8207dd44b39c7cdfde" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int ampls::AMPLModel::setCallback</definition>
        <argsstring>(GenericCallback *callback)</argsstring>
        <name>setCallback</name>
        <param>
          <type><ref refid="classampls_1_1_generic_callback" kindref="compound">GenericCallback</ref> *</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Set a generic callback to be called during optimization. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is automatically dispatched when (and only when) assigning an <ref refid="classampls_1_1_generic_callback" kindref="compound">ampls::GenericCallback</ref>, as it needs a special treatment to automatically create the solver-specific wrapper </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" line="485" column="7" bodyfile="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" bodystart="485" bodyend="491"/>
      </memberdef>
      <memberdef kind="function" id="classampls_1_1_a_m_p_l_model_1a0e051acaa733bd9d45354b218966de0e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int ampls::AMPLModel::setCallback</definition>
        <argsstring>(impl::BaseCallback *callback)</argsstring>
        <name>setCallback</name>
        <param>
          <type>impl::BaseCallback *</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Set callback to be called during optimization. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" line="495" column="7" bodyfile="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" bodystart="495" bodyend="499"/>
      </memberdef>
      <memberdef kind="function" id="classampls_1_1_a_m_p_l_model_1a70499ebc7d909088db21d0b96b53175f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; ampls::AMPLModel::getSolutionVector</definition>
        <argsstring>()</argsstring>
        <name>getSolutionVector</name>
        <briefdescription>
<para>Get all the variables of the current problem. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" line="503" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classampls_1_1_a_m_p_l_model_1a83f292201e3a0181e6c796e50edce69f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>int</type>
        <definition>virtual int ampls::AMPLModel::getNumVars</definition>
        <argsstring>()</argsstring>
        <name>getNumVars</name>
        <reimplementedby refid="classampls_1_1_gurobi_model_1aa7d5a71be21a0bd56d37e8c8fcb18727">getNumVars</reimplementedby>
        <reimplementedby refid="classampls_1_1_c_p_l_e_x_model_1a8db26a2b33405fd1a27847be2f9adc0f">getNumVars</reimplementedby>
        <reimplementedby refid="classampls_1_1_x_p_r_e_s_s_model_1a7ada70c4dbdef4a94b16ba80d42ba157">getNumVars</reimplementedby>
        <briefdescription>
<para>Get the number of variables. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" line="507" column="15" bodyfile="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" bodystart="507" bodyend="509"/>
      </memberdef>
      <memberdef kind="function" id="classampls_1_1_a_m_p_l_model_1aa30ec04fefc1c4cc6d3d906f4e662384" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>Status::SolStatus</type>
        <definition>virtual Status::SolStatus ampls::AMPLModel::getStatus</definition>
        <argsstring>()</argsstring>
        <name>getStatus</name>
        <reimplementedby refid="classampls_1_1_gurobi_model_1ac69a3612e67a909dc1de029d63f902ce">getStatus</reimplementedby>
        <reimplementedby refid="classampls_1_1_c_p_l_e_x_model_1a79e7d67545eb5cc0bf5dbbbc9ba6bc08">getStatus</reimplementedby>
        <reimplementedby refid="classampls_1_1_x_p_r_e_s_s_model_1ad6c068e22295d54c7dbbcd8b6d6ce7e2">getStatus</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" line="510" column="29" bodyfile="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" bodystart="510" bodyend="512"/>
      </memberdef>
      <memberdef kind="function" id="classampls_1_1_a_m_p_l_model_1a7e639a340228e6f93f64fd1de4e44338" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>int</type>
        <definition>virtual int ampls::AMPLModel::optimize</definition>
        <argsstring>()</argsstring>
        <name>optimize</name>
        <reimplementedby refid="classampls_1_1_gurobi_model_1ad374a0553ae664a6a19ab028554fd492">optimize</reimplementedby>
        <reimplementedby refid="classampls_1_1_c_p_l_e_x_model_1a305db26ef2018f0929bbb54d667ebcd1">optimize</reimplementedby>
        <reimplementedby refid="classampls_1_1_x_p_r_e_s_s_model_1a425d82ad6da71eca41c088e731fd6856">optimize</reimplementedby>
        <briefdescription>
<para>Start the optimization process. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" line="516" column="15" bodyfile="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" bodystart="516" bodyend="518"/>
      </memberdef>
      <memberdef kind="function" id="classampls_1_1_a_m_p_l_model_1acb0a7c8e8c0e38b0bc71615daeead693" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void ampls::AMPLModel::writeSol</definition>
        <argsstring>()</argsstring>
        <name>writeSol</name>
        <briefdescription>
<para>Write the solution file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" line="523" column="16" bodyfile="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" bodystart="523" bodyend="525"/>
      </memberdef>
      <memberdef kind="function" id="classampls_1_1_a_m_p_l_model_1a64d58554792987885e83128a9faa60c5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void ampls::AMPLModel::writeSol</definition>
        <argsstring>(const char *solFileName)</argsstring>
        <name>writeSol</name>
        <param>
          <type>const char *</type>
          <declname>solFileName</declname>
        </param>
        <briefdescription>
<para>Write the solution file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" line="529" column="16" bodyfile="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" bodystart="529" bodyend="531"/>
      </memberdef>
      <memberdef kind="function" id="classampls_1_1_a_m_p_l_model_1ada258dda5511214bdc3318bc99d0ec9f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>int</type>
        <definition>virtual int ampls::AMPLModel::getSolution</definition>
        <argsstring>(int first, int length, double *sol)</argsstring>
        <name>getSolution</name>
        <reimplementedby refid="classampls_1_1_gurobi_model_1a7f389bb22ef8a5ec7620da71097b846c">getSolution</reimplementedby>
        <reimplementedby refid="classampls_1_1_c_p_l_e_x_model_1a89f29debba7b81aa5e878dce75d9b0b1">getSolution</reimplementedby>
        <reimplementedby refid="classampls_1_1_x_p_r_e_s_s_model_1ad1df45b69ec933bdd38d7211910a16c5">getSolution</reimplementedby>
        <param>
          <type>int</type>
          <declname>first</declname>
        </param>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>sol</declname>
        </param>
        <briefdescription>
<para>Get &quot;length&quot; variables of the current problem in an array, starting at the specified position. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" line="536" column="15" bodyfile="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" bodystart="536" bodyend="538"/>
      </memberdef>
      <memberdef kind="function" id="classampls_1_1_a_m_p_l_model_1ac465963811921794564f08959d2acbe2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>double</type>
        <definition>virtual double ampls::AMPLModel::getObj</definition>
        <argsstring>()</argsstring>
        <name>getObj</name>
        <reimplementedby refid="classampls_1_1_gurobi_model_1abb643bb44cd116e6525556d04f6f6af0">getObj</reimplementedby>
        <reimplementedby refid="classampls_1_1_c_p_l_e_x_model_1a762520c58f1f2556287e6ad22dd9aec6">getObj</reimplementedby>
        <reimplementedby refid="classampls_1_1_x_p_r_e_s_s_model_1a9146f691e229d29ce7e8ccf057908121">getObj</reimplementedby>
        <briefdescription>
<para>Get the current objective value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" line="542" column="18" bodyfile="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" bodystart="542" bodyend="544"/>
      </memberdef>
      <memberdef kind="function" id="classampls_1_1_a_m_p_l_model_1a842b77149c818c530b630999d1fded8d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>virtual std::string ampls::AMPLModel::error</definition>
        <argsstring>(int code)</argsstring>
        <name>error</name>
        <reimplementedby refid="classampls_1_1_gurobi_model_1abd00bf4004a1678f0217ad3a77c7cf0a">error</reimplementedby>
        <reimplementedby refid="classampls_1_1_c_p_l_e_x_model_1a536804deb3e226eeee513791aada54ce">error</reimplementedby>
        <reimplementedby refid="classampls_1_1_x_p_r_e_s_s_model_1ac2a27a24a31e33f3351bb118e491b87d">error</reimplementedby>
        <param>
          <type>int</type>
          <declname>code</declname>
        </param>
        <briefdescription>
<para>Get the error message corresponding to the code. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" line="548" column="23" bodyfile="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" bodystart="548" bodyend="550"/>
      </memberdef>
      <memberdef kind="function" id="classampls_1_1_a_m_p_l_model_1aa45dbd2191a82acea153e2b3d6c1573d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void ampls::AMPLModel::enableLazyConstraints</definition>
        <argsstring>()</argsstring>
        <name>enableLazyConstraints</name>
        <reimplementedby refid="classampls_1_1_gurobi_model_1adbb5e96a0c091c80aed2dec216fb320a">enableLazyConstraints</reimplementedby>
        <reimplementedby refid="classampls_1_1_c_p_l_e_x_model_1aec76c78adf93f703fb59b84f7031ba90">enableLazyConstraints</reimplementedby>
        <briefdescription>
<para>Enable adding lazy constraints via callbacks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" line="555" column="16" bodyfile="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" bodystart="555" bodyend="555"/>
      </memberdef>
      <memberdef kind="function" id="classampls_1_1_a_m_p_l_model_1ac2e1800d30c2751eb9464cbbf16da70f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ampls::AMPLModel::printModelVars</definition>
        <argsstring>(bool onlyNonZero)</argsstring>
        <name>printModelVars</name>
        <param>
          <type>bool</type>
          <declname>onlyNonZero</declname>
        </param>
        <briefdescription>
<para>Utility function: prints all variables to screen. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" line="559" column="8"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Store an in-memory representation of an AMPL model, which can be constructed by loading it from an NL file using the <computeroutput>loadModel</computeroutput> function available in a solver driver (i.e. </para>
    </briefdescription>
    <detaileddescription>
<para><ref refid="classampls_1_1_c_p_l_e_x_drv_1a71082f2f36b151e2f8eda791420fabca" kindref="member">CPLEXDrv::loadModel()</ref>, GurobiDrv::loadModel() or <ref refid="classampls_1_1_x_p_r_e_s_s_drv_1a64fc7c302b7501158d0a63f97ce8e1ab" kindref="member">XPRESSDrv::loadModel()</ref>). It also contains two-way mappings between solver column and row numbers and AMPL entity names. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>ampls::AMPLModel</label>
        <link refid="classampls_1_1_a_m_p_l_model"/>
      </node>
      <node id="3">
        <label>ampls::GurobiModel</label>
        <link refid="classampls_1_1_gurobi_model"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>ampls::CPLEXModel</label>
        <link refid="classampls_1_1_c_p_l_e_x_model"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>ampls::XPRESSModel</label>
        <link refid="classampls_1_1_x_p_r_e_s_s_model"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" line="421" column="1" bodyfile="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" bodystart="420" bodyend="560"/>
    <listofallmembers>
      <member refid="classampls_1_1_a_m_p_l_model_1a3431fa7976cea2dadc156ae9c0f9f4c7" prot="private" virt="non-virtual"><scope>ampls::AMPLModel</scope><name>AMPLModel</name></member>
      <member refid="classampls_1_1_a_m_p_l_model_1a15442f8b8c6cf29ba2bef3c986e3d246" prot="public" virt="non-virtual"><scope>ampls::AMPLModel</scope><name>AMPLModel</name></member>
      <member refid="classampls_1_1_a_m_p_l_model_1a08289f51a8292285dcdd2d472ff9924d" prot="private" virt="virtual"><scope>ampls::AMPLModel</scope><name>createCallbackImplDerived</name></member>
      <member refid="classampls_1_1_a_m_p_l_model_1aa45dbd2191a82acea153e2b3d6c1573d" prot="public" virt="virtual"><scope>ampls::AMPLModel</scope><name>enableLazyConstraints</name></member>
      <member refid="classampls_1_1_a_m_p_l_model_1a842b77149c818c530b630999d1fded8d" prot="public" virt="virtual"><scope>ampls::AMPLModel</scope><name>error</name></member>
      <member refid="classampls_1_1_a_m_p_l_model_1a1b3c482a4666f3bc5001eab9f98ff686" prot="private" virt="non-virtual"><scope>ampls::AMPLModel</scope><name>fileName_</name></member>
      <member refid="classampls_1_1_a_m_p_l_model_1ae8938457c2e37d5f5e19e528f492b8c4" prot="public" virt="non-virtual"><scope>ampls::AMPLModel</scope><name>getFileName</name></member>
      <member refid="classampls_1_1_a_m_p_l_model_1a83f292201e3a0181e6c796e50edce69f" prot="public" virt="virtual"><scope>ampls::AMPLModel</scope><name>getNumVars</name></member>
      <member refid="classampls_1_1_a_m_p_l_model_1ac465963811921794564f08959d2acbe2" prot="public" virt="virtual"><scope>ampls::AMPLModel</scope><name>getObj</name></member>
      <member refid="classampls_1_1_a_m_p_l_model_1ada258dda5511214bdc3318bc99d0ec9f" prot="public" virt="virtual"><scope>ampls::AMPLModel</scope><name>getSolution</name></member>
      <member refid="classampls_1_1_a_m_p_l_model_1a70499ebc7d909088db21d0b96b53175f" prot="public" virt="non-virtual"><scope>ampls::AMPLModel</scope><name>getSolutionVector</name></member>
      <member refid="classampls_1_1_a_m_p_l_model_1aa30ec04fefc1c4cc6d3d906f4e662384" prot="public" virt="virtual"><scope>ampls::AMPLModel</scope><name>getStatus</name></member>
      <member refid="classampls_1_1_a_m_p_l_model_1a2f5456b17543eb0a6a0c2409617bdd1a" prot="public" virt="non-virtual"><scope>ampls::AMPLModel</scope><name>getVarMap</name></member>
      <member refid="classampls_1_1_a_m_p_l_model_1ab4fd6f2a6b0f91dd4983de98e7003c30" prot="public" virt="non-virtual"><scope>ampls::AMPLModel</scope><name>getVarMapFiltered</name></member>
      <member refid="classampls_1_1_a_m_p_l_model_1a0a9ebfa649684a9d6faf6e13f85a32ff" prot="public" virt="non-virtual"><scope>ampls::AMPLModel</scope><name>getVarMapInverse</name></member>
      <member refid="classampls_1_1_a_m_p_l_model_1a97ab392992414092b1b043878df0b6a1" prot="private" virt="non-virtual"><scope>ampls::AMPLModel</scope><name>getVarMapsInternal</name></member>
      <member refid="classampls_1_1_a_m_p_l_model_1aa6e24884a38094d0e749c29020e8773c" prot="private" virt="non-virtual"><scope>ampls::AMPLModel</scope><name>impl::BaseCallback::getVarMap</name></member>
      <member refid="classampls_1_1_a_m_p_l_model_1ad6a149baa47abc03d4084c3063b95514" prot="private" virt="non-virtual"><scope>ampls::AMPLModel</scope><name>impl::BaseCallback::getVarMapInverse</name></member>
      <member refid="classampls_1_1_a_m_p_l_model_1a7e639a340228e6f93f64fd1de4e44338" prot="public" virt="virtual"><scope>ampls::AMPLModel</scope><name>optimize</name></member>
      <member refid="classampls_1_1_a_m_p_l_model_1ac2e1800d30c2751eb9464cbbf16da70f" prot="public" virt="non-virtual"><scope>ampls::AMPLModel</scope><name>printModelVars</name></member>
      <member refid="classampls_1_1_a_m_p_l_model_1a3aeb4df66d9435fe4b87214bc26837a4" prot="private" virt="non-virtual"><scope>ampls::AMPLModel</scope><name>resetVarMapInternal</name></member>
      <member refid="classampls_1_1_a_m_p_l_model_1a5c20eba868bd9a8207dd44b39c7cdfde" prot="public" virt="non-virtual"><scope>ampls::AMPLModel</scope><name>setCallback</name></member>
      <member refid="classampls_1_1_a_m_p_l_model_1a0e051acaa733bd9d45354b218966de0e" prot="public" virt="non-virtual"><scope>ampls::AMPLModel</scope><name>setCallback</name></member>
      <member refid="classampls_1_1_a_m_p_l_model_1a27190416a7add5411ea850feca3eb9b0" prot="private" virt="virtual"><scope>ampls::AMPLModel</scope><name>setCallbackDerived</name></member>
      <member refid="classampls_1_1_a_m_p_l_model_1a81519bc2dc8d731d7e35f25200028a5d" prot="private" virt="non-virtual"><scope>ampls::AMPLModel</scope><name>varMap_</name></member>
      <member refid="classampls_1_1_a_m_p_l_model_1af937ef80465efdc2751d366ba5969f2a" prot="private" virt="non-virtual"><scope>ampls::AMPLModel</scope><name>varMapInverse_</name></member>
      <member refid="classampls_1_1_a_m_p_l_model_1acb0a7c8e8c0e38b0bc71615daeead693" prot="public" virt="virtual"><scope>ampls::AMPLModel</scope><name>writeSol</name></member>
      <member refid="classampls_1_1_a_m_p_l_model_1a64d58554792987885e83128a9faa60c5" prot="public" virt="virtual"><scope>ampls::AMPLModel</scope><name>writeSol</name></member>
      <member refid="classampls_1_1_a_m_p_l_model_1afce5959882c970916e545b69e71bd5c1" prot="private" virt="virtual"><scope>ampls::AMPLModel</scope><name>writeSolImpl</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
