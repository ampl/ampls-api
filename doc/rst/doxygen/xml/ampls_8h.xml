<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="ampls_8h" kind="file" language="C++">
    <compoundname>ampls.h</compoundname>
    <includes local="no">cstdio</includes>
    <includes local="no">string</includes>
    <includes local="no">map</includes>
    <includes local="no">vector</includes>
    <includes local="no">stdexcept</includes>
    <includes local="no">memory</includes>
    <includes local="no">cstdarg</includes>
    <includes local="no">unistd.h</includes>
    <includes local="no">pthread.h</includes>
    <includes local="no">stdlib.h</includes>
    <includedby refid="gurobi__callback_8h" local="yes">D:/Development/ampl/ampls-api/cpp/gurobi/include/gurobi_callback.h</includedby>
    <includedby refid="gurobi__interface_8h" local="yes">D:/Development/ampl/ampls-api/cpp/gurobi/include/gurobi_interface.h</includedby>
    <includedby refid="cplex__callback_8h" local="yes">D:/Development/ampl/ampls-api/cpp/cplex/include/cplex_callback.h</includedby>
    <includedby refid="cplex__interface_8h" local="yes">D:/Development/ampl/ampls-api/cpp/cplex/include/cplex_interface.h</includedby>
    <includedby refid="xpress__callback_8h" local="yes">D:/Development/ampl/ampls-api/cpp/xpress/include/xpress_callback.h</includedby>
    <includedby refid="xpress__interface_8h" local="yes">D:/Development/ampl/ampls-api/cpp/xpress/include/xpress_interface.h</includedby>
    <incdepgraph>
      <node id="11">
        <label>stdlib.h</label>
      </node>
      <node id="6">
        <label>stdexcept</label>
      </node>
      <node id="8">
        <label>cstdarg</label>
      </node>
      <node id="3">
        <label>string</label>
      </node>
      <node id="4">
        <label>map</label>
      </node>
      <node id="10">
        <label>pthread.h</label>
      </node>
      <node id="2">
        <label>cstdio</label>
      </node>
      <node id="9">
        <label>unistd.h</label>
      </node>
      <node id="5">
        <label>vector</label>
      </node>
      <node id="1">
        <label>D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h</label>
        <link refid="ampls_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="5">
        <label>D:/Development/ampl/ampls-api/cpp/cplex/include/cplex_interface.h</label>
        <link refid="cplex__interface_8h_source"/>
      </node>
      <node id="2">
        <label>D:/Development/ampl/ampls-api/cpp/gurobi/include/gurobi_callback.h</label>
        <link refid="gurobi__callback_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>D:/Development/ampl/ampls-api/cpp/cplex/include/cplex_callback.h</label>
        <link refid="cplex__callback_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>D:/Development/ampl/ampls-api/cpp/xpress/include/xpress_interface.h</label>
        <link refid="xpress__interface_8h_source"/>
      </node>
      <node id="6">
        <label>D:/Development/ampl/ampls-api/cpp/xpress/include/xpress_callback.h</label>
        <link refid="xpress__callback_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h</label>
        <link refid="ampls_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>D:/Development/ampl/ampls-api/cpp/gurobi/include/gurobi_interface.h</label>
        <link refid="gurobi__interface_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classampls_1_1_a_m_p_l_solver_exception" prot="public">ampls::AMPLSolverException</innerclass>
    <innerclass refid="structampls_1_1_variant" prot="public">ampls::Variant</innerclass>
    <innerclass refid="structampls_1_1_where" prot="public">ampls::Where</innerclass>
    <innerclass refid="structampls_1_1_value" prot="public">ampls::Value</innerclass>
    <innerclass refid="structampls_1_1_cut_direction" prot="public">ampls::CutDirection</innerclass>
    <innerclass refid="structampls_1_1_status" prot="public">ampls::Status</innerclass>
    <innerclass refid="classampls_1_1_generic_callback" prot="public">ampls::GenericCallback</innerclass>
    <innerclass refid="classampls_1_1_a_m_p_l_model" prot="public">ampls::AMPLModel</innerclass>
    <innernamespace refid="namespaceampls">ampls</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="ampls_8h_1a32f7993a143312d0878cadd427c4d043" prot="public" static="no">
        <name>ENTRYPOINT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" line="17" column="10" bodyfile="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ampls_8h_1a0edf1b03488434349c1c9a6b1c1f1124" prot="public" static="no">
        <name>USEPTHREADMUTEX</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" line="158" column="11" bodyfile="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" bodystart="158" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="ampls_8h_1aa0ef9044f37ac131fc77aca85f389594" prot="public" static="no">
        <type>pthread_mutex_t</type>
        <definition>typedef pthread_mutex_t MUTEXIMPL</definition>
        <argsstring></argsstring>
        <name>MUTEXIMPL</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" line="162" column="26" bodyfile="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" bodystart="162" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>ampls_H_INCLUDE_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ampls_H_INCLUDE_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdio&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>for<sp/>std::auto_ptr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdarg&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>declaration<sp/>is<sp/>used<sp/>in<sp/>the<sp/>solver-specific<sp/>implementations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>import<sp/>functions<sp/>from<sp/>the<sp/>solver<sp/>libraries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ENTRYPOINT<sp/>__declspec(dllimport)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ENTRYPOINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">ampls</highlight></codeline>
<codeline lineno="22"><highlight class="normal">{</highlight></codeline>
<codeline lineno="26" refid="classampls_1_1_a_m_p_l_solver_exception" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classampls_1_1_a_m_p_l_solver_exception" kindref="compound">AMPLSolverException</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::runtime_error</highlight></codeline>
<codeline lineno="27"><highlight class="normal">{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><ref refid="classampls_1_1_a_m_p_l_solver_exception" kindref="compound">AMPLSolverException</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>msg)<sp/>:<sp/>std::runtime_error(msg)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><ref refid="classampls_1_1_a_m_p_l_solver_exception" kindref="compound">AMPLSolverException</ref>(std::string&amp;<sp/>msg)<sp/>:<sp/>std::runtime_error(msg)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classampls_1_1_a_m_p_l_solver_exception" kindref="compound">AMPLSolverException</ref><sp/>format(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>msg,<sp/>...)</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[1000];</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/>aptr;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(aptr,<sp/>msg);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>vsprintf(buffer,<sp/>msg,<sp/>aptr);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(aptr);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classampls_1_1_a_m_p_l_solver_exception" kindref="compound">AMPLSolverException</ref>(buffer);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal">};</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="structampls_1_1_variant" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structampls_1_1_variant" kindref="compound">Variant</ref></highlight></codeline>
<codeline lineno="50"><highlight class="normal">{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str;<sp/></highlight><highlight class="comment">//<sp/>type<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>integer;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>type<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dbl;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>type<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><ref refid="structampls_1_1_variant" kindref="compound">Variant</ref>()<sp/>:<sp/>str(NULL),<sp/>integer(0),<sp/>dbl(0),<sp/>type(-1)<sp/>{}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><ref refid="structampls_1_1_variant" kindref="compound">Variant</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>c)<sp/>:<sp/>str(c),<sp/>integer(0),<sp/>dbl(0),<sp/>type(0)<sp/>{}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structampls_1_1_variant" kindref="compound">Variant</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v)<sp/>:<sp/>str(NULL),<sp/>integer(v),<sp/>dbl(0),<sp/>type(1)<sp/>{}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><ref refid="structampls_1_1_variant" kindref="compound">Variant</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>v)<sp/>:<sp/>str(NULL),<sp/>integer(0),<sp/>dbl(v),<sp/>type(2)<sp/>{}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal">};</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Forward<sp/>declarations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classampls_1_1_a_m_p_l_model" kindref="compound">AMPLModel</ref>;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classampls_1_1_generic_callback" kindref="compound">GenericCallback</ref>;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>generateArguments(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>modelName);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>deleteParams(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>params);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="structampls_1_1_where" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structampls_1_1_where" kindref="compound">Where</ref></highlight></codeline>
<codeline lineno="77"><highlight class="normal">{</highlight></codeline>
<codeline lineno="78" refid="structampls_1_1_where_1a947a48282f0b83342b827a7ab6841042" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="structampls_1_1_where_1a947a48282f0b83342b827a7ab6841042" kindref="member">CBWhere</ref></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="81" refid="structampls_1_1_where_1a947a48282f0b83342b827a7ab6841042a88558f52ddfae4ac1a558c0486e3cd8c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structampls_1_1_where_1a947a48282f0b83342b827a7ab6841042a88558f52ddfae4ac1a558c0486e3cd8c" kindref="member">MSG</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="83" refid="structampls_1_1_where_1a947a48282f0b83342b827a7ab6841042ab203fc2f3927fa41df3f738a3eed1739" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structampls_1_1_where_1a947a48282f0b83342b827a7ab6841042ab203fc2f3927fa41df3f738a3eed1739" kindref="member">PRESOLVE</ref><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="85" refid="structampls_1_1_where_1a947a48282f0b83342b827a7ab6841042a7e81cfb76f4bc07a100627ea17e6a403" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structampls_1_1_where_1a947a48282f0b83342b827a7ab6841042a7e81cfb76f4bc07a100627ea17e6a403" kindref="member">LPSOLVE</ref><sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="87" refid="structampls_1_1_where_1a947a48282f0b83342b827a7ab6841042a523ee4b74d34be2efc4f6fe7c5536505" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structampls_1_1_where_1a947a48282f0b83342b827a7ab6841042a523ee4b74d34be2efc4f6fe7c5536505" kindref="member">MIPNODE</ref><sp/>=<sp/>3,</highlight></codeline>
<codeline lineno="89" refid="structampls_1_1_where_1a947a48282f0b83342b827a7ab6841042aedf156b4c62355855d5ba3a5f048ff78" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structampls_1_1_where_1a947a48282f0b83342b827a7ab6841042aedf156b4c62355855d5ba3a5f048ff78" kindref="member">MIPSOL</ref><sp/>=<sp/>4,</highlight></codeline>
<codeline lineno="91" refid="structampls_1_1_where_1a947a48282f0b83342b827a7ab6841042a03ff016dba71af513856af789ed102ef" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structampls_1_1_where_1a947a48282f0b83342b827a7ab6841042a03ff016dba71af513856af789ed102ef" kindref="member">MIP</ref><sp/>=<sp/>5,</highlight></codeline>
<codeline lineno="93" refid="structampls_1_1_where_1a947a48282f0b83342b827a7ab6841042ab9f95179527c98ecd25ed4ef1a00f1c7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structampls_1_1_where_1a947a48282f0b83342b827a7ab6841042ab9f95179527c98ecd25ed4ef1a00f1c7" kindref="member">NOTMAPPED</ref><sp/>=<sp/>10</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="95"><highlight class="normal">};</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="structampls_1_1_value" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structampls_1_1_value" kindref="compound">Value</ref></highlight></codeline>
<codeline lineno="104"><highlight class="normal">{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><sp/>CBValue<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>OBJ<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>PRE_DELCOLS<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>PRE_DELROWS<sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>PRE_COEFFCHANGED<sp/>=<sp/>3,</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>ITERATIONS<sp/>=<sp/>4,</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>MIP_RELATIVEGAP<sp/>=<sp/>5</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="114"><highlight class="normal">};</highlight></codeline>
<codeline lineno="115" refid="structampls_1_1_cut_direction" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structampls_1_1_cut_direction" kindref="compound">CutDirection</ref><sp/>{</highlight></codeline>
<codeline lineno="117" refid="structampls_1_1_cut_direction_1ac489a749f09eb06578453d6e2c95fbbc" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="structampls_1_1_cut_direction_1ac489a749f09eb06578453d6e2c95fbbc" kindref="member">Direction</ref><sp/>{</highlight></codeline>
<codeline lineno="119" refid="structampls_1_1_cut_direction_1ac489a749f09eb06578453d6e2c95fbbcaae8d9d2b9412044e5e54e1defa08ee7a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structampls_1_1_cut_direction_1ac489a749f09eb06578453d6e2c95fbbcaae8d9d2b9412044e5e54e1defa08ee7a" kindref="member">EQ</ref>,</highlight></codeline>
<codeline lineno="121" refid="structampls_1_1_cut_direction_1ac489a749f09eb06578453d6e2c95fbbcac7134e1097f22e5131258bdbc1d7a230" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structampls_1_1_cut_direction_1ac489a749f09eb06578453d6e2c95fbbcac7134e1097f22e5131258bdbc1d7a230" kindref="member">GE</ref>,</highlight></codeline>
<codeline lineno="123" refid="structampls_1_1_cut_direction_1ac489a749f09eb06578453d6e2c95fbbca8295cab530350ea360c19a8ba0bb5d1b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structampls_1_1_cut_direction_1ac489a749f09eb06578453d6e2c95fbbca8295cab530350ea360c19a8ba0bb5d1b" kindref="member">LE</ref></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="125"><highlight class="normal">};</highlight></codeline>
<codeline lineno="126" refid="structampls_1_1_status" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structampls_1_1_status" kindref="compound">Status</ref></highlight></codeline>
<codeline lineno="127"><highlight class="normal">{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>SolStatus<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>UNKNOWN,</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>OPTIMAL,</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>INFEASIBLE,</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>UNBOUNDED,</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>LIMIT_ITERATION,</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>LIMIT_NODE,</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>LIMIT_TIME,</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>LIMIT_SOLUTION,</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>INTERRUPTED,</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>NOTMAPPED</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="140"><highlight class="normal">};</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>ampls</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Mutex<sp/>utility</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_MSC_VER<sp/>&gt;=1700<sp/>//<sp/>__cplusplus<sp/>is<sp/>not<sp/>supported<sp/>on<sp/>windows<sp/>compiler<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">//<sp/>unless<sp/>we<sp/>specify<sp/>the<sp/>/Zc<sp/>compiler<sp/>setting,<sp/>so<sp/>we<sp/>resort<sp/>to<sp/>the<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment">//<sp/>std::mutex<sp/>was<sp/>first<sp/>implemented<sp/>in<sp/>VC<sp/>2012.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>USECPP11MUTEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>USEWINLOCK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;windows.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>SRWLOCK<sp/>MUTEXIMPL;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__cplusplus<sp/>&gt;=<sp/>201103L<sp/>&amp;&amp;<sp/>__STDC_HOSTED__<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>__STDCPP_THREADS__<sp/>==<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>USECPP11MUTEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>USEPTHREADMUTEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;pthread.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>pthread_mutex_t<sp/><sp/>MUTEXIMPL;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USECPP11MUTEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;mutex&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::mutex<sp/>MUTEXIMPL;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">ampls{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">impl</highlight></codeline>
<codeline lineno="171"><highlight class="normal">{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">AMPLMutex<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>AMPLMutex();</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>~AMPLMutex();</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Lock();<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Unlock();</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>MUTEXIMPL<sp/>mutex_;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Catch<sp/>the<sp/>error<sp/>of<sp/>writing<sp/>Mutex<sp/>when<sp/>intending<sp/>MutexLock.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AMPLMutex(AMPLMutex*){}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AMPLMutex(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AMPLMutex&amp;)<sp/>{}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AMPLMutex&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AMPLMutex&amp;<sp/>m);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USECPP11MUTEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>AMPLMutex::AMPLMutex()<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>AMPLMutex::~AMPLMutex()<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AMPLMutex::Lock()<sp/>{<sp/>mutex_.lock();<sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AMPLMutex::Unlock()<sp/>{<sp/>mutex_.unlock();<sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(USEWINLOCK)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>AMPLMutex::AMPLMutex()<sp/>{<sp/>InitializeSRWLock(&amp;mutex_);<sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>AMPLMutex::~AMPLMutex()<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AMPLMutex::Lock()<sp/>{<sp/>AcquireSRWLockExclusive(&amp;mutex_);<sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AMPLMutex::Unlock()<sp/>{<sp/>ReleaseSRWLockExclusive(&amp;mutex_);<sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(USEPTHREADMUTEX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>AMPLMutex::AMPLMutex()<sp/>{<sp/>pthread_mutex_init(&amp;mutex_,<sp/>NULL);<sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>AMPLMutex::~AMPLMutex()<sp/>{<sp/>pthread_mutex_destroy(&amp;mutex_);<sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AMPLMutex::Lock()<sp/>{<sp/>pthread_mutex_lock(&amp;mutex_);<sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AMPLMutex::Unlock()<sp/>{<sp/>pthread_mutex_unlock(&amp;mutex_);<sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>SAFE_PTHREAD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="keyword">class<sp/></highlight><highlight class="normal">BaseCallback</highlight></codeline>
<codeline lineno="209"><highlight class="normal">{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classampls_1_1_a_m_p_l_model" kindref="compound">ampls::AMPLModel</ref>;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classampls_1_1_generic_callback" kindref="compound">ampls::GenericCallback</ref>;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>AMPLModel*<sp/>model_;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>where_;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>doAddCut(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nvars,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>vars,</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>coeffs,<sp/><ref refid="structampls_1_1_cut_direction_1ac489a749f09eb06578453d6e2c95fbbc" kindref="member">CutDirection::Direction</ref><sp/>direction,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rhs,</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>callAddCut(std::vector&lt;std::string&gt;&amp;<sp/>vars,</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>coeffs,<sp/><ref refid="structampls_1_1_cut_direction_1ac489a749f09eb06578453d6e2c95fbbc" kindref="member">CutDirection::Direction</ref><sp/>direction,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rhs,</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printCut(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nvars,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>vars,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>coeffs,<sp/></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structampls_1_1_cut_direction_1ac489a749f09eb06578453d6e2c95fbbc" kindref="member">CutDirection::Direction</ref><sp/>direction,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rhs)</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>sense;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(direction)</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structampls_1_1_cut_direction_1ac489a749f09eb06578453d6e2c95fbbcaae8d9d2b9412044e5e54e1defa08ee7a" kindref="member">CutDirection::EQ</ref>:</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sense<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;=<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structampls_1_1_cut_direction_1ac489a749f09eb06578453d6e2c95fbbcac7134e1097f22e5131258bdbc1d7a230" kindref="member">CutDirection::GE</ref>:</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sense<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&gt;=&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structampls_1_1_cut_direction_1ac489a749f09eb06578453d6e2c95fbbca8295cab530350ea360c19a8ba0bb5d1b" kindref="member">CutDirection::LE</ref>:</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sense<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&lt;=&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>AMPLSolverException(</highlight><highlight class="stringliteral">&quot;Unexpected<sp/>cut<sp/>direction&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nvars;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%f*x[%d]&quot;</highlight><highlight class="normal">,<sp/>coeffs[i],<sp/>vars[i]);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>nvars<sp/>-<sp/>1)</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>+<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>%s<sp/>%f\n&quot;</highlight><highlight class="normal">,<sp/>sense.c_str(),<sp/>rhs);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>BaseCallback()<sp/>:<sp/>model_(NULL)<sp/>{}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>run()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>std::map&lt;std::string,<sp/>int&gt;&amp;<sp/>getVarMap();</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>std::map&lt;int,<sp/>std::string&gt;&amp;<sp/>getVarMapInverse();</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~BaseCallback()<sp/>{};</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>addCut(std::vector&lt;std::string&gt;<sp/>vars,</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>coeffs,<sp/><ref refid="structampls_1_1_cut_direction_1ac489a749f09eb06578453d6e2c95fbbc" kindref="member">CutDirection::Direction</ref><sp/>direction,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rhs)</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>callAddCut(vars,<sp/>coeffs,<sp/>direction,<sp/>rhs,<sp/>0);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>addCutsIndices(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nvars,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>vars,</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>coeffs,<sp/><ref refid="structampls_1_1_cut_direction_1ac489a749f09eb06578453d6e2c95fbbc" kindref="member">CutDirection::Direction</ref><sp/>direction,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rhs)</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>doAddCut(nvars,<sp/>vars,<sp/>coeffs,<sp/>direction,<sp/>rhs,<sp/>0);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>addLazy(std::vector&lt;std::string&gt;<sp/>vars,</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>coeffs,<sp/><ref refid="structampls_1_1_cut_direction_1ac489a749f09eb06578453d6e2c95fbbc" kindref="member">CutDirection::Direction</ref><sp/>direction,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rhs)</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>callAddCut(vars,<sp/>coeffs,<sp/>direction,<sp/>rhs,<sp/>1);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>addLazyIndices(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nvars,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>vars,</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>coeffs,<sp/><ref refid="structampls_1_1_cut_direction_1ac489a749f09eb06578453d6e2c95fbbc" kindref="member">CutDirection::Direction</ref><sp/>direction,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rhs)</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>doAddCut(nvars,<sp/>vars,<sp/>coeffs,<sp/>direction,<sp/>rhs,<sp/>1);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/>getSolutionVector();</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classampls_1_1_generic_callback_1a0295e930a87b94a2e3b999384d1b8641" kindref="member">getSolution</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>sol)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classampls_1_1_generic_callback_1ad4a1215d96d6253cc6e6123c1f17fa43" kindref="member">getObj</ref>()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classampls_1_1_generic_callback_1a7f69267f558e37005b58aa20ac542678" kindref="member">getWhereString</ref>()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getWhere()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>where_;<sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classampls_1_1_generic_callback_1a30728efaf3669ebb32c9526ab1fcec51" kindref="member">getMessage</ref>()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>mapped<sp/>&quot;whereFrom&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Obviously<sp/>it<sp/>only<sp/>makes<sp/>sense<sp/>for<sp/>the<sp/>generic<sp/>callback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="structampls_1_1_where_1a947a48282f0b83342b827a7ab6841042" kindref="member">Where::CBWhere</ref><sp/><ref refid="classampls_1_1_generic_callback_1a5c83dffe88e068e92808079272862c9d" kindref="member">getAMPLWhere</ref>()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>Variant<sp/><ref refid="classampls_1_1_generic_callback_1ae13e8bfc990cc93a2ce335c41fd5e259" kindref="member">getValue</ref>(Value::CBValue<sp/>v)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="303"><highlight class="normal">};</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SolverDriver</highlight></codeline>
<codeline lineno="310"><highlight class="normal">{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>AMPLMutex<sp/>loadMutex;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>T*<sp/>loadModelImpl(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>args)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>T*<sp/>loadModelGeneric(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>modelName)</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE*<sp/>f<sp/>=<sp/>fopen(modelName,<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!f)</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>ampls::AMPLSolverException::format(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>find<sp/>file:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>modelName);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fclose(f);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>args<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>args<sp/>=<sp/>generateArguments(modelName);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>loadMutex.Lock();</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>T*<sp/>mod<sp/>=<sp/>loadModelImpl(args);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>loadMutex.Unlock();</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>deleteParams(args);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mod;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::exception&amp;<sp/>e)<sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>loadMutex.Unlock();</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>deleteParams(args);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>e;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>~SolverDriver()<sp/>{}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal">};</highlight></codeline>
<codeline lineno="347"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>impl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="360" refid="classampls_1_1_generic_callback" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classampls_1_1_generic_callback" kindref="compound">GenericCallback</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>impl::BaseCallback</highlight></codeline>
<codeline lineno="361"><highlight class="normal">{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classampls_1_1_a_m_p_l_model" kindref="compound">AMPLModel</ref>;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;impl::BaseCallback&gt;<sp/>impl_;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>doAddCut(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nvars,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>vars,</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>coeffs,<sp/><ref refid="structampls_1_1_cut_direction_1ac489a749f09eb06578453d6e2c95fbbc" kindref="member">CutDirection::Direction</ref><sp/>direction,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rhs,</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type)</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>impl_-&gt;doAddCut(nvars,<sp/>vars,<sp/>coeffs,<sp/>direction,<sp/>rhs,<sp/>type);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="377" refid="classampls_1_1_generic_callback_1a0295e930a87b94a2e3b999384d1b8641" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classampls_1_1_generic_callback_1a0295e930a87b94a2e3b999384d1b8641" kindref="member">getSolution</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*sol)</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>impl_-&gt;getSolution(len,<sp/>sol);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="382" refid="classampls_1_1_generic_callback_1ad4a1215d96d6253cc6e6123c1f17fa43" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classampls_1_1_generic_callback_1ad4a1215d96d6253cc6e6123c1f17fa43" kindref="member">getObj</ref>()</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>impl_-&gt;getObj();</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getWhere()</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>impl_-&gt;getWhere();</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="391" refid="classampls_1_1_generic_callback_1a7f69267f558e37005b58aa20ac542678" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="classampls_1_1_generic_callback_1a7f69267f558e37005b58aa20ac542678" kindref="member">getWhereString</ref>()</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>impl_-&gt;getWhereString();</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="396" refid="classampls_1_1_generic_callback_1a30728efaf3669ebb32c9526ab1fcec51" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="classampls_1_1_generic_callback_1a30728efaf3669ebb32c9526ab1fcec51" kindref="member">getMessage</ref>()</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>impl_-&gt;getMessage();</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="401" refid="classampls_1_1_generic_callback_1a5c83dffe88e068e92808079272862c9d" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structampls_1_1_where_1a947a48282f0b83342b827a7ab6841042" kindref="member">Where::CBWhere</ref><sp/><ref refid="classampls_1_1_generic_callback_1a5c83dffe88e068e92808079272862c9d" kindref="member">getAMPLWhere</ref>()</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>impl_-&gt;getAMPLWhere();</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="406" refid="classampls_1_1_generic_callback_1ae13e8bfc990cc93a2ce335c41fd5e259" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structampls_1_1_variant" kindref="compound">Variant</ref><sp/><ref refid="classampls_1_1_generic_callback_1ae13e8bfc990cc93a2ce335c41fd5e259" kindref="member">getValue</ref>(Value::CBValue<sp/>v)</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>impl_-&gt;getValue(v);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="410"><highlight class="normal">};</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="420" refid="classampls_1_1_a_m_p_l_model" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classampls_1_1_a_m_p_l_model" kindref="compound">AMPLModel</ref></highlight></codeline>
<codeline lineno="421"><highlight class="normal">{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>std::map&lt;std::string,<sp/>int&gt;&amp;<sp/>impl::BaseCallback::getVarMap();</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>std::map&lt;int,<sp/>std::string&gt;&amp;<sp/>impl::BaseCallback::getVarMapInverse();</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/>std::map&lt;int,<sp/>std::string&gt;<sp/>varMapInverse_;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>std::map&lt;std::string,<sp/>int&gt;<sp/>varMap_;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="427"><highlight class="comment"><sp/><sp/>Create<sp/>a<sp/>cache<sp/>of<sp/>the<sp/>names<sp/>to<sp/>indices<sp/>maps,<sp/>to<sp/>be<sp/>used</highlight></codeline>
<codeline lineno="428"><highlight class="comment"><sp/><sp/>in<sp/>subsequent<sp/>calls<sp/>to<sp/>a<sp/>callback</highlight></codeline>
<codeline lineno="429"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>getVarMapsInternal()</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(varMap_.size()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>varMap_<sp/>=<sp/><ref refid="classampls_1_1_a_m_p_l_model_1ab4fd6f2a6b0f91dd4983de98e7003c30" kindref="member">getVarMapFiltered</ref>(NULL);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(varMapInverse_.size()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>varMapInverse_<sp/>=<sp/><ref refid="classampls_1_1_a_m_p_l_model_1a0a9ebfa649684a9d6faf6e13f85a32ff" kindref="member">getVarMapInverse</ref>();</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/>std::string<sp/>fileName_;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><ref refid="classampls_1_1_a_m_p_l_model" kindref="compound">AMPLModel</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//AMPLModel(const<sp/>char*<sp/>fileName)<sp/>:<sp/>fileName_(fileName)<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>resetVarMapInternal()</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>the<sp/>internally<sp/>cached<sp/>maps</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>varMap_.clear();</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>varMapInverse_.clear();</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>setCallbackDerived(impl::BaseCallback*<sp/>callback)<sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classampls_1_1_a_m_p_l_solver_exception" kindref="compound">AMPLSolverException</ref>(</highlight><highlight class="stringliteral">&quot;Not<sp/>implemented<sp/>in<sp/>base<sp/>class!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>impl::BaseCallback<sp/>*createCallbackImplDerived(<ref refid="classampls_1_1_generic_callback" kindref="compound">GenericCallback</ref><sp/>*callback)<sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classampls_1_1_a_m_p_l_solver_exception" kindref="compound">AMPLSolverException</ref>(</highlight><highlight class="stringliteral">&quot;Not<sp/>implemented<sp/>in<sp/>base<sp/>class!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>writeSolImpl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>solFileName)<sp/>{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classampls_1_1_a_m_p_l_solver_exception" kindref="compound">AMPLSolverException</ref>(</highlight><highlight class="stringliteral">&quot;Not<sp/>implemented<sp/>in<sp/>base<sp/>class!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/>std::string<sp/>getFileName()<sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fileName_;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><ref refid="classampls_1_1_a_m_p_l_model" kindref="compound">AMPLModel</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classampls_1_1_a_m_p_l_model" kindref="compound">AMPLModel</ref><sp/>&amp;other)<sp/>:<sp/>fileName_(other.fileName_)<sp/>{}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/>std::map&lt;int,<sp/>std::string&gt;<sp/><ref refid="classampls_1_1_a_m_p_l_model_1a0a9ebfa649684a9d6faf6e13f85a32ff" kindref="member">getVarMapInverse</ref>();</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="471" refid="classampls_1_1_a_m_p_l_model_1a2f5456b17543eb0a6a0c2409617bdd1a" refkind="member"><highlight class="normal"><sp/><sp/>std::map&lt;std::string,<sp/>int&gt;<sp/><ref refid="classampls_1_1_a_m_p_l_model_1a2f5456b17543eb0a6a0c2409617bdd1a" kindref="member">getVarMap</ref>()</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classampls_1_1_a_m_p_l_model_1ab4fd6f2a6b0f91dd4983de98e7003c30" kindref="member">getVarMapFiltered</ref>(NULL);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/>std::map&lt;std::string,<sp/>int&gt;<sp/><ref refid="classampls_1_1_a_m_p_l_model_1ab4fd6f2a6b0f91dd4983de98e7003c30" kindref="member">getVarMapFiltered</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*beginWith);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="485" refid="classampls_1_1_a_m_p_l_model_1a5c20eba868bd9a8207dd44b39c7cdfde" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classampls_1_1_a_m_p_l_model_1a5c20eba868bd9a8207dd44b39c7cdfde" kindref="member">setCallback</ref>(<ref refid="classampls_1_1_generic_callback" kindref="compound">GenericCallback</ref><sp/>*callback)</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>callback-&gt;model_<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>impl::BaseCallback<sp/>*realcb<sp/>=<sp/>createCallbackImplDerived(callback);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>callback-&gt;impl_.reset(realcb);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classampls_1_1_a_m_p_l_model_1a5c20eba868bd9a8207dd44b39c7cdfde" kindref="member">setCallback</ref>(callback-&gt;impl_.get());</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="495" refid="classampls_1_1_a_m_p_l_model_1a0e051acaa733bd9d45354b218966de0e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classampls_1_1_a_m_p_l_model_1a0e051acaa733bd9d45354b218966de0e" kindref="member">setCallback</ref>(impl::BaseCallback<sp/>*callback)</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>callback-&gt;model_<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>setCallbackDerived(callback);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/><ref refid="classampls_1_1_a_m_p_l_model_1a70499ebc7d909088db21d0b96b53175f" kindref="member">getSolutionVector</ref>();</highlight></codeline>
<codeline lineno="507" refid="classampls_1_1_a_m_p_l_model_1a83f292201e3a0181e6c796e50edce69f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classampls_1_1_a_m_p_l_model_1a83f292201e3a0181e6c796e50edce69f" kindref="member">getNumVars</ref>()<sp/>{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classampls_1_1_a_m_p_l_solver_exception" kindref="compound">AMPLSolverException</ref>(</highlight><highlight class="stringliteral">&quot;Not<sp/>implemented<sp/>in<sp/>base<sp/>class!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>Status::SolStatus<sp/>getStatus()<sp/>{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classampls_1_1_a_m_p_l_solver_exception" kindref="compound">AMPLSolverException</ref>(</highlight><highlight class="stringliteral">&quot;Not<sp/>implemented<sp/>in<sp/>base<sp/>class!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="516" refid="classampls_1_1_a_m_p_l_model_1a7e639a340228e6f93f64fd1de4e44338" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classampls_1_1_a_m_p_l_model_1a7e639a340228e6f93f64fd1de4e44338" kindref="member">optimize</ref>()<sp/>{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classampls_1_1_a_m_p_l_solver_exception" kindref="compound">AMPLSolverException</ref>(</highlight><highlight class="stringliteral">&quot;Not<sp/>implemented<sp/>in<sp/>base<sp/>class!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="523" refid="classampls_1_1_a_m_p_l_model_1acb0a7c8e8c0e38b0bc71615daeead693" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classampls_1_1_a_m_p_l_model_1acb0a7c8e8c0e38b0bc71615daeead693" kindref="member">writeSol</ref>()<sp/>{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>writeSolImpl(NULL);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="529" refid="classampls_1_1_a_m_p_l_model_1a64d58554792987885e83128a9faa60c5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classampls_1_1_a_m_p_l_model_1a64d58554792987885e83128a9faa60c5" kindref="member">writeSol</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>solFileName)<sp/>{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>writeSolImpl(solFileName);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="536" refid="classampls_1_1_a_m_p_l_model_1ada258dda5511214bdc3318bc99d0ec9f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classampls_1_1_a_m_p_l_model_1ada258dda5511214bdc3318bc99d0ec9f" kindref="member">getSolution</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>first,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*sol)<sp/>{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classampls_1_1_a_m_p_l_solver_exception" kindref="compound">AMPLSolverException</ref>(</highlight><highlight class="stringliteral">&quot;Not<sp/>implemented<sp/>in<sp/>base<sp/>class!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="542" refid="classampls_1_1_a_m_p_l_model_1ac465963811921794564f08959d2acbe2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classampls_1_1_a_m_p_l_model_1ac465963811921794564f08959d2acbe2" kindref="member">getObj</ref>()<sp/>{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classampls_1_1_a_m_p_l_solver_exception" kindref="compound">AMPLSolverException</ref>(</highlight><highlight class="stringliteral">&quot;Not<sp/>implemented<sp/>in<sp/>base<sp/>class!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="548" refid="classampls_1_1_a_m_p_l_model_1a842b77149c818c530b630999d1fded8d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="classampls_1_1_a_m_p_l_model_1a842b77149c818c530b630999d1fded8d" kindref="member">error</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>code)<sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classampls_1_1_a_m_p_l_solver_exception" kindref="compound">AMPLSolverException</ref>(</highlight><highlight class="stringliteral">&quot;Not<sp/>implemented<sp/>in<sp/>base<sp/>class!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="555" refid="classampls_1_1_a_m_p_l_model_1aa45dbd2191a82acea153e2b3d6c1573d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classampls_1_1_a_m_p_l_model_1aa45dbd2191a82acea153e2b3d6c1573d" kindref="member">enableLazyConstraints</ref>()<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classampls_1_1_a_m_p_l_model_1ac2e1800d30c2751eb9464cbbf16da70f" kindref="member">printModelVars</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>onlyNonZero);</highlight></codeline>
<codeline lineno="560"><highlight class="normal">};</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>ampls_H_INCLUDE_</highlight></codeline>
    </programlisting>
    <location file="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h"/>
  </compounddef>
</doxygen>
