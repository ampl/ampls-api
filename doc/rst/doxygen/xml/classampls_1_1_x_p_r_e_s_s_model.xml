<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classampls_1_1_x_p_r_e_s_s_model" kind="class" language="C++" prot="public">
    <compoundname>ampls::XPRESSModel</compoundname>
    <basecompoundref refid="classampls_1_1_a_m_p_l_model" prot="public" virt="non-virtual">ampls::AMPLModel</basecompoundref>
    <includes refid="xpress__interface_8h" local="no">xpress_interface.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classampls_1_1_x_p_r_e_s_s_model_1a910c7478de77cb4c7f3bd3143237f9be" prot="private" static="no" mutable="no">
        <type>friend</type>
        <definition>friend ampls::XPRESSModel::XPRESSDrv</definition>
        <argsstring></argsstring>
        <name>XPRESSDrv</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/xpress/include/xpress_interface.h" line="129" column="10" bodyfile="D:/Development/ampl/ampls-api/cpp/xpress/include/xpress_interface.h" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classampls_1_1_x_p_r_e_s_s_model_1a81e8d15903b229843c318db8f616d30c" prot="private" static="no" mutable="yes">
        <type>bool</type>
        <definition>bool ampls::XPRESSModel::copied_</definition>
        <argsstring></argsstring>
        <name>copied_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/xpress/include/xpress_interface.h" line="131" column="16" bodyfile="D:/Development/ampl/ampls-api/cpp/xpress/include/xpress_interface.h" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classampls_1_1_x_p_r_e_s_s_model_1aae89b5e63fb2f343aaf74baf4d2b0d71" prot="private" static="no" mutable="no">
        <type>xpress::impl::XPressDriverState *</type>
        <definition>xpress::impl::XPressDriverState* ampls::XPRESSModel::state_</definition>
        <argsstring></argsstring>
        <name>state_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/xpress/include/xpress_interface.h" line="132" column="35" bodyfile="D:/Development/ampl/ampls-api/cpp/xpress/include/xpress_interface.h" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classampls_1_1_x_p_r_e_s_s_model_1a0618417078d1d11407898fb57ade2eb8" prot="private" static="no" mutable="no">
        <type>XPRSprob</type>
        <definition>XPRSprob ampls::XPRESSModel::prob_</definition>
        <argsstring></argsstring>
        <name>prob_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/xpress/include/xpress_interface.h" line="133" column="12" bodyfile="D:/Development/ampl/ampls-api/cpp/xpress/include/xpress_interface.h" bodystart="133" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classampls_1_1_x_p_r_e_s_s_model_1a4a4d8c47e72425256df4698ecb44f0d2" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ampls::XPRESSModel::XPRESSModel</definition>
        <argsstring>()</argsstring>
        <name>XPRESSModel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/xpress/include/xpress_interface.h" line="135" column="3" bodyfile="D:/Development/ampl/ampls-api/cpp/xpress/include/xpress_interface.h" bodystart="135" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="classampls_1_1_x_p_r_e_s_s_model_1a6e1af19528a96adf7944c40a8641a469" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>int ampls::XPRESSModel::setCallbackDerived</definition>
        <argsstring>(impl::BaseCallback *callback)</argsstring>
        <name>setCallbackDerived</name>
        <reimplements refid="classampls_1_1_a_m_p_l_model_1a27190416a7add5411ea850feca3eb9b0">setCallbackDerived</reimplements>
        <param>
          <type>impl::BaseCallback *</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/xpress/include/xpress_interface.h" line="138" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classampls_1_1_x_p_r_e_s_s_model_1a13003dc9b666c13fcac5ed082ad4121f" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>impl::BaseCallback *</type>
        <definition>impl::BaseCallback* ampls::XPRESSModel::createCallbackImplDerived</definition>
        <argsstring>(GenericCallback *callback)</argsstring>
        <name>createCallbackImplDerived</name>
        <reimplements refid="classampls_1_1_a_m_p_l_model_1a08289f51a8292285dcdd2d472ff9924d">createCallbackImplDerived</reimplements>
        <param>
          <type><ref refid="classampls_1_1_generic_callback" kindref="compound">GenericCallback</ref> *</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/xpress/include/xpress_interface.h" line="139" column="22"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classampls_1_1_x_p_r_e_s_s_model_1a2002b6eb906800eef235cc1d314ffa7c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ampls::XPRESSModel::XPRESSModel</definition>
        <argsstring>(const XPRESSModel &amp;other)</argsstring>
        <name>XPRESSModel</name>
        <param>
          <type>const <ref refid="classampls_1_1_x_p_r_e_s_s_model" kindref="compound">XPRESSModel</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/xpress/include/xpress_interface.h" line="143" column="3" bodyfile="D:/Development/ampl/ampls-api/cpp/xpress/include/xpress_interface.h" bodystart="143" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="classampls_1_1_x_p_r_e_s_s_model_1a933d4385ad4924bb97f2d9c87ac08351" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void ampls::XPRESSModel::writeSolImpl</definition>
        <argsstring>(const char *solFileName)</argsstring>
        <name>writeSolImpl</name>
        <reimplements refid="classampls_1_1_a_m_p_l_model_1afce5959882c970916e545b69e71bd5c1">writeSolImpl</reimplements>
        <param>
          <type>const char *</type>
          <declname>solFileName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/xpress/include/xpress_interface.h" line="153" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classampls_1_1_x_p_r_e_s_s_model_1ad6c068e22295d54c7dbbcd8b6d6ce7e2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>Status::SolStatus</type>
        <definition>Status::SolStatus ampls::XPRESSModel::getStatus</definition>
        <argsstring>()</argsstring>
        <name>getStatus</name>
        <reimplements refid="classampls_1_1_a_m_p_l_model_1aa30ec04fefc1c4cc6d3d906f4e662384">getStatus</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/xpress/include/xpress_interface.h" line="155" column="21" bodyfile="D:/Development/ampl/ampls-api/cpp/xpress/include/xpress_interface.h" bodystart="155" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="classampls_1_1_x_p_r_e_s_s_model_1a425d82ad6da71eca41c088e731fd6856" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>int ampls::XPRESSModel::optimize</definition>
        <argsstring>()</argsstring>
        <name>optimize</name>
        <reimplements refid="classampls_1_1_a_m_p_l_model_1a7e639a340228e6f93f64fd1de4e44338">optimize</reimplements>
        <briefdescription>
<para>Start the optimization process. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/xpress/include/xpress_interface.h" line="203" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classampls_1_1_x_p_r_e_s_s_model_1a7ada70c4dbdef4a94b16ba80d42ba157" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>int</type>
        <definition>int ampls::XPRESSModel::getNumVars</definition>
        <argsstring>()</argsstring>
        <name>getNumVars</name>
        <reimplements refid="classampls_1_1_a_m_p_l_model_1a83f292201e3a0181e6c796e50edce69f">getNumVars</reimplements>
        <briefdescription>
<para>Get the number of variables. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/xpress/include/xpress_interface.h" line="205" column="7" bodyfile="D:/Development/ampl/ampls-api/cpp/xpress/include/xpress_interface.h" bodystart="205" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="classampls_1_1_x_p_r_e_s_s_model_1a9146f691e229d29ce7e8ccf057908121" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>double</type>
        <definition>double ampls::XPRESSModel::getObj</definition>
        <argsstring>()</argsstring>
        <name>getObj</name>
        <reimplements refid="classampls_1_1_a_m_p_l_model_1ac465963811921794564f08959d2acbe2">getObj</reimplements>
        <briefdescription>
<para>Get the current objective value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/xpress/include/xpress_interface.h" line="208" column="10" bodyfile="D:/Development/ampl/ampls-api/cpp/xpress/include/xpress_interface.h" bodystart="208" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="classampls_1_1_x_p_r_e_s_s_model_1ad1df45b69ec933bdd38d7211910a16c5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>int</type>
        <definition>int ampls::XPRESSModel::getSolution</definition>
        <argsstring>(int first, int length, double *sol)</argsstring>
        <name>getSolution</name>
        <reimplements refid="classampls_1_1_a_m_p_l_model_1ada258dda5511214bdc3318bc99d0ec9f">getSolution</reimplements>
        <param>
          <type>int</type>
          <declname>first</declname>
        </param>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>sol</declname>
        </param>
        <briefdescription>
<para>Get &quot;length&quot; variables of the current problem in an array, starting at the specified position. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/xpress/include/xpress_interface.h" line="215" column="7" bodyfile="D:/Development/ampl/ampls-api/cpp/xpress/include/xpress_interface.h" bodystart="215" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="classampls_1_1_x_p_r_e_s_s_model_1ac2a27a24a31e33f3351bb118e491b87d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>std::string ampls::XPRESSModel::error</definition>
        <argsstring>(int code)</argsstring>
        <name>error</name>
        <reimplements refid="classampls_1_1_a_m_p_l_model_1a842b77149c818c530b630999d1fded8d">error</reimplements>
        <param>
          <type>int</type>
          <declname>code</declname>
        </param>
        <briefdescription>
<para>Get the error message corresponding to the code. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/xpress/include/xpress_interface.h" line="221" column="15" bodyfile="D:/Development/ampl/ampls-api/cpp/xpress/include/xpress_interface.h" bodystart="221" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="classampls_1_1_x_p_r_e_s_s_model_1a53c48e4ba3f12866f1b6af36b7fb774a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>XPRSprob</type>
        <definition>XPRSprob ampls::XPRESSModel::getXPRSprob</definition>
        <argsstring>()</argsstring>
        <name>getXPRSprob</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/xpress/include/xpress_interface.h" line="231" column="12" bodyfile="D:/Development/ampl/ampls-api/cpp/xpress/include/xpress_interface.h" bodystart="231" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="classampls_1_1_x_p_r_e_s_s_model_1ab5c2e74f92ac4a03204f81d3c81b2f31" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ampls::XPRESSModel::~XPRESSModel</definition>
        <argsstring>()</argsstring>
        <name>~XPRESSModel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/xpress/include/xpress_interface.h" line="235" column="3" bodyfile="D:/Development/ampl/ampls-api/cpp/xpress/include/xpress_interface.h" bodystart="235" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="classampls_1_1_x_p_r_e_s_s_model_1a88262ecc56adbb8e514f6d5b13917529" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int ampls::XPRESSModel::getInt</definition>
        <argsstring>(int what)</argsstring>
        <name>getInt</name>
        <param>
          <type>int</type>
          <declname>what</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/xpress/include/xpress_interface.h" line="241" column="7" bodyfile="D:/Development/ampl/ampls-api/cpp/xpress/include/xpress_interface.h" bodystart="241" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="classampls_1_1_x_p_r_e_s_s_model_1aafda8404ff9214482e0a3ca4e19cd8cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double ampls::XPRESSModel::getDouble</definition>
        <argsstring>(int what)</argsstring>
        <name>getDouble</name>
        <param>
          <type>int</type>
          <declname>what</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/xpress/include/xpress_interface.h" line="246" column="10" bodyfile="D:/Development/ampl/ampls-api/cpp/xpress/include/xpress_interface.h" bodystart="246" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="classampls_1_1_x_p_r_e_s_s_model_1a443f6c8ad8aa9ba1489d7cfa4543a828" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ampls::XPRESSModel::isMIP</definition>
        <argsstring>()</argsstring>
        <name>isMIP</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/xpress/include/xpress_interface.h" line="251" column="8" bodyfile="D:/Development/ampl/ampls-api/cpp/xpress/include/xpress_interface.h" bodystart="251" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="classampls_1_1_a_m_p_l_model_1ae8938457c2e37d5f5e19e528f492b8c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string ampls::AMPLModel::getFileName</definition>
        <argsstring>()</argsstring>
        <name>getFileName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" line="458" column="15" bodyfile="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" bodystart="458" bodyend="460"/>
      </memberdef>
      <memberdef kind="function" id="classampls_1_1_a_m_p_l_model_1a0a9ebfa649684a9d6faf6e13f85a32ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; int, std::string &gt;</type>
        <definition>std::map&lt;int, std::string&gt; ampls::AMPLModel::getVarMapInverse</definition>
        <argsstring>()</argsstring>
        <name>getVarMapInverse</name>
        <briefdescription>
<para>Get the map from variable name to index in the solver interface. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" line="466" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classampls_1_1_a_m_p_l_model_1a2f5456b17543eb0a6a0c2409617bdd1a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::map&lt; std::string, int &gt;</type>
        <definition>std::map&lt;std::string, int&gt; ampls::AMPLModel::getVarMap</definition>
        <argsstring>()</argsstring>
        <name>getVarMap</name>
        <briefdescription>
<para>Get the map from variable name to index in the solver interface. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" line="471" column="12" bodyfile="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" bodystart="471" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="classampls_1_1_a_m_p_l_model_1ab4fd6f2a6b0f91dd4983de98e7003c30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; std::string, int &gt;</type>
        <definition>std::map&lt;std::string, int&gt; ampls::AMPLModel::getVarMapFiltered</definition>
        <argsstring>(const char *beginWith)</argsstring>
        <name>getVarMapFiltered</name>
        <param>
          <type>const char *</type>
          <declname>beginWith</declname>
        </param>
        <briefdescription>
<para>Return the variable map, filtered by the variable name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" line="478" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classampls_1_1_a_m_p_l_model_1a5c20eba868bd9a8207dd44b39c7cdfde" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int ampls::AMPLModel::setCallback</definition>
        <argsstring>(GenericCallback *callback)</argsstring>
        <name>setCallback</name>
        <param>
          <type><ref refid="classampls_1_1_generic_callback" kindref="compound">GenericCallback</ref> *</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Set a generic callback to be called during optimization. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is automatically dispatched when (and only when) assigning an <ref refid="classampls_1_1_generic_callback" kindref="compound">ampls::GenericCallback</ref>, as it needs a special treatment to automatically create the solver-specific wrapper </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" line="485" column="7" bodyfile="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" bodystart="485" bodyend="491"/>
      </memberdef>
      <memberdef kind="function" id="classampls_1_1_a_m_p_l_model_1a0e051acaa733bd9d45354b218966de0e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int ampls::AMPLModel::setCallback</definition>
        <argsstring>(impl::BaseCallback *callback)</argsstring>
        <name>setCallback</name>
        <param>
          <type>impl::BaseCallback *</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Set callback to be called during optimization. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" line="495" column="7" bodyfile="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" bodystart="495" bodyend="499"/>
      </memberdef>
      <memberdef kind="function" id="classampls_1_1_a_m_p_l_model_1a70499ebc7d909088db21d0b96b53175f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; ampls::AMPLModel::getSolutionVector</definition>
        <argsstring>()</argsstring>
        <name>getSolutionVector</name>
        <briefdescription>
<para>Get all the variables of the current problem. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" line="503" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classampls_1_1_a_m_p_l_model_1acb0a7c8e8c0e38b0bc71615daeead693" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void ampls::AMPLModel::writeSol</definition>
        <argsstring>()</argsstring>
        <name>writeSol</name>
        <briefdescription>
<para>Write the solution file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" line="523" column="16" bodyfile="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" bodystart="523" bodyend="525"/>
      </memberdef>
      <memberdef kind="function" id="classampls_1_1_a_m_p_l_model_1a64d58554792987885e83128a9faa60c5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void ampls::AMPLModel::writeSol</definition>
        <argsstring>(const char *solFileName)</argsstring>
        <name>writeSol</name>
        <param>
          <type>const char *</type>
          <declname>solFileName</declname>
        </param>
        <briefdescription>
<para>Write the solution file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" line="529" column="16" bodyfile="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" bodystart="529" bodyend="531"/>
      </memberdef>
      <memberdef kind="function" id="classampls_1_1_a_m_p_l_model_1aa45dbd2191a82acea153e2b3d6c1573d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void ampls::AMPLModel::enableLazyConstraints</definition>
        <argsstring>()</argsstring>
        <name>enableLazyConstraints</name>
        <reimplementedby refid="classampls_1_1_gurobi_model_1adbb5e96a0c091c80aed2dec216fb320a">enableLazyConstraints</reimplementedby>
        <reimplementedby refid="classampls_1_1_c_p_l_e_x_model_1aec76c78adf93f703fb59b84f7031ba90">enableLazyConstraints</reimplementedby>
        <briefdescription>
<para>Enable adding lazy constraints via callbacks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" line="555" column="16" bodyfile="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" bodystart="555" bodyend="555"/>
      </memberdef>
      <memberdef kind="function" id="classampls_1_1_a_m_p_l_model_1ac2e1800d30c2751eb9464cbbf16da70f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ampls::AMPLModel::printModelVars</definition>
        <argsstring>(bool onlyNonZero)</argsstring>
        <name>printModelVars</name>
        <param>
          <type>bool</type>
          <declname>onlyNonZero</declname>
        </param>
        <briefdescription>
<para>Utility function: prints all variables to screen. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Development/ampl/ampls-api/cpp/ampls/include/ampls/ampls.h" line="559" column="8"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Encapsulates all the instance level information for a CPLEX model, namely the CPLEX object, the relative ASL and all the locals of the driver up to the moment in which optimize would be called. </para>
    </briefdescription>
    <detaileddescription>
<para>It can not be created any other way than by reading an nl file, and any assignment moves actual ownership. At the end of its life, it deletes the relative structures. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>ampls::AMPLModel</label>
        <link refid="classampls_1_1_a_m_p_l_model"/>
      </node>
      <node id="1">
        <label>ampls::XPRESSModel</label>
        <link refid="classampls_1_1_x_p_r_e_s_s_model"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>ampls::AMPLModel</label>
        <link refid="classampls_1_1_a_m_p_l_model"/>
      </node>
      <node id="1">
        <label>ampls::XPRESSModel</label>
        <link refid="classampls_1_1_x_p_r_e_s_s_model"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="D:/Development/ampl/ampls-api/cpp/xpress/include/xpress_interface.h" line="128" column="35" bodyfile="D:/Development/ampl/ampls-api/cpp/xpress/include/xpress_interface.h" bodystart="128" bodyend="254"/>
    <listofallmembers>
      <member refid="classampls_1_1_a_m_p_l_model_1a15442f8b8c6cf29ba2bef3c986e3d246" prot="public" virt="non-virtual"><scope>ampls::XPRESSModel</scope><name>AMPLModel</name></member>
      <member refid="classampls_1_1_x_p_r_e_s_s_model_1a81e8d15903b229843c318db8f616d30c" prot="private" virt="non-virtual"><scope>ampls::XPRESSModel</scope><name>copied_</name></member>
      <member refid="classampls_1_1_x_p_r_e_s_s_model_1a13003dc9b666c13fcac5ed082ad4121f" prot="private" virt="virtual"><scope>ampls::XPRESSModel</scope><name>createCallbackImplDerived</name></member>
      <member refid="classampls_1_1_a_m_p_l_model_1aa45dbd2191a82acea153e2b3d6c1573d" prot="public" virt="virtual"><scope>ampls::XPRESSModel</scope><name>enableLazyConstraints</name></member>
      <member refid="classampls_1_1_x_p_r_e_s_s_model_1ac2a27a24a31e33f3351bb118e491b87d" prot="public" virt="virtual"><scope>ampls::XPRESSModel</scope><name>error</name></member>
      <member refid="classampls_1_1_x_p_r_e_s_s_model_1aafda8404ff9214482e0a3ca4e19cd8cd" prot="public" virt="non-virtual"><scope>ampls::XPRESSModel</scope><name>getDouble</name></member>
      <member refid="classampls_1_1_a_m_p_l_model_1ae8938457c2e37d5f5e19e528f492b8c4" prot="public" virt="non-virtual"><scope>ampls::XPRESSModel</scope><name>getFileName</name></member>
      <member refid="classampls_1_1_x_p_r_e_s_s_model_1a88262ecc56adbb8e514f6d5b13917529" prot="public" virt="non-virtual"><scope>ampls::XPRESSModel</scope><name>getInt</name></member>
      <member refid="classampls_1_1_x_p_r_e_s_s_model_1a7ada70c4dbdef4a94b16ba80d42ba157" prot="public" virt="virtual"><scope>ampls::XPRESSModel</scope><name>getNumVars</name></member>
      <member refid="classampls_1_1_x_p_r_e_s_s_model_1a9146f691e229d29ce7e8ccf057908121" prot="public" virt="virtual"><scope>ampls::XPRESSModel</scope><name>getObj</name></member>
      <member refid="classampls_1_1_x_p_r_e_s_s_model_1ad1df45b69ec933bdd38d7211910a16c5" prot="public" virt="virtual"><scope>ampls::XPRESSModel</scope><name>getSolution</name></member>
      <member refid="classampls_1_1_a_m_p_l_model_1a70499ebc7d909088db21d0b96b53175f" prot="public" virt="non-virtual"><scope>ampls::XPRESSModel</scope><name>getSolutionVector</name></member>
      <member refid="classampls_1_1_x_p_r_e_s_s_model_1ad6c068e22295d54c7dbbcd8b6d6ce7e2" prot="public" virt="virtual"><scope>ampls::XPRESSModel</scope><name>getStatus</name></member>
      <member refid="classampls_1_1_a_m_p_l_model_1a2f5456b17543eb0a6a0c2409617bdd1a" prot="public" virt="non-virtual"><scope>ampls::XPRESSModel</scope><name>getVarMap</name></member>
      <member refid="classampls_1_1_a_m_p_l_model_1ab4fd6f2a6b0f91dd4983de98e7003c30" prot="public" virt="non-virtual"><scope>ampls::XPRESSModel</scope><name>getVarMapFiltered</name></member>
      <member refid="classampls_1_1_a_m_p_l_model_1a0a9ebfa649684a9d6faf6e13f85a32ff" prot="public" virt="non-virtual"><scope>ampls::XPRESSModel</scope><name>getVarMapInverse</name></member>
      <member refid="classampls_1_1_x_p_r_e_s_s_model_1a53c48e4ba3f12866f1b6af36b7fb774a" prot="public" virt="non-virtual"><scope>ampls::XPRESSModel</scope><name>getXPRSprob</name></member>
      <member refid="classampls_1_1_x_p_r_e_s_s_model_1a443f6c8ad8aa9ba1489d7cfa4543a828" prot="public" virt="non-virtual"><scope>ampls::XPRESSModel</scope><name>isMIP</name></member>
      <member refid="classampls_1_1_x_p_r_e_s_s_model_1a425d82ad6da71eca41c088e731fd6856" prot="public" virt="virtual"><scope>ampls::XPRESSModel</scope><name>optimize</name></member>
      <member refid="classampls_1_1_a_m_p_l_model_1ac2e1800d30c2751eb9464cbbf16da70f" prot="public" virt="non-virtual"><scope>ampls::XPRESSModel</scope><name>printModelVars</name></member>
      <member refid="classampls_1_1_x_p_r_e_s_s_model_1a0618417078d1d11407898fb57ade2eb8" prot="private" virt="non-virtual"><scope>ampls::XPRESSModel</scope><name>prob_</name></member>
      <member refid="classampls_1_1_a_m_p_l_model_1a5c20eba868bd9a8207dd44b39c7cdfde" prot="public" virt="non-virtual"><scope>ampls::XPRESSModel</scope><name>setCallback</name></member>
      <member refid="classampls_1_1_a_m_p_l_model_1a0e051acaa733bd9d45354b218966de0e" prot="public" virt="non-virtual"><scope>ampls::XPRESSModel</scope><name>setCallback</name></member>
      <member refid="classampls_1_1_x_p_r_e_s_s_model_1a6e1af19528a96adf7944c40a8641a469" prot="private" virt="virtual"><scope>ampls::XPRESSModel</scope><name>setCallbackDerived</name></member>
      <member refid="classampls_1_1_x_p_r_e_s_s_model_1aae89b5e63fb2f343aaf74baf4d2b0d71" prot="private" virt="non-virtual"><scope>ampls::XPRESSModel</scope><name>state_</name></member>
      <member refid="classampls_1_1_a_m_p_l_model_1acb0a7c8e8c0e38b0bc71615daeead693" prot="public" virt="virtual"><scope>ampls::XPRESSModel</scope><name>writeSol</name></member>
      <member refid="classampls_1_1_a_m_p_l_model_1a64d58554792987885e83128a9faa60c5" prot="public" virt="virtual"><scope>ampls::XPRESSModel</scope><name>writeSol</name></member>
      <member refid="classampls_1_1_x_p_r_e_s_s_model_1a933d4385ad4924bb97f2d9c87ac08351" prot="public" virt="virtual"><scope>ampls::XPRESSModel</scope><name>writeSolImpl</name></member>
      <member refid="classampls_1_1_x_p_r_e_s_s_model_1a910c7478de77cb4c7f3bd3143237f9be" prot="private" virt="non-virtual"><scope>ampls::XPRESSModel</scope><name>XPRESSDrv</name></member>
      <member refid="classampls_1_1_x_p_r_e_s_s_model_1a4a4d8c47e72425256df4698ecb44f0d2" prot="private" virt="non-virtual"><scope>ampls::XPRESSModel</scope><name>XPRESSModel</name></member>
      <member refid="classampls_1_1_x_p_r_e_s_s_model_1a2002b6eb906800eef235cc1d314ffa7c" prot="public" virt="non-virtual"><scope>ampls::XPRESSModel</scope><name>XPRESSModel</name></member>
      <member refid="classampls_1_1_x_p_r_e_s_s_model_1ab5c2e74f92ac4a03204f81d3c81b2f31" prot="public" virt="non-virtual"><scope>ampls::XPRESSModel</scope><name>~XPRESSModel</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
