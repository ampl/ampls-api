# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _amplpy_cplex_swig
else:
    import _amplpy_cplex_swig

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class dblArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _amplpy_cplex_swig.dblArray_swiginit(self, _amplpy_cplex_swig.new_dblArray(nelements))
    __swig_destroy__ = _amplpy_cplex_swig.delete_dblArray

    def __getitem__(self, index):
        return _amplpy_cplex_swig.dblArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _amplpy_cplex_swig.dblArray___setitem__(self, index, value)

    def cast(self):
        return _amplpy_cplex_swig.dblArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _amplpy_cplex_swig.dblArray_frompointer(t)

# Register dblArray in _amplpy_cplex_swig:
_amplpy_cplex_swig.dblArray_swigregister(dblArray)

def dblArray_frompointer(t):
    return _amplpy_cplex_swig.dblArray_frompointer(t)

class intArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _amplpy_cplex_swig.intArray_swiginit(self, _amplpy_cplex_swig.new_intArray(nelements))
    __swig_destroy__ = _amplpy_cplex_swig.delete_intArray

    def __getitem__(self, index):
        return _amplpy_cplex_swig.intArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _amplpy_cplex_swig.intArray___setitem__(self, index, value)

    def cast(self):
        return _amplpy_cplex_swig.intArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _amplpy_cplex_swig.intArray_frompointer(t)

# Register intArray in _amplpy_cplex_swig:
_amplpy_cplex_swig.intArray_swigregister(intArray)

def intArray_frompointer(t):
    return _amplpy_cplex_swig.intArray_frompointer(t)

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _amplpy_cplex_swig.delete_SwigPyIterator

    def value(self):
        return _amplpy_cplex_swig.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _amplpy_cplex_swig.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _amplpy_cplex_swig.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _amplpy_cplex_swig.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _amplpy_cplex_swig.SwigPyIterator_equal(self, x)

    def copy(self):
        return _amplpy_cplex_swig.SwigPyIterator_copy(self)

    def next(self):
        return _amplpy_cplex_swig.SwigPyIterator_next(self)

    def __next__(self):
        return _amplpy_cplex_swig.SwigPyIterator___next__(self)

    def previous(self):
        return _amplpy_cplex_swig.SwigPyIterator_previous(self)

    def advance(self, n):
        return _amplpy_cplex_swig.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _amplpy_cplex_swig.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _amplpy_cplex_swig.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _amplpy_cplex_swig.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _amplpy_cplex_swig.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _amplpy_cplex_swig.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _amplpy_cplex_swig.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _amplpy_cplex_swig:
_amplpy_cplex_swig.SwigPyIterator_swigregister(SwigPyIterator)

class map_string_int(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _amplpy_cplex_swig.map_string_int_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _amplpy_cplex_swig.map_string_int___nonzero__(self)

    def __bool__(self):
        return _amplpy_cplex_swig.map_string_int___bool__(self)

    def __len__(self):
        return _amplpy_cplex_swig.map_string_int___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _amplpy_cplex_swig.map_string_int___getitem__(self, key)

    def __delitem__(self, key):
        return _amplpy_cplex_swig.map_string_int___delitem__(self, key)

    def has_key(self, key):
        return _amplpy_cplex_swig.map_string_int_has_key(self, key)

    def keys(self):
        return _amplpy_cplex_swig.map_string_int_keys(self)

    def values(self):
        return _amplpy_cplex_swig.map_string_int_values(self)

    def items(self):
        return _amplpy_cplex_swig.map_string_int_items(self)

    def __contains__(self, key):
        return _amplpy_cplex_swig.map_string_int___contains__(self, key)

    def key_iterator(self):
        return _amplpy_cplex_swig.map_string_int_key_iterator(self)

    def value_iterator(self):
        return _amplpy_cplex_swig.map_string_int_value_iterator(self)

    def __setitem__(self, *args):
        return _amplpy_cplex_swig.map_string_int___setitem__(self, *args)

    def asdict(self):
        return _amplpy_cplex_swig.map_string_int_asdict(self)

    def __init__(self, *args):
        _amplpy_cplex_swig.map_string_int_swiginit(self, _amplpy_cplex_swig.new_map_string_int(*args))

    def empty(self):
        return _amplpy_cplex_swig.map_string_int_empty(self)

    def size(self):
        return _amplpy_cplex_swig.map_string_int_size(self)

    def swap(self, v):
        return _amplpy_cplex_swig.map_string_int_swap(self, v)

    def begin(self):
        return _amplpy_cplex_swig.map_string_int_begin(self)

    def end(self):
        return _amplpy_cplex_swig.map_string_int_end(self)

    def rbegin(self):
        return _amplpy_cplex_swig.map_string_int_rbegin(self)

    def rend(self):
        return _amplpy_cplex_swig.map_string_int_rend(self)

    def clear(self):
        return _amplpy_cplex_swig.map_string_int_clear(self)

    def get_allocator(self):
        return _amplpy_cplex_swig.map_string_int_get_allocator(self)

    def count(self, x):
        return _amplpy_cplex_swig.map_string_int_count(self, x)

    def erase(self, *args):
        return _amplpy_cplex_swig.map_string_int_erase(self, *args)

    def find(self, x):
        return _amplpy_cplex_swig.map_string_int_find(self, x)

    def lower_bound(self, x):
        return _amplpy_cplex_swig.map_string_int_lower_bound(self, x)

    def upper_bound(self, x):
        return _amplpy_cplex_swig.map_string_int_upper_bound(self, x)
    __swig_destroy__ = _amplpy_cplex_swig.delete_map_string_int

# Register map_string_int in _amplpy_cplex_swig:
_amplpy_cplex_swig.map_string_int_swigregister(map_string_int)

class map_int_string(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _amplpy_cplex_swig.map_int_string_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _amplpy_cplex_swig.map_int_string___nonzero__(self)

    def __bool__(self):
        return _amplpy_cplex_swig.map_int_string___bool__(self)

    def __len__(self):
        return _amplpy_cplex_swig.map_int_string___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _amplpy_cplex_swig.map_int_string___getitem__(self, key)

    def __delitem__(self, key):
        return _amplpy_cplex_swig.map_int_string___delitem__(self, key)

    def has_key(self, key):
        return _amplpy_cplex_swig.map_int_string_has_key(self, key)

    def keys(self):
        return _amplpy_cplex_swig.map_int_string_keys(self)

    def values(self):
        return _amplpy_cplex_swig.map_int_string_values(self)

    def items(self):
        return _amplpy_cplex_swig.map_int_string_items(self)

    def __contains__(self, key):
        return _amplpy_cplex_swig.map_int_string___contains__(self, key)

    def key_iterator(self):
        return _amplpy_cplex_swig.map_int_string_key_iterator(self)

    def value_iterator(self):
        return _amplpy_cplex_swig.map_int_string_value_iterator(self)

    def __setitem__(self, *args):
        return _amplpy_cplex_swig.map_int_string___setitem__(self, *args)

    def asdict(self):
        return _amplpy_cplex_swig.map_int_string_asdict(self)

    def __init__(self, *args):
        _amplpy_cplex_swig.map_int_string_swiginit(self, _amplpy_cplex_swig.new_map_int_string(*args))

    def empty(self):
        return _amplpy_cplex_swig.map_int_string_empty(self)

    def size(self):
        return _amplpy_cplex_swig.map_int_string_size(self)

    def swap(self, v):
        return _amplpy_cplex_swig.map_int_string_swap(self, v)

    def begin(self):
        return _amplpy_cplex_swig.map_int_string_begin(self)

    def end(self):
        return _amplpy_cplex_swig.map_int_string_end(self)

    def rbegin(self):
        return _amplpy_cplex_swig.map_int_string_rbegin(self)

    def rend(self):
        return _amplpy_cplex_swig.map_int_string_rend(self)

    def clear(self):
        return _amplpy_cplex_swig.map_int_string_clear(self)

    def get_allocator(self):
        return _amplpy_cplex_swig.map_int_string_get_allocator(self)

    def count(self, x):
        return _amplpy_cplex_swig.map_int_string_count(self, x)

    def erase(self, *args):
        return _amplpy_cplex_swig.map_int_string_erase(self, *args)

    def find(self, x):
        return _amplpy_cplex_swig.map_int_string_find(self, x)

    def lower_bound(self, x):
        return _amplpy_cplex_swig.map_int_string_lower_bound(self, x)

    def upper_bound(self, x):
        return _amplpy_cplex_swig.map_int_string_upper_bound(self, x)
    __swig_destroy__ = _amplpy_cplex_swig.delete_map_int_string

# Register map_int_string in _amplpy_cplex_swig:
_amplpy_cplex_swig.map_int_string_swigregister(map_int_string)

class vector_string(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _amplpy_cplex_swig.vector_string_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _amplpy_cplex_swig.vector_string___nonzero__(self)

    def __bool__(self):
        return _amplpy_cplex_swig.vector_string___bool__(self)

    def __len__(self):
        return _amplpy_cplex_swig.vector_string___len__(self)

    def __getslice__(self, i, j):
        return _amplpy_cplex_swig.vector_string___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _amplpy_cplex_swig.vector_string___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _amplpy_cplex_swig.vector_string___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _amplpy_cplex_swig.vector_string___delitem__(self, *args)

    def __getitem__(self, *args):
        return _amplpy_cplex_swig.vector_string___getitem__(self, *args)

    def __setitem__(self, *args):
        return _amplpy_cplex_swig.vector_string___setitem__(self, *args)

    def pop(self):
        return _amplpy_cplex_swig.vector_string_pop(self)

    def append(self, x):
        return _amplpy_cplex_swig.vector_string_append(self, x)

    def empty(self):
        return _amplpy_cplex_swig.vector_string_empty(self)

    def size(self):
        return _amplpy_cplex_swig.vector_string_size(self)

    def swap(self, v):
        return _amplpy_cplex_swig.vector_string_swap(self, v)

    def begin(self):
        return _amplpy_cplex_swig.vector_string_begin(self)

    def end(self):
        return _amplpy_cplex_swig.vector_string_end(self)

    def rbegin(self):
        return _amplpy_cplex_swig.vector_string_rbegin(self)

    def rend(self):
        return _amplpy_cplex_swig.vector_string_rend(self)

    def clear(self):
        return _amplpy_cplex_swig.vector_string_clear(self)

    def get_allocator(self):
        return _amplpy_cplex_swig.vector_string_get_allocator(self)

    def pop_back(self):
        return _amplpy_cplex_swig.vector_string_pop_back(self)

    def erase(self, *args):
        return _amplpy_cplex_swig.vector_string_erase(self, *args)

    def __init__(self, *args):
        _amplpy_cplex_swig.vector_string_swiginit(self, _amplpy_cplex_swig.new_vector_string(*args))

    def push_back(self, x):
        return _amplpy_cplex_swig.vector_string_push_back(self, x)

    def front(self):
        return _amplpy_cplex_swig.vector_string_front(self)

    def back(self):
        return _amplpy_cplex_swig.vector_string_back(self)

    def assign(self, n, x):
        return _amplpy_cplex_swig.vector_string_assign(self, n, x)

    def resize(self, *args):
        return _amplpy_cplex_swig.vector_string_resize(self, *args)

    def insert(self, *args):
        return _amplpy_cplex_swig.vector_string_insert(self, *args)

    def reserve(self, n):
        return _amplpy_cplex_swig.vector_string_reserve(self, n)

    def capacity(self):
        return _amplpy_cplex_swig.vector_string_capacity(self)
    __swig_destroy__ = _amplpy_cplex_swig.delete_vector_string

# Register vector_string in _amplpy_cplex_swig:
_amplpy_cplex_swig.vector_string_swigregister(vector_string)

class vector_double(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _amplpy_cplex_swig.vector_double_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _amplpy_cplex_swig.vector_double___nonzero__(self)

    def __bool__(self):
        return _amplpy_cplex_swig.vector_double___bool__(self)

    def __len__(self):
        return _amplpy_cplex_swig.vector_double___len__(self)

    def __getslice__(self, i, j):
        return _amplpy_cplex_swig.vector_double___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _amplpy_cplex_swig.vector_double___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _amplpy_cplex_swig.vector_double___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _amplpy_cplex_swig.vector_double___delitem__(self, *args)

    def __getitem__(self, *args):
        return _amplpy_cplex_swig.vector_double___getitem__(self, *args)

    def __setitem__(self, *args):
        return _amplpy_cplex_swig.vector_double___setitem__(self, *args)

    def pop(self):
        return _amplpy_cplex_swig.vector_double_pop(self)

    def append(self, x):
        return _amplpy_cplex_swig.vector_double_append(self, x)

    def empty(self):
        return _amplpy_cplex_swig.vector_double_empty(self)

    def size(self):
        return _amplpy_cplex_swig.vector_double_size(self)

    def swap(self, v):
        return _amplpy_cplex_swig.vector_double_swap(self, v)

    def begin(self):
        return _amplpy_cplex_swig.vector_double_begin(self)

    def end(self):
        return _amplpy_cplex_swig.vector_double_end(self)

    def rbegin(self):
        return _amplpy_cplex_swig.vector_double_rbegin(self)

    def rend(self):
        return _amplpy_cplex_swig.vector_double_rend(self)

    def clear(self):
        return _amplpy_cplex_swig.vector_double_clear(self)

    def get_allocator(self):
        return _amplpy_cplex_swig.vector_double_get_allocator(self)

    def pop_back(self):
        return _amplpy_cplex_swig.vector_double_pop_back(self)

    def erase(self, *args):
        return _amplpy_cplex_swig.vector_double_erase(self, *args)

    def __init__(self, *args):
        _amplpy_cplex_swig.vector_double_swiginit(self, _amplpy_cplex_swig.new_vector_double(*args))

    def push_back(self, x):
        return _amplpy_cplex_swig.vector_double_push_back(self, x)

    def front(self):
        return _amplpy_cplex_swig.vector_double_front(self)

    def back(self):
        return _amplpy_cplex_swig.vector_double_back(self)

    def assign(self, n, x):
        return _amplpy_cplex_swig.vector_double_assign(self, n, x)

    def resize(self, *args):
        return _amplpy_cplex_swig.vector_double_resize(self, *args)

    def insert(self, *args):
        return _amplpy_cplex_swig.vector_double_insert(self, *args)

    def reserve(self, n):
        return _amplpy_cplex_swig.vector_double_reserve(self, n)

    def capacity(self):
        return _amplpy_cplex_swig.vector_double_capacity(self)
    __swig_destroy__ = _amplpy_cplex_swig.delete_vector_double

# Register vector_double in _amplpy_cplex_swig:
_amplpy_cplex_swig.vector_double_swigregister(vector_double)

class AMPLSolverException(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _amplpy_cplex_swig.AMPLSolverException_swiginit(self, _amplpy_cplex_swig.new_AMPLSolverException(*args))

    @staticmethod
    def format(*args):
        return _amplpy_cplex_swig.AMPLSolverException_format(*args)
    __swig_destroy__ = _amplpy_cplex_swig.delete_AMPLSolverException

# Register AMPLSolverException in _amplpy_cplex_swig:
_amplpy_cplex_swig.AMPLSolverException_swigregister(AMPLSolverException)

def AMPLSolverException_format(*args):
    return _amplpy_cplex_swig.AMPLSolverException_format(*args)

class Variant(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    str = property(_amplpy_cplex_swig.Variant_str_get, _amplpy_cplex_swig.Variant_str_set)
    integer = property(_amplpy_cplex_swig.Variant_integer_get, _amplpy_cplex_swig.Variant_integer_set)
    dbl = property(_amplpy_cplex_swig.Variant_dbl_get, _amplpy_cplex_swig.Variant_dbl_set)
    type = property(_amplpy_cplex_swig.Variant_type_get, _amplpy_cplex_swig.Variant_type_set)

    def __init__(self, *args):
        _amplpy_cplex_swig.Variant_swiginit(self, _amplpy_cplex_swig.new_Variant(*args))
    __swig_destroy__ = _amplpy_cplex_swig.delete_Variant

# Register Variant in _amplpy_cplex_swig:
_amplpy_cplex_swig.Variant_swigregister(Variant)


def generateArguments(modelName):
    return _amplpy_cplex_swig.generateArguments(modelName)

def deleteParams(params):
    return _amplpy_cplex_swig.deleteParams(params)
class Where(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    MSG = _amplpy_cplex_swig.Where_MSG
    PRESOLVE = _amplpy_cplex_swig.Where_PRESOLVE
    LPSOLVE = _amplpy_cplex_swig.Where_LPSOLVE
    MIPNODE = _amplpy_cplex_swig.Where_MIPNODE
    MIPSOL = _amplpy_cplex_swig.Where_MIPSOL
    MIP = _amplpy_cplex_swig.Where_MIP
    NOTMAPPED = _amplpy_cplex_swig.Where_NOTMAPPED

    def __init__(self):
        _amplpy_cplex_swig.Where_swiginit(self, _amplpy_cplex_swig.new_Where())
    __swig_destroy__ = _amplpy_cplex_swig.delete_Where

# Register Where in _amplpy_cplex_swig:
_amplpy_cplex_swig.Where_swigregister(Where)

class Value(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    OBJ = _amplpy_cplex_swig.Value_OBJ
    PRE_DELCOLS = _amplpy_cplex_swig.Value_PRE_DELCOLS
    PRE_DELROWS = _amplpy_cplex_swig.Value_PRE_DELROWS
    PRE_COEFFCHANGED = _amplpy_cplex_swig.Value_PRE_COEFFCHANGED
    ITERATIONS = _amplpy_cplex_swig.Value_ITERATIONS
    MIP_RELATIVEGAP = _amplpy_cplex_swig.Value_MIP_RELATIVEGAP

    def __init__(self):
        _amplpy_cplex_swig.Value_swiginit(self, _amplpy_cplex_swig.new_Value())
    __swig_destroy__ = _amplpy_cplex_swig.delete_Value

# Register Value in _amplpy_cplex_swig:
_amplpy_cplex_swig.Value_swigregister(Value)

class CutDirection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    EQ = _amplpy_cplex_swig.CutDirection_EQ
    GE = _amplpy_cplex_swig.CutDirection_GE
    LE = _amplpy_cplex_swig.CutDirection_LE

    def __init__(self):
        _amplpy_cplex_swig.CutDirection_swiginit(self, _amplpy_cplex_swig.new_CutDirection())
    __swig_destroy__ = _amplpy_cplex_swig.delete_CutDirection

# Register CutDirection in _amplpy_cplex_swig:
_amplpy_cplex_swig.CutDirection_swigregister(CutDirection)

class Status(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    UNKNOWN = _amplpy_cplex_swig.Status_UNKNOWN
    OPTIMAL = _amplpy_cplex_swig.Status_OPTIMAL
    INFEASIBLE = _amplpy_cplex_swig.Status_INFEASIBLE
    UNBOUNDED = _amplpy_cplex_swig.Status_UNBOUNDED
    LIMIT_ITERATION = _amplpy_cplex_swig.Status_LIMIT_ITERATION
    LIMIT_NODE = _amplpy_cplex_swig.Status_LIMIT_NODE
    LIMIT_TIME = _amplpy_cplex_swig.Status_LIMIT_TIME
    LIMIT_SOLUTION = _amplpy_cplex_swig.Status_LIMIT_SOLUTION
    INTERRUPTED = _amplpy_cplex_swig.Status_INTERRUPTED
    NOTMAPPED = _amplpy_cplex_swig.Status_NOTMAPPED

    def __init__(self):
        _amplpy_cplex_swig.Status_swiginit(self, _amplpy_cplex_swig.new_Status())
    __swig_destroy__ = _amplpy_cplex_swig.delete_Status

# Register Status in _amplpy_cplex_swig:
_amplpy_cplex_swig.Status_swigregister(Status)

class BaseCallback(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def run(self):
        return _amplpy_cplex_swig.BaseCallback_run(self)

    def getVarMap(self):
        return _amplpy_cplex_swig.BaseCallback_getVarMap(self)

    def getVarMapInverse(self):
        return _amplpy_cplex_swig.BaseCallback_getVarMapInverse(self)
    __swig_destroy__ = _amplpy_cplex_swig.delete_BaseCallback

    def addCut(self, vars, coeffs, direction, rhs):
        return _amplpy_cplex_swig.BaseCallback_addCut(self, vars, coeffs, direction, rhs)

    def addCutsIndices(self, nvars, coeffs, direction, rhs):
        return _amplpy_cplex_swig.BaseCallback_addCutsIndices(self, nvars, coeffs, direction, rhs)

    def addLazy(self, vars, coeffs, direction, rhs):
        return _amplpy_cplex_swig.BaseCallback_addLazy(self, vars, coeffs, direction, rhs)

    def addLazyIndices(self, nvars, coeffs, direction, rhs):
        return _amplpy_cplex_swig.BaseCallback_addLazyIndices(self, nvars, coeffs, direction, rhs)

    def getSolutionVector(self):
        return _amplpy_cplex_swig.BaseCallback_getSolutionVector(self)

    def getSolution(self, len, sol):
        return _amplpy_cplex_swig.BaseCallback_getSolution(self, len, sol)

    def getObj(self):
        return _amplpy_cplex_swig.BaseCallback_getObj(self)

    def getWhereString(self):
        return _amplpy_cplex_swig.BaseCallback_getWhereString(self)

    def getWhere(self):
        return _amplpy_cplex_swig.BaseCallback_getWhere(self)

    def getMessage(self):
        return _amplpy_cplex_swig.BaseCallback_getMessage(self)

    def getAMPLWhere(self):
        return _amplpy_cplex_swig.BaseCallback_getAMPLWhere(self)

    def getValue(self, v):
        return _amplpy_cplex_swig.BaseCallback_getValue(self, v)

# Register BaseCallback in _amplpy_cplex_swig:
_amplpy_cplex_swig.BaseCallback_swigregister(BaseCallback)

class GenericCallback(BaseCallback):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getObj(self):
        return _amplpy_cplex_swig.GenericCallback_getObj(self)

    def getWhere(self):
        return _amplpy_cplex_swig.GenericCallback_getWhere(self)

    def getWhereString(self):
        return _amplpy_cplex_swig.GenericCallback_getWhereString(self)

    def getMessage(self):
        return _amplpy_cplex_swig.GenericCallback_getMessage(self)

    def getAMPLWhere(self):
        return _amplpy_cplex_swig.GenericCallback_getAMPLWhere(self)

    def getValue(self, v):
        return _amplpy_cplex_swig.GenericCallback_getValue(self, v)

    def __init__(self):
        if self.__class__ == GenericCallback:
            _self = None
        else:
            _self = self
        _amplpy_cplex_swig.GenericCallback_swiginit(self, _amplpy_cplex_swig.new_GenericCallback(_self, ))
    __swig_destroy__ = _amplpy_cplex_swig.delete_GenericCallback
    def __disown__(self):
        self.this.disown()
        _amplpy_cplex_swig.disown_GenericCallback(self)
        return weakref.proxy(self)

# Register GenericCallback in _amplpy_cplex_swig:
_amplpy_cplex_swig.GenericCallback_swigregister(GenericCallback)

class AMPLModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getFileName(self):
        return _amplpy_cplex_swig.AMPLModel_getFileName(self)

    def __init__(self, other):
        _amplpy_cplex_swig.AMPLModel_swiginit(self, _amplpy_cplex_swig.new_AMPLModel(other))

    def getVarMapInverse(self):
        return _amplpy_cplex_swig.AMPLModel_getVarMapInverse(self)

    def getVarMap(self):
        return _amplpy_cplex_swig.AMPLModel_getVarMap(self)

    def getVarMapFiltered(self, beginWith):
        return _amplpy_cplex_swig.AMPLModel_getVarMapFiltered(self, beginWith)

    def setCallback(self, *args):
        return _amplpy_cplex_swig.AMPLModel_setCallback(self, *args)

    def getSolutionVector(self):
        return _amplpy_cplex_swig.AMPLModel_getSolutionVector(self)

    def getNumVars(self):
        return _amplpy_cplex_swig.AMPLModel_getNumVars(self)

    def getStatus(self):
        return _amplpy_cplex_swig.AMPLModel_getStatus(self)

    def optimize(self):
        return _amplpy_cplex_swig.AMPLModel_optimize(self)

    def writeSol(self, *args):
        return _amplpy_cplex_swig.AMPLModel_writeSol(self, *args)

    def getSolution(self, first, length, sol):
        return _amplpy_cplex_swig.AMPLModel_getSolution(self, first, length, sol)

    def getObj(self):
        return _amplpy_cplex_swig.AMPLModel_getObj(self)

    def error(self, code):
        return _amplpy_cplex_swig.AMPLModel_error(self, code)

    def enableLazyConstraints(self):
        return _amplpy_cplex_swig.AMPLModel_enableLazyConstraints(self)

    def printModelVars(self, onlyNonZero):
        return _amplpy_cplex_swig.AMPLModel_printModelVars(self, onlyNonZero)
    __swig_destroy__ = _amplpy_cplex_swig.delete_AMPLModel

# Register AMPLModel in _amplpy_cplex_swig:
_amplpy_cplex_swig.AMPLModel_swigregister(AMPLModel)

CPXSIZE_BITS = _amplpy_cplex_swig.CPXSIZE_BITS
CPX_FEATURES_H = _amplpy_cplex_swig.CPX_FEATURES_H
CPX_FEATURE_REMOTE_OBJECT = _amplpy_cplex_swig.CPX_FEATURE_REMOTE_OBJECT
CPX_FEATURE_DISTRIBUTED_MIP = _amplpy_cplex_swig.CPX_FEATURE_DISTRIBUTED_MIP
CPX_CPXAUTOINTTYPES_H_H = _amplpy_cplex_swig.CPX_CPXAUTOINTTYPES_H_H
CPXBYTE_DEFINED = _amplpy_cplex_swig.CPXBYTE_DEFINED
CPXINT_DEFINED = _amplpy_cplex_swig.CPXINT_DEFINED
CPXLONG_DEFINED = _amplpy_cplex_swig.CPXLONG_DEFINED
CPXSHORT_DEFINED = _amplpy_cplex_swig.CPXSHORT_DEFINED
CPXULONG_DEFINED = _amplpy_cplex_swig.CPXULONG_DEFINED
CPX_STR_PARAM_MAX = _amplpy_cplex_swig.CPX_STR_PARAM_MAX
class cpxiodevice(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cpxiodev_eof = property(_amplpy_cplex_swig.cpxiodevice_cpxiodev_eof_get, _amplpy_cplex_swig.cpxiodevice_cpxiodev_eof_set)
    cpxiodev_error = property(_amplpy_cplex_swig.cpxiodevice_cpxiodev_error_get, _amplpy_cplex_swig.cpxiodevice_cpxiodev_error_set)
    cpxiodev_rewind = property(_amplpy_cplex_swig.cpxiodevice_cpxiodev_rewind_get, _amplpy_cplex_swig.cpxiodevice_cpxiodev_rewind_set)
    cpxiodev_flush = property(_amplpy_cplex_swig.cpxiodevice_cpxiodev_flush_get, _amplpy_cplex_swig.cpxiodevice_cpxiodev_flush_set)
    cpxiodev_close = property(_amplpy_cplex_swig.cpxiodevice_cpxiodev_close_get, _amplpy_cplex_swig.cpxiodevice_cpxiodev_close_set)
    cpxiodev_putc = property(_amplpy_cplex_swig.cpxiodevice_cpxiodev_putc_get, _amplpy_cplex_swig.cpxiodevice_cpxiodev_putc_set)
    cpxiodev_puts = property(_amplpy_cplex_swig.cpxiodevice_cpxiodev_puts_get, _amplpy_cplex_swig.cpxiodevice_cpxiodev_puts_set)
    cpxiodev_read = property(_amplpy_cplex_swig.cpxiodevice_cpxiodev_read_get, _amplpy_cplex_swig.cpxiodevice_cpxiodev_read_set)
    cpxiodev_write = property(_amplpy_cplex_swig.cpxiodevice_cpxiodev_write_get, _amplpy_cplex_swig.cpxiodevice_cpxiodev_write_set)

    def __init__(self):
        _amplpy_cplex_swig.cpxiodevice_swiginit(self, _amplpy_cplex_swig.new_cpxiodevice())
    __swig_destroy__ = _amplpy_cplex_swig.delete_cpxiodevice

# Register cpxiodevice in _amplpy_cplex_swig:
_amplpy_cplex_swig.cpxiodevice_swigregister(cpxiodevice)

CPX_VERSION = _amplpy_cplex_swig.CPX_VERSION
CPX_VERSION_VERSION = _amplpy_cplex_swig.CPX_VERSION_VERSION
CPX_VERSION_RELEASE = _amplpy_cplex_swig.CPX_VERSION_RELEASE
CPX_VERSION_MODIFICATION = _amplpy_cplex_swig.CPX_VERSION_MODIFICATION
CPX_VERSION_FIX = _amplpy_cplex_swig.CPX_VERSION_FIX
CPX_INFBOUND = _amplpy_cplex_swig.CPX_INFBOUND
CPX_MINBOUND = _amplpy_cplex_swig.CPX_MINBOUND
CPX_PARAMTYPE_NONE = _amplpy_cplex_swig.CPX_PARAMTYPE_NONE
CPX_PARAMTYPE_INT = _amplpy_cplex_swig.CPX_PARAMTYPE_INT
CPX_PARAMTYPE_DOUBLE = _amplpy_cplex_swig.CPX_PARAMTYPE_DOUBLE
CPX_PARAMTYPE_STRING = _amplpy_cplex_swig.CPX_PARAMTYPE_STRING
CPX_PARAMTYPE_LONG = _amplpy_cplex_swig.CPX_PARAMTYPE_LONG
CPX_NO_SOLN = _amplpy_cplex_swig.CPX_NO_SOLN
CPX_AUTO_SOLN = _amplpy_cplex_swig.CPX_AUTO_SOLN
CPX_BASIC_SOLN = _amplpy_cplex_swig.CPX_BASIC_SOLN
CPX_NONBASIC_SOLN = _amplpy_cplex_swig.CPX_NONBASIC_SOLN
CPX_PRIMAL_SOLN = _amplpy_cplex_swig.CPX_PRIMAL_SOLN
CPX_PRECOL_LOW = _amplpy_cplex_swig.CPX_PRECOL_LOW
CPX_PRECOL_UP = _amplpy_cplex_swig.CPX_PRECOL_UP
CPX_PRECOL_FIX = _amplpy_cplex_swig.CPX_PRECOL_FIX
CPX_PRECOL_AGG = _amplpy_cplex_swig.CPX_PRECOL_AGG
CPX_PRECOL_OTHER = _amplpy_cplex_swig.CPX_PRECOL_OTHER
CPX_PREROW_RED = _amplpy_cplex_swig.CPX_PREROW_RED
CPX_PREROW_AGG = _amplpy_cplex_swig.CPX_PREROW_AGG
CPX_PREROW_OTHER = _amplpy_cplex_swig.CPX_PREROW_OTHER
CPX_AUTO = _amplpy_cplex_swig.CPX_AUTO
CPX_ON = _amplpy_cplex_swig.CPX_ON
CPX_OFF = _amplpy_cplex_swig.CPX_OFF
CPX_MAX = _amplpy_cplex_swig.CPX_MAX
CPX_MIN = _amplpy_cplex_swig.CPX_MIN
CPX_DATACHECK_OFF = _amplpy_cplex_swig.CPX_DATACHECK_OFF
CPX_DATACHECK_WARN = _amplpy_cplex_swig.CPX_DATACHECK_WARN
CPX_DATACHECK_ASSIST = _amplpy_cplex_swig.CPX_DATACHECK_ASSIST
CPX_PPRIIND_PARTIAL = _amplpy_cplex_swig.CPX_PPRIIND_PARTIAL
CPX_PPRIIND_AUTO = _amplpy_cplex_swig.CPX_PPRIIND_AUTO
CPX_PPRIIND_DEVEX = _amplpy_cplex_swig.CPX_PPRIIND_DEVEX
CPX_PPRIIND_STEEP = _amplpy_cplex_swig.CPX_PPRIIND_STEEP
CPX_PPRIIND_STEEPQSTART = _amplpy_cplex_swig.CPX_PPRIIND_STEEPQSTART
CPX_PPRIIND_FULL = _amplpy_cplex_swig.CPX_PPRIIND_FULL
CPX_DPRIIND_AUTO = _amplpy_cplex_swig.CPX_DPRIIND_AUTO
CPX_DPRIIND_FULL = _amplpy_cplex_swig.CPX_DPRIIND_FULL
CPX_DPRIIND_STEEP = _amplpy_cplex_swig.CPX_DPRIIND_STEEP
CPX_DPRIIND_FULLSTEEP = _amplpy_cplex_swig.CPX_DPRIIND_FULLSTEEP
CPX_DPRIIND_STEEPQSTART = _amplpy_cplex_swig.CPX_DPRIIND_STEEPQSTART
CPX_DPRIIND_DEVEX = _amplpy_cplex_swig.CPX_DPRIIND_DEVEX
CPX_PARALLEL_DETERMINISTIC = _amplpy_cplex_swig.CPX_PARALLEL_DETERMINISTIC
CPX_PARALLEL_AUTO = _amplpy_cplex_swig.CPX_PARALLEL_AUTO
CPX_PARALLEL_OPPORTUNISTIC = _amplpy_cplex_swig.CPX_PARALLEL_OPPORTUNISTIC
CPX_WRITELEVEL_AUTO = _amplpy_cplex_swig.CPX_WRITELEVEL_AUTO
CPX_WRITELEVEL_ALLVARS = _amplpy_cplex_swig.CPX_WRITELEVEL_ALLVARS
CPX_WRITELEVEL_DISCRETEVARS = _amplpy_cplex_swig.CPX_WRITELEVEL_DISCRETEVARS
CPX_WRITELEVEL_NONZEROVARS = _amplpy_cplex_swig.CPX_WRITELEVEL_NONZEROVARS
CPX_WRITELEVEL_NONZERODISCRETEVARS = _amplpy_cplex_swig.CPX_WRITELEVEL_NONZERODISCRETEVARS
CPX_OPTIMALITYTARGET_AUTO = _amplpy_cplex_swig.CPX_OPTIMALITYTARGET_AUTO
CPX_OPTIMALITYTARGET_OPTIMALCONVEX = _amplpy_cplex_swig.CPX_OPTIMALITYTARGET_OPTIMALCONVEX
CPX_OPTIMALITYTARGET_FIRSTORDER = _amplpy_cplex_swig.CPX_OPTIMALITYTARGET_FIRSTORDER
CPX_OPTIMALITYTARGET_OPTIMALGLOBAL = _amplpy_cplex_swig.CPX_OPTIMALITYTARGET_OPTIMALGLOBAL
CPX_ALG_NONE = _amplpy_cplex_swig.CPX_ALG_NONE
CPX_ALG_AUTOMATIC = _amplpy_cplex_swig.CPX_ALG_AUTOMATIC
CPX_ALG_PRIMAL = _amplpy_cplex_swig.CPX_ALG_PRIMAL
CPX_ALG_DUAL = _amplpy_cplex_swig.CPX_ALG_DUAL
CPX_ALG_NET = _amplpy_cplex_swig.CPX_ALG_NET
CPX_ALG_BARRIER = _amplpy_cplex_swig.CPX_ALG_BARRIER
CPX_ALG_SIFTING = _amplpy_cplex_swig.CPX_ALG_SIFTING
CPX_ALG_CONCURRENT = _amplpy_cplex_swig.CPX_ALG_CONCURRENT
CPX_ALG_BAROPT = _amplpy_cplex_swig.CPX_ALG_BAROPT
CPX_ALG_PIVOTIN = _amplpy_cplex_swig.CPX_ALG_PIVOTIN
CPX_ALG_PIVOTOUT = _amplpy_cplex_swig.CPX_ALG_PIVOTOUT
CPX_ALG_PIVOT = _amplpy_cplex_swig.CPX_ALG_PIVOT
CPX_ALG_FEASOPT = _amplpy_cplex_swig.CPX_ALG_FEASOPT
CPX_ALG_MIP = _amplpy_cplex_swig.CPX_ALG_MIP
CPX_ALG_BENDERS = _amplpy_cplex_swig.CPX_ALG_BENDERS
CPX_ALG_MULTIOBJ = _amplpy_cplex_swig.CPX_ALG_MULTIOBJ
CPX_ALG_ROBUST = _amplpy_cplex_swig.CPX_ALG_ROBUST
CPX_AT_LOWER = _amplpy_cplex_swig.CPX_AT_LOWER
CPX_BASIC = _amplpy_cplex_swig.CPX_BASIC
CPX_AT_UPPER = _amplpy_cplex_swig.CPX_AT_UPPER
CPX_FREE_SUPER = _amplpy_cplex_swig.CPX_FREE_SUPER
CPX_NO_VARIABLE = _amplpy_cplex_swig.CPX_NO_VARIABLE
CPX_CONTINUOUS = _amplpy_cplex_swig.CPX_CONTINUOUS
CPX_BINARY = _amplpy_cplex_swig.CPX_BINARY
CPX_INTEGER = _amplpy_cplex_swig.CPX_INTEGER
CPX_SEMICONT = _amplpy_cplex_swig.CPX_SEMICONT
CPX_SEMIINT = _amplpy_cplex_swig.CPX_SEMIINT
CPX_PREREDUCE_PRIMALANDDUAL = _amplpy_cplex_swig.CPX_PREREDUCE_PRIMALANDDUAL
CPX_PREREDUCE_DUALONLY = _amplpy_cplex_swig.CPX_PREREDUCE_DUALONLY
CPX_PREREDUCE_PRIMALONLY = _amplpy_cplex_swig.CPX_PREREDUCE_PRIMALONLY
CPX_PREREDUCE_NOPRIMALORDUAL = _amplpy_cplex_swig.CPX_PREREDUCE_NOPRIMALORDUAL
CPX_CONFLICT_EXCLUDED = _amplpy_cplex_swig.CPX_CONFLICT_EXCLUDED
CPX_CONFLICT_POSSIBLE_MEMBER = _amplpy_cplex_swig.CPX_CONFLICT_POSSIBLE_MEMBER
CPX_CONFLICT_POSSIBLE_LB = _amplpy_cplex_swig.CPX_CONFLICT_POSSIBLE_LB
CPX_CONFLICT_POSSIBLE_UB = _amplpy_cplex_swig.CPX_CONFLICT_POSSIBLE_UB
CPX_CONFLICT_MEMBER = _amplpy_cplex_swig.CPX_CONFLICT_MEMBER
CPX_CONFLICT_LB = _amplpy_cplex_swig.CPX_CONFLICT_LB
CPX_CONFLICT_UB = _amplpy_cplex_swig.CPX_CONFLICT_UB
CPX_CONFLICTALG_AUTO = _amplpy_cplex_swig.CPX_CONFLICTALG_AUTO
CPX_CONFLICTALG_FAST = _amplpy_cplex_swig.CPX_CONFLICTALG_FAST
CPX_CONFLICTALG_PROPAGATE = _amplpy_cplex_swig.CPX_CONFLICTALG_PROPAGATE
CPX_CONFLICTALG_PRESOLVE = _amplpy_cplex_swig.CPX_CONFLICTALG_PRESOLVE
CPX_CONFLICTALG_IIS = _amplpy_cplex_swig.CPX_CONFLICTALG_IIS
CPX_CONFLICTALG_LIMITSOLVE = _amplpy_cplex_swig.CPX_CONFLICTALG_LIMITSOLVE
CPX_CONFLICTALG_SOLVE = _amplpy_cplex_swig.CPX_CONFLICTALG_SOLVE
CPXPROB_LP = _amplpy_cplex_swig.CPXPROB_LP
CPXPROB_MILP = _amplpy_cplex_swig.CPXPROB_MILP
CPXPROB_FIXEDMILP = _amplpy_cplex_swig.CPXPROB_FIXEDMILP
CPXPROB_NODELP = _amplpy_cplex_swig.CPXPROB_NODELP
CPXPROB_QP = _amplpy_cplex_swig.CPXPROB_QP
CPXPROB_MIQP = _amplpy_cplex_swig.CPXPROB_MIQP
CPXPROB_FIXEDMIQP = _amplpy_cplex_swig.CPXPROB_FIXEDMIQP
CPXPROB_NODEQP = _amplpy_cplex_swig.CPXPROB_NODEQP
CPXPROB_QCP = _amplpy_cplex_swig.CPXPROB_QCP
CPXPROB_MIQCP = _amplpy_cplex_swig.CPXPROB_MIQCP
CPXPROB_NODEQCP = _amplpy_cplex_swig.CPXPROB_NODEQCP
CPX_LPREADER_LEGACY = _amplpy_cplex_swig.CPX_LPREADER_LEGACY
CPX_LPREADER_NEW = _amplpy_cplex_swig.CPX_LPREADER_NEW
CPX_PARAM_ALL_MIN = _amplpy_cplex_swig.CPX_PARAM_ALL_MIN
CPX_PARAM_ALL_MAX = _amplpy_cplex_swig.CPX_PARAM_ALL_MAX
CPX_CALLBACK_PRIMAL = _amplpy_cplex_swig.CPX_CALLBACK_PRIMAL
CPX_CALLBACK_DUAL = _amplpy_cplex_swig.CPX_CALLBACK_DUAL
CPX_CALLBACK_NETWORK = _amplpy_cplex_swig.CPX_CALLBACK_NETWORK
CPX_CALLBACK_PRIMAL_CROSSOVER = _amplpy_cplex_swig.CPX_CALLBACK_PRIMAL_CROSSOVER
CPX_CALLBACK_DUAL_CROSSOVER = _amplpy_cplex_swig.CPX_CALLBACK_DUAL_CROSSOVER
CPX_CALLBACK_BARRIER = _amplpy_cplex_swig.CPX_CALLBACK_BARRIER
CPX_CALLBACK_PRESOLVE = _amplpy_cplex_swig.CPX_CALLBACK_PRESOLVE
CPX_CALLBACK_QPBARRIER = _amplpy_cplex_swig.CPX_CALLBACK_QPBARRIER
CPX_CALLBACK_QPSIMPLEX = _amplpy_cplex_swig.CPX_CALLBACK_QPSIMPLEX
CPX_CALLBACK_TUNING = _amplpy_cplex_swig.CPX_CALLBACK_TUNING
CPX_CALLBACK_INFO_PRIMAL_OBJ = _amplpy_cplex_swig.CPX_CALLBACK_INFO_PRIMAL_OBJ
CPX_CALLBACK_INFO_DUAL_OBJ = _amplpy_cplex_swig.CPX_CALLBACK_INFO_DUAL_OBJ
CPX_CALLBACK_INFO_PRIMAL_INFMEAS = _amplpy_cplex_swig.CPX_CALLBACK_INFO_PRIMAL_INFMEAS
CPX_CALLBACK_INFO_DUAL_INFMEAS = _amplpy_cplex_swig.CPX_CALLBACK_INFO_DUAL_INFMEAS
CPX_CALLBACK_INFO_PRIMAL_FEAS = _amplpy_cplex_swig.CPX_CALLBACK_INFO_PRIMAL_FEAS
CPX_CALLBACK_INFO_DUAL_FEAS = _amplpy_cplex_swig.CPX_CALLBACK_INFO_DUAL_FEAS
CPX_CALLBACK_INFO_ITCOUNT = _amplpy_cplex_swig.CPX_CALLBACK_INFO_ITCOUNT
CPX_CALLBACK_INFO_CROSSOVER_PPUSH = _amplpy_cplex_swig.CPX_CALLBACK_INFO_CROSSOVER_PPUSH
CPX_CALLBACK_INFO_CROSSOVER_PEXCH = _amplpy_cplex_swig.CPX_CALLBACK_INFO_CROSSOVER_PEXCH
CPX_CALLBACK_INFO_CROSSOVER_DPUSH = _amplpy_cplex_swig.CPX_CALLBACK_INFO_CROSSOVER_DPUSH
CPX_CALLBACK_INFO_CROSSOVER_DEXCH = _amplpy_cplex_swig.CPX_CALLBACK_INFO_CROSSOVER_DEXCH
CPX_CALLBACK_INFO_CROSSOVER_SBCNT = _amplpy_cplex_swig.CPX_CALLBACK_INFO_CROSSOVER_SBCNT
CPX_CALLBACK_INFO_PRESOLVE_ROWSGONE = _amplpy_cplex_swig.CPX_CALLBACK_INFO_PRESOLVE_ROWSGONE
CPX_CALLBACK_INFO_PRESOLVE_COLSGONE = _amplpy_cplex_swig.CPX_CALLBACK_INFO_PRESOLVE_COLSGONE
CPX_CALLBACK_INFO_PRESOLVE_AGGSUBST = _amplpy_cplex_swig.CPX_CALLBACK_INFO_PRESOLVE_AGGSUBST
CPX_CALLBACK_INFO_PRESOLVE_COEFFS = _amplpy_cplex_swig.CPX_CALLBACK_INFO_PRESOLVE_COEFFS
CPX_CALLBACK_INFO_USER_PROBLEM = _amplpy_cplex_swig.CPX_CALLBACK_INFO_USER_PROBLEM
CPX_CALLBACK_INFO_TUNING_PROGRESS = _amplpy_cplex_swig.CPX_CALLBACK_INFO_TUNING_PROGRESS
CPX_CALLBACK_INFO_ENDTIME = _amplpy_cplex_swig.CPX_CALLBACK_INFO_ENDTIME
CPX_CALLBACK_INFO_ITCOUNT_LONG = _amplpy_cplex_swig.CPX_CALLBACK_INFO_ITCOUNT_LONG
CPX_CALLBACK_INFO_CROSSOVER_PPUSH_LONG = _amplpy_cplex_swig.CPX_CALLBACK_INFO_CROSSOVER_PPUSH_LONG
CPX_CALLBACK_INFO_CROSSOVER_PEXCH_LONG = _amplpy_cplex_swig.CPX_CALLBACK_INFO_CROSSOVER_PEXCH_LONG
CPX_CALLBACK_INFO_CROSSOVER_DPUSH_LONG = _amplpy_cplex_swig.CPX_CALLBACK_INFO_CROSSOVER_DPUSH_LONG
CPX_CALLBACK_INFO_CROSSOVER_DEXCH_LONG = _amplpy_cplex_swig.CPX_CALLBACK_INFO_CROSSOVER_DEXCH_LONG
CPX_CALLBACK_INFO_PRESOLVE_AGGSUBST_LONG = _amplpy_cplex_swig.CPX_CALLBACK_INFO_PRESOLVE_AGGSUBST_LONG
CPX_CALLBACK_INFO_PRESOLVE_COEFFS_LONG = _amplpy_cplex_swig.CPX_CALLBACK_INFO_PRESOLVE_COEFFS_LONG
CPX_CALLBACK_INFO_ENDDETTIME = _amplpy_cplex_swig.CPX_CALLBACK_INFO_ENDDETTIME
CPX_CALLBACK_INFO_STARTTIME = _amplpy_cplex_swig.CPX_CALLBACK_INFO_STARTTIME
CPX_CALLBACK_INFO_STARTDETTIME = _amplpy_cplex_swig.CPX_CALLBACK_INFO_STARTDETTIME
CPX_TUNE_AVERAGE = _amplpy_cplex_swig.CPX_TUNE_AVERAGE
CPX_TUNE_MINMAX = _amplpy_cplex_swig.CPX_TUNE_MINMAX
CPX_TUNE_ABORT = _amplpy_cplex_swig.CPX_TUNE_ABORT
CPX_TUNE_TILIM = _amplpy_cplex_swig.CPX_TUNE_TILIM
CPX_TUNE_DETTILIM = _amplpy_cplex_swig.CPX_TUNE_DETTILIM
CPX_FEASOPT_MIN_SUM = _amplpy_cplex_swig.CPX_FEASOPT_MIN_SUM
CPX_FEASOPT_OPT_SUM = _amplpy_cplex_swig.CPX_FEASOPT_OPT_SUM
CPX_FEASOPT_MIN_INF = _amplpy_cplex_swig.CPX_FEASOPT_MIN_INF
CPX_FEASOPT_OPT_INF = _amplpy_cplex_swig.CPX_FEASOPT_OPT_INF
CPX_FEASOPT_MIN_QUAD = _amplpy_cplex_swig.CPX_FEASOPT_MIN_QUAD
CPX_FEASOPT_OPT_QUAD = _amplpy_cplex_swig.CPX_FEASOPT_OPT_QUAD
CPX_BENDERSSTRATEGY_OFF = _amplpy_cplex_swig.CPX_BENDERSSTRATEGY_OFF
CPX_BENDERSSTRATEGY_AUTO = _amplpy_cplex_swig.CPX_BENDERSSTRATEGY_AUTO
CPX_BENDERSSTRATEGY_USER = _amplpy_cplex_swig.CPX_BENDERSSTRATEGY_USER
CPX_BENDERSSTRATEGY_WORKERS = _amplpy_cplex_swig.CPX_BENDERSSTRATEGY_WORKERS
CPX_BENDERSSTRATEGY_FULL = _amplpy_cplex_swig.CPX_BENDERSSTRATEGY_FULL
CPX_ANNOTATIONDATA_LONG = _amplpy_cplex_swig.CPX_ANNOTATIONDATA_LONG
CPX_ANNOTATIONDATA_DOUBLE = _amplpy_cplex_swig.CPX_ANNOTATIONDATA_DOUBLE
CPX_ANNOTATIONOBJ_OBJ = _amplpy_cplex_swig.CPX_ANNOTATIONOBJ_OBJ
CPX_ANNOTATIONOBJ_COL = _amplpy_cplex_swig.CPX_ANNOTATIONOBJ_COL
CPX_ANNOTATIONOBJ_ROW = _amplpy_cplex_swig.CPX_ANNOTATIONOBJ_ROW
CPX_ANNOTATIONOBJ_SOS = _amplpy_cplex_swig.CPX_ANNOTATIONOBJ_SOS
CPX_ANNOTATIONOBJ_IND = _amplpy_cplex_swig.CPX_ANNOTATIONOBJ_IND
CPX_ANNOTATIONOBJ_QC = _amplpy_cplex_swig.CPX_ANNOTATIONOBJ_QC
CPX_ANNOTATIONOBJ_LAST = _amplpy_cplex_swig.CPX_ANNOTATIONOBJ_LAST
CPXIIS_COMPLETE = _amplpy_cplex_swig.CPXIIS_COMPLETE
CPXIIS_PARTIAL = _amplpy_cplex_swig.CPXIIS_PARTIAL
CPXIIS_AT_LOWER = _amplpy_cplex_swig.CPXIIS_AT_LOWER
CPXIIS_FIXED = _amplpy_cplex_swig.CPXIIS_FIXED
CPXIIS_AT_UPPER = _amplpy_cplex_swig.CPXIIS_AT_UPPER
CPX_BARORDER_AUTO = _amplpy_cplex_swig.CPX_BARORDER_AUTO
CPX_BARORDER_AMD = _amplpy_cplex_swig.CPX_BARORDER_AMD
CPX_BARORDER_AMF = _amplpy_cplex_swig.CPX_BARORDER_AMF
CPX_BARORDER_ND = _amplpy_cplex_swig.CPX_BARORDER_ND
CPX_MIPEMPHASIS_BALANCED = _amplpy_cplex_swig.CPX_MIPEMPHASIS_BALANCED
CPX_MIPEMPHASIS_FEASIBILITY = _amplpy_cplex_swig.CPX_MIPEMPHASIS_FEASIBILITY
CPX_MIPEMPHASIS_OPTIMALITY = _amplpy_cplex_swig.CPX_MIPEMPHASIS_OPTIMALITY
CPX_MIPEMPHASIS_BESTBOUND = _amplpy_cplex_swig.CPX_MIPEMPHASIS_BESTBOUND
CPX_MIPEMPHASIS_HIDDENFEAS = _amplpy_cplex_swig.CPX_MIPEMPHASIS_HIDDENFEAS
CPX_TYPE_VAR = _amplpy_cplex_swig.CPX_TYPE_VAR
CPX_TYPE_SOS1 = _amplpy_cplex_swig.CPX_TYPE_SOS1
CPX_TYPE_SOS2 = _amplpy_cplex_swig.CPX_TYPE_SOS2
CPX_TYPE_USER = _amplpy_cplex_swig.CPX_TYPE_USER
CPX_TYPE_ANY = _amplpy_cplex_swig.CPX_TYPE_ANY
CPX_VARSEL_MININFEAS = _amplpy_cplex_swig.CPX_VARSEL_MININFEAS
CPX_VARSEL_DEFAULT = _amplpy_cplex_swig.CPX_VARSEL_DEFAULT
CPX_VARSEL_MAXINFEAS = _amplpy_cplex_swig.CPX_VARSEL_MAXINFEAS
CPX_VARSEL_PSEUDO = _amplpy_cplex_swig.CPX_VARSEL_PSEUDO
CPX_VARSEL_STRONG = _amplpy_cplex_swig.CPX_VARSEL_STRONG
CPX_VARSEL_PSEUDOREDUCED = _amplpy_cplex_swig.CPX_VARSEL_PSEUDOREDUCED
CPX_NODESEL_DFS = _amplpy_cplex_swig.CPX_NODESEL_DFS
CPX_NODESEL_BESTBOUND = _amplpy_cplex_swig.CPX_NODESEL_BESTBOUND
CPX_NODESEL_BESTEST = _amplpy_cplex_swig.CPX_NODESEL_BESTEST
CPX_NODESEL_BESTEST_ALT = _amplpy_cplex_swig.CPX_NODESEL_BESTEST_ALT
CPX_MIPORDER_COST = _amplpy_cplex_swig.CPX_MIPORDER_COST
CPX_MIPORDER_BOUNDS = _amplpy_cplex_swig.CPX_MIPORDER_BOUNDS
CPX_MIPORDER_SCALEDCOST = _amplpy_cplex_swig.CPX_MIPORDER_SCALEDCOST
CPX_BRANCH_GLOBAL = _amplpy_cplex_swig.CPX_BRANCH_GLOBAL
CPX_BRANCH_DOWN = _amplpy_cplex_swig.CPX_BRANCH_DOWN
CPX_BRANCH_UP = _amplpy_cplex_swig.CPX_BRANCH_UP
CPX_BRDIR_DOWN = _amplpy_cplex_swig.CPX_BRDIR_DOWN
CPX_BRDIR_AUTO = _amplpy_cplex_swig.CPX_BRDIR_AUTO
CPX_BRDIR_UP = _amplpy_cplex_swig.CPX_BRDIR_UP
CPX_CUT_COVER = _amplpy_cplex_swig.CPX_CUT_COVER
CPX_CUT_GUBCOVER = _amplpy_cplex_swig.CPX_CUT_GUBCOVER
CPX_CUT_FLOWCOVER = _amplpy_cplex_swig.CPX_CUT_FLOWCOVER
CPX_CUT_CLIQUE = _amplpy_cplex_swig.CPX_CUT_CLIQUE
CPX_CUT_FRAC = _amplpy_cplex_swig.CPX_CUT_FRAC
CPX_CUT_MIR = _amplpy_cplex_swig.CPX_CUT_MIR
CPX_CUT_FLOWPATH = _amplpy_cplex_swig.CPX_CUT_FLOWPATH
CPX_CUT_DISJ = _amplpy_cplex_swig.CPX_CUT_DISJ
CPX_CUT_IMPLBD = _amplpy_cplex_swig.CPX_CUT_IMPLBD
CPX_CUT_ZEROHALF = _amplpy_cplex_swig.CPX_CUT_ZEROHALF
CPX_CUT_MCF = _amplpy_cplex_swig.CPX_CUT_MCF
CPX_CUT_LOCALCOVER = _amplpy_cplex_swig.CPX_CUT_LOCALCOVER
CPX_CUT_TIGHTEN = _amplpy_cplex_swig.CPX_CUT_TIGHTEN
CPX_CUT_OBJDISJ = _amplpy_cplex_swig.CPX_CUT_OBJDISJ
CPX_CUT_LANDP = _amplpy_cplex_swig.CPX_CUT_LANDP
CPX_CUT_USER = _amplpy_cplex_swig.CPX_CUT_USER
CPX_CUT_TABLE = _amplpy_cplex_swig.CPX_CUT_TABLE
CPX_CUT_SOLNPOOL = _amplpy_cplex_swig.CPX_CUT_SOLNPOOL
CPX_CUT_LOCALIMPLBD = _amplpy_cplex_swig.CPX_CUT_LOCALIMPLBD
CPX_CUT_BQP = _amplpy_cplex_swig.CPX_CUT_BQP
CPX_CUT_RLT = _amplpy_cplex_swig.CPX_CUT_RLT
CPX_CUT_BENDERS = _amplpy_cplex_swig.CPX_CUT_BENDERS
CPX_CUT_NUM_TYPES = _amplpy_cplex_swig.CPX_CUT_NUM_TYPES
CPX_MIPSEARCH_AUTO = _amplpy_cplex_swig.CPX_MIPSEARCH_AUTO
CPX_MIPSEARCH_TRADITIONAL = _amplpy_cplex_swig.CPX_MIPSEARCH_TRADITIONAL
CPX_MIPSEARCH_DYNAMIC = _amplpy_cplex_swig.CPX_MIPSEARCH_DYNAMIC
CPX_MIPKAPPA_OFF = _amplpy_cplex_swig.CPX_MIPKAPPA_OFF
CPX_MIPKAPPA_AUTO = _amplpy_cplex_swig.CPX_MIPKAPPA_AUTO
CPX_MIPKAPPA_SAMPLE = _amplpy_cplex_swig.CPX_MIPKAPPA_SAMPLE
CPX_MIPKAPPA_FULL = _amplpy_cplex_swig.CPX_MIPKAPPA_FULL
CPX_MIPSTART_AUTO = _amplpy_cplex_swig.CPX_MIPSTART_AUTO
CPX_MIPSTART_CHECKFEAS = _amplpy_cplex_swig.CPX_MIPSTART_CHECKFEAS
CPX_MIPSTART_SOLVEFIXED = _amplpy_cplex_swig.CPX_MIPSTART_SOLVEFIXED
CPX_MIPSTART_SOLVEMIP = _amplpy_cplex_swig.CPX_MIPSTART_SOLVEMIP
CPX_MIPSTART_REPAIR = _amplpy_cplex_swig.CPX_MIPSTART_REPAIR
CPX_MIPSTART_NOCHECK = _amplpy_cplex_swig.CPX_MIPSTART_NOCHECK
CPX_CALLBACK_MIP = _amplpy_cplex_swig.CPX_CALLBACK_MIP
CPX_CALLBACK_MIP_BRANCH = _amplpy_cplex_swig.CPX_CALLBACK_MIP_BRANCH
CPX_CALLBACK_MIP_NODE = _amplpy_cplex_swig.CPX_CALLBACK_MIP_NODE
CPX_CALLBACK_MIP_HEURISTIC = _amplpy_cplex_swig.CPX_CALLBACK_MIP_HEURISTIC
CPX_CALLBACK_MIP_SOLVE = _amplpy_cplex_swig.CPX_CALLBACK_MIP_SOLVE
CPX_CALLBACK_MIP_CUT_LOOP = _amplpy_cplex_swig.CPX_CALLBACK_MIP_CUT_LOOP
CPX_CALLBACK_MIP_PROBE = _amplpy_cplex_swig.CPX_CALLBACK_MIP_PROBE
CPX_CALLBACK_MIP_FRACCUT = _amplpy_cplex_swig.CPX_CALLBACK_MIP_FRACCUT
CPX_CALLBACK_MIP_DISJCUT = _amplpy_cplex_swig.CPX_CALLBACK_MIP_DISJCUT
CPX_CALLBACK_MIP_FLOWMIR = _amplpy_cplex_swig.CPX_CALLBACK_MIP_FLOWMIR
CPX_CALLBACK_MIP_INCUMBENT_NODESOLN = _amplpy_cplex_swig.CPX_CALLBACK_MIP_INCUMBENT_NODESOLN
CPX_CALLBACK_MIP_DELETENODE = _amplpy_cplex_swig.CPX_CALLBACK_MIP_DELETENODE
CPX_CALLBACK_MIP_BRANCH_NOSOLN = _amplpy_cplex_swig.CPX_CALLBACK_MIP_BRANCH_NOSOLN
CPX_CALLBACK_MIP_CUT_LAST = _amplpy_cplex_swig.CPX_CALLBACK_MIP_CUT_LAST
CPX_CALLBACK_MIP_CUT_FEAS = _amplpy_cplex_swig.CPX_CALLBACK_MIP_CUT_FEAS
CPX_CALLBACK_MIP_CUT_UNBD = _amplpy_cplex_swig.CPX_CALLBACK_MIP_CUT_UNBD
CPX_CALLBACK_MIP_INCUMBENT_HEURSOLN = _amplpy_cplex_swig.CPX_CALLBACK_MIP_INCUMBENT_HEURSOLN
CPX_CALLBACK_MIP_INCUMBENT_USERSOLN = _amplpy_cplex_swig.CPX_CALLBACK_MIP_INCUMBENT_USERSOLN
CPX_CALLBACK_MIP_INCUMBENT_MIPSTART = _amplpy_cplex_swig.CPX_CALLBACK_MIP_INCUMBENT_MIPSTART
CPX_CALLBACK_INFO_BEST_INTEGER = _amplpy_cplex_swig.CPX_CALLBACK_INFO_BEST_INTEGER
CPX_CALLBACK_INFO_BEST_REMAINING = _amplpy_cplex_swig.CPX_CALLBACK_INFO_BEST_REMAINING
CPX_CALLBACK_INFO_NODE_COUNT = _amplpy_cplex_swig.CPX_CALLBACK_INFO_NODE_COUNT
CPX_CALLBACK_INFO_NODES_LEFT = _amplpy_cplex_swig.CPX_CALLBACK_INFO_NODES_LEFT
CPX_CALLBACK_INFO_MIP_ITERATIONS = _amplpy_cplex_swig.CPX_CALLBACK_INFO_MIP_ITERATIONS
CPX_CALLBACK_INFO_CUTOFF = _amplpy_cplex_swig.CPX_CALLBACK_INFO_CUTOFF
CPX_CALLBACK_INFO_CLIQUE_COUNT = _amplpy_cplex_swig.CPX_CALLBACK_INFO_CLIQUE_COUNT
CPX_CALLBACK_INFO_COVER_COUNT = _amplpy_cplex_swig.CPX_CALLBACK_INFO_COVER_COUNT
CPX_CALLBACK_INFO_MIP_FEAS = _amplpy_cplex_swig.CPX_CALLBACK_INFO_MIP_FEAS
CPX_CALLBACK_INFO_FLOWCOVER_COUNT = _amplpy_cplex_swig.CPX_CALLBACK_INFO_FLOWCOVER_COUNT
CPX_CALLBACK_INFO_GUBCOVER_COUNT = _amplpy_cplex_swig.CPX_CALLBACK_INFO_GUBCOVER_COUNT
CPX_CALLBACK_INFO_IMPLBD_COUNT = _amplpy_cplex_swig.CPX_CALLBACK_INFO_IMPLBD_COUNT
CPX_CALLBACK_INFO_PROBE_PHASE = _amplpy_cplex_swig.CPX_CALLBACK_INFO_PROBE_PHASE
CPX_CALLBACK_INFO_PROBE_PROGRESS = _amplpy_cplex_swig.CPX_CALLBACK_INFO_PROBE_PROGRESS
CPX_CALLBACK_INFO_FRACCUT_COUNT = _amplpy_cplex_swig.CPX_CALLBACK_INFO_FRACCUT_COUNT
CPX_CALLBACK_INFO_FRACCUT_PROGRESS = _amplpy_cplex_swig.CPX_CALLBACK_INFO_FRACCUT_PROGRESS
CPX_CALLBACK_INFO_DISJCUT_COUNT = _amplpy_cplex_swig.CPX_CALLBACK_INFO_DISJCUT_COUNT
CPX_CALLBACK_INFO_DISJCUT_PROGRESS = _amplpy_cplex_swig.CPX_CALLBACK_INFO_DISJCUT_PROGRESS
CPX_CALLBACK_INFO_FLOWPATH_COUNT = _amplpy_cplex_swig.CPX_CALLBACK_INFO_FLOWPATH_COUNT
CPX_CALLBACK_INFO_MIRCUT_COUNT = _amplpy_cplex_swig.CPX_CALLBACK_INFO_MIRCUT_COUNT
CPX_CALLBACK_INFO_FLOWMIR_PROGRESS = _amplpy_cplex_swig.CPX_CALLBACK_INFO_FLOWMIR_PROGRESS
CPX_CALLBACK_INFO_ZEROHALFCUT_COUNT = _amplpy_cplex_swig.CPX_CALLBACK_INFO_ZEROHALFCUT_COUNT
CPX_CALLBACK_INFO_MY_THREAD_NUM = _amplpy_cplex_swig.CPX_CALLBACK_INFO_MY_THREAD_NUM
CPX_CALLBACK_INFO_USER_THREADS = _amplpy_cplex_swig.CPX_CALLBACK_INFO_USER_THREADS
CPX_CALLBACK_INFO_MIP_REL_GAP = _amplpy_cplex_swig.CPX_CALLBACK_INFO_MIP_REL_GAP
CPX_CALLBACK_INFO_MCFCUT_COUNT = _amplpy_cplex_swig.CPX_CALLBACK_INFO_MCFCUT_COUNT
CPX_CALLBACK_INFO_KAPPA_STABLE = _amplpy_cplex_swig.CPX_CALLBACK_INFO_KAPPA_STABLE
CPX_CALLBACK_INFO_KAPPA_SUSPICIOUS = _amplpy_cplex_swig.CPX_CALLBACK_INFO_KAPPA_SUSPICIOUS
CPX_CALLBACK_INFO_KAPPA_UNSTABLE = _amplpy_cplex_swig.CPX_CALLBACK_INFO_KAPPA_UNSTABLE
CPX_CALLBACK_INFO_KAPPA_ILLPOSED = _amplpy_cplex_swig.CPX_CALLBACK_INFO_KAPPA_ILLPOSED
CPX_CALLBACK_INFO_KAPPA_MAX = _amplpy_cplex_swig.CPX_CALLBACK_INFO_KAPPA_MAX
CPX_CALLBACK_INFO_KAPPA_ATTENTION = _amplpy_cplex_swig.CPX_CALLBACK_INFO_KAPPA_ATTENTION
CPX_CALLBACK_INFO_LANDPCUT_COUNT = _amplpy_cplex_swig.CPX_CALLBACK_INFO_LANDPCUT_COUNT
CPX_CALLBACK_INFO_USERCUT_COUNT = _amplpy_cplex_swig.CPX_CALLBACK_INFO_USERCUT_COUNT
CPX_CALLBACK_INFO_TABLECUT_COUNT = _amplpy_cplex_swig.CPX_CALLBACK_INFO_TABLECUT_COUNT
CPX_CALLBACK_INFO_SOLNPOOLCUT_COUNT = _amplpy_cplex_swig.CPX_CALLBACK_INFO_SOLNPOOLCUT_COUNT
CPX_CALLBACK_INFO_BENDERS_COUNT = _amplpy_cplex_swig.CPX_CALLBACK_INFO_BENDERS_COUNT
CPX_CALLBACK_INFO_NODE_COUNT_LONG = _amplpy_cplex_swig.CPX_CALLBACK_INFO_NODE_COUNT_LONG
CPX_CALLBACK_INFO_NODES_LEFT_LONG = _amplpy_cplex_swig.CPX_CALLBACK_INFO_NODES_LEFT_LONG
CPX_CALLBACK_INFO_MIP_ITERATIONS_LONG = _amplpy_cplex_swig.CPX_CALLBACK_INFO_MIP_ITERATIONS_LONG
CPX_CALLBACK_INFO_LAZY_SOURCE = _amplpy_cplex_swig.CPX_CALLBACK_INFO_LAZY_SOURCE
CPX_CALLBACK_INFO_NODE_SIINF = _amplpy_cplex_swig.CPX_CALLBACK_INFO_NODE_SIINF
CPX_CALLBACK_INFO_NODE_NIINF = _amplpy_cplex_swig.CPX_CALLBACK_INFO_NODE_NIINF
CPX_CALLBACK_INFO_NODE_ESTIMATE = _amplpy_cplex_swig.CPX_CALLBACK_INFO_NODE_ESTIMATE
CPX_CALLBACK_INFO_NODE_DEPTH = _amplpy_cplex_swig.CPX_CALLBACK_INFO_NODE_DEPTH
CPX_CALLBACK_INFO_NODE_OBJVAL = _amplpy_cplex_swig.CPX_CALLBACK_INFO_NODE_OBJVAL
CPX_CALLBACK_INFO_NODE_TYPE = _amplpy_cplex_swig.CPX_CALLBACK_INFO_NODE_TYPE
CPX_CALLBACK_INFO_NODE_VAR = _amplpy_cplex_swig.CPX_CALLBACK_INFO_NODE_VAR
CPX_CALLBACK_INFO_NODE_SOS = _amplpy_cplex_swig.CPX_CALLBACK_INFO_NODE_SOS
CPX_CALLBACK_INFO_NODE_SEQNUM = _amplpy_cplex_swig.CPX_CALLBACK_INFO_NODE_SEQNUM
CPX_CALLBACK_INFO_NODE_USERHANDLE = _amplpy_cplex_swig.CPX_CALLBACK_INFO_NODE_USERHANDLE
CPX_CALLBACK_INFO_NODE_NODENUM = _amplpy_cplex_swig.CPX_CALLBACK_INFO_NODE_NODENUM
CPX_CALLBACK_INFO_NODE_SEQNUM_LONG = _amplpy_cplex_swig.CPX_CALLBACK_INFO_NODE_SEQNUM_LONG
CPX_CALLBACK_INFO_NODE_NODENUM_LONG = _amplpy_cplex_swig.CPX_CALLBACK_INFO_NODE_NODENUM_LONG
CPX_CALLBACK_INFO_NODE_DEPTH_LONG = _amplpy_cplex_swig.CPX_CALLBACK_INFO_NODE_DEPTH_LONG
CPX_CALLBACK_INFO_SOS_TYPE = _amplpy_cplex_swig.CPX_CALLBACK_INFO_SOS_TYPE
CPX_CALLBACK_INFO_SOS_SIZE = _amplpy_cplex_swig.CPX_CALLBACK_INFO_SOS_SIZE
CPX_CALLBACK_INFO_SOS_IS_FEASIBLE = _amplpy_cplex_swig.CPX_CALLBACK_INFO_SOS_IS_FEASIBLE
CPX_CALLBACK_INFO_SOS_MEMBER_INDEX = _amplpy_cplex_swig.CPX_CALLBACK_INFO_SOS_MEMBER_INDEX
CPX_CALLBACK_INFO_SOS_MEMBER_REFVAL = _amplpy_cplex_swig.CPX_CALLBACK_INFO_SOS_MEMBER_REFVAL
CPX_CALLBACK_INFO_SOS_NUM = _amplpy_cplex_swig.CPX_CALLBACK_INFO_SOS_NUM
CPX_CALLBACK_INFO_IC_NUM = _amplpy_cplex_swig.CPX_CALLBACK_INFO_IC_NUM
CPX_CALLBACK_INFO_IC_IMPLYING_VAR = _amplpy_cplex_swig.CPX_CALLBACK_INFO_IC_IMPLYING_VAR
CPX_CALLBACK_INFO_IC_IMPLIED_VAR = _amplpy_cplex_swig.CPX_CALLBACK_INFO_IC_IMPLIED_VAR
CPX_CALLBACK_INFO_IC_SENSE = _amplpy_cplex_swig.CPX_CALLBACK_INFO_IC_SENSE
CPX_CALLBACK_INFO_IC_COMPL = _amplpy_cplex_swig.CPX_CALLBACK_INFO_IC_COMPL
CPX_CALLBACK_INFO_IC_RHS = _amplpy_cplex_swig.CPX_CALLBACK_INFO_IC_RHS
CPX_CALLBACK_INFO_IC_IS_FEASIBLE = _amplpy_cplex_swig.CPX_CALLBACK_INFO_IC_IS_FEASIBLE
CPX_INCUMBENT_ID = _amplpy_cplex_swig.CPX_INCUMBENT_ID
CPX_RAMPUP_DISABLED = _amplpy_cplex_swig.CPX_RAMPUP_DISABLED
CPX_RAMPUP_AUTO = _amplpy_cplex_swig.CPX_RAMPUP_AUTO
CPX_RAMPUP_DYNAMIC = _amplpy_cplex_swig.CPX_RAMPUP_DYNAMIC
CPX_RAMPUP_INFINITE = _amplpy_cplex_swig.CPX_RAMPUP_INFINITE
CPX_CALLBACK_DEFAULT = _amplpy_cplex_swig.CPX_CALLBACK_DEFAULT
CPX_CALLBACK_FAIL = _amplpy_cplex_swig.CPX_CALLBACK_FAIL
CPX_CALLBACK_SET = _amplpy_cplex_swig.CPX_CALLBACK_SET
CPX_CALLBACK_ABORT_CUT_LOOP = _amplpy_cplex_swig.CPX_CALLBACK_ABORT_CUT_LOOP
CPX_USECUT_FORCE = _amplpy_cplex_swig.CPX_USECUT_FORCE
CPX_USECUT_PURGE = _amplpy_cplex_swig.CPX_USECUT_PURGE
CPX_USECUT_FILTER = _amplpy_cplex_swig.CPX_USECUT_FILTER
CPX_INTEGER_FEASIBLE = _amplpy_cplex_swig.CPX_INTEGER_FEASIBLE
CPX_INTEGER_INFEASIBLE = _amplpy_cplex_swig.CPX_INTEGER_INFEASIBLE
CPX_IMPLIED_INTEGER_FEASIBLE = _amplpy_cplex_swig.CPX_IMPLIED_INTEGER_FEASIBLE
CPX_CON_LOWER_BOUND = _amplpy_cplex_swig.CPX_CON_LOWER_BOUND
CPX_CON_UPPER_BOUND = _amplpy_cplex_swig.CPX_CON_UPPER_BOUND
CPX_CON_LINEAR = _amplpy_cplex_swig.CPX_CON_LINEAR
CPX_CON_QUADRATIC = _amplpy_cplex_swig.CPX_CON_QUADRATIC
CPX_CON_SOS = _amplpy_cplex_swig.CPX_CON_SOS
CPX_CON_INDICATOR = _amplpy_cplex_swig.CPX_CON_INDICATOR
CPX_CON_PWL = _amplpy_cplex_swig.CPX_CON_PWL
CPX_CON_ABS = _amplpy_cplex_swig.CPX_CON_ABS
CPX_CON_MINEXPR = _amplpy_cplex_swig.CPX_CON_MINEXPR
CPX_CON_MAXEXPR = _amplpy_cplex_swig.CPX_CON_MAXEXPR
CPX_CON_LAST_CONTYPE = _amplpy_cplex_swig.CPX_CON_LAST_CONTYPE
CPX_INDICATOR_IF = _amplpy_cplex_swig.CPX_INDICATOR_IF
CPX_INDICATOR_ONLYIF = _amplpy_cplex_swig.CPX_INDICATOR_ONLYIF
CPX_INDICATOR_IFANDONLYIF = _amplpy_cplex_swig.CPX_INDICATOR_IFANDONLYIF
CPXNET_NO_DISPLAY_OBJECTIVE = _amplpy_cplex_swig.CPXNET_NO_DISPLAY_OBJECTIVE
CPXNET_TRUE_OBJECTIVE = _amplpy_cplex_swig.CPXNET_TRUE_OBJECTIVE
CPXNET_PENALIZED_OBJECTIVE = _amplpy_cplex_swig.CPXNET_PENALIZED_OBJECTIVE
CPXNET_PRICE_AUTO = _amplpy_cplex_swig.CPXNET_PRICE_AUTO
CPXNET_PRICE_PARTIAL = _amplpy_cplex_swig.CPXNET_PRICE_PARTIAL
CPXNET_PRICE_MULT_PART = _amplpy_cplex_swig.CPXNET_PRICE_MULT_PART
CPXNET_PRICE_SORT_MULT_PART = _amplpy_cplex_swig.CPXNET_PRICE_SORT_MULT_PART
CPX_NETFIND_PURE = _amplpy_cplex_swig.CPX_NETFIND_PURE
CPX_NETFIND_REFLECT = _amplpy_cplex_swig.CPX_NETFIND_REFLECT
CPX_NETFIND_SCALE = _amplpy_cplex_swig.CPX_NETFIND_SCALE
CPX_QCPDUALS_NO = _amplpy_cplex_swig.CPX_QCPDUALS_NO
CPX_QCPDUALS_IFPOSSIBLE = _amplpy_cplex_swig.CPX_QCPDUALS_IFPOSSIBLE
CPX_QCPDUALS_FORCE = _amplpy_cplex_swig.CPX_QCPDUALS_FORCE
CPX_CPXAUTOCONSTANTS_H_H = _amplpy_cplex_swig.CPX_CPXAUTOCONSTANTS_H_H
CPX_BENDERS_ANNOTATION = _amplpy_cplex_swig.CPX_BENDERS_ANNOTATION
CPX_BENDERS_MASTERVALUE = _amplpy_cplex_swig.CPX_BENDERS_MASTERVALUE
CPX_BIGINT = _amplpy_cplex_swig.CPX_BIGINT
CPX_BIGLONG = _amplpy_cplex_swig.CPX_BIGLONG
CPX_CALLBACKCONTEXT_BRANCHING = _amplpy_cplex_swig.CPX_CALLBACKCONTEXT_BRANCHING
CPX_CALLBACKCONTEXT_CANDIDATE = _amplpy_cplex_swig.CPX_CALLBACKCONTEXT_CANDIDATE
CPX_CALLBACKCONTEXT_GLOBAL_PROGRESS = _amplpy_cplex_swig.CPX_CALLBACKCONTEXT_GLOBAL_PROGRESS
CPX_CALLBACKCONTEXT_LOCAL_PROGRESS = _amplpy_cplex_swig.CPX_CALLBACKCONTEXT_LOCAL_PROGRESS
CPX_CALLBACKCONTEXT_RELAXATION = _amplpy_cplex_swig.CPX_CALLBACKCONTEXT_RELAXATION
CPX_CALLBACKCONTEXT_THREAD_DOWN = _amplpy_cplex_swig.CPX_CALLBACKCONTEXT_THREAD_DOWN
CPX_CALLBACKCONTEXT_THREAD_UP = _amplpy_cplex_swig.CPX_CALLBACKCONTEXT_THREAD_UP
CPX_DUAL_OBJ = _amplpy_cplex_swig.CPX_DUAL_OBJ
CPX_EXACT_KAPPA = _amplpy_cplex_swig.CPX_EXACT_KAPPA
CPX_KAPPA = _amplpy_cplex_swig.CPX_KAPPA
CPX_KAPPA_ATTENTION = _amplpy_cplex_swig.CPX_KAPPA_ATTENTION
CPX_KAPPA_ILLPOSED = _amplpy_cplex_swig.CPX_KAPPA_ILLPOSED
CPX_KAPPA_MAX = _amplpy_cplex_swig.CPX_KAPPA_MAX
CPX_KAPPA_STABLE = _amplpy_cplex_swig.CPX_KAPPA_STABLE
CPX_KAPPA_SUSPICIOUS = _amplpy_cplex_swig.CPX_KAPPA_SUSPICIOUS
CPX_KAPPA_UNSTABLE = _amplpy_cplex_swig.CPX_KAPPA_UNSTABLE
CPX_LAZYCONSTRAINTCALLBACK_HEUR = _amplpy_cplex_swig.CPX_LAZYCONSTRAINTCALLBACK_HEUR
CPX_LAZYCONSTRAINTCALLBACK_MIPSTART = _amplpy_cplex_swig.CPX_LAZYCONSTRAINTCALLBACK_MIPSTART
CPX_LAZYCONSTRAINTCALLBACK_NODE = _amplpy_cplex_swig.CPX_LAZYCONSTRAINTCALLBACK_NODE
CPX_LAZYCONSTRAINTCALLBACK_USER = _amplpy_cplex_swig.CPX_LAZYCONSTRAINTCALLBACK_USER
CPX_MAX_COMP_SLACK = _amplpy_cplex_swig.CPX_MAX_COMP_SLACK
CPX_MAX_DUAL_INFEAS = _amplpy_cplex_swig.CPX_MAX_DUAL_INFEAS
CPX_MAX_DUAL_RESIDUAL = _amplpy_cplex_swig.CPX_MAX_DUAL_RESIDUAL
CPX_MAX_INDSLACK_INFEAS = _amplpy_cplex_swig.CPX_MAX_INDSLACK_INFEAS
CPX_MAX_INT_INFEAS = _amplpy_cplex_swig.CPX_MAX_INT_INFEAS
CPX_MAX_PI = _amplpy_cplex_swig.CPX_MAX_PI
CPX_MAX_PRIMAL_INFEAS = _amplpy_cplex_swig.CPX_MAX_PRIMAL_INFEAS
CPX_MAX_PRIMAL_RESIDUAL = _amplpy_cplex_swig.CPX_MAX_PRIMAL_RESIDUAL
CPX_MAX_PWLSLACK_INFEAS = _amplpy_cplex_swig.CPX_MAX_PWLSLACK_INFEAS
CPX_MAX_QCPRIMAL_RESIDUAL = _amplpy_cplex_swig.CPX_MAX_QCPRIMAL_RESIDUAL
CPX_MAX_QCSLACK = _amplpy_cplex_swig.CPX_MAX_QCSLACK
CPX_MAX_QCSLACK_INFEAS = _amplpy_cplex_swig.CPX_MAX_QCSLACK_INFEAS
CPX_MAX_RED_COST = _amplpy_cplex_swig.CPX_MAX_RED_COST
CPX_MAX_SCALED_DUAL_INFEAS = _amplpy_cplex_swig.CPX_MAX_SCALED_DUAL_INFEAS
CPX_MAX_SCALED_DUAL_RESIDUAL = _amplpy_cplex_swig.CPX_MAX_SCALED_DUAL_RESIDUAL
CPX_MAX_SCALED_PI = _amplpy_cplex_swig.CPX_MAX_SCALED_PI
CPX_MAX_SCALED_PRIMAL_INFEAS = _amplpy_cplex_swig.CPX_MAX_SCALED_PRIMAL_INFEAS
CPX_MAX_SCALED_PRIMAL_RESIDUAL = _amplpy_cplex_swig.CPX_MAX_SCALED_PRIMAL_RESIDUAL
CPX_MAX_SCALED_RED_COST = _amplpy_cplex_swig.CPX_MAX_SCALED_RED_COST
CPX_MAX_SCALED_SLACK = _amplpy_cplex_swig.CPX_MAX_SCALED_SLACK
CPX_MAX_SCALED_X = _amplpy_cplex_swig.CPX_MAX_SCALED_X
CPX_MAX_SLACK = _amplpy_cplex_swig.CPX_MAX_SLACK
CPX_MAX_X = _amplpy_cplex_swig.CPX_MAX_X
CPX_MULTIOBJ_BARITCNT = _amplpy_cplex_swig.CPX_MULTIOBJ_BARITCNT
CPX_MULTIOBJ_BESTOBJVAL = _amplpy_cplex_swig.CPX_MULTIOBJ_BESTOBJVAL
CPX_MULTIOBJ_BLEND = _amplpy_cplex_swig.CPX_MULTIOBJ_BLEND
CPX_MULTIOBJ_DEGCNT = _amplpy_cplex_swig.CPX_MULTIOBJ_DEGCNT
CPX_MULTIOBJ_DETTIME = _amplpy_cplex_swig.CPX_MULTIOBJ_DETTIME
CPX_MULTIOBJ_DEXCH = _amplpy_cplex_swig.CPX_MULTIOBJ_DEXCH
CPX_MULTIOBJ_DPUSH = _amplpy_cplex_swig.CPX_MULTIOBJ_DPUSH
CPX_MULTIOBJ_ERROR = _amplpy_cplex_swig.CPX_MULTIOBJ_ERROR
CPX_MULTIOBJ_ITCNT = _amplpy_cplex_swig.CPX_MULTIOBJ_ITCNT
CPX_MULTIOBJ_METHOD = _amplpy_cplex_swig.CPX_MULTIOBJ_METHOD
CPX_MULTIOBJ_NODECNT = _amplpy_cplex_swig.CPX_MULTIOBJ_NODECNT
CPX_MULTIOBJ_NODELEFTCNT = _amplpy_cplex_swig.CPX_MULTIOBJ_NODELEFTCNT
CPX_MULTIOBJ_OBJVAL = _amplpy_cplex_swig.CPX_MULTIOBJ_OBJVAL
CPX_MULTIOBJ_PEXCH = _amplpy_cplex_swig.CPX_MULTIOBJ_PEXCH
CPX_MULTIOBJ_PHASE1CNT = _amplpy_cplex_swig.CPX_MULTIOBJ_PHASE1CNT
CPX_MULTIOBJ_PPUSH = _amplpy_cplex_swig.CPX_MULTIOBJ_PPUSH
CPX_MULTIOBJ_PRIORITY = _amplpy_cplex_swig.CPX_MULTIOBJ_PRIORITY
CPX_MULTIOBJ_SIFTITCNT = _amplpy_cplex_swig.CPX_MULTIOBJ_SIFTITCNT
CPX_MULTIOBJ_SIFTPHASE1CNT = _amplpy_cplex_swig.CPX_MULTIOBJ_SIFTPHASE1CNT
CPX_MULTIOBJ_STATUS = _amplpy_cplex_swig.CPX_MULTIOBJ_STATUS
CPX_MULTIOBJ_TIME = _amplpy_cplex_swig.CPX_MULTIOBJ_TIME
CPX_NO_PRIORITY_CHANGE = _amplpy_cplex_swig.CPX_NO_PRIORITY_CHANGE
CPX_OBJ_GAP = _amplpy_cplex_swig.CPX_OBJ_GAP
CPX_PRIMAL_OBJ = _amplpy_cplex_swig.CPX_PRIMAL_OBJ
CPX_RELAXATION_FLAG_NOSOLVE = _amplpy_cplex_swig.CPX_RELAXATION_FLAG_NOSOLVE
CPX_SOLNPOOL_DIV = _amplpy_cplex_swig.CPX_SOLNPOOL_DIV
CPX_SOLNPOOL_FIFO = _amplpy_cplex_swig.CPX_SOLNPOOL_FIFO
CPX_SOLNPOOL_FILTER_DIVERSITY = _amplpy_cplex_swig.CPX_SOLNPOOL_FILTER_DIVERSITY
CPX_SOLNPOOL_FILTER_RANGE = _amplpy_cplex_swig.CPX_SOLNPOOL_FILTER_RANGE
CPX_SOLNPOOL_OBJ = _amplpy_cplex_swig.CPX_SOLNPOOL_OBJ
CPX_STAT_ABORT_DETTIME_LIM = _amplpy_cplex_swig.CPX_STAT_ABORT_DETTIME_LIM
CPX_STAT_ABORT_DUAL_OBJ_LIM = _amplpy_cplex_swig.CPX_STAT_ABORT_DUAL_OBJ_LIM
CPX_STAT_ABORT_IT_LIM = _amplpy_cplex_swig.CPX_STAT_ABORT_IT_LIM
CPX_STAT_ABORT_OBJ_LIM = _amplpy_cplex_swig.CPX_STAT_ABORT_OBJ_LIM
CPX_STAT_ABORT_PRIM_OBJ_LIM = _amplpy_cplex_swig.CPX_STAT_ABORT_PRIM_OBJ_LIM
CPX_STAT_ABORT_TIME_LIM = _amplpy_cplex_swig.CPX_STAT_ABORT_TIME_LIM
CPX_STAT_ABORT_USER = _amplpy_cplex_swig.CPX_STAT_ABORT_USER
CPX_STAT_BENDERS_NUM_BEST = _amplpy_cplex_swig.CPX_STAT_BENDERS_NUM_BEST
CPX_STAT_CONFLICT_ABORT_CONTRADICTION = _amplpy_cplex_swig.CPX_STAT_CONFLICT_ABORT_CONTRADICTION
CPX_STAT_CONFLICT_ABORT_DETTIME_LIM = _amplpy_cplex_swig.CPX_STAT_CONFLICT_ABORT_DETTIME_LIM
CPX_STAT_CONFLICT_ABORT_IT_LIM = _amplpy_cplex_swig.CPX_STAT_CONFLICT_ABORT_IT_LIM
CPX_STAT_CONFLICT_ABORT_MEM_LIM = _amplpy_cplex_swig.CPX_STAT_CONFLICT_ABORT_MEM_LIM
CPX_STAT_CONFLICT_ABORT_NODE_LIM = _amplpy_cplex_swig.CPX_STAT_CONFLICT_ABORT_NODE_LIM
CPX_STAT_CONFLICT_ABORT_OBJ_LIM = _amplpy_cplex_swig.CPX_STAT_CONFLICT_ABORT_OBJ_LIM
CPX_STAT_CONFLICT_ABORT_TIME_LIM = _amplpy_cplex_swig.CPX_STAT_CONFLICT_ABORT_TIME_LIM
CPX_STAT_CONFLICT_ABORT_USER = _amplpy_cplex_swig.CPX_STAT_CONFLICT_ABORT_USER
CPX_STAT_CONFLICT_FEASIBLE = _amplpy_cplex_swig.CPX_STAT_CONFLICT_FEASIBLE
CPX_STAT_CONFLICT_MINIMAL = _amplpy_cplex_swig.CPX_STAT_CONFLICT_MINIMAL
CPX_STAT_FEASIBLE = _amplpy_cplex_swig.CPX_STAT_FEASIBLE
CPX_STAT_FEASIBLE_RELAXED_INF = _amplpy_cplex_swig.CPX_STAT_FEASIBLE_RELAXED_INF
CPX_STAT_FEASIBLE_RELAXED_QUAD = _amplpy_cplex_swig.CPX_STAT_FEASIBLE_RELAXED_QUAD
CPX_STAT_FEASIBLE_RELAXED_SUM = _amplpy_cplex_swig.CPX_STAT_FEASIBLE_RELAXED_SUM
CPX_STAT_FIRSTORDER = _amplpy_cplex_swig.CPX_STAT_FIRSTORDER
CPX_STAT_INFEASIBLE = _amplpy_cplex_swig.CPX_STAT_INFEASIBLE
CPX_STAT_INForUNBD = _amplpy_cplex_swig.CPX_STAT_INForUNBD
CPX_STAT_MULTIOBJ_INFEASIBLE = _amplpy_cplex_swig.CPX_STAT_MULTIOBJ_INFEASIBLE
CPX_STAT_MULTIOBJ_INForUNBD = _amplpy_cplex_swig.CPX_STAT_MULTIOBJ_INForUNBD
CPX_STAT_MULTIOBJ_NON_OPTIMAL = _amplpy_cplex_swig.CPX_STAT_MULTIOBJ_NON_OPTIMAL
CPX_STAT_MULTIOBJ_OPTIMAL = _amplpy_cplex_swig.CPX_STAT_MULTIOBJ_OPTIMAL
CPX_STAT_MULTIOBJ_STOPPED = _amplpy_cplex_swig.CPX_STAT_MULTIOBJ_STOPPED
CPX_STAT_MULTIOBJ_UNBOUNDED = _amplpy_cplex_swig.CPX_STAT_MULTIOBJ_UNBOUNDED
CPX_STAT_NUM_BEST = _amplpy_cplex_swig.CPX_STAT_NUM_BEST
CPX_STAT_OPTIMAL = _amplpy_cplex_swig.CPX_STAT_OPTIMAL
CPX_STAT_OPTIMAL_FACE_UNBOUNDED = _amplpy_cplex_swig.CPX_STAT_OPTIMAL_FACE_UNBOUNDED
CPX_STAT_OPTIMAL_INFEAS = _amplpy_cplex_swig.CPX_STAT_OPTIMAL_INFEAS
CPX_STAT_OPTIMAL_RELAXED_INF = _amplpy_cplex_swig.CPX_STAT_OPTIMAL_RELAXED_INF
CPX_STAT_OPTIMAL_RELAXED_QUAD = _amplpy_cplex_swig.CPX_STAT_OPTIMAL_RELAXED_QUAD
CPX_STAT_OPTIMAL_RELAXED_SUM = _amplpy_cplex_swig.CPX_STAT_OPTIMAL_RELAXED_SUM
CPX_STAT_UNBOUNDED = _amplpy_cplex_swig.CPX_STAT_UNBOUNDED
CPX_SUM_COMP_SLACK = _amplpy_cplex_swig.CPX_SUM_COMP_SLACK
CPX_SUM_DUAL_INFEAS = _amplpy_cplex_swig.CPX_SUM_DUAL_INFEAS
CPX_SUM_DUAL_RESIDUAL = _amplpy_cplex_swig.CPX_SUM_DUAL_RESIDUAL
CPX_SUM_INDSLACK_INFEAS = _amplpy_cplex_swig.CPX_SUM_INDSLACK_INFEAS
CPX_SUM_INT_INFEAS = _amplpy_cplex_swig.CPX_SUM_INT_INFEAS
CPX_SUM_PI = _amplpy_cplex_swig.CPX_SUM_PI
CPX_SUM_PRIMAL_INFEAS = _amplpy_cplex_swig.CPX_SUM_PRIMAL_INFEAS
CPX_SUM_PRIMAL_RESIDUAL = _amplpy_cplex_swig.CPX_SUM_PRIMAL_RESIDUAL
CPX_SUM_PWLSLACK_INFEAS = _amplpy_cplex_swig.CPX_SUM_PWLSLACK_INFEAS
CPX_SUM_QCPRIMAL_RESIDUAL = _amplpy_cplex_swig.CPX_SUM_QCPRIMAL_RESIDUAL
CPX_SUM_QCSLACK = _amplpy_cplex_swig.CPX_SUM_QCSLACK
CPX_SUM_QCSLACK_INFEAS = _amplpy_cplex_swig.CPX_SUM_QCSLACK_INFEAS
CPX_SUM_RED_COST = _amplpy_cplex_swig.CPX_SUM_RED_COST
CPX_SUM_SCALED_DUAL_INFEAS = _amplpy_cplex_swig.CPX_SUM_SCALED_DUAL_INFEAS
CPX_SUM_SCALED_DUAL_RESIDUAL = _amplpy_cplex_swig.CPX_SUM_SCALED_DUAL_RESIDUAL
CPX_SUM_SCALED_PI = _amplpy_cplex_swig.CPX_SUM_SCALED_PI
CPX_SUM_SCALED_PRIMAL_INFEAS = _amplpy_cplex_swig.CPX_SUM_SCALED_PRIMAL_INFEAS
CPX_SUM_SCALED_PRIMAL_RESIDUAL = _amplpy_cplex_swig.CPX_SUM_SCALED_PRIMAL_RESIDUAL
CPX_SUM_SCALED_RED_COST = _amplpy_cplex_swig.CPX_SUM_SCALED_RED_COST
CPX_SUM_SCALED_SLACK = _amplpy_cplex_swig.CPX_SUM_SCALED_SLACK
CPX_SUM_SCALED_X = _amplpy_cplex_swig.CPX_SUM_SCALED_X
CPX_SUM_SLACK = _amplpy_cplex_swig.CPX_SUM_SLACK
CPX_SUM_X = _amplpy_cplex_swig.CPX_SUM_X
CPXERR_ABORT_STRONGBRANCH = _amplpy_cplex_swig.CPXERR_ABORT_STRONGBRANCH
CPXERR_ADJ_SIGN_QUAD = _amplpy_cplex_swig.CPXERR_ADJ_SIGN_QUAD
CPXERR_ADJ_SIGN_SENSE = _amplpy_cplex_swig.CPXERR_ADJ_SIGN_SENSE
CPXERR_ADJ_SIGNS = _amplpy_cplex_swig.CPXERR_ADJ_SIGNS
CPXERR_ARC_INDEX_RANGE = _amplpy_cplex_swig.CPXERR_ARC_INDEX_RANGE
CPXERR_ARRAY_BAD_SOS_TYPE = _amplpy_cplex_swig.CPXERR_ARRAY_BAD_SOS_TYPE
CPXERR_ARRAY_NOT_ASCENDING = _amplpy_cplex_swig.CPXERR_ARRAY_NOT_ASCENDING
CPXERR_ARRAY_TOO_LONG = _amplpy_cplex_swig.CPXERR_ARRAY_TOO_LONG
CPXERR_BAD_ARGUMENT = _amplpy_cplex_swig.CPXERR_BAD_ARGUMENT
CPXERR_BAD_BOUND_SENSE = _amplpy_cplex_swig.CPXERR_BAD_BOUND_SENSE
CPXERR_BAD_BOUND_TYPE = _amplpy_cplex_swig.CPXERR_BAD_BOUND_TYPE
CPXERR_BAD_CHAR = _amplpy_cplex_swig.CPXERR_BAD_CHAR
CPXERR_BAD_CTYPE = _amplpy_cplex_swig.CPXERR_BAD_CTYPE
CPXERR_BAD_DECOMPOSITION = _amplpy_cplex_swig.CPXERR_BAD_DECOMPOSITION
CPXERR_BAD_DIRECTION = _amplpy_cplex_swig.CPXERR_BAD_DIRECTION
CPXERR_BAD_EXPO_RANGE = _amplpy_cplex_swig.CPXERR_BAD_EXPO_RANGE
CPXERR_BAD_EXPONENT = _amplpy_cplex_swig.CPXERR_BAD_EXPONENT
CPXERR_BAD_FILETYPE = _amplpy_cplex_swig.CPXERR_BAD_FILETYPE
CPXERR_BAD_ID = _amplpy_cplex_swig.CPXERR_BAD_ID
CPXERR_BAD_INDCONSTR = _amplpy_cplex_swig.CPXERR_BAD_INDCONSTR
CPXERR_BAD_INDICATOR = _amplpy_cplex_swig.CPXERR_BAD_INDICATOR
CPXERR_BAD_INDTYPE = _amplpy_cplex_swig.CPXERR_BAD_INDTYPE
CPXERR_BAD_LAZY_UCUT = _amplpy_cplex_swig.CPXERR_BAD_LAZY_UCUT
CPXERR_BAD_LUB = _amplpy_cplex_swig.CPXERR_BAD_LUB
CPXERR_BAD_METHOD = _amplpy_cplex_swig.CPXERR_BAD_METHOD
CPXERR_BAD_MULTIOBJ_ATTR = _amplpy_cplex_swig.CPXERR_BAD_MULTIOBJ_ATTR
CPXERR_BAD_NUMBER = _amplpy_cplex_swig.CPXERR_BAD_NUMBER
CPXERR_BAD_OBJ_SENSE = _amplpy_cplex_swig.CPXERR_BAD_OBJ_SENSE
CPXERR_BAD_PARAM_NAME = _amplpy_cplex_swig.CPXERR_BAD_PARAM_NAME
CPXERR_BAD_PARAM_NUM = _amplpy_cplex_swig.CPXERR_BAD_PARAM_NUM
CPXERR_BAD_PIVOT = _amplpy_cplex_swig.CPXERR_BAD_PIVOT
CPXERR_BAD_PRIORITY = _amplpy_cplex_swig.CPXERR_BAD_PRIORITY
CPXERR_BAD_PROB_TYPE = _amplpy_cplex_swig.CPXERR_BAD_PROB_TYPE
CPXERR_BAD_ROW_ID = _amplpy_cplex_swig.CPXERR_BAD_ROW_ID
CPXERR_BAD_SECTION_BOUNDS = _amplpy_cplex_swig.CPXERR_BAD_SECTION_BOUNDS
CPXERR_BAD_SECTION_ENDATA = _amplpy_cplex_swig.CPXERR_BAD_SECTION_ENDATA
CPXERR_BAD_SECTION_QMATRIX = _amplpy_cplex_swig.CPXERR_BAD_SECTION_QMATRIX
CPXERR_BAD_SENSE = _amplpy_cplex_swig.CPXERR_BAD_SENSE
CPXERR_BAD_SOS_TYPE = _amplpy_cplex_swig.CPXERR_BAD_SOS_TYPE
CPXERR_BAD_STATUS = _amplpy_cplex_swig.CPXERR_BAD_STATUS
CPXERR_BAS_FILE_SHORT = _amplpy_cplex_swig.CPXERR_BAS_FILE_SHORT
CPXERR_BAS_FILE_SIZE = _amplpy_cplex_swig.CPXERR_BAS_FILE_SIZE
CPXERR_BENDERS_MASTER_SOLVE = _amplpy_cplex_swig.CPXERR_BENDERS_MASTER_SOLVE
CPXERR_CALLBACK = _amplpy_cplex_swig.CPXERR_CALLBACK
CPXERR_CALLBACK_INCONSISTENT = _amplpy_cplex_swig.CPXERR_CALLBACK_INCONSISTENT
CPXERR_CAND_NOT_POINT = _amplpy_cplex_swig.CPXERR_CAND_NOT_POINT
CPXERR_CAND_NOT_RAY = _amplpy_cplex_swig.CPXERR_CAND_NOT_RAY
CPXERR_CNTRL_IN_NAME = _amplpy_cplex_swig.CPXERR_CNTRL_IN_NAME
CPXERR_COL_INDEX_RANGE = _amplpy_cplex_swig.CPXERR_COL_INDEX_RANGE
CPXERR_COL_REPEAT_PRINT = _amplpy_cplex_swig.CPXERR_COL_REPEAT_PRINT
CPXERR_COL_REPEATS = _amplpy_cplex_swig.CPXERR_COL_REPEATS
CPXERR_COL_ROW_REPEATS = _amplpy_cplex_swig.CPXERR_COL_ROW_REPEATS
CPXERR_COL_UNKNOWN = _amplpy_cplex_swig.CPXERR_COL_UNKNOWN
CPXERR_CONFLICT_UNSTABLE = _amplpy_cplex_swig.CPXERR_CONFLICT_UNSTABLE
CPXERR_COUNT_OVERLAP = _amplpy_cplex_swig.CPXERR_COUNT_OVERLAP
CPXERR_COUNT_RANGE = _amplpy_cplex_swig.CPXERR_COUNT_RANGE
CPXERR_CPUBINDING_FAILURE = _amplpy_cplex_swig.CPXERR_CPUBINDING_FAILURE
CPXERR_DBL_MAX = _amplpy_cplex_swig.CPXERR_DBL_MAX
CPXERR_DECOMPRESSION = _amplpy_cplex_swig.CPXERR_DECOMPRESSION
CPXERR_DETTILIM_STRONGBRANCH = _amplpy_cplex_swig.CPXERR_DETTILIM_STRONGBRANCH
CPXERR_DUP_ENTRY = _amplpy_cplex_swig.CPXERR_DUP_ENTRY
CPXERR_DYNFUNC = _amplpy_cplex_swig.CPXERR_DYNFUNC
CPXERR_DYNLOAD = _amplpy_cplex_swig.CPXERR_DYNLOAD
CPXERR_ENCODING_CONVERSION = _amplpy_cplex_swig.CPXERR_ENCODING_CONVERSION
CPXERR_EXTRA_BV_BOUND = _amplpy_cplex_swig.CPXERR_EXTRA_BV_BOUND
CPXERR_EXTRA_FR_BOUND = _amplpy_cplex_swig.CPXERR_EXTRA_FR_BOUND
CPXERR_EXTRA_FX_BOUND = _amplpy_cplex_swig.CPXERR_EXTRA_FX_BOUND
CPXERR_EXTRA_INTEND = _amplpy_cplex_swig.CPXERR_EXTRA_INTEND
CPXERR_EXTRA_INTORG = _amplpy_cplex_swig.CPXERR_EXTRA_INTORG
CPXERR_EXTRA_SOSEND = _amplpy_cplex_swig.CPXERR_EXTRA_SOSEND
CPXERR_EXTRA_SOSORG = _amplpy_cplex_swig.CPXERR_EXTRA_SOSORG
CPXERR_FAIL_OPEN_READ = _amplpy_cplex_swig.CPXERR_FAIL_OPEN_READ
CPXERR_FAIL_OPEN_WRITE = _amplpy_cplex_swig.CPXERR_FAIL_OPEN_WRITE
CPXERR_FILE_ENTRIES = _amplpy_cplex_swig.CPXERR_FILE_ENTRIES
CPXERR_FILE_FORMAT = _amplpy_cplex_swig.CPXERR_FILE_FORMAT
CPXERR_FILE_IO = _amplpy_cplex_swig.CPXERR_FILE_IO
CPXERR_FILTER_VARIABLE_TYPE = _amplpy_cplex_swig.CPXERR_FILTER_VARIABLE_TYPE
CPXERR_ILL_DEFINED_PWL = _amplpy_cplex_swig.CPXERR_ILL_DEFINED_PWL
CPXERR_IN_INFOCALLBACK = _amplpy_cplex_swig.CPXERR_IN_INFOCALLBACK
CPXERR_INDEX_NOT_BASIC = _amplpy_cplex_swig.CPXERR_INDEX_NOT_BASIC
CPXERR_INDEX_RANGE = _amplpy_cplex_swig.CPXERR_INDEX_RANGE
CPXERR_INDEX_RANGE_HIGH = _amplpy_cplex_swig.CPXERR_INDEX_RANGE_HIGH
CPXERR_INDEX_RANGE_LOW = _amplpy_cplex_swig.CPXERR_INDEX_RANGE_LOW
CPXERR_INT_TOO_BIG = _amplpy_cplex_swig.CPXERR_INT_TOO_BIG
CPXERR_INT_TOO_BIG_INPUT = _amplpy_cplex_swig.CPXERR_INT_TOO_BIG_INPUT
CPXERR_INVALID_NUMBER = _amplpy_cplex_swig.CPXERR_INVALID_NUMBER
CPXERR_LIMITS_TOO_BIG = _amplpy_cplex_swig.CPXERR_LIMITS_TOO_BIG
CPXERR_LINE_TOO_LONG = _amplpy_cplex_swig.CPXERR_LINE_TOO_LONG
CPXERR_LO_BOUND_REPEATS = _amplpy_cplex_swig.CPXERR_LO_BOUND_REPEATS
CPXERR_LOCK_CREATE = _amplpy_cplex_swig.CPXERR_LOCK_CREATE
CPXERR_LP_NOT_IN_ENVIRONMENT = _amplpy_cplex_swig.CPXERR_LP_NOT_IN_ENVIRONMENT
CPXERR_LP_PARSE = _amplpy_cplex_swig.CPXERR_LP_PARSE
CPXERR_MASTER_SOLVE = _amplpy_cplex_swig.CPXERR_MASTER_SOLVE
CPXERR_MIPSEARCH_WITH_CALLBACKS = _amplpy_cplex_swig.CPXERR_MIPSEARCH_WITH_CALLBACKS
CPXERR_MISS_SOS_TYPE = _amplpy_cplex_swig.CPXERR_MISS_SOS_TYPE
CPXERR_MSG_NO_CHANNEL = _amplpy_cplex_swig.CPXERR_MSG_NO_CHANNEL
CPXERR_MSG_NO_FILEPTR = _amplpy_cplex_swig.CPXERR_MSG_NO_FILEPTR
CPXERR_MSG_NO_FUNCTION = _amplpy_cplex_swig.CPXERR_MSG_NO_FUNCTION
CPXERR_MULTIOBJ_SUBPROB_SOLVE = _amplpy_cplex_swig.CPXERR_MULTIOBJ_SUBPROB_SOLVE
CPXERR_MULTIPLE_PROBS_IN_REMOTE_ENVIRONMENT = _amplpy_cplex_swig.CPXERR_MULTIPLE_PROBS_IN_REMOTE_ENVIRONMENT
CPXERR_NAME_CREATION = _amplpy_cplex_swig.CPXERR_NAME_CREATION
CPXERR_NAME_NOT_FOUND = _amplpy_cplex_swig.CPXERR_NAME_NOT_FOUND
CPXERR_NAME_TOO_LONG = _amplpy_cplex_swig.CPXERR_NAME_TOO_LONG
CPXERR_NAN = _amplpy_cplex_swig.CPXERR_NAN
CPXERR_NEED_OPT_SOLN = _amplpy_cplex_swig.CPXERR_NEED_OPT_SOLN
CPXERR_NEGATIVE_SURPLUS = _amplpy_cplex_swig.CPXERR_NEGATIVE_SURPLUS
CPXERR_NET_DATA = _amplpy_cplex_swig.CPXERR_NET_DATA
CPXERR_NET_FILE_SHORT = _amplpy_cplex_swig.CPXERR_NET_FILE_SHORT
CPXERR_NO_BARRIER_SOLN = _amplpy_cplex_swig.CPXERR_NO_BARRIER_SOLN
CPXERR_NO_BASIC_SOLN = _amplpy_cplex_swig.CPXERR_NO_BASIC_SOLN
CPXERR_NO_BASIS = _amplpy_cplex_swig.CPXERR_NO_BASIS
CPXERR_NO_BOUND_SENSE = _amplpy_cplex_swig.CPXERR_NO_BOUND_SENSE
CPXERR_NO_BOUND_TYPE = _amplpy_cplex_swig.CPXERR_NO_BOUND_TYPE
CPXERR_NO_COLUMNS_SECTION = _amplpy_cplex_swig.CPXERR_NO_COLUMNS_SECTION
CPXERR_NO_CONFLICT = _amplpy_cplex_swig.CPXERR_NO_CONFLICT
CPXERR_NO_DECOMPOSITION = _amplpy_cplex_swig.CPXERR_NO_DECOMPOSITION
CPXERR_NO_DUAL_SOLN = _amplpy_cplex_swig.CPXERR_NO_DUAL_SOLN
CPXERR_NO_ENDATA = _amplpy_cplex_swig.CPXERR_NO_ENDATA
CPXERR_NO_ENVIRONMENT = _amplpy_cplex_swig.CPXERR_NO_ENVIRONMENT
CPXERR_NO_FILENAME = _amplpy_cplex_swig.CPXERR_NO_FILENAME
CPXERR_NO_ID = _amplpy_cplex_swig.CPXERR_NO_ID
CPXERR_NO_ID_FIRST = _amplpy_cplex_swig.CPXERR_NO_ID_FIRST
CPXERR_NO_INT_X = _amplpy_cplex_swig.CPXERR_NO_INT_X
CPXERR_NO_KAPPASTATS = _amplpy_cplex_swig.CPXERR_NO_KAPPASTATS
CPXERR_NO_LU_FACTOR = _amplpy_cplex_swig.CPXERR_NO_LU_FACTOR
CPXERR_NO_MEMORY = _amplpy_cplex_swig.CPXERR_NO_MEMORY
CPXERR_NO_MIPSTART = _amplpy_cplex_swig.CPXERR_NO_MIPSTART
CPXERR_NO_NAME_SECTION = _amplpy_cplex_swig.CPXERR_NO_NAME_SECTION
CPXERR_NO_NAMES = _amplpy_cplex_swig.CPXERR_NO_NAMES
CPXERR_NO_NORMS = _amplpy_cplex_swig.CPXERR_NO_NORMS
CPXERR_NO_NUMBER = _amplpy_cplex_swig.CPXERR_NO_NUMBER
CPXERR_NO_NUMBER_BOUND = _amplpy_cplex_swig.CPXERR_NO_NUMBER_BOUND
CPXERR_NO_NUMBER_FIRST = _amplpy_cplex_swig.CPXERR_NO_NUMBER_FIRST
CPXERR_NO_OBJ_NAME = _amplpy_cplex_swig.CPXERR_NO_OBJ_NAME
CPXERR_NO_OBJ_SENSE = _amplpy_cplex_swig.CPXERR_NO_OBJ_SENSE
CPXERR_NO_OBJECTIVE = _amplpy_cplex_swig.CPXERR_NO_OBJECTIVE
CPXERR_NO_OP_OR_SENSE = _amplpy_cplex_swig.CPXERR_NO_OP_OR_SENSE
CPXERR_NO_OPERATOR = _amplpy_cplex_swig.CPXERR_NO_OPERATOR
CPXERR_NO_ORDER = _amplpy_cplex_swig.CPXERR_NO_ORDER
CPXERR_NO_PROBLEM = _amplpy_cplex_swig.CPXERR_NO_PROBLEM
CPXERR_NO_QP_OPERATOR = _amplpy_cplex_swig.CPXERR_NO_QP_OPERATOR
CPXERR_NO_QUAD_EXP = _amplpy_cplex_swig.CPXERR_NO_QUAD_EXP
CPXERR_NO_RHS_COEFF = _amplpy_cplex_swig.CPXERR_NO_RHS_COEFF
CPXERR_NO_RHS_IN_OBJ = _amplpy_cplex_swig.CPXERR_NO_RHS_IN_OBJ
CPXERR_NO_ROW_NAME = _amplpy_cplex_swig.CPXERR_NO_ROW_NAME
CPXERR_NO_ROW_SENSE = _amplpy_cplex_swig.CPXERR_NO_ROW_SENSE
CPXERR_NO_ROWS_SECTION = _amplpy_cplex_swig.CPXERR_NO_ROWS_SECTION
CPXERR_NO_SENSIT = _amplpy_cplex_swig.CPXERR_NO_SENSIT
CPXERR_NO_SOLN = _amplpy_cplex_swig.CPXERR_NO_SOLN
CPXERR_NO_SOLNPOOL = _amplpy_cplex_swig.CPXERR_NO_SOLNPOOL
CPXERR_NO_SOS = _amplpy_cplex_swig.CPXERR_NO_SOS
CPXERR_NO_TREE = _amplpy_cplex_swig.CPXERR_NO_TREE
CPXERR_NO_VECTOR_SOLN = _amplpy_cplex_swig.CPXERR_NO_VECTOR_SOLN
CPXERR_NODE_INDEX_RANGE = _amplpy_cplex_swig.CPXERR_NODE_INDEX_RANGE
CPXERR_NODE_ON_DISK = _amplpy_cplex_swig.CPXERR_NODE_ON_DISK
CPXERR_NOT_DUAL_UNBOUNDED = _amplpy_cplex_swig.CPXERR_NOT_DUAL_UNBOUNDED
CPXERR_NOT_FIXED = _amplpy_cplex_swig.CPXERR_NOT_FIXED
CPXERR_NOT_FOR_BENDERS = _amplpy_cplex_swig.CPXERR_NOT_FOR_BENDERS
CPXERR_NOT_FOR_DISTMIP = _amplpy_cplex_swig.CPXERR_NOT_FOR_DISTMIP
CPXERR_NOT_FOR_MIP = _amplpy_cplex_swig.CPXERR_NOT_FOR_MIP
CPXERR_NOT_FOR_MULTIOBJ = _amplpy_cplex_swig.CPXERR_NOT_FOR_MULTIOBJ
CPXERR_NOT_FOR_QCP = _amplpy_cplex_swig.CPXERR_NOT_FOR_QCP
CPXERR_NOT_FOR_QP = _amplpy_cplex_swig.CPXERR_NOT_FOR_QP
CPXERR_NOT_MILPCLASS = _amplpy_cplex_swig.CPXERR_NOT_MILPCLASS
CPXERR_NOT_MIN_COST_FLOW = _amplpy_cplex_swig.CPXERR_NOT_MIN_COST_FLOW
CPXERR_NOT_MIP = _amplpy_cplex_swig.CPXERR_NOT_MIP
CPXERR_NOT_MIQPCLASS = _amplpy_cplex_swig.CPXERR_NOT_MIQPCLASS
CPXERR_NOT_ONE_PROBLEM = _amplpy_cplex_swig.CPXERR_NOT_ONE_PROBLEM
CPXERR_NOT_QP = _amplpy_cplex_swig.CPXERR_NOT_QP
CPXERR_NOT_SAV_FILE = _amplpy_cplex_swig.CPXERR_NOT_SAV_FILE
CPXERR_NOT_UNBOUNDED = _amplpy_cplex_swig.CPXERR_NOT_UNBOUNDED
CPXERR_NULL_POINTER = _amplpy_cplex_swig.CPXERR_NULL_POINTER
CPXERR_ORDER_BAD_DIRECTION = _amplpy_cplex_swig.CPXERR_ORDER_BAD_DIRECTION
CPXERR_OVERFLOW = _amplpy_cplex_swig.CPXERR_OVERFLOW
CPXERR_PARAM_INCOMPATIBLE = _amplpy_cplex_swig.CPXERR_PARAM_INCOMPATIBLE
CPXERR_PARAM_TOO_BIG = _amplpy_cplex_swig.CPXERR_PARAM_TOO_BIG
CPXERR_PARAM_TOO_SMALL = _amplpy_cplex_swig.CPXERR_PARAM_TOO_SMALL
CPXERR_PRESLV_ABORT = _amplpy_cplex_swig.CPXERR_PRESLV_ABORT
CPXERR_PRESLV_BAD_PARAM = _amplpy_cplex_swig.CPXERR_PRESLV_BAD_PARAM
CPXERR_PRESLV_BASIS_MEM = _amplpy_cplex_swig.CPXERR_PRESLV_BASIS_MEM
CPXERR_PRESLV_COPYORDER = _amplpy_cplex_swig.CPXERR_PRESLV_COPYORDER
CPXERR_PRESLV_COPYSOS = _amplpy_cplex_swig.CPXERR_PRESLV_COPYSOS
CPXERR_PRESLV_CRUSHFORM = _amplpy_cplex_swig.CPXERR_PRESLV_CRUSHFORM
CPXERR_PRESLV_DETTIME_LIM = _amplpy_cplex_swig.CPXERR_PRESLV_DETTIME_LIM
CPXERR_PRESLV_DUAL = _amplpy_cplex_swig.CPXERR_PRESLV_DUAL
CPXERR_PRESLV_FAIL_BASIS = _amplpy_cplex_swig.CPXERR_PRESLV_FAIL_BASIS
CPXERR_PRESLV_INF = _amplpy_cplex_swig.CPXERR_PRESLV_INF
CPXERR_PRESLV_INForUNBD = _amplpy_cplex_swig.CPXERR_PRESLV_INForUNBD
CPXERR_PRESLV_NO_BASIS = _amplpy_cplex_swig.CPXERR_PRESLV_NO_BASIS
CPXERR_PRESLV_NO_PROB = _amplpy_cplex_swig.CPXERR_PRESLV_NO_PROB
CPXERR_PRESLV_SOLN_MIP = _amplpy_cplex_swig.CPXERR_PRESLV_SOLN_MIP
CPXERR_PRESLV_SOLN_QP = _amplpy_cplex_swig.CPXERR_PRESLV_SOLN_QP
CPXERR_PRESLV_START_LP = _amplpy_cplex_swig.CPXERR_PRESLV_START_LP
CPXERR_PRESLV_TIME_LIM = _amplpy_cplex_swig.CPXERR_PRESLV_TIME_LIM
CPXERR_PRESLV_UNBD = _amplpy_cplex_swig.CPXERR_PRESLV_UNBD
CPXERR_PRESLV_UNCRUSHFORM = _amplpy_cplex_swig.CPXERR_PRESLV_UNCRUSHFORM
CPXERR_PRIIND = _amplpy_cplex_swig.CPXERR_PRIIND
CPXERR_PRM_DATA = _amplpy_cplex_swig.CPXERR_PRM_DATA
CPXERR_PROTOCOL = _amplpy_cplex_swig.CPXERR_PROTOCOL
CPXERR_Q_DIVISOR = _amplpy_cplex_swig.CPXERR_Q_DIVISOR
CPXERR_Q_DUP_ENTRY = _amplpy_cplex_swig.CPXERR_Q_DUP_ENTRY
CPXERR_Q_NOT_INDEF = _amplpy_cplex_swig.CPXERR_Q_NOT_INDEF
CPXERR_Q_NOT_POS_DEF = _amplpy_cplex_swig.CPXERR_Q_NOT_POS_DEF
CPXERR_Q_NOT_SYMMETRIC = _amplpy_cplex_swig.CPXERR_Q_NOT_SYMMETRIC
CPXERR_QCP_SENSE = _amplpy_cplex_swig.CPXERR_QCP_SENSE
CPXERR_QCP_SENSE_FILE = _amplpy_cplex_swig.CPXERR_QCP_SENSE_FILE
CPXERR_QUAD_EXP_NOT_2 = _amplpy_cplex_swig.CPXERR_QUAD_EXP_NOT_2
CPXERR_QUAD_IN_ROW = _amplpy_cplex_swig.CPXERR_QUAD_IN_ROW
CPXERR_RANGE_SECTION_ORDER = _amplpy_cplex_swig.CPXERR_RANGE_SECTION_ORDER
CPXERR_RESTRICTED_VERSION = _amplpy_cplex_swig.CPXERR_RESTRICTED_VERSION
CPXERR_RHS_IN_OBJ = _amplpy_cplex_swig.CPXERR_RHS_IN_OBJ
CPXERR_RIM_REPEATS = _amplpy_cplex_swig.CPXERR_RIM_REPEATS
CPXERR_RIM_ROW_REPEATS = _amplpy_cplex_swig.CPXERR_RIM_ROW_REPEATS
CPXERR_RIMNZ_REPEATS = _amplpy_cplex_swig.CPXERR_RIMNZ_REPEATS
CPXERR_ROW_INDEX_RANGE = _amplpy_cplex_swig.CPXERR_ROW_INDEX_RANGE
CPXERR_ROW_REPEAT_PRINT = _amplpy_cplex_swig.CPXERR_ROW_REPEAT_PRINT
CPXERR_ROW_REPEATS = _amplpy_cplex_swig.CPXERR_ROW_REPEATS
CPXERR_ROW_UNKNOWN = _amplpy_cplex_swig.CPXERR_ROW_UNKNOWN
CPXERR_SAV_FILE_DATA = _amplpy_cplex_swig.CPXERR_SAV_FILE_DATA
CPXERR_SAV_FILE_VALUE = _amplpy_cplex_swig.CPXERR_SAV_FILE_VALUE
CPXERR_SAV_FILE_WRITE = _amplpy_cplex_swig.CPXERR_SAV_FILE_WRITE
CPXERR_SBASE_ILLEGAL = _amplpy_cplex_swig.CPXERR_SBASE_ILLEGAL
CPXERR_SBASE_INCOMPAT = _amplpy_cplex_swig.CPXERR_SBASE_INCOMPAT
CPXERR_SINGULAR = _amplpy_cplex_swig.CPXERR_SINGULAR
CPXERR_STR_PARAM_TOO_LONG = _amplpy_cplex_swig.CPXERR_STR_PARAM_TOO_LONG
CPXERR_SUBPROB_SOLVE = _amplpy_cplex_swig.CPXERR_SUBPROB_SOLVE
CPXERR_SYNCPRIM_CREATE = _amplpy_cplex_swig.CPXERR_SYNCPRIM_CREATE
CPXERR_SYSCALL = _amplpy_cplex_swig.CPXERR_SYSCALL
CPXERR_THREAD_FAILED = _amplpy_cplex_swig.CPXERR_THREAD_FAILED
CPXERR_TILIM_CONDITION_NO = _amplpy_cplex_swig.CPXERR_TILIM_CONDITION_NO
CPXERR_TILIM_STRONGBRANCH = _amplpy_cplex_swig.CPXERR_TILIM_STRONGBRANCH
CPXERR_TOO_MANY_COEFFS = _amplpy_cplex_swig.CPXERR_TOO_MANY_COEFFS
CPXERR_TOO_MANY_COLS = _amplpy_cplex_swig.CPXERR_TOO_MANY_COLS
CPXERR_TOO_MANY_RIMNZ = _amplpy_cplex_swig.CPXERR_TOO_MANY_RIMNZ
CPXERR_TOO_MANY_RIMS = _amplpy_cplex_swig.CPXERR_TOO_MANY_RIMS
CPXERR_TOO_MANY_ROWS = _amplpy_cplex_swig.CPXERR_TOO_MANY_ROWS
CPXERR_TOO_MANY_THREADS = _amplpy_cplex_swig.CPXERR_TOO_MANY_THREADS
CPXERR_TREE_MEMORY_LIMIT = _amplpy_cplex_swig.CPXERR_TREE_MEMORY_LIMIT
CPXERR_TUNE_MIXED = _amplpy_cplex_swig.CPXERR_TUNE_MIXED
CPXERR_UNIQUE_WEIGHTS = _amplpy_cplex_swig.CPXERR_UNIQUE_WEIGHTS
CPXERR_UNSUPPORTED_CONSTRAINT_TYPE = _amplpy_cplex_swig.CPXERR_UNSUPPORTED_CONSTRAINT_TYPE
CPXERR_UNSUPPORTED_OPERATION = _amplpy_cplex_swig.CPXERR_UNSUPPORTED_OPERATION
CPXERR_UP_BOUND_REPEATS = _amplpy_cplex_swig.CPXERR_UP_BOUND_REPEATS
CPXERR_WORK_FILE_OPEN = _amplpy_cplex_swig.CPXERR_WORK_FILE_OPEN
CPXERR_WORK_FILE_READ = _amplpy_cplex_swig.CPXERR_WORK_FILE_READ
CPXERR_WORK_FILE_WRITE = _amplpy_cplex_swig.CPXERR_WORK_FILE_WRITE
CPXERR_XMLPARSE = _amplpy_cplex_swig.CPXERR_XMLPARSE
CPXMESSAGEBUFSIZE = _amplpy_cplex_swig.CPXMESSAGEBUFSIZE
CPXMI_BIGM_COEF = _amplpy_cplex_swig.CPXMI_BIGM_COEF
CPXMI_BIGM_TO_IND = _amplpy_cplex_swig.CPXMI_BIGM_TO_IND
CPXMI_BIGM_VARBOUND = _amplpy_cplex_swig.CPXMI_BIGM_VARBOUND
CPXMI_CANCEL_TOL = _amplpy_cplex_swig.CPXMI_CANCEL_TOL
CPXMI_EPGAP_LARGE = _amplpy_cplex_swig.CPXMI_EPGAP_LARGE
CPXMI_EPGAP_OBJOFFSET = _amplpy_cplex_swig.CPXMI_EPGAP_OBJOFFSET
CPXMI_FEAS_TOL = _amplpy_cplex_swig.CPXMI_FEAS_TOL
CPXMI_FRACTION_SCALING = _amplpy_cplex_swig.CPXMI_FRACTION_SCALING
CPXMI_IND_NZ_LARGE_NUM = _amplpy_cplex_swig.CPXMI_IND_NZ_LARGE_NUM
CPXMI_IND_NZ_SMALL_NUM = _amplpy_cplex_swig.CPXMI_IND_NZ_SMALL_NUM
CPXMI_IND_RHS_LARGE_NUM = _amplpy_cplex_swig.CPXMI_IND_RHS_LARGE_NUM
CPXMI_IND_RHS_SMALL_NUM = _amplpy_cplex_swig.CPXMI_IND_RHS_SMALL_NUM
CPXMI_KAPPA_ILLPOSED = _amplpy_cplex_swig.CPXMI_KAPPA_ILLPOSED
CPXMI_KAPPA_SUSPICIOUS = _amplpy_cplex_swig.CPXMI_KAPPA_SUSPICIOUS
CPXMI_KAPPA_UNSTABLE = _amplpy_cplex_swig.CPXMI_KAPPA_UNSTABLE
CPXMI_LB_LARGE_NUM = _amplpy_cplex_swig.CPXMI_LB_LARGE_NUM
CPXMI_LB_SMALL_NUM = _amplpy_cplex_swig.CPXMI_LB_SMALL_NUM
CPXMI_LC_NZ_LARGE_NUM = _amplpy_cplex_swig.CPXMI_LC_NZ_LARGE_NUM
CPXMI_LC_NZ_SMALL_NUM = _amplpy_cplex_swig.CPXMI_LC_NZ_SMALL_NUM
CPXMI_LC_RHS_LARGE_NUM = _amplpy_cplex_swig.CPXMI_LC_RHS_LARGE_NUM
CPXMI_LC_RHS_SMALL_NUM = _amplpy_cplex_swig.CPXMI_LC_RHS_SMALL_NUM
CPXMI_MULTIOBJ_COEFFS = _amplpy_cplex_swig.CPXMI_MULTIOBJ_COEFFS
CPXMI_MULTIOBJ_LARGE_NUM = _amplpy_cplex_swig.CPXMI_MULTIOBJ_LARGE_NUM
CPXMI_MULTIOBJ_MIX = _amplpy_cplex_swig.CPXMI_MULTIOBJ_MIX
CPXMI_MULTIOBJ_OPT_TOL = _amplpy_cplex_swig.CPXMI_MULTIOBJ_OPT_TOL
CPXMI_MULTIOBJ_SMALL_NUM = _amplpy_cplex_swig.CPXMI_MULTIOBJ_SMALL_NUM
CPXMI_NZ_LARGE_NUM = _amplpy_cplex_swig.CPXMI_NZ_LARGE_NUM
CPXMI_NZ_SMALL_NUM = _amplpy_cplex_swig.CPXMI_NZ_SMALL_NUM
CPXMI_OBJ_LARGE_NUM = _amplpy_cplex_swig.CPXMI_OBJ_LARGE_NUM
CPXMI_OBJ_SMALL_NUM = _amplpy_cplex_swig.CPXMI_OBJ_SMALL_NUM
CPXMI_OPT_TOL = _amplpy_cplex_swig.CPXMI_OPT_TOL
CPXMI_QC_LINNZ_LARGE_NUM = _amplpy_cplex_swig.CPXMI_QC_LINNZ_LARGE_NUM
CPXMI_QC_LINNZ_SMALL_NUM = _amplpy_cplex_swig.CPXMI_QC_LINNZ_SMALL_NUM
CPXMI_QC_QNZ_LARGE_NUM = _amplpy_cplex_swig.CPXMI_QC_QNZ_LARGE_NUM
CPXMI_QC_QNZ_SMALL_NUM = _amplpy_cplex_swig.CPXMI_QC_QNZ_SMALL_NUM
CPXMI_QC_RHS_LARGE_NUM = _amplpy_cplex_swig.CPXMI_QC_RHS_LARGE_NUM
CPXMI_QC_RHS_SMALL_NUM = _amplpy_cplex_swig.CPXMI_QC_RHS_SMALL_NUM
CPXMI_QOBJ_LARGE_NUM = _amplpy_cplex_swig.CPXMI_QOBJ_LARGE_NUM
CPXMI_QOBJ_SMALL_NUM = _amplpy_cplex_swig.CPXMI_QOBJ_SMALL_NUM
CPXMI_QOPT_TOL = _amplpy_cplex_swig.CPXMI_QOPT_TOL
CPXMI_RHS_LARGE_NUM = _amplpy_cplex_swig.CPXMI_RHS_LARGE_NUM
CPXMI_RHS_SMALL_NUM = _amplpy_cplex_swig.CPXMI_RHS_SMALL_NUM
CPXMI_SAMECOEFF_COL = _amplpy_cplex_swig.CPXMI_SAMECOEFF_COL
CPXMI_SAMECOEFF_IND = _amplpy_cplex_swig.CPXMI_SAMECOEFF_IND
CPXMI_SAMECOEFF_LAZY = _amplpy_cplex_swig.CPXMI_SAMECOEFF_LAZY
CPXMI_SAMECOEFF_MULTIOBJ = _amplpy_cplex_swig.CPXMI_SAMECOEFF_MULTIOBJ
CPXMI_SAMECOEFF_OBJ = _amplpy_cplex_swig.CPXMI_SAMECOEFF_OBJ
CPXMI_SAMECOEFF_QLIN = _amplpy_cplex_swig.CPXMI_SAMECOEFF_QLIN
CPXMI_SAMECOEFF_QUAD = _amplpy_cplex_swig.CPXMI_SAMECOEFF_QUAD
CPXMI_SAMECOEFF_RHS = _amplpy_cplex_swig.CPXMI_SAMECOEFF_RHS
CPXMI_SAMECOEFF_ROW = _amplpy_cplex_swig.CPXMI_SAMECOEFF_ROW
CPXMI_SAMECOEFF_UCUT = _amplpy_cplex_swig.CPXMI_SAMECOEFF_UCUT
CPXMI_SINGLE_PRECISION = _amplpy_cplex_swig.CPXMI_SINGLE_PRECISION
CPXMI_SYMMETRY_BREAKING_INEQ = _amplpy_cplex_swig.CPXMI_SYMMETRY_BREAKING_INEQ
CPXMI_UB_LARGE_NUM = _amplpy_cplex_swig.CPXMI_UB_LARGE_NUM
CPXMI_UB_SMALL_NUM = _amplpy_cplex_swig.CPXMI_UB_SMALL_NUM
CPXMI_UC_NZ_LARGE_NUM = _amplpy_cplex_swig.CPXMI_UC_NZ_LARGE_NUM
CPXMI_UC_NZ_SMALL_NUM = _amplpy_cplex_swig.CPXMI_UC_NZ_SMALL_NUM
CPXMI_UC_RHS_LARGE_NUM = _amplpy_cplex_swig.CPXMI_UC_RHS_LARGE_NUM
CPXMI_UC_RHS_SMALL_NUM = _amplpy_cplex_swig.CPXMI_UC_RHS_SMALL_NUM
CPXMI_WIDE_COEFF_RANGE = _amplpy_cplex_swig.CPXMI_WIDE_COEFF_RANGE
CPXMIP_ABORT_FEAS = _amplpy_cplex_swig.CPXMIP_ABORT_FEAS
CPXMIP_ABORT_INFEAS = _amplpy_cplex_swig.CPXMIP_ABORT_INFEAS
CPXMIP_ABORT_RELAXATION_UNBOUNDED = _amplpy_cplex_swig.CPXMIP_ABORT_RELAXATION_UNBOUNDED
CPXMIP_ABORT_RELAXED = _amplpy_cplex_swig.CPXMIP_ABORT_RELAXED
CPXMIP_DETTIME_LIM_FEAS = _amplpy_cplex_swig.CPXMIP_DETTIME_LIM_FEAS
CPXMIP_DETTIME_LIM_INFEAS = _amplpy_cplex_swig.CPXMIP_DETTIME_LIM_INFEAS
CPXMIP_FAIL_FEAS = _amplpy_cplex_swig.CPXMIP_FAIL_FEAS
CPXMIP_FAIL_FEAS_NO_TREE = _amplpy_cplex_swig.CPXMIP_FAIL_FEAS_NO_TREE
CPXMIP_FAIL_INFEAS = _amplpy_cplex_swig.CPXMIP_FAIL_INFEAS
CPXMIP_FAIL_INFEAS_NO_TREE = _amplpy_cplex_swig.CPXMIP_FAIL_INFEAS_NO_TREE
CPXMIP_FEASIBLE = _amplpy_cplex_swig.CPXMIP_FEASIBLE
CPXMIP_FEASIBLE_RELAXED_INF = _amplpy_cplex_swig.CPXMIP_FEASIBLE_RELAXED_INF
CPXMIP_FEASIBLE_RELAXED_QUAD = _amplpy_cplex_swig.CPXMIP_FEASIBLE_RELAXED_QUAD
CPXMIP_FEASIBLE_RELAXED_SUM = _amplpy_cplex_swig.CPXMIP_FEASIBLE_RELAXED_SUM
CPXMIP_INFEASIBLE = _amplpy_cplex_swig.CPXMIP_INFEASIBLE
CPXMIP_INForUNBD = _amplpy_cplex_swig.CPXMIP_INForUNBD
CPXMIP_MEM_LIM_FEAS = _amplpy_cplex_swig.CPXMIP_MEM_LIM_FEAS
CPXMIP_MEM_LIM_INFEAS = _amplpy_cplex_swig.CPXMIP_MEM_LIM_INFEAS
CPXMIP_NODE_LIM_FEAS = _amplpy_cplex_swig.CPXMIP_NODE_LIM_FEAS
CPXMIP_NODE_LIM_INFEAS = _amplpy_cplex_swig.CPXMIP_NODE_LIM_INFEAS
CPXMIP_OPTIMAL = _amplpy_cplex_swig.CPXMIP_OPTIMAL
CPXMIP_OPTIMAL_INFEAS = _amplpy_cplex_swig.CPXMIP_OPTIMAL_INFEAS
CPXMIP_OPTIMAL_POPULATED = _amplpy_cplex_swig.CPXMIP_OPTIMAL_POPULATED
CPXMIP_OPTIMAL_POPULATED_TOL = _amplpy_cplex_swig.CPXMIP_OPTIMAL_POPULATED_TOL
CPXMIP_OPTIMAL_RELAXED_INF = _amplpy_cplex_swig.CPXMIP_OPTIMAL_RELAXED_INF
CPXMIP_OPTIMAL_RELAXED_QUAD = _amplpy_cplex_swig.CPXMIP_OPTIMAL_RELAXED_QUAD
CPXMIP_OPTIMAL_RELAXED_SUM = _amplpy_cplex_swig.CPXMIP_OPTIMAL_RELAXED_SUM
CPXMIP_OPTIMAL_TOL = _amplpy_cplex_swig.CPXMIP_OPTIMAL_TOL
CPXMIP_POPULATESOL_LIM = _amplpy_cplex_swig.CPXMIP_POPULATESOL_LIM
CPXMIP_SOL_LIM = _amplpy_cplex_swig.CPXMIP_SOL_LIM
CPXMIP_TIME_LIM_FEAS = _amplpy_cplex_swig.CPXMIP_TIME_LIM_FEAS
CPXMIP_TIME_LIM_INFEAS = _amplpy_cplex_swig.CPXMIP_TIME_LIM_INFEAS
CPXMIP_UNBOUNDED = _amplpy_cplex_swig.CPXMIP_UNBOUNDED
CPX_CPXAUTOENUMS_H_H = _amplpy_cplex_swig.CPX_CPXAUTOENUMS_H_H
CPXCALLBACKINFO_THREADID = _amplpy_cplex_swig.CPXCALLBACKINFO_THREADID
CPXCALLBACKINFO_NODECOUNT = _amplpy_cplex_swig.CPXCALLBACKINFO_NODECOUNT
CPXCALLBACKINFO_ITCOUNT = _amplpy_cplex_swig.CPXCALLBACKINFO_ITCOUNT
CPXCALLBACKINFO_BEST_SOL = _amplpy_cplex_swig.CPXCALLBACKINFO_BEST_SOL
CPXCALLBACKINFO_BEST_BND = _amplpy_cplex_swig.CPXCALLBACKINFO_BEST_BND
CPXCALLBACKINFO_THREADS = _amplpy_cplex_swig.CPXCALLBACKINFO_THREADS
CPXCALLBACKINFO_FEASIBLE = _amplpy_cplex_swig.CPXCALLBACKINFO_FEASIBLE
CPXCALLBACKINFO_TIME = _amplpy_cplex_swig.CPXCALLBACKINFO_TIME
CPXCALLBACKINFO_DETTIME = _amplpy_cplex_swig.CPXCALLBACKINFO_DETTIME
CPXCALLBACKINFO_NODEUID = _amplpy_cplex_swig.CPXCALLBACKINFO_NODEUID
CPXCALLBACKINFO_NODEDEPTH = _amplpy_cplex_swig.CPXCALLBACKINFO_NODEDEPTH
CPXCALLBACKINFO_CANDIDATE_SOURCE = _amplpy_cplex_swig.CPXCALLBACKINFO_CANDIDATE_SOURCE
CPXCALLBACKINFO_RESTARTS = _amplpy_cplex_swig.CPXCALLBACKINFO_RESTARTS
CPXCALLBACKSOLUTION_NOCHECK = _amplpy_cplex_swig.CPXCALLBACKSOLUTION_NOCHECK
CPXCALLBACKSOLUTION_CHECKFEAS = _amplpy_cplex_swig.CPXCALLBACKSOLUTION_CHECKFEAS
CPXCALLBACKSOLUTION_PROPAGATE = _amplpy_cplex_swig.CPXCALLBACKSOLUTION_PROPAGATE
CPXCALLBACKSOLUTION_SOLVE = _amplpy_cplex_swig.CPXCALLBACKSOLUTION_SOLVE
CPXINFO_BYTE = _amplpy_cplex_swig.CPXINFO_BYTE
CPXINFO_SHORT = _amplpy_cplex_swig.CPXINFO_SHORT
CPXINFO_INT = _amplpy_cplex_swig.CPXINFO_INT
CPXINFO_LONG = _amplpy_cplex_swig.CPXINFO_LONG
CPXINFO_DOUBLE = _amplpy_cplex_swig.CPXINFO_DOUBLE
CPXPARAM_H = _amplpy_cplex_swig.CPXPARAM_H
CPXPARAM_Advance = _amplpy_cplex_swig.CPXPARAM_Advance
CPXPARAM_Barrier_Algorithm = _amplpy_cplex_swig.CPXPARAM_Barrier_Algorithm
CPXPARAM_Barrier_ColNonzeros = _amplpy_cplex_swig.CPXPARAM_Barrier_ColNonzeros
CPXPARAM_Barrier_ConvergeTol = _amplpy_cplex_swig.CPXPARAM_Barrier_ConvergeTol
CPXPARAM_Barrier_Crossover = _amplpy_cplex_swig.CPXPARAM_Barrier_Crossover
CPXPARAM_Barrier_Display = _amplpy_cplex_swig.CPXPARAM_Barrier_Display
CPXPARAM_Barrier_Limits_Corrections = _amplpy_cplex_swig.CPXPARAM_Barrier_Limits_Corrections
CPXPARAM_Barrier_Limits_Growth = _amplpy_cplex_swig.CPXPARAM_Barrier_Limits_Growth
CPXPARAM_Barrier_Limits_Iteration = _amplpy_cplex_swig.CPXPARAM_Barrier_Limits_Iteration
CPXPARAM_Barrier_Limits_ObjRange = _amplpy_cplex_swig.CPXPARAM_Barrier_Limits_ObjRange
CPXPARAM_Barrier_Ordering = _amplpy_cplex_swig.CPXPARAM_Barrier_Ordering
CPXPARAM_Barrier_QCPConvergeTol = _amplpy_cplex_swig.CPXPARAM_Barrier_QCPConvergeTol
CPXPARAM_Barrier_StartAlg = _amplpy_cplex_swig.CPXPARAM_Barrier_StartAlg
CPXPARAM_Benders_Strategy = _amplpy_cplex_swig.CPXPARAM_Benders_Strategy
CPXPARAM_Benders_Tolerances_feasibilitycut = _amplpy_cplex_swig.CPXPARAM_Benders_Tolerances_feasibilitycut
CPXPARAM_Benders_Tolerances_optimalitycut = _amplpy_cplex_swig.CPXPARAM_Benders_Tolerances_optimalitycut
CPXPARAM_Benders_WorkerAlgorithm = _amplpy_cplex_swig.CPXPARAM_Benders_WorkerAlgorithm
CPXPARAM_ClockType = _amplpy_cplex_swig.CPXPARAM_ClockType
CPXPARAM_Conflict_Algorithm = _amplpy_cplex_swig.CPXPARAM_Conflict_Algorithm
CPXPARAM_Conflict_Display = _amplpy_cplex_swig.CPXPARAM_Conflict_Display
CPXPARAM_CPUmask = _amplpy_cplex_swig.CPXPARAM_CPUmask
CPXPARAM_DetTimeLimit = _amplpy_cplex_swig.CPXPARAM_DetTimeLimit
CPXPARAM_DistMIP_Rampup_DetTimeLimit = _amplpy_cplex_swig.CPXPARAM_DistMIP_Rampup_DetTimeLimit
CPXPARAM_DistMIP_Rampup_Duration = _amplpy_cplex_swig.CPXPARAM_DistMIP_Rampup_Duration
CPXPARAM_DistMIP_Rampup_TimeLimit = _amplpy_cplex_swig.CPXPARAM_DistMIP_Rampup_TimeLimit
CPXPARAM_Emphasis_Memory = _amplpy_cplex_swig.CPXPARAM_Emphasis_Memory
CPXPARAM_Emphasis_MIP = _amplpy_cplex_swig.CPXPARAM_Emphasis_MIP
CPXPARAM_Emphasis_Numerical = _amplpy_cplex_swig.CPXPARAM_Emphasis_Numerical
CPXPARAM_Feasopt_Mode = _amplpy_cplex_swig.CPXPARAM_Feasopt_Mode
CPXPARAM_Feasopt_Tolerance = _amplpy_cplex_swig.CPXPARAM_Feasopt_Tolerance
CPXPARAM_LPMethod = _amplpy_cplex_swig.CPXPARAM_LPMethod
CPXPARAM_MIP_Cuts_BQP = _amplpy_cplex_swig.CPXPARAM_MIP_Cuts_BQP
CPXPARAM_MIP_Cuts_Cliques = _amplpy_cplex_swig.CPXPARAM_MIP_Cuts_Cliques
CPXPARAM_MIP_Cuts_Covers = _amplpy_cplex_swig.CPXPARAM_MIP_Cuts_Covers
CPXPARAM_MIP_Cuts_Disjunctive = _amplpy_cplex_swig.CPXPARAM_MIP_Cuts_Disjunctive
CPXPARAM_MIP_Cuts_FlowCovers = _amplpy_cplex_swig.CPXPARAM_MIP_Cuts_FlowCovers
CPXPARAM_MIP_Cuts_Gomory = _amplpy_cplex_swig.CPXPARAM_MIP_Cuts_Gomory
CPXPARAM_MIP_Cuts_GUBCovers = _amplpy_cplex_swig.CPXPARAM_MIP_Cuts_GUBCovers
CPXPARAM_MIP_Cuts_Implied = _amplpy_cplex_swig.CPXPARAM_MIP_Cuts_Implied
CPXPARAM_MIP_Cuts_LiftProj = _amplpy_cplex_swig.CPXPARAM_MIP_Cuts_LiftProj
CPXPARAM_MIP_Cuts_LocalImplied = _amplpy_cplex_swig.CPXPARAM_MIP_Cuts_LocalImplied
CPXPARAM_MIP_Cuts_MCFCut = _amplpy_cplex_swig.CPXPARAM_MIP_Cuts_MCFCut
CPXPARAM_MIP_Cuts_MIRCut = _amplpy_cplex_swig.CPXPARAM_MIP_Cuts_MIRCut
CPXPARAM_MIP_Cuts_PathCut = _amplpy_cplex_swig.CPXPARAM_MIP_Cuts_PathCut
CPXPARAM_MIP_Cuts_RLT = _amplpy_cplex_swig.CPXPARAM_MIP_Cuts_RLT
CPXPARAM_MIP_Cuts_ZeroHalfCut = _amplpy_cplex_swig.CPXPARAM_MIP_Cuts_ZeroHalfCut
CPXPARAM_MIP_Display = _amplpy_cplex_swig.CPXPARAM_MIP_Display
CPXPARAM_MIP_Interval = _amplpy_cplex_swig.CPXPARAM_MIP_Interval
CPXPARAM_MIP_Limits_AggForCut = _amplpy_cplex_swig.CPXPARAM_MIP_Limits_AggForCut
CPXPARAM_MIP_Limits_AuxRootThreads = _amplpy_cplex_swig.CPXPARAM_MIP_Limits_AuxRootThreads
CPXPARAM_MIP_Limits_CutPasses = _amplpy_cplex_swig.CPXPARAM_MIP_Limits_CutPasses
CPXPARAM_MIP_Limits_CutsFactor = _amplpy_cplex_swig.CPXPARAM_MIP_Limits_CutsFactor
CPXPARAM_MIP_Limits_EachCutLimit = _amplpy_cplex_swig.CPXPARAM_MIP_Limits_EachCutLimit
CPXPARAM_MIP_Limits_GomoryCand = _amplpy_cplex_swig.CPXPARAM_MIP_Limits_GomoryCand
CPXPARAM_MIP_Limits_GomoryPass = _amplpy_cplex_swig.CPXPARAM_MIP_Limits_GomoryPass
CPXPARAM_MIP_Limits_Nodes = _amplpy_cplex_swig.CPXPARAM_MIP_Limits_Nodes
CPXPARAM_MIP_Limits_PolishTime = _amplpy_cplex_swig.CPXPARAM_MIP_Limits_PolishTime
CPXPARAM_MIP_Limits_Populate = _amplpy_cplex_swig.CPXPARAM_MIP_Limits_Populate
CPXPARAM_MIP_Limits_ProbeDetTime = _amplpy_cplex_swig.CPXPARAM_MIP_Limits_ProbeDetTime
CPXPARAM_MIP_Limits_ProbeTime = _amplpy_cplex_swig.CPXPARAM_MIP_Limits_ProbeTime
CPXPARAM_MIP_Limits_RepairTries = _amplpy_cplex_swig.CPXPARAM_MIP_Limits_RepairTries
CPXPARAM_MIP_Limits_Solutions = _amplpy_cplex_swig.CPXPARAM_MIP_Limits_Solutions
CPXPARAM_MIP_Limits_StrongCand = _amplpy_cplex_swig.CPXPARAM_MIP_Limits_StrongCand
CPXPARAM_MIP_Limits_StrongIt = _amplpy_cplex_swig.CPXPARAM_MIP_Limits_StrongIt
CPXPARAM_MIP_Limits_TreeMemory = _amplpy_cplex_swig.CPXPARAM_MIP_Limits_TreeMemory
CPXPARAM_MIP_OrderType = _amplpy_cplex_swig.CPXPARAM_MIP_OrderType
CPXPARAM_MIP_PolishAfter_AbsMIPGap = _amplpy_cplex_swig.CPXPARAM_MIP_PolishAfter_AbsMIPGap
CPXPARAM_MIP_PolishAfter_DetTime = _amplpy_cplex_swig.CPXPARAM_MIP_PolishAfter_DetTime
CPXPARAM_MIP_PolishAfter_MIPGap = _amplpy_cplex_swig.CPXPARAM_MIP_PolishAfter_MIPGap
CPXPARAM_MIP_PolishAfter_Nodes = _amplpy_cplex_swig.CPXPARAM_MIP_PolishAfter_Nodes
CPXPARAM_MIP_PolishAfter_Solutions = _amplpy_cplex_swig.CPXPARAM_MIP_PolishAfter_Solutions
CPXPARAM_MIP_PolishAfter_Time = _amplpy_cplex_swig.CPXPARAM_MIP_PolishAfter_Time
CPXPARAM_MIP_Pool_AbsGap = _amplpy_cplex_swig.CPXPARAM_MIP_Pool_AbsGap
CPXPARAM_MIP_Pool_Capacity = _amplpy_cplex_swig.CPXPARAM_MIP_Pool_Capacity
CPXPARAM_MIP_Pool_Intensity = _amplpy_cplex_swig.CPXPARAM_MIP_Pool_Intensity
CPXPARAM_MIP_Pool_RelGap = _amplpy_cplex_swig.CPXPARAM_MIP_Pool_RelGap
CPXPARAM_MIP_Pool_Replace = _amplpy_cplex_swig.CPXPARAM_MIP_Pool_Replace
CPXPARAM_MIP_Strategy_Backtrack = _amplpy_cplex_swig.CPXPARAM_MIP_Strategy_Backtrack
CPXPARAM_MIP_Strategy_BBInterval = _amplpy_cplex_swig.CPXPARAM_MIP_Strategy_BBInterval
CPXPARAM_MIP_Strategy_Branch = _amplpy_cplex_swig.CPXPARAM_MIP_Strategy_Branch
CPXPARAM_MIP_Strategy_CallbackReducedLP = _amplpy_cplex_swig.CPXPARAM_MIP_Strategy_CallbackReducedLP
CPXPARAM_MIP_Strategy_Dive = _amplpy_cplex_swig.CPXPARAM_MIP_Strategy_Dive
CPXPARAM_MIP_Strategy_File = _amplpy_cplex_swig.CPXPARAM_MIP_Strategy_File
CPXPARAM_MIP_Strategy_FPHeur = _amplpy_cplex_swig.CPXPARAM_MIP_Strategy_FPHeur
CPXPARAM_MIP_Strategy_HeuristicEffort = _amplpy_cplex_swig.CPXPARAM_MIP_Strategy_HeuristicEffort
CPXPARAM_MIP_Strategy_HeuristicFreq = _amplpy_cplex_swig.CPXPARAM_MIP_Strategy_HeuristicFreq
CPXPARAM_MIP_Strategy_KappaStats = _amplpy_cplex_swig.CPXPARAM_MIP_Strategy_KappaStats
CPXPARAM_MIP_Strategy_LBHeur = _amplpy_cplex_swig.CPXPARAM_MIP_Strategy_LBHeur
CPXPARAM_MIP_Strategy_MIQCPStrat = _amplpy_cplex_swig.CPXPARAM_MIP_Strategy_MIQCPStrat
CPXPARAM_MIP_Strategy_NodeSelect = _amplpy_cplex_swig.CPXPARAM_MIP_Strategy_NodeSelect
CPXPARAM_MIP_Strategy_Order = _amplpy_cplex_swig.CPXPARAM_MIP_Strategy_Order
CPXPARAM_MIP_Strategy_PresolveNode = _amplpy_cplex_swig.CPXPARAM_MIP_Strategy_PresolveNode
CPXPARAM_MIP_Strategy_Probe = _amplpy_cplex_swig.CPXPARAM_MIP_Strategy_Probe
CPXPARAM_MIP_Strategy_RINSHeur = _amplpy_cplex_swig.CPXPARAM_MIP_Strategy_RINSHeur
CPXPARAM_MIP_Strategy_Search = _amplpy_cplex_swig.CPXPARAM_MIP_Strategy_Search
CPXPARAM_MIP_Strategy_StartAlgorithm = _amplpy_cplex_swig.CPXPARAM_MIP_Strategy_StartAlgorithm
CPXPARAM_MIP_Strategy_SubAlgorithm = _amplpy_cplex_swig.CPXPARAM_MIP_Strategy_SubAlgorithm
CPXPARAM_MIP_Strategy_VariableSelect = _amplpy_cplex_swig.CPXPARAM_MIP_Strategy_VariableSelect
CPXPARAM_MIP_SubMIP_StartAlg = _amplpy_cplex_swig.CPXPARAM_MIP_SubMIP_StartAlg
CPXPARAM_MIP_SubMIP_SubAlg = _amplpy_cplex_swig.CPXPARAM_MIP_SubMIP_SubAlg
CPXPARAM_MIP_SubMIP_NodeLimit = _amplpy_cplex_swig.CPXPARAM_MIP_SubMIP_NodeLimit
CPXPARAM_MIP_SubMIP_Scale = _amplpy_cplex_swig.CPXPARAM_MIP_SubMIP_Scale
CPXPARAM_MIP_Tolerances_AbsMIPGap = _amplpy_cplex_swig.CPXPARAM_MIP_Tolerances_AbsMIPGap
CPXPARAM_MIP_Tolerances_Linearization = _amplpy_cplex_swig.CPXPARAM_MIP_Tolerances_Linearization
CPXPARAM_MIP_Tolerances_Integrality = _amplpy_cplex_swig.CPXPARAM_MIP_Tolerances_Integrality
CPXPARAM_MIP_Tolerances_LowerCutoff = _amplpy_cplex_swig.CPXPARAM_MIP_Tolerances_LowerCutoff
CPXPARAM_MIP_Tolerances_MIPGap = _amplpy_cplex_swig.CPXPARAM_MIP_Tolerances_MIPGap
CPXPARAM_MIP_Tolerances_ObjDifference = _amplpy_cplex_swig.CPXPARAM_MIP_Tolerances_ObjDifference
CPXPARAM_MIP_Tolerances_RelObjDifference = _amplpy_cplex_swig.CPXPARAM_MIP_Tolerances_RelObjDifference
CPXPARAM_MIP_Tolerances_UpperCutoff = _amplpy_cplex_swig.CPXPARAM_MIP_Tolerances_UpperCutoff
CPXPARAM_MultiObjective_Display = _amplpy_cplex_swig.CPXPARAM_MultiObjective_Display
CPXPARAM_Network_Display = _amplpy_cplex_swig.CPXPARAM_Network_Display
CPXPARAM_Network_Iterations = _amplpy_cplex_swig.CPXPARAM_Network_Iterations
CPXPARAM_Network_NetFind = _amplpy_cplex_swig.CPXPARAM_Network_NetFind
CPXPARAM_Network_Pricing = _amplpy_cplex_swig.CPXPARAM_Network_Pricing
CPXPARAM_Network_Tolerances_Feasibility = _amplpy_cplex_swig.CPXPARAM_Network_Tolerances_Feasibility
CPXPARAM_Network_Tolerances_Optimality = _amplpy_cplex_swig.CPXPARAM_Network_Tolerances_Optimality
CPXPARAM_OptimalityTarget = _amplpy_cplex_swig.CPXPARAM_OptimalityTarget
CPXPARAM_Output_CloneLog = _amplpy_cplex_swig.CPXPARAM_Output_CloneLog
CPXPARAM_Output_IntSolFilePrefix = _amplpy_cplex_swig.CPXPARAM_Output_IntSolFilePrefix
CPXPARAM_Output_MPSLong = _amplpy_cplex_swig.CPXPARAM_Output_MPSLong
CPXPARAM_Output_WriteLevel = _amplpy_cplex_swig.CPXPARAM_Output_WriteLevel
CPXPARAM_Parallel = _amplpy_cplex_swig.CPXPARAM_Parallel
CPXPARAM_ParamDisplay = _amplpy_cplex_swig.CPXPARAM_ParamDisplay
CPXPARAM_Preprocessing_Aggregator = _amplpy_cplex_swig.CPXPARAM_Preprocessing_Aggregator
CPXPARAM_Preprocessing_BoundStrength = _amplpy_cplex_swig.CPXPARAM_Preprocessing_BoundStrength
CPXPARAM_Preprocessing_CoeffReduce = _amplpy_cplex_swig.CPXPARAM_Preprocessing_CoeffReduce
CPXPARAM_Preprocessing_Dependency = _amplpy_cplex_swig.CPXPARAM_Preprocessing_Dependency
CPXPARAM_Preprocessing_Dual = _amplpy_cplex_swig.CPXPARAM_Preprocessing_Dual
CPXPARAM_Preprocessing_Fill = _amplpy_cplex_swig.CPXPARAM_Preprocessing_Fill
CPXPARAM_Preprocessing_Folding = _amplpy_cplex_swig.CPXPARAM_Preprocessing_Folding
CPXPARAM_Preprocessing_Linear = _amplpy_cplex_swig.CPXPARAM_Preprocessing_Linear
CPXPARAM_Preprocessing_NumPass = _amplpy_cplex_swig.CPXPARAM_Preprocessing_NumPass
CPXPARAM_Preprocessing_Presolve = _amplpy_cplex_swig.CPXPARAM_Preprocessing_Presolve
CPXPARAM_Preprocessing_QCPDuals = _amplpy_cplex_swig.CPXPARAM_Preprocessing_QCPDuals
CPXPARAM_Preprocessing_QPMakePSD = _amplpy_cplex_swig.CPXPARAM_Preprocessing_QPMakePSD
CPXPARAM_Preprocessing_QToLin = _amplpy_cplex_swig.CPXPARAM_Preprocessing_QToLin
CPXPARAM_Preprocessing_Reduce = _amplpy_cplex_swig.CPXPARAM_Preprocessing_Reduce
CPXPARAM_Preprocessing_Relax = _amplpy_cplex_swig.CPXPARAM_Preprocessing_Relax
CPXPARAM_Preprocessing_RepeatPresolve = _amplpy_cplex_swig.CPXPARAM_Preprocessing_RepeatPresolve
CPXPARAM_Preprocessing_Symmetry = _amplpy_cplex_swig.CPXPARAM_Preprocessing_Symmetry
CPXPARAM_QPMethod = _amplpy_cplex_swig.CPXPARAM_QPMethod
CPXPARAM_RandomSeed = _amplpy_cplex_swig.CPXPARAM_RandomSeed
CPXPARAM_Read_APIEncoding = _amplpy_cplex_swig.CPXPARAM_Read_APIEncoding
CPXPARAM_Read_Constraints = _amplpy_cplex_swig.CPXPARAM_Read_Constraints
CPXPARAM_Read_DataCheck = _amplpy_cplex_swig.CPXPARAM_Read_DataCheck
CPXPARAM_Read_FileEncoding = _amplpy_cplex_swig.CPXPARAM_Read_FileEncoding
CPXPARAM_Read_Nonzeros = _amplpy_cplex_swig.CPXPARAM_Read_Nonzeros
CPXPARAM_Read_QPNonzeros = _amplpy_cplex_swig.CPXPARAM_Read_QPNonzeros
CPXPARAM_Read_Scale = _amplpy_cplex_swig.CPXPARAM_Read_Scale
CPXPARAM_Read_Variables = _amplpy_cplex_swig.CPXPARAM_Read_Variables
CPXPARAM_Read_WarningLimit = _amplpy_cplex_swig.CPXPARAM_Read_WarningLimit
CPXPARAM_Record = _amplpy_cplex_swig.CPXPARAM_Record
CPXPARAM_ScreenOutput = _amplpy_cplex_swig.CPXPARAM_ScreenOutput
CPXPARAM_Sifting_Algorithm = _amplpy_cplex_swig.CPXPARAM_Sifting_Algorithm
CPXPARAM_Sifting_Simplex = _amplpy_cplex_swig.CPXPARAM_Sifting_Simplex
CPXPARAM_Sifting_Display = _amplpy_cplex_swig.CPXPARAM_Sifting_Display
CPXPARAM_Sifting_Iterations = _amplpy_cplex_swig.CPXPARAM_Sifting_Iterations
CPXPARAM_Simplex_Crash = _amplpy_cplex_swig.CPXPARAM_Simplex_Crash
CPXPARAM_Simplex_DGradient = _amplpy_cplex_swig.CPXPARAM_Simplex_DGradient
CPXPARAM_Simplex_Display = _amplpy_cplex_swig.CPXPARAM_Simplex_Display
CPXPARAM_Simplex_DynamicRows = _amplpy_cplex_swig.CPXPARAM_Simplex_DynamicRows
CPXPARAM_Simplex_Limits_Iterations = _amplpy_cplex_swig.CPXPARAM_Simplex_Limits_Iterations
CPXPARAM_Simplex_Limits_LowerObj = _amplpy_cplex_swig.CPXPARAM_Simplex_Limits_LowerObj
CPXPARAM_Simplex_Limits_Perturbation = _amplpy_cplex_swig.CPXPARAM_Simplex_Limits_Perturbation
CPXPARAM_Simplex_Limits_Singularity = _amplpy_cplex_swig.CPXPARAM_Simplex_Limits_Singularity
CPXPARAM_Simplex_Limits_UpperObj = _amplpy_cplex_swig.CPXPARAM_Simplex_Limits_UpperObj
CPXPARAM_Simplex_Perturbation_Constant = _amplpy_cplex_swig.CPXPARAM_Simplex_Perturbation_Constant
CPXPARAM_Simplex_Perturbation_Indicator = _amplpy_cplex_swig.CPXPARAM_Simplex_Perturbation_Indicator
CPXPARAM_Simplex_PGradient = _amplpy_cplex_swig.CPXPARAM_Simplex_PGradient
CPXPARAM_Simplex_Pricing = _amplpy_cplex_swig.CPXPARAM_Simplex_Pricing
CPXPARAM_Simplex_Refactor = _amplpy_cplex_swig.CPXPARAM_Simplex_Refactor
CPXPARAM_Simplex_Tolerances_Feasibility = _amplpy_cplex_swig.CPXPARAM_Simplex_Tolerances_Feasibility
CPXPARAM_Simplex_Tolerances_Markowitz = _amplpy_cplex_swig.CPXPARAM_Simplex_Tolerances_Markowitz
CPXPARAM_Simplex_Tolerances_Optimality = _amplpy_cplex_swig.CPXPARAM_Simplex_Tolerances_Optimality
CPXPARAM_SolutionType = _amplpy_cplex_swig.CPXPARAM_SolutionType
CPXPARAM_Threads = _amplpy_cplex_swig.CPXPARAM_Threads
CPXPARAM_TimeLimit = _amplpy_cplex_swig.CPXPARAM_TimeLimit
CPXPARAM_Tune_DetTimeLimit = _amplpy_cplex_swig.CPXPARAM_Tune_DetTimeLimit
CPXPARAM_Tune_Display = _amplpy_cplex_swig.CPXPARAM_Tune_Display
CPXPARAM_Tune_Measure = _amplpy_cplex_swig.CPXPARAM_Tune_Measure
CPXPARAM_Tune_Repeat = _amplpy_cplex_swig.CPXPARAM_Tune_Repeat
CPXPARAM_Tune_TimeLimit = _amplpy_cplex_swig.CPXPARAM_Tune_TimeLimit
CPXPARAM_WorkDir = _amplpy_cplex_swig.CPXPARAM_WorkDir
CPXPARAM_WorkMem = _amplpy_cplex_swig.CPXPARAM_WorkMem
CPXPUBLICPARAMS_H = _amplpy_cplex_swig.CPXPUBLICPARAMS_H
CPX_PARAM_ADVIND = _amplpy_cplex_swig.CPX_PARAM_ADVIND
CPX_PARAM_AGGFILL = _amplpy_cplex_swig.CPX_PARAM_AGGFILL
CPX_PARAM_AGGIND = _amplpy_cplex_swig.CPX_PARAM_AGGIND
CPX_PARAM_CLOCKTYPE = _amplpy_cplex_swig.CPX_PARAM_CLOCKTYPE
CPX_PARAM_CRAIND = _amplpy_cplex_swig.CPX_PARAM_CRAIND
CPX_PARAM_DEPIND = _amplpy_cplex_swig.CPX_PARAM_DEPIND
CPX_PARAM_DPRIIND = _amplpy_cplex_swig.CPX_PARAM_DPRIIND
CPX_PARAM_PRICELIM = _amplpy_cplex_swig.CPX_PARAM_PRICELIM
CPX_PARAM_EPMRK = _amplpy_cplex_swig.CPX_PARAM_EPMRK
CPX_PARAM_EPOPT = _amplpy_cplex_swig.CPX_PARAM_EPOPT
CPX_PARAM_EPPER = _amplpy_cplex_swig.CPX_PARAM_EPPER
CPX_PARAM_EPRHS = _amplpy_cplex_swig.CPX_PARAM_EPRHS
CPX_PARAM_SIMDISPLAY = _amplpy_cplex_swig.CPX_PARAM_SIMDISPLAY
CPX_PARAM_ITLIM = _amplpy_cplex_swig.CPX_PARAM_ITLIM
CPX_PARAM_ROWREADLIM = _amplpy_cplex_swig.CPX_PARAM_ROWREADLIM
CPX_PARAM_NETFIND = _amplpy_cplex_swig.CPX_PARAM_NETFIND
CPX_PARAM_COLREADLIM = _amplpy_cplex_swig.CPX_PARAM_COLREADLIM
CPX_PARAM_NZREADLIM = _amplpy_cplex_swig.CPX_PARAM_NZREADLIM
CPX_PARAM_OBJLLIM = _amplpy_cplex_swig.CPX_PARAM_OBJLLIM
CPX_PARAM_OBJULIM = _amplpy_cplex_swig.CPX_PARAM_OBJULIM
CPX_PARAM_PERIND = _amplpy_cplex_swig.CPX_PARAM_PERIND
CPX_PARAM_PERLIM = _amplpy_cplex_swig.CPX_PARAM_PERLIM
CPX_PARAM_PPRIIND = _amplpy_cplex_swig.CPX_PARAM_PPRIIND
CPX_PARAM_PREIND = _amplpy_cplex_swig.CPX_PARAM_PREIND
CPX_PARAM_REINV = _amplpy_cplex_swig.CPX_PARAM_REINV
CPX_PARAM_SCAIND = _amplpy_cplex_swig.CPX_PARAM_SCAIND
CPX_PARAM_SCRIND = _amplpy_cplex_swig.CPX_PARAM_SCRIND
CPX_PARAM_SINGLIM = _amplpy_cplex_swig.CPX_PARAM_SINGLIM
CPX_PARAM_TILIM = _amplpy_cplex_swig.CPX_PARAM_TILIM
CPX_PARAM_PREDUAL = _amplpy_cplex_swig.CPX_PARAM_PREDUAL
CPX_PARAM_PREPASS = _amplpy_cplex_swig.CPX_PARAM_PREPASS
CPX_PARAM_DATACHECK = _amplpy_cplex_swig.CPX_PARAM_DATACHECK
CPX_PARAM_REDUCE = _amplpy_cplex_swig.CPX_PARAM_REDUCE
CPX_PARAM_PRELINEAR = _amplpy_cplex_swig.CPX_PARAM_PRELINEAR
CPX_PARAM_LPMETHOD = _amplpy_cplex_swig.CPX_PARAM_LPMETHOD
CPX_PARAM_QPMETHOD = _amplpy_cplex_swig.CPX_PARAM_QPMETHOD
CPX_PARAM_WORKDIR = _amplpy_cplex_swig.CPX_PARAM_WORKDIR
CPX_PARAM_WORKMEM = _amplpy_cplex_swig.CPX_PARAM_WORKMEM
CPX_PARAM_THREADS = _amplpy_cplex_swig.CPX_PARAM_THREADS
CPX_PARAM_CONFLICTALG = _amplpy_cplex_swig.CPX_PARAM_CONFLICTALG
CPX_PARAM_CONFLICTDISPLAY = _amplpy_cplex_swig.CPX_PARAM_CONFLICTDISPLAY
CPX_PARAM_SIFTDISPLAY = _amplpy_cplex_swig.CPX_PARAM_SIFTDISPLAY
CPX_PARAM_SIFTALG = _amplpy_cplex_swig.CPX_PARAM_SIFTALG
CPX_PARAM_SIFTITLIM = _amplpy_cplex_swig.CPX_PARAM_SIFTITLIM
CPX_PARAM_MPSLONGNUM = _amplpy_cplex_swig.CPX_PARAM_MPSLONGNUM
CPX_PARAM_MEMORYEMPHASIS = _amplpy_cplex_swig.CPX_PARAM_MEMORYEMPHASIS
CPX_PARAM_NUMERICALEMPHASIS = _amplpy_cplex_swig.CPX_PARAM_NUMERICALEMPHASIS
CPX_PARAM_FEASOPTMODE = _amplpy_cplex_swig.CPX_PARAM_FEASOPTMODE
CPX_PARAM_PARALLELMODE = _amplpy_cplex_swig.CPX_PARAM_PARALLELMODE
CPX_PARAM_TUNINGMEASURE = _amplpy_cplex_swig.CPX_PARAM_TUNINGMEASURE
CPX_PARAM_TUNINGREPEAT = _amplpy_cplex_swig.CPX_PARAM_TUNINGREPEAT
CPX_PARAM_TUNINGTILIM = _amplpy_cplex_swig.CPX_PARAM_TUNINGTILIM
CPX_PARAM_TUNINGDISPLAY = _amplpy_cplex_swig.CPX_PARAM_TUNINGDISPLAY
CPX_PARAM_WRITELEVEL = _amplpy_cplex_swig.CPX_PARAM_WRITELEVEL
CPX_PARAM_RANDOMSEED = _amplpy_cplex_swig.CPX_PARAM_RANDOMSEED
CPX_PARAM_DETTILIM = _amplpy_cplex_swig.CPX_PARAM_DETTILIM
CPX_PARAM_FILEENCODING = _amplpy_cplex_swig.CPX_PARAM_FILEENCODING
CPX_PARAM_APIENCODING = _amplpy_cplex_swig.CPX_PARAM_APIENCODING
CPX_PARAM_OPTIMALITYTARGET = _amplpy_cplex_swig.CPX_PARAM_OPTIMALITYTARGET
CPX_PARAM_CLONELOG = _amplpy_cplex_swig.CPX_PARAM_CLONELOG
CPX_PARAM_TUNINGDETTILIM = _amplpy_cplex_swig.CPX_PARAM_TUNINGDETTILIM
CPX_PARAM_CPUMASK = _amplpy_cplex_swig.CPX_PARAM_CPUMASK
CPX_PARAM_SOLUTIONTYPE = _amplpy_cplex_swig.CPX_PARAM_SOLUTIONTYPE
CPX_PARAM_WARNLIM = _amplpy_cplex_swig.CPX_PARAM_WARNLIM
CPX_PARAM_SIFTSIM = _amplpy_cplex_swig.CPX_PARAM_SIFTSIM
CPX_PARAM_DYNAMICROWS = _amplpy_cplex_swig.CPX_PARAM_DYNAMICROWS
CPX_PARAM_RECORD = _amplpy_cplex_swig.CPX_PARAM_RECORD
CPX_PARAM_PARAMDISPLAY = _amplpy_cplex_swig.CPX_PARAM_PARAMDISPLAY
CPX_PARAM_FOLDING = _amplpy_cplex_swig.CPX_PARAM_FOLDING
CPX_PARAM_WORKERALG = _amplpy_cplex_swig.CPX_PARAM_WORKERALG
CPX_PARAM_BENDERSSTRATEGY = _amplpy_cplex_swig.CPX_PARAM_BENDERSSTRATEGY
CPX_PARAM_BENDERSFEASCUTTOL = _amplpy_cplex_swig.CPX_PARAM_BENDERSFEASCUTTOL
CPX_PARAM_BENDERSOPTCUTTOL = _amplpy_cplex_swig.CPX_PARAM_BENDERSOPTCUTTOL
CPX_PARAM_MULTIOBJDISPLAY = _amplpy_cplex_swig.CPX_PARAM_MULTIOBJDISPLAY
CPX_PARAM_BRDIR = _amplpy_cplex_swig.CPX_PARAM_BRDIR
CPX_PARAM_BTTOL = _amplpy_cplex_swig.CPX_PARAM_BTTOL
CPX_PARAM_CLIQUES = _amplpy_cplex_swig.CPX_PARAM_CLIQUES
CPX_PARAM_COEREDIND = _amplpy_cplex_swig.CPX_PARAM_COEREDIND
CPX_PARAM_COVERS = _amplpy_cplex_swig.CPX_PARAM_COVERS
CPX_PARAM_CUTLO = _amplpy_cplex_swig.CPX_PARAM_CUTLO
CPX_PARAM_CUTUP = _amplpy_cplex_swig.CPX_PARAM_CUTUP
CPX_PARAM_EPAGAP = _amplpy_cplex_swig.CPX_PARAM_EPAGAP
CPX_PARAM_EPGAP = _amplpy_cplex_swig.CPX_PARAM_EPGAP
CPX_PARAM_EPINT = _amplpy_cplex_swig.CPX_PARAM_EPINT
CPX_PARAM_MIPDISPLAY = _amplpy_cplex_swig.CPX_PARAM_MIPDISPLAY
CPX_PARAM_MIPINTERVAL = _amplpy_cplex_swig.CPX_PARAM_MIPINTERVAL
CPX_PARAM_INTSOLLIM = _amplpy_cplex_swig.CPX_PARAM_INTSOLLIM
CPX_PARAM_NODEFILEIND = _amplpy_cplex_swig.CPX_PARAM_NODEFILEIND
CPX_PARAM_NODELIM = _amplpy_cplex_swig.CPX_PARAM_NODELIM
CPX_PARAM_NODESEL = _amplpy_cplex_swig.CPX_PARAM_NODESEL
CPX_PARAM_OBJDIF = _amplpy_cplex_swig.CPX_PARAM_OBJDIF
CPX_PARAM_MIPORDIND = _amplpy_cplex_swig.CPX_PARAM_MIPORDIND
CPX_PARAM_RELOBJDIF = _amplpy_cplex_swig.CPX_PARAM_RELOBJDIF
CPX_PARAM_STARTALG = _amplpy_cplex_swig.CPX_PARAM_STARTALG
CPX_PARAM_SUBALG = _amplpy_cplex_swig.CPX_PARAM_SUBALG
CPX_PARAM_TRELIM = _amplpy_cplex_swig.CPX_PARAM_TRELIM
CPX_PARAM_VARSEL = _amplpy_cplex_swig.CPX_PARAM_VARSEL
CPX_PARAM_BNDSTRENIND = _amplpy_cplex_swig.CPX_PARAM_BNDSTRENIND
CPX_PARAM_HEURFREQ = _amplpy_cplex_swig.CPX_PARAM_HEURFREQ
CPX_PARAM_MIPORDTYPE = _amplpy_cplex_swig.CPX_PARAM_MIPORDTYPE
CPX_PARAM_CUTSFACTOR = _amplpy_cplex_swig.CPX_PARAM_CUTSFACTOR
CPX_PARAM_RELAXPREIND = _amplpy_cplex_swig.CPX_PARAM_RELAXPREIND
CPX_PARAM_PRESLVND = _amplpy_cplex_swig.CPX_PARAM_PRESLVND
CPX_PARAM_BBINTERVAL = _amplpy_cplex_swig.CPX_PARAM_BBINTERVAL
CPX_PARAM_FLOWCOVERS = _amplpy_cplex_swig.CPX_PARAM_FLOWCOVERS
CPX_PARAM_IMPLBD = _amplpy_cplex_swig.CPX_PARAM_IMPLBD
CPX_PARAM_PROBE = _amplpy_cplex_swig.CPX_PARAM_PROBE
CPX_PARAM_GUBCOVERS = _amplpy_cplex_swig.CPX_PARAM_GUBCOVERS
CPX_PARAM_STRONGCANDLIM = _amplpy_cplex_swig.CPX_PARAM_STRONGCANDLIM
CPX_PARAM_STRONGITLIM = _amplpy_cplex_swig.CPX_PARAM_STRONGITLIM
CPX_PARAM_FRACCAND = _amplpy_cplex_swig.CPX_PARAM_FRACCAND
CPX_PARAM_FRACCUTS = _amplpy_cplex_swig.CPX_PARAM_FRACCUTS
CPX_PARAM_FRACPASS = _amplpy_cplex_swig.CPX_PARAM_FRACPASS
CPX_PARAM_FLOWPATHS = _amplpy_cplex_swig.CPX_PARAM_FLOWPATHS
CPX_PARAM_MIRCUTS = _amplpy_cplex_swig.CPX_PARAM_MIRCUTS
CPX_PARAM_DISJCUTS = _amplpy_cplex_swig.CPX_PARAM_DISJCUTS
CPX_PARAM_AGGCUTLIM = _amplpy_cplex_swig.CPX_PARAM_AGGCUTLIM
CPX_PARAM_MIPCBREDLP = _amplpy_cplex_swig.CPX_PARAM_MIPCBREDLP
CPX_PARAM_CUTPASS = _amplpy_cplex_swig.CPX_PARAM_CUTPASS
CPX_PARAM_MIPEMPHASIS = _amplpy_cplex_swig.CPX_PARAM_MIPEMPHASIS
CPX_PARAM_SYMMETRY = _amplpy_cplex_swig.CPX_PARAM_SYMMETRY
CPX_PARAM_DIVETYPE = _amplpy_cplex_swig.CPX_PARAM_DIVETYPE
CPX_PARAM_RINSHEUR = _amplpy_cplex_swig.CPX_PARAM_RINSHEUR
CPX_PARAM_LBHEUR = _amplpy_cplex_swig.CPX_PARAM_LBHEUR
CPX_PARAM_REPEATPRESOLVE = _amplpy_cplex_swig.CPX_PARAM_REPEATPRESOLVE
CPX_PARAM_PROBETIME = _amplpy_cplex_swig.CPX_PARAM_PROBETIME
CPX_PARAM_POLISHTIME = _amplpy_cplex_swig.CPX_PARAM_POLISHTIME
CPX_PARAM_REPAIRTRIES = _amplpy_cplex_swig.CPX_PARAM_REPAIRTRIES
CPX_PARAM_EPLIN = _amplpy_cplex_swig.CPX_PARAM_EPLIN
CPX_PARAM_EPRELAX = _amplpy_cplex_swig.CPX_PARAM_EPRELAX
CPX_PARAM_FPHEUR = _amplpy_cplex_swig.CPX_PARAM_FPHEUR
CPX_PARAM_EACHCUTLIM = _amplpy_cplex_swig.CPX_PARAM_EACHCUTLIM
CPX_PARAM_SOLNPOOLCAPACITY = _amplpy_cplex_swig.CPX_PARAM_SOLNPOOLCAPACITY
CPX_PARAM_SOLNPOOLREPLACE = _amplpy_cplex_swig.CPX_PARAM_SOLNPOOLREPLACE
CPX_PARAM_SOLNPOOLGAP = _amplpy_cplex_swig.CPX_PARAM_SOLNPOOLGAP
CPX_PARAM_SOLNPOOLAGAP = _amplpy_cplex_swig.CPX_PARAM_SOLNPOOLAGAP
CPX_PARAM_SOLNPOOLINTENSITY = _amplpy_cplex_swig.CPX_PARAM_SOLNPOOLINTENSITY
CPX_PARAM_POPULATELIM = _amplpy_cplex_swig.CPX_PARAM_POPULATELIM
CPX_PARAM_MIPSEARCH = _amplpy_cplex_swig.CPX_PARAM_MIPSEARCH
CPX_PARAM_MIQCPSTRAT = _amplpy_cplex_swig.CPX_PARAM_MIQCPSTRAT
CPX_PARAM_ZEROHALFCUTS = _amplpy_cplex_swig.CPX_PARAM_ZEROHALFCUTS
CPX_PARAM_HEUREFFORT = _amplpy_cplex_swig.CPX_PARAM_HEUREFFORT
CPX_PARAM_POLISHAFTEREPAGAP = _amplpy_cplex_swig.CPX_PARAM_POLISHAFTEREPAGAP
CPX_PARAM_POLISHAFTEREPGAP = _amplpy_cplex_swig.CPX_PARAM_POLISHAFTEREPGAP
CPX_PARAM_POLISHAFTERNODE = _amplpy_cplex_swig.CPX_PARAM_POLISHAFTERNODE
CPX_PARAM_POLISHAFTERINTSOL = _amplpy_cplex_swig.CPX_PARAM_POLISHAFTERINTSOL
CPX_PARAM_POLISHAFTERTIME = _amplpy_cplex_swig.CPX_PARAM_POLISHAFTERTIME
CPX_PARAM_MCFCUTS = _amplpy_cplex_swig.CPX_PARAM_MCFCUTS
CPX_PARAM_MIPKAPPASTATS = _amplpy_cplex_swig.CPX_PARAM_MIPKAPPASTATS
CPX_PARAM_AUXROOTTHREADS = _amplpy_cplex_swig.CPX_PARAM_AUXROOTTHREADS
CPX_PARAM_INTSOLFILEPREFIX = _amplpy_cplex_swig.CPX_PARAM_INTSOLFILEPREFIX
CPX_PARAM_PROBEDETTIME = _amplpy_cplex_swig.CPX_PARAM_PROBEDETTIME
CPX_PARAM_POLISHAFTERDETTIME = _amplpy_cplex_swig.CPX_PARAM_POLISHAFTERDETTIME
CPX_PARAM_LANDPCUTS = _amplpy_cplex_swig.CPX_PARAM_LANDPCUTS
CPX_PARAM_RAMPUPDURATION = _amplpy_cplex_swig.CPX_PARAM_RAMPUPDURATION
CPX_PARAM_RAMPUPDETTILIM = _amplpy_cplex_swig.CPX_PARAM_RAMPUPDETTILIM
CPX_PARAM_RAMPUPTILIM = _amplpy_cplex_swig.CPX_PARAM_RAMPUPTILIM
CPX_PARAM_LOCALIMPLBD = _amplpy_cplex_swig.CPX_PARAM_LOCALIMPLBD
CPX_PARAM_BQPCUTS = _amplpy_cplex_swig.CPX_PARAM_BQPCUTS
CPX_PARAM_RLTCUTS = _amplpy_cplex_swig.CPX_PARAM_RLTCUTS
CPX_PARAM_SUBMIPSTARTALG = _amplpy_cplex_swig.CPX_PARAM_SUBMIPSTARTALG
CPX_PARAM_SUBMIPSUBALG = _amplpy_cplex_swig.CPX_PARAM_SUBMIPSUBALG
CPX_PARAM_SUBMIPSCAIND = _amplpy_cplex_swig.CPX_PARAM_SUBMIPSCAIND
CPX_PARAM_SUBMIPNODELIMIT = _amplpy_cplex_swig.CPX_PARAM_SUBMIPNODELIMIT
CPX_PARAM_BAREPCOMP = _amplpy_cplex_swig.CPX_PARAM_BAREPCOMP
CPX_PARAM_BARGROWTH = _amplpy_cplex_swig.CPX_PARAM_BARGROWTH
CPX_PARAM_BAROBJRNG = _amplpy_cplex_swig.CPX_PARAM_BAROBJRNG
CPX_PARAM_BARALG = _amplpy_cplex_swig.CPX_PARAM_BARALG
CPX_PARAM_BARCOLNZ = _amplpy_cplex_swig.CPX_PARAM_BARCOLNZ
CPX_PARAM_BARDISPLAY = _amplpy_cplex_swig.CPX_PARAM_BARDISPLAY
CPX_PARAM_BARITLIM = _amplpy_cplex_swig.CPX_PARAM_BARITLIM
CPX_PARAM_BARMAXCOR = _amplpy_cplex_swig.CPX_PARAM_BARMAXCOR
CPX_PARAM_BARORDER = _amplpy_cplex_swig.CPX_PARAM_BARORDER
CPX_PARAM_BARSTARTALG = _amplpy_cplex_swig.CPX_PARAM_BARSTARTALG
CPX_PARAM_BARCROSSALG = _amplpy_cplex_swig.CPX_PARAM_BARCROSSALG
CPX_PARAM_BARQCPEPCOMP = _amplpy_cplex_swig.CPX_PARAM_BARQCPEPCOMP
CPX_PARAM_QPNZREADLIM = _amplpy_cplex_swig.CPX_PARAM_QPNZREADLIM
CPX_PARAM_CALCQCPDUALS = _amplpy_cplex_swig.CPX_PARAM_CALCQCPDUALS
CPX_PARAM_QPMAKEPSDIND = _amplpy_cplex_swig.CPX_PARAM_QPMAKEPSDIND
CPX_PARAM_QTOLININD = _amplpy_cplex_swig.CPX_PARAM_QTOLININD
CPX_PARAM_NETITLIM = _amplpy_cplex_swig.CPX_PARAM_NETITLIM
CPX_PARAM_NETEPOPT = _amplpy_cplex_swig.CPX_PARAM_NETEPOPT
CPX_PARAM_NETEPRHS = _amplpy_cplex_swig.CPX_PARAM_NETEPRHS
CPX_PARAM_NETPPRIIND = _amplpy_cplex_swig.CPX_PARAM_NETPPRIIND
CPX_PARAM_NETDISPLAY = _amplpy_cplex_swig.CPX_PARAM_NETDISPLAY
CPX_CPXAUTOTYPES_H_H = _amplpy_cplex_swig.CPX_CPXAUTOTYPES_H_H
CPX_CPXAUTOSTRUCTS_H_H = _amplpy_cplex_swig.CPX_CPXAUTOSTRUCTS_H_H
class cpxdeserializer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getbyte = property(_amplpy_cplex_swig.cpxdeserializer_getbyte_get, _amplpy_cplex_swig.cpxdeserializer_getbyte_set)
    getshort = property(_amplpy_cplex_swig.cpxdeserializer_getshort_get, _amplpy_cplex_swig.cpxdeserializer_getshort_set)
    getint = property(_amplpy_cplex_swig.cpxdeserializer_getint_get, _amplpy_cplex_swig.cpxdeserializer_getint_set)
    getlong = property(_amplpy_cplex_swig.cpxdeserializer_getlong_get, _amplpy_cplex_swig.cpxdeserializer_getlong_set)
    getfloat = property(_amplpy_cplex_swig.cpxdeserializer_getfloat_get, _amplpy_cplex_swig.cpxdeserializer_getfloat_set)
    getdouble = property(_amplpy_cplex_swig.cpxdeserializer_getdouble_get, _amplpy_cplex_swig.cpxdeserializer_getdouble_set)
    getbytes = property(_amplpy_cplex_swig.cpxdeserializer_getbytes_get, _amplpy_cplex_swig.cpxdeserializer_getbytes_set)
    getshorts = property(_amplpy_cplex_swig.cpxdeserializer_getshorts_get, _amplpy_cplex_swig.cpxdeserializer_getshorts_set)
    getints = property(_amplpy_cplex_swig.cpxdeserializer_getints_get, _amplpy_cplex_swig.cpxdeserializer_getints_set)
    getlongs = property(_amplpy_cplex_swig.cpxdeserializer_getlongs_get, _amplpy_cplex_swig.cpxdeserializer_getlongs_set)
    getfloats = property(_amplpy_cplex_swig.cpxdeserializer_getfloats_get, _amplpy_cplex_swig.cpxdeserializer_getfloats_set)
    getdoubles = property(_amplpy_cplex_swig.cpxdeserializer_getdoubles_get, _amplpy_cplex_swig.cpxdeserializer_getdoubles_set)

    def __init__(self):
        _amplpy_cplex_swig.cpxdeserializer_swiginit(self, _amplpy_cplex_swig.new_cpxdeserializer())
    __swig_destroy__ = _amplpy_cplex_swig.delete_cpxdeserializer

# Register cpxdeserializer in _amplpy_cplex_swig:
_amplpy_cplex_swig.cpxdeserializer_swigregister(cpxdeserializer)

class cpxserializer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    addbyte = property(_amplpy_cplex_swig.cpxserializer_addbyte_get, _amplpy_cplex_swig.cpxserializer_addbyte_set)
    addshort = property(_amplpy_cplex_swig.cpxserializer_addshort_get, _amplpy_cplex_swig.cpxserializer_addshort_set)
    addint = property(_amplpy_cplex_swig.cpxserializer_addint_get, _amplpy_cplex_swig.cpxserializer_addint_set)
    addlong = property(_amplpy_cplex_swig.cpxserializer_addlong_get, _amplpy_cplex_swig.cpxserializer_addlong_set)
    addfloat = property(_amplpy_cplex_swig.cpxserializer_addfloat_get, _amplpy_cplex_swig.cpxserializer_addfloat_set)
    adddouble = property(_amplpy_cplex_swig.cpxserializer_adddouble_get, _amplpy_cplex_swig.cpxserializer_adddouble_set)
    addbytes = property(_amplpy_cplex_swig.cpxserializer_addbytes_get, _amplpy_cplex_swig.cpxserializer_addbytes_set)
    addshorts = property(_amplpy_cplex_swig.cpxserializer_addshorts_get, _amplpy_cplex_swig.cpxserializer_addshorts_set)
    addints = property(_amplpy_cplex_swig.cpxserializer_addints_get, _amplpy_cplex_swig.cpxserializer_addints_set)
    addlongs = property(_amplpy_cplex_swig.cpxserializer_addlongs_get, _amplpy_cplex_swig.cpxserializer_addlongs_set)
    addfloats = property(_amplpy_cplex_swig.cpxserializer_addfloats_get, _amplpy_cplex_swig.cpxserializer_addfloats_set)
    adddoubles = property(_amplpy_cplex_swig.cpxserializer_adddoubles_get, _amplpy_cplex_swig.cpxserializer_adddoubles_set)

    def __init__(self):
        _amplpy_cplex_swig.cpxserializer_swiginit(self, _amplpy_cplex_swig.new_cpxserializer())
    __swig_destroy__ = _amplpy_cplex_swig.delete_cpxserializer

# Register cpxserializer in _amplpy_cplex_swig:
_amplpy_cplex_swig.cpxserializer_swigregister(cpxserializer)

CPX_H = _amplpy_cplex_swig.CPX_H

def CPXaddcols(env, lp, ccnt, nzcnt, obj, cmatbeg, cmatind, cmatval, lb, ub, colname):
    return _amplpy_cplex_swig.CPXaddcols(env, lp, ccnt, nzcnt, obj, cmatbeg, cmatind, cmatval, lb, ub, colname)

def CPXaddfuncdest(env, channel, handle, msgfunction):
    return _amplpy_cplex_swig.CPXaddfuncdest(env, channel, handle, msgfunction)

def CPXaddpwl(env, lp, vary, varx, preslope, postslope, nbreaks, breakx, breaky, pwlname):
    return _amplpy_cplex_swig.CPXaddpwl(env, lp, vary, varx, preslope, postslope, nbreaks, breakx, breaky, pwlname)

def CPXaddrows(env, lp, ccnt, rcnt, nzcnt, rhs, sense, rmatbeg, rmatind, rmatval, colname, rowname):
    return _amplpy_cplex_swig.CPXaddrows(env, lp, ccnt, rcnt, nzcnt, rhs, sense, rmatbeg, rmatind, rmatval, colname, rowname)

def CPXbasicpresolve(env, lp, redlb, redub, rstat):
    return _amplpy_cplex_swig.CPXbasicpresolve(env, lp, redlb, redub, rstat)

def CPXbinvacol(env, lp, j, x):
    return _amplpy_cplex_swig.CPXbinvacol(env, lp, j, x)

def CPXbinvarow(env, lp, i, z):
    return _amplpy_cplex_swig.CPXbinvarow(env, lp, i, z)

def CPXbinvcol(env, lp, j, x):
    return _amplpy_cplex_swig.CPXbinvcol(env, lp, j, x)

def CPXbinvrow(env, lp, i, y):
    return _amplpy_cplex_swig.CPXbinvrow(env, lp, i, y)

def CPXboundsa(env, lp, begin, end, lblower, lbupper, ublower, ubupper):
    return _amplpy_cplex_swig.CPXboundsa(env, lp, begin, end, lblower, lbupper, ublower, ubupper)

def CPXbtran(env, lp, y):
    return _amplpy_cplex_swig.CPXbtran(env, lp, y)

def CPXcallbackabort(context):
    return _amplpy_cplex_swig.CPXcallbackabort(context)

def CPXcallbackaddusercuts(context, rcnt, nzcnt, rhs, sense, rmatbeg, rmatind, rmatval, purgeable, local):
    return _amplpy_cplex_swig.CPXcallbackaddusercuts(context, rcnt, nzcnt, rhs, sense, rmatbeg, rmatind, rmatval, purgeable, local)

def CPXcallbackcandidateispoint(context, ispoint_p):
    return _amplpy_cplex_swig.CPXcallbackcandidateispoint(context, ispoint_p)

def CPXcallbackcandidateisray(context, isray_p):
    return _amplpy_cplex_swig.CPXcallbackcandidateisray(context, isray_p)

def CPXcallbackexitcutloop(context):
    return _amplpy_cplex_swig.CPXcallbackexitcutloop(context)

def CPXcallbackgetcandidatepoint(context, x, begin, end, obj_p):
    return _amplpy_cplex_swig.CPXcallbackgetcandidatepoint(context, x, begin, end, obj_p)

def CPXcallbackgetcandidateray(context, x, begin, end):
    return _amplpy_cplex_swig.CPXcallbackgetcandidateray(context, x, begin, end)

def CPXcallbackgetfunc(env, lp, contextmask_p, callback_p, cbhandle_p):
    return _amplpy_cplex_swig.CPXcallbackgetfunc(env, lp, contextmask_p, callback_p, cbhandle_p)

def CPXcallbackgetincumbent(context, x, begin, end, obj_p):
    return _amplpy_cplex_swig.CPXcallbackgetincumbent(context, x, begin, end, obj_p)

def CPXcallbackgetinfodbl(context, what, data_p):
    return _amplpy_cplex_swig.CPXcallbackgetinfodbl(context, what, data_p)

def CPXcallbackgetinfoint(context, what, data_p):
    return _amplpy_cplex_swig.CPXcallbackgetinfoint(context, what, data_p)

def CPXcallbackgetinfolong(context, what, data_p):
    return _amplpy_cplex_swig.CPXcallbackgetinfolong(context, what, data_p)

def CPXcallbackgetrelaxationpoint(context, x, begin, end, obj_p):
    return _amplpy_cplex_swig.CPXcallbackgetrelaxationpoint(context, x, begin, end, obj_p)

def CPXcallbackgetrelaxationstatus(context, nodelpstat_p, flags):
    return _amplpy_cplex_swig.CPXcallbackgetrelaxationstatus(context, nodelpstat_p, flags)

def CPXcallbackmakebranch(context, varcnt, varind, varlu, varbd, rcnt, nzcnt, rhs, sense, rmatbeg, rmatind, rmatval, nodeest, seqnum_p):
    return _amplpy_cplex_swig.CPXcallbackmakebranch(context, varcnt, varind, varlu, varbd, rcnt, nzcnt, rhs, sense, rmatbeg, rmatind, rmatval, nodeest, seqnum_p)

def CPXcallbackpostheursoln(context, cnt, ind, val, obj, strat):
    return _amplpy_cplex_swig.CPXcallbackpostheursoln(context, cnt, ind, val, obj, strat)

def CPXcallbackprunenode(context):
    return _amplpy_cplex_swig.CPXcallbackprunenode(context)

def CPXcallbackrejectcandidate(context, rcnt, nzcnt, rhs, sense, rmatbeg, rmatind, rmatval):
    return _amplpy_cplex_swig.CPXcallbackrejectcandidate(context, rcnt, nzcnt, rhs, sense, rmatbeg, rmatind, rmatval)

def CPXcallbacksetfunc(env, lp, contextmask, callback, userhandle):
    return _amplpy_cplex_swig.CPXcallbacksetfunc(env, lp, contextmask, callback, userhandle)

def CPXcheckdfeas(env, lp, infeas_p):
    return _amplpy_cplex_swig.CPXcheckdfeas(env, lp, infeas_p)

def CPXcheckpfeas(env, lp, infeas_p):
    return _amplpy_cplex_swig.CPXcheckpfeas(env, lp, infeas_p)

def CPXchecksoln(env, lp, lpstatus_p):
    return _amplpy_cplex_swig.CPXchecksoln(env, lp, lpstatus_p)

def CPXchgbds(env, lp, cnt, indices, lu, bd):
    return _amplpy_cplex_swig.CPXchgbds(env, lp, cnt, indices, lu, bd)

def CPXchgcoef(env, lp, i, j, newvalue):
    return _amplpy_cplex_swig.CPXchgcoef(env, lp, i, j, newvalue)

def CPXchgcoeflist(env, lp, numcoefs, rowlist, collist, vallist):
    return _amplpy_cplex_swig.CPXchgcoeflist(env, lp, numcoefs, rowlist, collist, vallist)

def CPXchgcolname(env, lp, cnt, indices, newname):
    return _amplpy_cplex_swig.CPXchgcolname(env, lp, cnt, indices, newname)

def CPXchgname(env, lp, key, ij, newname_str):
    return _amplpy_cplex_swig.CPXchgname(env, lp, key, ij, newname_str)

def CPXchgobj(env, lp, cnt, indices, values):
    return _amplpy_cplex_swig.CPXchgobj(env, lp, cnt, indices, values)

def CPXchgobjoffset(env, lp, offset):
    return _amplpy_cplex_swig.CPXchgobjoffset(env, lp, offset)

def CPXchgobjsen(env, lp, maxormin):
    return _amplpy_cplex_swig.CPXchgobjsen(env, lp, maxormin)

def CPXchgprobname(env, lp, probname):
    return _amplpy_cplex_swig.CPXchgprobname(env, lp, probname)

def CPXchgprobtype(env, lp, type):
    return _amplpy_cplex_swig.CPXchgprobtype(env, lp, type)

def CPXchgprobtypesolnpool(env, lp, type, soln):
    return _amplpy_cplex_swig.CPXchgprobtypesolnpool(env, lp, type, soln)

def CPXchgrhs(env, lp, cnt, indices, values):
    return _amplpy_cplex_swig.CPXchgrhs(env, lp, cnt, indices, values)

def CPXchgrngval(env, lp, cnt, indices, values):
    return _amplpy_cplex_swig.CPXchgrngval(env, lp, cnt, indices, values)

def CPXchgrowname(env, lp, cnt, indices, newname):
    return _amplpy_cplex_swig.CPXchgrowname(env, lp, cnt, indices, newname)

def CPXchgsense(env, lp, cnt, indices, sense):
    return _amplpy_cplex_swig.CPXchgsense(env, lp, cnt, indices, sense)

def CPXcleanup(env, lp, eps):
    return _amplpy_cplex_swig.CPXcleanup(env, lp, eps)

def CPXcloneprob(env, lp, status_p):
    return _amplpy_cplex_swig.CPXcloneprob(env, lp, status_p)

def CPXcloseCPLEX(env_p):
    return _amplpy_cplex_swig.CPXcloseCPLEX(env_p)

def CPXclpwrite(env, lp, filename_str):
    return _amplpy_cplex_swig.CPXclpwrite(env, lp, filename_str)

def CPXcompletelp(env, lp):
    return _amplpy_cplex_swig.CPXcompletelp(env, lp)

def CPXcopybase(env, lp, cstat, rstat):
    return _amplpy_cplex_swig.CPXcopybase(env, lp, cstat, rstat)

def CPXcopybasednorms(env, lp, cstat, rstat, dnorm):
    return _amplpy_cplex_swig.CPXcopybasednorms(env, lp, cstat, rstat, dnorm)

def CPXcopydnorms(env, lp, norm, head, len):
    return _amplpy_cplex_swig.CPXcopydnorms(env, lp, norm, head, len)

def CPXcopylp(env, lp, numcols, numrows, objsense, objective, rhs, sense, matbeg, matcnt, matind, matval, lb, ub, rngval):
    return _amplpy_cplex_swig.CPXcopylp(env, lp, numcols, numrows, objsense, objective, rhs, sense, matbeg, matcnt, matind, matval, lb, ub, rngval)

def CPXcopylpwnames(env, lp, numcols, numrows, objsense, objective, rhs, sense, matbeg, matcnt, matind, matval, lb, ub, rngval, colname, rowname):
    return _amplpy_cplex_swig.CPXcopylpwnames(env, lp, numcols, numrows, objsense, objective, rhs, sense, matbeg, matcnt, matind, matval, lb, ub, rngval, colname, rowname)

def CPXcopynettolp(env, lp, net):
    return _amplpy_cplex_swig.CPXcopynettolp(env, lp, net)

def CPXcopyobjname(env, lp, objname_str):
    return _amplpy_cplex_swig.CPXcopyobjname(env, lp, objname_str)

def CPXcopypnorms(env, lp, cnorm, rnorm, len):
    return _amplpy_cplex_swig.CPXcopypnorms(env, lp, cnorm, rnorm, len)

def CPXcopyprotected(env, lp, cnt, indices):
    return _amplpy_cplex_swig.CPXcopyprotected(env, lp, cnt, indices)

def CPXcopystart(env, lp, cstat, rstat, cprim, rprim, cdual, rdual):
    return _amplpy_cplex_swig.CPXcopystart(env, lp, cstat, rstat, cprim, rprim, cdual, rdual)

def CPXcreateprob(env, status_p, probname_str):
    return _amplpy_cplex_swig.CPXcreateprob(env, status_p, probname_str)

def CPXcrushform(env, lp, len, ind, val, plen_p, poffset_p, pind, pval):
    return _amplpy_cplex_swig.CPXcrushform(env, lp, len, ind, val, plen_p, poffset_p, pind, pval)

def CPXcrushpi(env, lp, pi, prepi):
    return _amplpy_cplex_swig.CPXcrushpi(env, lp, pi, prepi)

def CPXcrushx(env, lp, x, prex):
    return _amplpy_cplex_swig.CPXcrushx(env, lp, x, prex)

def CPXdelcols(env, lp, begin, end):
    return _amplpy_cplex_swig.CPXdelcols(env, lp, begin, end)

def CPXdeldblannotation(env, lp, idx):
    return _amplpy_cplex_swig.CPXdeldblannotation(env, lp, idx)

def CPXdeldblannotations(env, lp, begin, end):
    return _amplpy_cplex_swig.CPXdeldblannotations(env, lp, begin, end)

def CPXdelfuncdest(env, channel, handle, msgfunction):
    return _amplpy_cplex_swig.CPXdelfuncdest(env, channel, handle, msgfunction)

def CPXdellongannotation(env, lp, idx):
    return _amplpy_cplex_swig.CPXdellongannotation(env, lp, idx)

def CPXdellongannotations(env, lp, begin, end):
    return _amplpy_cplex_swig.CPXdellongannotations(env, lp, begin, end)

def CPXdelnames(env, lp):
    return _amplpy_cplex_swig.CPXdelnames(env, lp)

def CPXdelpwl(env, lp, begin, end):
    return _amplpy_cplex_swig.CPXdelpwl(env, lp, begin, end)

def CPXdelrows(env, lp, begin, end):
    return _amplpy_cplex_swig.CPXdelrows(env, lp, begin, end)

def CPXdelsetcols(env, lp, delstat):
    return _amplpy_cplex_swig.CPXdelsetcols(env, lp, delstat)

def CPXdelsetpwl(env, lp, delstat):
    return _amplpy_cplex_swig.CPXdelsetpwl(env, lp, delstat)

def CPXdelsetrows(env, lp, delstat):
    return _amplpy_cplex_swig.CPXdelsetrows(env, lp, delstat)

def CPXdeserializercreate(deser_p, size, buffer):
    return _amplpy_cplex_swig.CPXdeserializercreate(deser_p, size, buffer)

def CPXdeserializerdestroy(deser):
    return _amplpy_cplex_swig.CPXdeserializerdestroy(deser)

def CPXdeserializerleft(deser):
    return _amplpy_cplex_swig.CPXdeserializerleft(deser)

def CPXdisconnectchannel(env, channel):
    return _amplpy_cplex_swig.CPXdisconnectchannel(env, channel)

def CPXdjfrompi(env, lp, pi, dj):
    return _amplpy_cplex_swig.CPXdjfrompi(env, lp, pi, dj)

def CPXdperwrite(env, lp, filename_str, epsilon):
    return _amplpy_cplex_swig.CPXdperwrite(env, lp, filename_str, epsilon)

def CPXdratio(env, lp, indices, cnt, downratio, upratio, downenter, upenter, downstatus, upstatus):
    return _amplpy_cplex_swig.CPXdratio(env, lp, indices, cnt, downratio, upratio, downenter, upenter, downstatus, upstatus)

def CPXdualfarkas(env, lp, y, proof_p):
    return _amplpy_cplex_swig.CPXdualfarkas(env, lp, y, proof_p)

def CPXdualopt(env, lp):
    return _amplpy_cplex_swig.CPXdualopt(env, lp)

def CPXdualwrite(env, lp, filename_str, objshift_p):
    return _amplpy_cplex_swig.CPXdualwrite(env, lp, filename_str, objshift_p)

def CPXembwrite(env, lp, filename_str):
    return _amplpy_cplex_swig.CPXembwrite(env, lp, filename_str)

def CPXfeasopt(env, lp, rhs, rng, lb, ub):
    return _amplpy_cplex_swig.CPXfeasopt(env, lp, rhs, rng, lb, ub)

def CPXfeasoptext(env, lp, grpcnt, concnt, grppref, grpbeg, grpind, grptype):
    return _amplpy_cplex_swig.CPXfeasoptext(env, lp, grpcnt, concnt, grppref, grpbeg, grpind, grptype)

def CPXfinalize():
    return _amplpy_cplex_swig.CPXfinalize()

def CPXflushchannel(env, channel):
    return _amplpy_cplex_swig.CPXflushchannel(env, channel)

def CPXflushstdchannels(env):
    return _amplpy_cplex_swig.CPXflushstdchannels(env)

def CPXfreepresolve(env, lp):
    return _amplpy_cplex_swig.CPXfreepresolve(env, lp)

def CPXfreeprob(env, lp_p):
    return _amplpy_cplex_swig.CPXfreeprob(env, lp_p)

def CPXftran(env, lp, x):
    return _amplpy_cplex_swig.CPXftran(env, lp, x)

def CPXgetax(env, lp, x, begin, end):
    return _amplpy_cplex_swig.CPXgetax(env, lp, x, begin, end)

def CPXgetbaritcnt(env, lp):
    return _amplpy_cplex_swig.CPXgetbaritcnt(env, lp)

def CPXgetbase(env, lp, cstat, rstat):
    return _amplpy_cplex_swig.CPXgetbase(env, lp, cstat, rstat)

def CPXgetbasednorms(env, lp, cstat, rstat, dnorm):
    return _amplpy_cplex_swig.CPXgetbasednorms(env, lp, cstat, rstat, dnorm)

def CPXgetbhead(env, lp, head, x):
    return _amplpy_cplex_swig.CPXgetbhead(env, lp, head, x)

def CPXgetcallbackinfo(env, cbdata, wherefrom, whichinfo, result_p):
    return _amplpy_cplex_swig.CPXgetcallbackinfo(env, cbdata, wherefrom, whichinfo, result_p)

def CPXgetchannels(env, cpxresults_p, cpxwarning_p, cpxerror_p, cpxlog_p):
    return _amplpy_cplex_swig.CPXgetchannels(env, cpxresults_p, cpxwarning_p, cpxerror_p, cpxlog_p)

def CPXgetchgparam(env, cnt_p, paramnum, pspace, surplus_p):
    return _amplpy_cplex_swig.CPXgetchgparam(env, cnt_p, paramnum, pspace, surplus_p)

def CPXgetcoef(env, lp, i, j, coef_p):
    return _amplpy_cplex_swig.CPXgetcoef(env, lp, i, j, coef_p)

def CPXgetcolindex(env, lp, lname_str, index_p):
    return _amplpy_cplex_swig.CPXgetcolindex(env, lp, lname_str, index_p)

def CPXgetcolinfeas(env, lp, x, infeasout, begin, end):
    return _amplpy_cplex_swig.CPXgetcolinfeas(env, lp, x, infeasout, begin, end)

def CPXgetcolname(env, lp, name, namestore, storespace, surplus_p, begin, end):
    return _amplpy_cplex_swig.CPXgetcolname(env, lp, name, namestore, storespace, surplus_p, begin, end)

def CPXgetcols(env, lp, nzcnt_p, cmatbeg, cmatind, cmatval, cmatspace, surplus_p, begin, end):
    return _amplpy_cplex_swig.CPXgetcols(env, lp, nzcnt_p, cmatbeg, cmatind, cmatval, cmatspace, surplus_p, begin, end)

def CPXgetconflict(env, lp, confstat_p, rowind, rowbdstat, confnumrows_p, colind, colbdstat, confnumcols_p):
    return _amplpy_cplex_swig.CPXgetconflict(env, lp, confstat_p, rowind, rowbdstat, confnumrows_p, colind, colbdstat, confnumcols_p)

def CPXgetconflictext(env, lp, grpstat, beg, end):
    return _amplpy_cplex_swig.CPXgetconflictext(env, lp, grpstat, beg, end)

def CPXgetcrossdexchcnt(env, lp):
    return _amplpy_cplex_swig.CPXgetcrossdexchcnt(env, lp)

def CPXgetcrossdpushcnt(env, lp):
    return _amplpy_cplex_swig.CPXgetcrossdpushcnt(env, lp)

def CPXgetcrosspexchcnt(env, lp):
    return _amplpy_cplex_swig.CPXgetcrosspexchcnt(env, lp)

def CPXgetcrossppushcnt(env, lp):
    return _amplpy_cplex_swig.CPXgetcrossppushcnt(env, lp)

def CPXgetdblannotationdefval(env, lp, idx, defval_p):
    return _amplpy_cplex_swig.CPXgetdblannotationdefval(env, lp, idx, defval_p)

def CPXgetdblannotationindex(env, lp, annotationname_str, index_p):
    return _amplpy_cplex_swig.CPXgetdblannotationindex(env, lp, annotationname_str, index_p)

def CPXgetdblannotationname(env, lp, idx, buf_str, bufspace, surplus_p):
    return _amplpy_cplex_swig.CPXgetdblannotationname(env, lp, idx, buf_str, bufspace, surplus_p)

def CPXgetdblannotations(env, lp, idx, objtype, annotation, begin, end):
    return _amplpy_cplex_swig.CPXgetdblannotations(env, lp, idx, objtype, annotation, begin, end)

def CPXgetdblparam(env, whichparam, value_p):
    return _amplpy_cplex_swig.CPXgetdblparam(env, whichparam, value_p)

def CPXgetdblquality(env, lp, quality_p, what):
    return _amplpy_cplex_swig.CPXgetdblquality(env, lp, quality_p, what)

def CPXgetdettime(env, dettimestamp_p):
    return _amplpy_cplex_swig.CPXgetdettime(env, dettimestamp_p)

def CPXgetdj(env, lp, dj, begin, end):
    return _amplpy_cplex_swig.CPXgetdj(env, lp, dj, begin, end)

def CPXgetdnorms(env, lp, norm, head, len_p):
    return _amplpy_cplex_swig.CPXgetdnorms(env, lp, norm, head, len_p)

def CPXgetdsbcnt(env, lp):
    return _amplpy_cplex_swig.CPXgetdsbcnt(env, lp)

def CPXgeterrorstring(env, errcode, buffer_str):
    return _amplpy_cplex_swig.CPXgeterrorstring(env, errcode, buffer_str)

def CPXgetgrad(env, lp, j, head, y):
    return _amplpy_cplex_swig.CPXgetgrad(env, lp, j, head, y)

def CPXgetijdiv(env, lp, idiv_p, jdiv_p):
    return _amplpy_cplex_swig.CPXgetijdiv(env, lp, idiv_p, jdiv_p)

def CPXgetijrow(env, lp, i, j, row_p):
    return _amplpy_cplex_swig.CPXgetijrow(env, lp, i, j, row_p)

def CPXgetintparam(env, whichparam, value_p):
    return _amplpy_cplex_swig.CPXgetintparam(env, whichparam, value_p)

def CPXgetintquality(env, lp, quality_p, what):
    return _amplpy_cplex_swig.CPXgetintquality(env, lp, quality_p, what)

def CPXgetitcnt(env, lp):
    return _amplpy_cplex_swig.CPXgetitcnt(env, lp)

def CPXgetlb(env, lp, lb, begin, end):
    return _amplpy_cplex_swig.CPXgetlb(env, lp, lb, begin, end)

def CPXgetlogfilename(env, buf_str, bufspace, surplus_p):
    return _amplpy_cplex_swig.CPXgetlogfilename(env, buf_str, bufspace, surplus_p)

def CPXgetlongannotationdefval(env, lp, idx, defval_p):
    return _amplpy_cplex_swig.CPXgetlongannotationdefval(env, lp, idx, defval_p)

def CPXgetlongannotationindex(env, lp, annotationname_str, index_p):
    return _amplpy_cplex_swig.CPXgetlongannotationindex(env, lp, annotationname_str, index_p)

def CPXgetlongannotationname(env, lp, idx, buf_str, bufspace, surplus_p):
    return _amplpy_cplex_swig.CPXgetlongannotationname(env, lp, idx, buf_str, bufspace, surplus_p)

def CPXgetlongannotations(env, lp, idx, objtype, annotation, begin, end):
    return _amplpy_cplex_swig.CPXgetlongannotations(env, lp, idx, objtype, annotation, begin, end)

def CPXgetlongparam(env, whichparam, value_p):
    return _amplpy_cplex_swig.CPXgetlongparam(env, whichparam, value_p)

def CPXgetlpcallbackfunc(env, callback_p, cbhandle_p):
    return _amplpy_cplex_swig.CPXgetlpcallbackfunc(env, callback_p, cbhandle_p)

def CPXgetmethod(env, lp):
    return _amplpy_cplex_swig.CPXgetmethod(env, lp)

def CPXgetnetcallbackfunc(env, callback_p, cbhandle_p):
    return _amplpy_cplex_swig.CPXgetnetcallbackfunc(env, callback_p, cbhandle_p)

def CPXgetnumcols(env, lp):
    return _amplpy_cplex_swig.CPXgetnumcols(env, lp)

def CPXgetnumcores(env, numcores_p):
    return _amplpy_cplex_swig.CPXgetnumcores(env, numcores_p)

def CPXgetnumdblannotations(env, lp):
    return _amplpy_cplex_swig.CPXgetnumdblannotations(env, lp)

def CPXgetnumlongannotations(env, lp):
    return _amplpy_cplex_swig.CPXgetnumlongannotations(env, lp)

def CPXgetnumnz(env, lp):
    return _amplpy_cplex_swig.CPXgetnumnz(env, lp)

def CPXgetnumobjs(env, lp):
    return _amplpy_cplex_swig.CPXgetnumobjs(env, lp)

def CPXgetnumpwl(env, lp):
    return _amplpy_cplex_swig.CPXgetnumpwl(env, lp)

def CPXgetnumrows(env, lp):
    return _amplpy_cplex_swig.CPXgetnumrows(env, lp)

def CPXgetobj(env, lp, obj, begin, end):
    return _amplpy_cplex_swig.CPXgetobj(env, lp, obj, begin, end)

def CPXgetobjname(env, lp, buf_str, bufspace, surplus_p):
    return _amplpy_cplex_swig.CPXgetobjname(env, lp, buf_str, bufspace, surplus_p)

def CPXgetobjoffset(env, lp, objoffset_p):
    return _amplpy_cplex_swig.CPXgetobjoffset(env, lp, objoffset_p)

def CPXgetobjsen(env, lp):
    return _amplpy_cplex_swig.CPXgetobjsen(env, lp)

def CPXgetobjval(env, lp, objval_p):
    return _amplpy_cplex_swig.CPXgetobjval(env, lp, objval_p)

def CPXgetparamhiername(env, whichparam, name_str):
    return _amplpy_cplex_swig.CPXgetparamhiername(env, whichparam, name_str)

def CPXgetparamname(env, whichparam, name_str):
    return _amplpy_cplex_swig.CPXgetparamname(env, whichparam, name_str)

def CPXgetparamnum(env, name_str, whichparam_p):
    return _amplpy_cplex_swig.CPXgetparamnum(env, name_str, whichparam_p)

def CPXgetparamtype(env, whichparam, paramtype):
    return _amplpy_cplex_swig.CPXgetparamtype(env, whichparam, paramtype)

def CPXgetphase1cnt(env, lp):
    return _amplpy_cplex_swig.CPXgetphase1cnt(env, lp)

def CPXgetpi(env, lp, pi, begin, end):
    return _amplpy_cplex_swig.CPXgetpi(env, lp, pi, begin, end)

def CPXgetpnorms(env, lp, cnorm, rnorm, len_p):
    return _amplpy_cplex_swig.CPXgetpnorms(env, lp, cnorm, rnorm, len_p)

def CPXgetprestat(env, lp, prestat_p, pcstat, prstat, ocstat, orstat):
    return _amplpy_cplex_swig.CPXgetprestat(env, lp, prestat_p, pcstat, prstat, ocstat, orstat)

def CPXgetprobname(env, lp, buf_str, bufspace, surplus_p):
    return _amplpy_cplex_swig.CPXgetprobname(env, lp, buf_str, bufspace, surplus_p)

def CPXgetprobtype(env, lp):
    return _amplpy_cplex_swig.CPXgetprobtype(env, lp)

def CPXgetprotected(env, lp, cnt_p, indices, pspace, surplus_p):
    return _amplpy_cplex_swig.CPXgetprotected(env, lp, cnt_p, indices, pspace, surplus_p)

def CPXgetpsbcnt(env, lp):
    return _amplpy_cplex_swig.CPXgetpsbcnt(env, lp)

def CPXgetpwl(env, lp, pwlindex, vary_p, varx_p, preslope_p, postslope_p, nbreaks_p, breakx, breaky, breakspace, surplus_p):
    return _amplpy_cplex_swig.CPXgetpwl(env, lp, pwlindex, vary_p, varx_p, preslope_p, postslope_p, nbreaks_p, breakx, breaky, breakspace, surplus_p)

def CPXgetpwlindex(env, lp, lname_str, index_p):
    return _amplpy_cplex_swig.CPXgetpwlindex(env, lp, lname_str, index_p)

def CPXgetpwlname(env, lp, buf_str, bufspace, surplus_p, which):
    return _amplpy_cplex_swig.CPXgetpwlname(env, lp, buf_str, bufspace, surplus_p, which)

def CPXgetray(env, lp, z):
    return _amplpy_cplex_swig.CPXgetray(env, lp, z)

def CPXgetredlp(env, lp, redlp_p):
    return _amplpy_cplex_swig.CPXgetredlp(env, lp, redlp_p)

def CPXgetrhs(env, lp, rhs, begin, end):
    return _amplpy_cplex_swig.CPXgetrhs(env, lp, rhs, begin, end)

def CPXgetrngval(env, lp, rngval, begin, end):
    return _amplpy_cplex_swig.CPXgetrngval(env, lp, rngval, begin, end)

def CPXgetrowindex(env, lp, lname_str, index_p):
    return _amplpy_cplex_swig.CPXgetrowindex(env, lp, lname_str, index_p)

def CPXgetrowinfeas(env, lp, x, infeasout, begin, end):
    return _amplpy_cplex_swig.CPXgetrowinfeas(env, lp, x, infeasout, begin, end)

def CPXgetrowname(env, lp, name, namestore, storespace, surplus_p, begin, end):
    return _amplpy_cplex_swig.CPXgetrowname(env, lp, name, namestore, storespace, surplus_p, begin, end)

def CPXgetrows(env, lp, nzcnt_p, rmatbeg, rmatind, rmatval, rmatspace, surplus_p, begin, end):
    return _amplpy_cplex_swig.CPXgetrows(env, lp, nzcnt_p, rmatbeg, rmatind, rmatval, rmatspace, surplus_p, begin, end)

def CPXgetsense(env, lp, sense, begin, end):
    return _amplpy_cplex_swig.CPXgetsense(env, lp, sense, begin, end)

def CPXgetsiftitcnt(env, lp):
    return _amplpy_cplex_swig.CPXgetsiftitcnt(env, lp)

def CPXgetsiftphase1cnt(env, lp):
    return _amplpy_cplex_swig.CPXgetsiftphase1cnt(env, lp)

def CPXgetslack(env, lp, slack, begin, end):
    return _amplpy_cplex_swig.CPXgetslack(env, lp, slack, begin, end)

def CPXgetsolnpooldblquality(env, lp, soln, quality_p, what):
    return _amplpy_cplex_swig.CPXgetsolnpooldblquality(env, lp, soln, quality_p, what)

def CPXgetsolnpoolintquality(env, lp, soln, quality_p, what):
    return _amplpy_cplex_swig.CPXgetsolnpoolintquality(env, lp, soln, quality_p, what)

def CPXgetstat(env, lp):
    return _amplpy_cplex_swig.CPXgetstat(env, lp)

def CPXgetstatstring(env, statind, buffer_str):
    return _amplpy_cplex_swig.CPXgetstatstring(env, statind, buffer_str)

def CPXgetstrparam(env, whichparam, value_str):
    return _amplpy_cplex_swig.CPXgetstrparam(env, whichparam, value_str)

def CPXgettime(env, timestamp_p):
    return _amplpy_cplex_swig.CPXgettime(env, timestamp_p)

def CPXgettuningcallbackfunc(env, callback_p, cbhandle_p):
    return _amplpy_cplex_swig.CPXgettuningcallbackfunc(env, callback_p, cbhandle_p)

def CPXgetub(env, lp, ub, begin, end):
    return _amplpy_cplex_swig.CPXgetub(env, lp, ub, begin, end)

def CPXgetweight(env, lp, rcnt, rmatbeg, rmatind, rmatval, weight, dpriind):
    return _amplpy_cplex_swig.CPXgetweight(env, lp, rcnt, rmatbeg, rmatind, rmatval, weight, dpriind)

def CPXgetx(env, lp, x, begin, end):
    return _amplpy_cplex_swig.CPXgetx(env, lp, x, begin, end)

def CPXhybnetopt(env, lp, method):
    return _amplpy_cplex_swig.CPXhybnetopt(env, lp, method)

def CPXinfodblparam(env, whichparam, defvalue_p, minvalue_p, maxvalue_p):
    return _amplpy_cplex_swig.CPXinfodblparam(env, whichparam, defvalue_p, minvalue_p, maxvalue_p)

def CPXinfointparam(env, whichparam, defvalue_p, minvalue_p, maxvalue_p):
    return _amplpy_cplex_swig.CPXinfointparam(env, whichparam, defvalue_p, minvalue_p, maxvalue_p)

def CPXinfolongparam(env, whichparam, defvalue_p, minvalue_p, maxvalue_p):
    return _amplpy_cplex_swig.CPXinfolongparam(env, whichparam, defvalue_p, minvalue_p, maxvalue_p)

def CPXinfostrparam(env, whichparam, defvalue_str):
    return _amplpy_cplex_swig.CPXinfostrparam(env, whichparam, defvalue_str)

def CPXinitialize():
    return _amplpy_cplex_swig.CPXinitialize()

def CPXkilldnorms(lp):
    return _amplpy_cplex_swig.CPXkilldnorms(lp)

def CPXkillpnorms(lp):
    return _amplpy_cplex_swig.CPXkillpnorms(lp)

def CPXlpopt(env, lp):
    return _amplpy_cplex_swig.CPXlpopt(env, lp)

def CPXlprewrite(env, lp, filename_str):
    return _amplpy_cplex_swig.CPXlprewrite(env, lp, filename_str)

def CPXlpwrite(env, lp, filename_str):
    return _amplpy_cplex_swig.CPXlpwrite(env, lp, filename_str)

def CPXmbasewrite(env, lp, filename_str):
    return _amplpy_cplex_swig.CPXmbasewrite(env, lp, filename_str)

def CPXmdleave(env, lp, indices, cnt, downratio, upratio):
    return _amplpy_cplex_swig.CPXmdleave(env, lp, indices, cnt, downratio, upratio)

def CPXmodelasstcallbackgetfunc(env, lp, callback_p, cbhandle_p):
    return _amplpy_cplex_swig.CPXmodelasstcallbackgetfunc(env, lp, callback_p, cbhandle_p)

def CPXmodelasstcallbacksetfunc(env, lp, callback, userhandle):
    return _amplpy_cplex_swig.CPXmodelasstcallbacksetfunc(env, lp, callback, userhandle)

def CPXmpsrewrite(env, lp, filename_str):
    return _amplpy_cplex_swig.CPXmpsrewrite(env, lp, filename_str)

def CPXmpswrite(env, lp, filename_str):
    return _amplpy_cplex_swig.CPXmpswrite(env, lp, filename_str)

def CPXmsg(*args):
    return _amplpy_cplex_swig.CPXmsg(*args)

def CPXmsgstr(channel, msg_str):
    return _amplpy_cplex_swig.CPXmsgstr(channel, msg_str)

def CPXmultiobjchgattribs(env, lp, objind, offset, weight, priority, abstol, reltol, name):
    return _amplpy_cplex_swig.CPXmultiobjchgattribs(env, lp, objind, offset, weight, priority, abstol, reltol, name)

def CPXmultiobjgetdblinfo(env, lp, subprob, info_p, what):
    return _amplpy_cplex_swig.CPXmultiobjgetdblinfo(env, lp, subprob, info_p, what)

def CPXmultiobjgetindex(env, lp, name, index_p):
    return _amplpy_cplex_swig.CPXmultiobjgetindex(env, lp, name, index_p)

def CPXmultiobjgetintinfo(env, lp, subprob, info_p, what):
    return _amplpy_cplex_swig.CPXmultiobjgetintinfo(env, lp, subprob, info_p, what)

def CPXmultiobjgetlonginfo(env, lp, subprob, info_p, what):
    return _amplpy_cplex_swig.CPXmultiobjgetlonginfo(env, lp, subprob, info_p, what)

def CPXmultiobjgetname(env, lp, objind, buf_str, bufspace, surplus_p):
    return _amplpy_cplex_swig.CPXmultiobjgetname(env, lp, objind, buf_str, bufspace, surplus_p)

def CPXmultiobjgetnumsolves(env, lp):
    return _amplpy_cplex_swig.CPXmultiobjgetnumsolves(env, lp)

def CPXmultiobjgetobj(env, lp, n, coeffs, begin, end, offset_p, weight_p, priority_p, abstol_p, reltol_p):
    return _amplpy_cplex_swig.CPXmultiobjgetobj(env, lp, n, coeffs, begin, end, offset_p, weight_p, priority_p, abstol_p, reltol_p)

def CPXmultiobjgetobjval(env, lp, n, objval_p):
    return _amplpy_cplex_swig.CPXmultiobjgetobjval(env, lp, n, objval_p)

def CPXmultiobjgetobjvalbypriority(env, lp, priority, objval_p):
    return _amplpy_cplex_swig.CPXmultiobjgetobjvalbypriority(env, lp, priority, objval_p)

def CPXmultiobjopt(env, lp, paramsets):
    return _amplpy_cplex_swig.CPXmultiobjopt(env, lp, paramsets)

def CPXmultiobjsetobj(env, lp, n, objnz, objind, objval, offset, weight, priority, abstol, reltol, objname):
    return _amplpy_cplex_swig.CPXmultiobjsetobj(env, lp, n, objnz, objind, objval, offset, weight, priority, abstol, reltol, objname)

def CPXNETextract(env, net, lp, colmap, rowmap):
    return _amplpy_cplex_swig.CPXNETextract(env, net, lp, colmap, rowmap)

def CPXnewcols(env, lp, ccnt, obj, lb, ub, xctype, colname):
    return _amplpy_cplex_swig.CPXnewcols(env, lp, ccnt, obj, lb, ub, xctype, colname)

def CPXnewdblannotation(env, lp, annotationname_str, defval):
    return _amplpy_cplex_swig.CPXnewdblannotation(env, lp, annotationname_str, defval)

def CPXnewlongannotation(env, lp, annotationname_str, defval):
    return _amplpy_cplex_swig.CPXnewlongannotation(env, lp, annotationname_str, defval)

def CPXnewrows(env, lp, rcnt, rhs, sense, rngval, rowname):
    return _amplpy_cplex_swig.CPXnewrows(env, lp, rcnt, rhs, sense, rngval, rowname)

def CPXobjsa(env, lp, begin, end, lower, upper):
    return _amplpy_cplex_swig.CPXobjsa(env, lp, begin, end, lower, upper)

def CPXopenCPLEX(status_p):
    return _amplpy_cplex_swig.CPXopenCPLEX(status_p)

def CPXparamsetadddbl(env, ps, whichparam, newvalue):
    return _amplpy_cplex_swig.CPXparamsetadddbl(env, ps, whichparam, newvalue)

def CPXparamsetaddint(env, ps, whichparam, newvalue):
    return _amplpy_cplex_swig.CPXparamsetaddint(env, ps, whichparam, newvalue)

def CPXparamsetaddlong(env, ps, whichparam, newvalue):
    return _amplpy_cplex_swig.CPXparamsetaddlong(env, ps, whichparam, newvalue)

def CPXparamsetaddstr(env, ps, whichparam, svalue):
    return _amplpy_cplex_swig.CPXparamsetaddstr(env, ps, whichparam, svalue)

def CPXparamsetapply(env, ps):
    return _amplpy_cplex_swig.CPXparamsetapply(env, ps)

def CPXparamsetcopy(targetenv, targetps, sourceps):
    return _amplpy_cplex_swig.CPXparamsetcopy(targetenv, targetps, sourceps)

def CPXparamsetcreate(env, status_p):
    return _amplpy_cplex_swig.CPXparamsetcreate(env, status_p)

def CPXparamsetdel(env, ps, whichparam):
    return _amplpy_cplex_swig.CPXparamsetdel(env, ps, whichparam)

def CPXparamsetfree(env, ps_p):
    return _amplpy_cplex_swig.CPXparamsetfree(env, ps_p)

def CPXparamsetgetdbl(env, ps, whichparam, dval_p):
    return _amplpy_cplex_swig.CPXparamsetgetdbl(env, ps, whichparam, dval_p)

def CPXparamsetgetids(env, ps, cnt_p, whichparams, pspace, surplus_p):
    return _amplpy_cplex_swig.CPXparamsetgetids(env, ps, cnt_p, whichparams, pspace, surplus_p)

def CPXparamsetgetint(env, ps, whichparam, ival_p):
    return _amplpy_cplex_swig.CPXparamsetgetint(env, ps, whichparam, ival_p)

def CPXparamsetgetlong(env, ps, whichparam, ival_p):
    return _amplpy_cplex_swig.CPXparamsetgetlong(env, ps, whichparam, ival_p)

def CPXparamsetgetstr(env, ps, whichparam, sval):
    return _amplpy_cplex_swig.CPXparamsetgetstr(env, ps, whichparam, sval)

def CPXparamsetreadcopy(env, ps, filename_str):
    return _amplpy_cplex_swig.CPXparamsetreadcopy(env, ps, filename_str)

def CPXparamsetwrite(env, ps, filename_str):
    return _amplpy_cplex_swig.CPXparamsetwrite(env, ps, filename_str)

def CPXpivot(env, lp, jenter, jleave, leavestat):
    return _amplpy_cplex_swig.CPXpivot(env, lp, jenter, jleave, leavestat)

def CPXpivotin(env, lp, rlist, rlen):
    return _amplpy_cplex_swig.CPXpivotin(env, lp, rlist, rlen)

def CPXpivotout(env, lp, clist, clen):
    return _amplpy_cplex_swig.CPXpivotout(env, lp, clist, clen)

def CPXpperwrite(env, lp, filename_str, epsilon):
    return _amplpy_cplex_swig.CPXpperwrite(env, lp, filename_str, epsilon)

def CPXpratio(env, lp, indices, cnt, downratio, upratio, downleave, upleave, downleavestatus, upleavestatus, downstatus, upstatus):
    return _amplpy_cplex_swig.CPXpratio(env, lp, indices, cnt, downratio, upratio, downleave, upleave, downleavestatus, upleavestatus, downstatus, upstatus)

def CPXpreaddrows(env, lp, rcnt, nzcnt, rhs, sense, rmatbeg, rmatind, rmatval, rowname):
    return _amplpy_cplex_swig.CPXpreaddrows(env, lp, rcnt, nzcnt, rhs, sense, rmatbeg, rmatind, rmatval, rowname)

def CPXprechgobj(env, lp, cnt, indices, values):
    return _amplpy_cplex_swig.CPXprechgobj(env, lp, cnt, indices, values)

def CPXpreslvwrite(env, lp, filename_str, objoff_p):
    return _amplpy_cplex_swig.CPXpreslvwrite(env, lp, filename_str, objoff_p)

def CPXpresolve(env, lp, method):
    return _amplpy_cplex_swig.CPXpresolve(env, lp, method)

def CPXprimopt(env, lp):
    return _amplpy_cplex_swig.CPXprimopt(env, lp)

def CPXqpdjfrompi(env, lp, pi, x, dj):
    return _amplpy_cplex_swig.CPXqpdjfrompi(env, lp, pi, x, dj)

def CPXqpuncrushpi(env, lp, pi, prepi, x):
    return _amplpy_cplex_swig.CPXqpuncrushpi(env, lp, pi, prepi, x)

def CPXreadcopyannotations(env, lp, filename):
    return _amplpy_cplex_swig.CPXreadcopyannotations(env, lp, filename)

def CPXreadcopybase(env, lp, filename_str):
    return _amplpy_cplex_swig.CPXreadcopybase(env, lp, filename_str)

def CPXreadcopyparam(env, filename_str):
    return _amplpy_cplex_swig.CPXreadcopyparam(env, filename_str)

def CPXreadcopyprob(env, lp, filename_str, filetype):
    return _amplpy_cplex_swig.CPXreadcopyprob(env, lp, filename_str, filetype)

def CPXreadcopysol(env, lp, filename_str):
    return _amplpy_cplex_swig.CPXreadcopysol(env, lp, filename_str)

def CPXrefineconflict(env, lp, confnumrows_p, confnumcols_p):
    return _amplpy_cplex_swig.CPXrefineconflict(env, lp, confnumrows_p, confnumcols_p)

def CPXrefineconflictext(env, lp, grpcnt, concnt, grppref, grpbeg, grpind, grptype):
    return _amplpy_cplex_swig.CPXrefineconflictext(env, lp, grpcnt, concnt, grppref, grpbeg, grpind, grptype)

def CPXrhssa(env, lp, begin, end, lower, upper):
    return _amplpy_cplex_swig.CPXrhssa(env, lp, begin, end, lower, upper)

def CPXrobustopt(env, lp, lblp, ublp, objchg, maxchg):
    return _amplpy_cplex_swig.CPXrobustopt(env, lp, lblp, ublp, objchg, maxchg)

def CPXsavwrite(env, lp, filename_str):
    return _amplpy_cplex_swig.CPXsavwrite(env, lp, filename_str)

def CPXserializercreate(ser_p):
    return _amplpy_cplex_swig.CPXserializercreate(ser_p)

def CPXserializerdestroy(ser):
    return _amplpy_cplex_swig.CPXserializerdestroy(ser)

def CPXserializerlength(ser):
    return _amplpy_cplex_swig.CPXserializerlength(ser)

def CPXserializerpayload(ser):
    return _amplpy_cplex_swig.CPXserializerpayload(ser)

def CPXsetdblannotations(env, lp, idx, objtype, cnt, indices, values):
    return _amplpy_cplex_swig.CPXsetdblannotations(env, lp, idx, objtype, cnt, indices, values)

def CPXsetdblparam(env, whichparam, newvalue):
    return _amplpy_cplex_swig.CPXsetdblparam(env, whichparam, newvalue)

def CPXsetdefaults(env):
    return _amplpy_cplex_swig.CPXsetdefaults(env)

def CPXsetintparam(env, whichparam, newvalue):
    return _amplpy_cplex_swig.CPXsetintparam(env, whichparam, newvalue)

def CPXsetlogfilename(env, filename, mode):
    return _amplpy_cplex_swig.CPXsetlogfilename(env, filename, mode)

def CPXsetlongannotations(env, lp, idx, objtype, cnt, indices, values):
    return _amplpy_cplex_swig.CPXsetlongannotations(env, lp, idx, objtype, cnt, indices, values)

def CPXsetlongparam(env, whichparam, newvalue):
    return _amplpy_cplex_swig.CPXsetlongparam(env, whichparam, newvalue)

def CPXsetlpcallbackfunc(env, callback, cbhandle):
    return _amplpy_cplex_swig.CPXsetlpcallbackfunc(env, callback, cbhandle)

def CPXsetnetcallbackfunc(env, callback, cbhandle):
    return _amplpy_cplex_swig.CPXsetnetcallbackfunc(env, callback, cbhandle)

def CPXsetnumobjs(env, lp, n):
    return _amplpy_cplex_swig.CPXsetnumobjs(env, lp, n)

def CPXsetphase2(env, lp):
    return _amplpy_cplex_swig.CPXsetphase2(env, lp)

def CPXsetprofcallbackfunc(env, callback, cbhandle):
    return _amplpy_cplex_swig.CPXsetprofcallbackfunc(env, callback, cbhandle)

def CPXsetstrparam(env, whichparam, newvalue_str):
    return _amplpy_cplex_swig.CPXsetstrparam(env, whichparam, newvalue_str)

def CPXsetterminate(env, terminate_p):
    return _amplpy_cplex_swig.CPXsetterminate(env, terminate_p)

def CPXsettuningcallbackfunc(env, callback, cbhandle):
    return _amplpy_cplex_swig.CPXsettuningcallbackfunc(env, callback, cbhandle)

def CPXsiftopt(env, lp):
    return _amplpy_cplex_swig.CPXsiftopt(env, lp)

def CPXslackfromx(env, lp, x, slack):
    return _amplpy_cplex_swig.CPXslackfromx(env, lp, x, slack)

def CPXsolninfo(env, lp, solnmethod_p, solntype_p, pfeasind_p, dfeasind_p):
    return _amplpy_cplex_swig.CPXsolninfo(env, lp, solnmethod_p, solntype_p, pfeasind_p, dfeasind_p)

def CPXsolution(env, lp, lpstat_p, objval_p, x, pi, slack, dj):
    return _amplpy_cplex_swig.CPXsolution(env, lp, lpstat_p, objval_p, x, pi, slack, dj)

def CPXsolwrite(env, lp, filename_str):
    return _amplpy_cplex_swig.CPXsolwrite(env, lp, filename_str)

def CPXsolwritesolnpool(env, lp, soln, filename_str):
    return _amplpy_cplex_swig.CPXsolwritesolnpool(env, lp, soln, filename_str)

def CPXsolwritesolnpoolall(env, lp, filename_str):
    return _amplpy_cplex_swig.CPXsolwritesolnpoolall(env, lp, filename_str)

def CPXstrongbranch(env, lp, indices, cnt, downobj, upobj, itlim):
    return _amplpy_cplex_swig.CPXstrongbranch(env, lp, indices, cnt, downobj, upobj, itlim)

def CPXtightenbds(env, lp, cnt, indices, lu, bd):
    return _amplpy_cplex_swig.CPXtightenbds(env, lp, cnt, indices, lu, bd)

def CPXtuneparam(env, lp, intcnt, intnum, intval, dblcnt, dblnum, dblval, strcnt, strnum, strval, tunestat_p):
    return _amplpy_cplex_swig.CPXtuneparam(env, lp, intcnt, intnum, intval, dblcnt, dblnum, dblval, strcnt, strnum, strval, tunestat_p)

def CPXtuneparamprobset(env, filecnt, filename, filetype, intcnt, intnum, intval, dblcnt, dblnum, dblval, strcnt, strnum, strval, tunestat_p):
    return _amplpy_cplex_swig.CPXtuneparamprobset(env, filecnt, filename, filetype, intcnt, intnum, intval, dblcnt, dblnum, dblval, strcnt, strnum, strval, tunestat_p)

def CPXuncrushform(env, lp, plen, pind, pval, len_p, offset_p, ind, val):
    return _amplpy_cplex_swig.CPXuncrushform(env, lp, plen, pind, pval, len_p, offset_p, ind, val)

def CPXuncrushpi(env, lp, pi, prepi):
    return _amplpy_cplex_swig.CPXuncrushpi(env, lp, pi, prepi)

def CPXuncrushx(env, lp, x, prex):
    return _amplpy_cplex_swig.CPXuncrushx(env, lp, x, prex)

def CPXunscaleprob(env, lp):
    return _amplpy_cplex_swig.CPXunscaleprob(env, lp)

def CPXversion(env):
    return _amplpy_cplex_swig.CPXversion(env)

def CPXversionnumber(env, version_p):
    return _amplpy_cplex_swig.CPXversionnumber(env, version_p)

def CPXwriteannotations(env, lp, filename):
    return _amplpy_cplex_swig.CPXwriteannotations(env, lp, filename)

def CPXwritebendersannotation(env, lp, filename):
    return _amplpy_cplex_swig.CPXwritebendersannotation(env, lp, filename)

def CPXwriteparam(env, filename_str):
    return _amplpy_cplex_swig.CPXwriteparam(env, filename_str)

def CPXwriteprob(env, lp, filename_str, filetype):
    return _amplpy_cplex_swig.CPXwriteprob(env, lp, filename_str, filetype)
CPXBAR_H = _amplpy_cplex_swig.CPXBAR_H

def CPXbaropt(env, lp):
    return _amplpy_cplex_swig.CPXbaropt(env, lp)

def CPXhybbaropt(env, lp, method):
    return _amplpy_cplex_swig.CPXhybbaropt(env, lp, method)
CPXMIP_H = _amplpy_cplex_swig.CPXMIP_H

def CPXaddindconstraints(env, lp, indcnt, type, indvar, complemented, nzcnt, rhs, sense, linbeg, linind, linval, indname):
    return _amplpy_cplex_swig.CPXaddindconstraints(env, lp, indcnt, type, indvar, complemented, nzcnt, rhs, sense, linbeg, linind, linval, indname)

def CPXaddlazyconstraints(env, lp, rcnt, nzcnt, rhs, sense, rmatbeg, rmatind, rmatval, rowname):
    return _amplpy_cplex_swig.CPXaddlazyconstraints(env, lp, rcnt, nzcnt, rhs, sense, rmatbeg, rmatind, rmatval, rowname)

def CPXaddmipstarts(env, lp, mcnt, nzcnt, beg, varindices, values, effortlevel, mipstartname):
    return _amplpy_cplex_swig.CPXaddmipstarts(env, lp, mcnt, nzcnt, beg, varindices, values, effortlevel, mipstartname)

def CPXaddsolnpooldivfilter(env, lp, lower_bound, upper_bound, nzcnt, ind, weight, refval, lname_str):
    return _amplpy_cplex_swig.CPXaddsolnpooldivfilter(env, lp, lower_bound, upper_bound, nzcnt, ind, weight, refval, lname_str)

def CPXaddsolnpoolrngfilter(env, lp, lb, ub, nzcnt, ind, val, lname_str):
    return _amplpy_cplex_swig.CPXaddsolnpoolrngfilter(env, lp, lb, ub, nzcnt, ind, val, lname_str)

def CPXaddsos(env, lp, numsos, numsosnz, sostype, sosbeg, sosind, soswt, sosname):
    return _amplpy_cplex_swig.CPXaddsos(env, lp, numsos, numsosnz, sostype, sosbeg, sosind, soswt, sosname)

def CPXaddusercuts(env, lp, rcnt, nzcnt, rhs, sense, rmatbeg, rmatind, rmatval, rowname):
    return _amplpy_cplex_swig.CPXaddusercuts(env, lp, rcnt, nzcnt, rhs, sense, rmatbeg, rmatind, rmatval, rowname)

def CPXbendersopt(env, lp):
    return _amplpy_cplex_swig.CPXbendersopt(env, lp)

def CPXbranchcallbackbranchasCPLEX(env, cbdata, wherefrom, num, userhandle, seqnum_p):
    return _amplpy_cplex_swig.CPXbranchcallbackbranchasCPLEX(env, cbdata, wherefrom, num, userhandle, seqnum_p)

def CPXbranchcallbackbranchbds(env, cbdata, wherefrom, cnt, indices, lu, bd, nodeest, userhandle, seqnum_p):
    return _amplpy_cplex_swig.CPXbranchcallbackbranchbds(env, cbdata, wherefrom, cnt, indices, lu, bd, nodeest, userhandle, seqnum_p)

def CPXbranchcallbackbranchconstraints(env, cbdata, wherefrom, rcnt, nzcnt, rhs, sense, rmatbeg, rmatind, rmatval, nodeest, userhandle, seqnum_p):
    return _amplpy_cplex_swig.CPXbranchcallbackbranchconstraints(env, cbdata, wherefrom, rcnt, nzcnt, rhs, sense, rmatbeg, rmatind, rmatval, nodeest, userhandle, seqnum_p)

def CPXbranchcallbackbranchgeneral(env, cbdata, wherefrom, varcnt, varind, varlu, varbd, rcnt, nzcnt, rhs, sense, rmatbeg, rmatind, rmatval, nodeest, userhandle, seqnum_p):
    return _amplpy_cplex_swig.CPXbranchcallbackbranchgeneral(env, cbdata, wherefrom, varcnt, varind, varlu, varbd, rcnt, nzcnt, rhs, sense, rmatbeg, rmatind, rmatval, nodeest, userhandle, seqnum_p)

def CPXcallbackgetgloballb(context, lb, begin, end):
    return _amplpy_cplex_swig.CPXcallbackgetgloballb(context, lb, begin, end)

def CPXcallbackgetglobalub(context, ub, begin, end):
    return _amplpy_cplex_swig.CPXcallbackgetglobalub(context, ub, begin, end)

def CPXcallbackgetlocallb(context, lb, begin, end):
    return _amplpy_cplex_swig.CPXcallbackgetlocallb(context, lb, begin, end)

def CPXcallbackgetlocalub(context, ub, begin, end):
    return _amplpy_cplex_swig.CPXcallbackgetlocalub(context, ub, begin, end)

def CPXcallbacksetnodeuserhandle(env, cbdata, wherefrom, nodeindex, userhandle, olduserhandle_p):
    return _amplpy_cplex_swig.CPXcallbacksetnodeuserhandle(env, cbdata, wherefrom, nodeindex, userhandle, olduserhandle_p)

def CPXcallbacksetuserhandle(env, cbdata, wherefrom, userhandle, olduserhandle_p):
    return _amplpy_cplex_swig.CPXcallbacksetuserhandle(env, cbdata, wherefrom, userhandle, olduserhandle_p)

def CPXchgctype(env, lp, cnt, indices, xctype):
    return _amplpy_cplex_swig.CPXchgctype(env, lp, cnt, indices, xctype)

def CPXchgmipstarts(env, lp, mcnt, mipstartindices, nzcnt, beg, varindices, values, effortlevel):
    return _amplpy_cplex_swig.CPXchgmipstarts(env, lp, mcnt, mipstartindices, nzcnt, beg, varindices, values, effortlevel)

def CPXcopyctype(env, lp, xctype):
    return _amplpy_cplex_swig.CPXcopyctype(env, lp, xctype)

def CPXcopyorder(env, lp, cnt, indices, priority, direction):
    return _amplpy_cplex_swig.CPXcopyorder(env, lp, cnt, indices, priority, direction)

def CPXcopysos(env, lp, numsos, numsosnz, sostype, sosbeg, sosind, soswt, sosname):
    return _amplpy_cplex_swig.CPXcopysos(env, lp, numsos, numsosnz, sostype, sosbeg, sosind, soswt, sosname)

def CPXcutcallbackadd(env, cbdata, wherefrom, nzcnt, rhs, sense, cutind, cutval, purgeable):
    return _amplpy_cplex_swig.CPXcutcallbackadd(env, cbdata, wherefrom, nzcnt, rhs, sense, cutind, cutval, purgeable)

def CPXcutcallbackaddlocal(env, cbdata, wherefrom, nzcnt, rhs, sense, cutind, cutval):
    return _amplpy_cplex_swig.CPXcutcallbackaddlocal(env, cbdata, wherefrom, nzcnt, rhs, sense, cutind, cutval)

def CPXdelindconstrs(env, lp, begin, end):
    return _amplpy_cplex_swig.CPXdelindconstrs(env, lp, begin, end)

def CPXdelmipstarts(env, lp, begin, end):
    return _amplpy_cplex_swig.CPXdelmipstarts(env, lp, begin, end)

def CPXdelsetmipstarts(env, lp, delstat):
    return _amplpy_cplex_swig.CPXdelsetmipstarts(env, lp, delstat)

def CPXdelsetsolnpoolfilters(env, lp, delstat):
    return _amplpy_cplex_swig.CPXdelsetsolnpoolfilters(env, lp, delstat)

def CPXdelsetsolnpoolsolns(env, lp, delstat):
    return _amplpy_cplex_swig.CPXdelsetsolnpoolsolns(env, lp, delstat)

def CPXdelsetsos(env, lp, delset):
    return _amplpy_cplex_swig.CPXdelsetsos(env, lp, delset)

def CPXdelsolnpoolfilters(env, lp, begin, end):
    return _amplpy_cplex_swig.CPXdelsolnpoolfilters(env, lp, begin, end)

def CPXdelsolnpoolsolns(env, lp, begin, end):
    return _amplpy_cplex_swig.CPXdelsolnpoolsolns(env, lp, begin, end)

def CPXdelsos(env, lp, begin, end):
    return _amplpy_cplex_swig.CPXdelsos(env, lp, begin, end)

def CPXfltwrite(env, lp, filename_str):
    return _amplpy_cplex_swig.CPXfltwrite(env, lp, filename_str)

def CPXfreelazyconstraints(env, lp):
    return _amplpy_cplex_swig.CPXfreelazyconstraints(env, lp)

def CPXfreeusercuts(env, lp):
    return _amplpy_cplex_swig.CPXfreeusercuts(env, lp)

def CPXgetbestobjval(env, lp, objval_p):
    return _amplpy_cplex_swig.CPXgetbestobjval(env, lp, objval_p)

def CPXgetbranchcallbackfunc(env, branchcallback_p, cbhandle_p):
    return _amplpy_cplex_swig.CPXgetbranchcallbackfunc(env, branchcallback_p, cbhandle_p)

def CPXgetbranchnosolncallbackfunc(env, branchnosolncallback_p, cbhandle_p):
    return _amplpy_cplex_swig.CPXgetbranchnosolncallbackfunc(env, branchnosolncallback_p, cbhandle_p)

def CPXgetcallbackbranchconstraints(env, cbdata, wherefrom, which, cuts_p, nzcnt_p, rhs, sense, rmatbeg, rmatind, rmatval, rmatsz, surplus_p):
    return _amplpy_cplex_swig.CPXgetcallbackbranchconstraints(env, cbdata, wherefrom, which, cuts_p, nzcnt_p, rhs, sense, rmatbeg, rmatind, rmatval, rmatsz, surplus_p)

def CPXgetcallbackctype(env, cbdata, wherefrom, xctype, begin, end):
    return _amplpy_cplex_swig.CPXgetcallbackctype(env, cbdata, wherefrom, xctype, begin, end)

def CPXgetcallbackgloballb(env, cbdata, wherefrom, lb, begin, end):
    return _amplpy_cplex_swig.CPXgetcallbackgloballb(env, cbdata, wherefrom, lb, begin, end)

def CPXgetcallbackglobalub(env, cbdata, wherefrom, ub, begin, end):
    return _amplpy_cplex_swig.CPXgetcallbackglobalub(env, cbdata, wherefrom, ub, begin, end)

def CPXgetcallbackincumbent(env, cbdata, wherefrom, x, begin, end):
    return _amplpy_cplex_swig.CPXgetcallbackincumbent(env, cbdata, wherefrom, x, begin, end)

def CPXgetcallbackindicatorinfo(env, cbdata, wherefrom, iindex, whichinfo, result_p):
    return _amplpy_cplex_swig.CPXgetcallbackindicatorinfo(env, cbdata, wherefrom, iindex, whichinfo, result_p)

def CPXgetcallbacklp(env, cbdata, wherefrom, lp_p):
    return _amplpy_cplex_swig.CPXgetcallbacklp(env, cbdata, wherefrom, lp_p)

def CPXgetcallbacknodeinfo(env, cbdata, wherefrom, nodeindex, whichinfo, result_p):
    return _amplpy_cplex_swig.CPXgetcallbacknodeinfo(env, cbdata, wherefrom, nodeindex, whichinfo, result_p)

def CPXgetcallbacknodeintfeas(env, cbdata, wherefrom, feas, begin, end):
    return _amplpy_cplex_swig.CPXgetcallbacknodeintfeas(env, cbdata, wherefrom, feas, begin, end)

def CPXgetcallbacknodelb(env, cbdata, wherefrom, lb, begin, end):
    return _amplpy_cplex_swig.CPXgetcallbacknodelb(env, cbdata, wherefrom, lb, begin, end)

def CPXgetcallbacknodelp(env, cbdata, wherefrom, nodelp_p):
    return _amplpy_cplex_swig.CPXgetcallbacknodelp(env, cbdata, wherefrom, nodelp_p)

def CPXgetcallbacknodeobjval(env, cbdata, wherefrom, objval_p):
    return _amplpy_cplex_swig.CPXgetcallbacknodeobjval(env, cbdata, wherefrom, objval_p)

def CPXgetcallbacknodestat(env, cbdata, wherefrom, nodestat_p):
    return _amplpy_cplex_swig.CPXgetcallbacknodestat(env, cbdata, wherefrom, nodestat_p)

def CPXgetcallbacknodeub(env, cbdata, wherefrom, ub, begin, end):
    return _amplpy_cplex_swig.CPXgetcallbacknodeub(env, cbdata, wherefrom, ub, begin, end)

def CPXgetcallbacknodex(env, cbdata, wherefrom, x, begin, end):
    return _amplpy_cplex_swig.CPXgetcallbacknodex(env, cbdata, wherefrom, x, begin, end)

def CPXgetcallbackorder(env, cbdata, wherefrom, priority, direction, begin, end):
    return _amplpy_cplex_swig.CPXgetcallbackorder(env, cbdata, wherefrom, priority, direction, begin, end)

def CPXgetcallbackpseudocosts(env, cbdata, wherefrom, uppc, downpc, begin, end):
    return _amplpy_cplex_swig.CPXgetcallbackpseudocosts(env, cbdata, wherefrom, uppc, downpc, begin, end)

def CPXgetcallbackseqinfo(env, cbdata, wherefrom, seqid, whichinfo, result_p):
    return _amplpy_cplex_swig.CPXgetcallbackseqinfo(env, cbdata, wherefrom, seqid, whichinfo, result_p)

def CPXgetcallbacksosinfo(env, cbdata, wherefrom, sosindex, member, whichinfo, result_p):
    return _amplpy_cplex_swig.CPXgetcallbacksosinfo(env, cbdata, wherefrom, sosindex, member, whichinfo, result_p)

def CPXgetctype(env, lp, xctype, begin, end):
    return _amplpy_cplex_swig.CPXgetctype(env, lp, xctype, begin, end)

def CPXgetcutoff(env, lp, cutoff_p):
    return _amplpy_cplex_swig.CPXgetcutoff(env, lp, cutoff_p)

def CPXgetdeletenodecallbackfunc(env, deletecallback_p, cbhandle_p):
    return _amplpy_cplex_swig.CPXgetdeletenodecallbackfunc(env, deletecallback_p, cbhandle_p)

def CPXgetheuristiccallbackfunc(env, heuristiccallback_p, cbhandle_p):
    return _amplpy_cplex_swig.CPXgetheuristiccallbackfunc(env, heuristiccallback_p, cbhandle_p)

def CPXgetincumbentcallbackfunc(env, incumbentcallback_p, cbhandle_p):
    return _amplpy_cplex_swig.CPXgetincumbentcallbackfunc(env, incumbentcallback_p, cbhandle_p)

def CPXgetindconstr(env, lp, indvar_p, complemented_p, nzcnt_p, rhs_p, sense_p, linind, linval, space, surplus_p, which):
    return _amplpy_cplex_swig.CPXgetindconstr(env, lp, indvar_p, complemented_p, nzcnt_p, rhs_p, sense_p, linind, linval, space, surplus_p, which)

def CPXgetindconstraints(env, lp, type, indvar, complemented, nzcnt_p, rhs, sense, linbeg, linind, linval, linspace, surplus_p, begin, end):
    return _amplpy_cplex_swig.CPXgetindconstraints(env, lp, type, indvar, complemented, nzcnt_p, rhs, sense, linbeg, linind, linval, linspace, surplus_p, begin, end)

def CPXgetindconstrindex(env, lp, lname_str, index_p):
    return _amplpy_cplex_swig.CPXgetindconstrindex(env, lp, lname_str, index_p)

def CPXgetindconstrinfeas(env, lp, x, infeasout, begin, end):
    return _amplpy_cplex_swig.CPXgetindconstrinfeas(env, lp, x, infeasout, begin, end)

def CPXgetindconstrname(env, lp, buf_str, bufspace, surplus_p, which):
    return _amplpy_cplex_swig.CPXgetindconstrname(env, lp, buf_str, bufspace, surplus_p, which)

def CPXgetindconstrslack(env, lp, indslack, begin, end):
    return _amplpy_cplex_swig.CPXgetindconstrslack(env, lp, indslack, begin, end)

def CPXgetinfocallbackfunc(env, callback_p, cbhandle_p):
    return _amplpy_cplex_swig.CPXgetinfocallbackfunc(env, callback_p, cbhandle_p)

def CPXgetlazyconstraintcallbackfunc(env, cutcallback_p, cbhandle_p):
    return _amplpy_cplex_swig.CPXgetlazyconstraintcallbackfunc(env, cutcallback_p, cbhandle_p)

def CPXgetmipcallbackfunc(env, callback_p, cbhandle_p):
    return _amplpy_cplex_swig.CPXgetmipcallbackfunc(env, callback_p, cbhandle_p)

def CPXgetmipitcnt(env, lp):
    return _amplpy_cplex_swig.CPXgetmipitcnt(env, lp)

def CPXgetmiprelgap(env, lp, gap_p):
    return _amplpy_cplex_swig.CPXgetmiprelgap(env, lp, gap_p)

def CPXgetmipstartindex(env, lp, lname_str, index_p):
    return _amplpy_cplex_swig.CPXgetmipstartindex(env, lp, lname_str, index_p)

def CPXgetmipstartname(env, lp, name, store, storesz, surplus_p, begin, end):
    return _amplpy_cplex_swig.CPXgetmipstartname(env, lp, name, store, storesz, surplus_p, begin, end)

def CPXgetmipstarts(env, lp, nzcnt_p, beg, varindices, values, effortlevel, startspace, surplus_p, begin, end):
    return _amplpy_cplex_swig.CPXgetmipstarts(env, lp, nzcnt_p, beg, varindices, values, effortlevel, startspace, surplus_p, begin, end)

def CPXgetnodecallbackfunc(env, nodecallback_p, cbhandle_p):
    return _amplpy_cplex_swig.CPXgetnodecallbackfunc(env, nodecallback_p, cbhandle_p)

def CPXgetnodecnt(env, lp):
    return _amplpy_cplex_swig.CPXgetnodecnt(env, lp)

def CPXgetnodeint(env, lp):
    return _amplpy_cplex_swig.CPXgetnodeint(env, lp)

def CPXgetnodeleftcnt(env, lp):
    return _amplpy_cplex_swig.CPXgetnodeleftcnt(env, lp)

def CPXgetnumbin(env, lp):
    return _amplpy_cplex_swig.CPXgetnumbin(env, lp)

def CPXgetnumcuts(env, lp, cuttype, num_p):
    return _amplpy_cplex_swig.CPXgetnumcuts(env, lp, cuttype, num_p)

def CPXgetnumindconstrs(env, lp):
    return _amplpy_cplex_swig.CPXgetnumindconstrs(env, lp)

def CPXgetnumint(env, lp):
    return _amplpy_cplex_swig.CPXgetnumint(env, lp)

def CPXgetnumlazyconstraints(env, lp):
    return _amplpy_cplex_swig.CPXgetnumlazyconstraints(env, lp)

def CPXgetnummipstarts(env, lp):
    return _amplpy_cplex_swig.CPXgetnummipstarts(env, lp)

def CPXgetnumsemicont(env, lp):
    return _amplpy_cplex_swig.CPXgetnumsemicont(env, lp)

def CPXgetnumsemiint(env, lp):
    return _amplpy_cplex_swig.CPXgetnumsemiint(env, lp)

def CPXgetnumsos(env, lp):
    return _amplpy_cplex_swig.CPXgetnumsos(env, lp)

def CPXgetnumusercuts(env, lp):
    return _amplpy_cplex_swig.CPXgetnumusercuts(env, lp)

def CPXgetorder(env, lp, cnt_p, indices, priority, direction, ordspace, surplus_p):
    return _amplpy_cplex_swig.CPXgetorder(env, lp, cnt_p, indices, priority, direction, ordspace, surplus_p)

def CPXgetsolnpooldivfilter(env, lp, lower_cutoff_p, upper_cutoff_p, nzcnt_p, ind, val, refval, space, surplus_p, which):
    return _amplpy_cplex_swig.CPXgetsolnpooldivfilter(env, lp, lower_cutoff_p, upper_cutoff_p, nzcnt_p, ind, val, refval, space, surplus_p, which)

def CPXgetsolnpoolfilterindex(env, lp, lname_str, index_p):
    return _amplpy_cplex_swig.CPXgetsolnpoolfilterindex(env, lp, lname_str, index_p)

def CPXgetsolnpoolfiltername(env, lp, buf_str, bufspace, surplus_p, which):
    return _amplpy_cplex_swig.CPXgetsolnpoolfiltername(env, lp, buf_str, bufspace, surplus_p, which)

def CPXgetsolnpoolfiltertype(env, lp, ftype_p, which):
    return _amplpy_cplex_swig.CPXgetsolnpoolfiltertype(env, lp, ftype_p, which)

def CPXgetsolnpoolmeanobjval(env, lp, meanobjval_p):
    return _amplpy_cplex_swig.CPXgetsolnpoolmeanobjval(env, lp, meanobjval_p)

def CPXgetsolnpoolnumfilters(env, lp):
    return _amplpy_cplex_swig.CPXgetsolnpoolnumfilters(env, lp)

def CPXgetsolnpoolnumreplaced(env, lp):
    return _amplpy_cplex_swig.CPXgetsolnpoolnumreplaced(env, lp)

def CPXgetsolnpoolnumsolns(env, lp):
    return _amplpy_cplex_swig.CPXgetsolnpoolnumsolns(env, lp)

def CPXgetsolnpoolobjval(env, lp, soln, objval_p):
    return _amplpy_cplex_swig.CPXgetsolnpoolobjval(env, lp, soln, objval_p)

def CPXgetsolnpoolqconstrslack(env, lp, soln, qcslack, begin, end):
    return _amplpy_cplex_swig.CPXgetsolnpoolqconstrslack(env, lp, soln, qcslack, begin, end)

def CPXgetsolnpoolrngfilter(env, lp, lb_p, ub_p, nzcnt_p, ind, val, space, surplus_p, which):
    return _amplpy_cplex_swig.CPXgetsolnpoolrngfilter(env, lp, lb_p, ub_p, nzcnt_p, ind, val, space, surplus_p, which)

def CPXgetsolnpoolslack(env, lp, soln, slack, begin, end):
    return _amplpy_cplex_swig.CPXgetsolnpoolslack(env, lp, soln, slack, begin, end)

def CPXgetsolnpoolsolnindex(env, lp, lname_str, index_p):
    return _amplpy_cplex_swig.CPXgetsolnpoolsolnindex(env, lp, lname_str, index_p)

def CPXgetsolnpoolsolnname(env, lp, store, storesz, surplus_p, which):
    return _amplpy_cplex_swig.CPXgetsolnpoolsolnname(env, lp, store, storesz, surplus_p, which)

def CPXgetsolnpoolx(env, lp, soln, x, begin, end):
    return _amplpy_cplex_swig.CPXgetsolnpoolx(env, lp, soln, x, begin, end)

def CPXgetsolvecallbackfunc(env, solvecallback_p, cbhandle_p):
    return _amplpy_cplex_swig.CPXgetsolvecallbackfunc(env, solvecallback_p, cbhandle_p)

def CPXgetsos(env, lp, numsosnz_p, sostype, sosbeg, sosind, soswt, sosspace, surplus_p, begin, end):
    return _amplpy_cplex_swig.CPXgetsos(env, lp, numsosnz_p, sostype, sosbeg, sosind, soswt, sosspace, surplus_p, begin, end)

def CPXgetsosindex(env, lp, lname_str, index_p):
    return _amplpy_cplex_swig.CPXgetsosindex(env, lp, lname_str, index_p)

def CPXgetsosinfeas(env, lp, x, infeasout, begin, end):
    return _amplpy_cplex_swig.CPXgetsosinfeas(env, lp, x, infeasout, begin, end)

def CPXgetsosname(env, lp, name, namestore, storespace, surplus_p, begin, end):
    return _amplpy_cplex_swig.CPXgetsosname(env, lp, name, namestore, storespace, surplus_p, begin, end)

def CPXgetsubmethod(env, lp):
    return _amplpy_cplex_swig.CPXgetsubmethod(env, lp)

def CPXgetsubstat(env, lp):
    return _amplpy_cplex_swig.CPXgetsubstat(env, lp)

def CPXgetusercutcallbackfunc(env, cutcallback_p, cbhandle_p):
    return _amplpy_cplex_swig.CPXgetusercutcallbackfunc(env, cutcallback_p, cbhandle_p)

def CPXindconstrslackfromx(env, lp, x, indslack):
    return _amplpy_cplex_swig.CPXindconstrslackfromx(env, lp, x, indslack)

def CPXmipopt(env, lp):
    return _amplpy_cplex_swig.CPXmipopt(env, lp)

def CPXordread(env, filename_str, numcols, colname, cnt_p, indices, priority, direction):
    return _amplpy_cplex_swig.CPXordread(env, filename_str, numcols, colname, cnt_p, indices, priority, direction)

def CPXordwrite(env, lp, filename_str):
    return _amplpy_cplex_swig.CPXordwrite(env, lp, filename_str)

def CPXpopulate(env, lp):
    return _amplpy_cplex_swig.CPXpopulate(env, lp)

def CPXreadcopymipstarts(env, lp, filename_str):
    return _amplpy_cplex_swig.CPXreadcopymipstarts(env, lp, filename_str)

def CPXreadcopyorder(env, lp, filename_str):
    return _amplpy_cplex_swig.CPXreadcopyorder(env, lp, filename_str)

def CPXreadcopysolnpoolfilters(env, lp, filename_str):
    return _amplpy_cplex_swig.CPXreadcopysolnpoolfilters(env, lp, filename_str)

def CPXrefinemipstartconflict(env, lp, mipstartindex, confnumrows_p, confnumcols_p):
    return _amplpy_cplex_swig.CPXrefinemipstartconflict(env, lp, mipstartindex, confnumrows_p, confnumcols_p)

def CPXrefinemipstartconflictext(env, lp, mipstartindex, grpcnt, concnt, grppref, grpbeg, grpind, grptype):
    return _amplpy_cplex_swig.CPXrefinemipstartconflictext(env, lp, mipstartindex, grpcnt, concnt, grppref, grpbeg, grpind, grptype)

def CPXsetbranchcallbackfunc(env, branchcallback, cbhandle):
    return _amplpy_cplex_swig.CPXsetbranchcallbackfunc(env, branchcallback, cbhandle)

def CPXsetbranchnosolncallbackfunc(env, branchnosolncallback, cbhandle):
    return _amplpy_cplex_swig.CPXsetbranchnosolncallbackfunc(env, branchnosolncallback, cbhandle)

def CPXsetdeletenodecallbackfunc(env, deletecallback, cbhandle):
    return _amplpy_cplex_swig.CPXsetdeletenodecallbackfunc(env, deletecallback, cbhandle)

def CPXsetheuristiccallbackfunc(env, heuristiccallback, cbhandle):
    return _amplpy_cplex_swig.CPXsetheuristiccallbackfunc(env, heuristiccallback, cbhandle)

def CPXsetincumbentcallbackfunc(env, incumbentcallback, cbhandle):
    return _amplpy_cplex_swig.CPXsetincumbentcallbackfunc(env, incumbentcallback, cbhandle)

def CPXsetinfocallbackfunc(env, callback, cbhandle):
    return _amplpy_cplex_swig.CPXsetinfocallbackfunc(env, callback, cbhandle)

def CPXsetlazyconstraintcallbackfunc(env, lazyconcallback, cbhandle):
    return _amplpy_cplex_swig.CPXsetlazyconstraintcallbackfunc(env, lazyconcallback, cbhandle)

def CPXsetmipcallbackfunc(env, callback, cbhandle):
    return _amplpy_cplex_swig.CPXsetmipcallbackfunc(env, callback, cbhandle)

def CPXsetnodecallbackfunc(env, nodecallback, cbhandle):
    return _amplpy_cplex_swig.CPXsetnodecallbackfunc(env, nodecallback, cbhandle)

def CPXsetsolvecallbackfunc(env, solvecallback, cbhandle):
    return _amplpy_cplex_swig.CPXsetsolvecallbackfunc(env, solvecallback, cbhandle)

def CPXsetusercutcallbackfunc(env, cutcallback, cbhandle):
    return _amplpy_cplex_swig.CPXsetusercutcallbackfunc(env, cutcallback, cbhandle)

def CPXwritemipstarts(env, lp, filename_str, begin, end):
    return _amplpy_cplex_swig.CPXwritemipstarts(env, lp, filename_str, begin, end)
CPXGC_H = _amplpy_cplex_swig.CPXGC_H

def CPXaddindconstr(env, lp, indvar, complemented, nzcnt, rhs, sense, linind, linval, indname_str):
    return _amplpy_cplex_swig.CPXaddindconstr(env, lp, indvar, complemented, nzcnt, rhs, sense, linind, linval, indname_str)
CPXNET_H = _amplpy_cplex_swig.CPXNET_H

def CPXNETaddarcs(env, net, narcs, fromnode, tonode, low, up, obj, anames):
    return _amplpy_cplex_swig.CPXNETaddarcs(env, net, narcs, fromnode, tonode, low, up, obj, anames)

def CPXNETaddnodes(env, net, nnodes, supply, name):
    return _amplpy_cplex_swig.CPXNETaddnodes(env, net, nnodes, supply, name)

def CPXNETbasewrite(env, net, filename_str):
    return _amplpy_cplex_swig.CPXNETbasewrite(env, net, filename_str)

def CPXNETchgarcname(env, net, cnt, indices, newname):
    return _amplpy_cplex_swig.CPXNETchgarcname(env, net, cnt, indices, newname)

def CPXNETchgarcnodes(env, net, cnt, indices, fromnode, tonode):
    return _amplpy_cplex_swig.CPXNETchgarcnodes(env, net, cnt, indices, fromnode, tonode)

def CPXNETchgbds(env, net, cnt, indices, lu, bd):
    return _amplpy_cplex_swig.CPXNETchgbds(env, net, cnt, indices, lu, bd)

def CPXNETchgname(env, net, key, vindex, name_str):
    return _amplpy_cplex_swig.CPXNETchgname(env, net, key, vindex, name_str)

def CPXNETchgnodename(env, net, cnt, indices, newname):
    return _amplpy_cplex_swig.CPXNETchgnodename(env, net, cnt, indices, newname)

def CPXNETchgobj(env, net, cnt, indices, obj):
    return _amplpy_cplex_swig.CPXNETchgobj(env, net, cnt, indices, obj)

def CPXNETchgobjsen(env, net, maxormin):
    return _amplpy_cplex_swig.CPXNETchgobjsen(env, net, maxormin)

def CPXNETchgsupply(env, net, cnt, indices, supply):
    return _amplpy_cplex_swig.CPXNETchgsupply(env, net, cnt, indices, supply)

def CPXNETcopybase(env, net, astat, nstat):
    return _amplpy_cplex_swig.CPXNETcopybase(env, net, astat, nstat)

def CPXNETcopynet(env, net, objsen, nnodes, supply, nnames, narcs, fromnode, tonode, low, up, obj, anames):
    return _amplpy_cplex_swig.CPXNETcopynet(env, net, objsen, nnodes, supply, nnames, narcs, fromnode, tonode, low, up, obj, anames)

def CPXNETcreateprob(env, status_p, name_str):
    return _amplpy_cplex_swig.CPXNETcreateprob(env, status_p, name_str)

def CPXNETdelarcs(env, net, begin, end):
    return _amplpy_cplex_swig.CPXNETdelarcs(env, net, begin, end)

def CPXNETdelnodes(env, net, begin, end):
    return _amplpy_cplex_swig.CPXNETdelnodes(env, net, begin, end)

def CPXNETdelset(env, net, whichnodes, whicharcs):
    return _amplpy_cplex_swig.CPXNETdelset(env, net, whichnodes, whicharcs)

def CPXNETfreeprob(env, net_p):
    return _amplpy_cplex_swig.CPXNETfreeprob(env, net_p)

def CPXNETgetarcindex(env, net, lname_str, index_p):
    return _amplpy_cplex_swig.CPXNETgetarcindex(env, net, lname_str, index_p)

def CPXNETgetarcname(env, net, nnames, namestore, namespc, surplus_p, begin, end):
    return _amplpy_cplex_swig.CPXNETgetarcname(env, net, nnames, namestore, namespc, surplus_p, begin, end)

def CPXNETgetarcnodes(env, net, fromnode, tonode, begin, end):
    return _amplpy_cplex_swig.CPXNETgetarcnodes(env, net, fromnode, tonode, begin, end)

def CPXNETgetbase(env, net, astat, nstat):
    return _amplpy_cplex_swig.CPXNETgetbase(env, net, astat, nstat)

def CPXNETgetdj(env, net, dj, begin, end):
    return _amplpy_cplex_swig.CPXNETgetdj(env, net, dj, begin, end)

def CPXNETgetitcnt(env, net):
    return _amplpy_cplex_swig.CPXNETgetitcnt(env, net)

def CPXNETgetlb(env, net, low, begin, end):
    return _amplpy_cplex_swig.CPXNETgetlb(env, net, low, begin, end)

def CPXNETgetnodearcs(env, net, arccnt_p, arcbeg, arc, arcspace, surplus_p, begin, end):
    return _amplpy_cplex_swig.CPXNETgetnodearcs(env, net, arccnt_p, arcbeg, arc, arcspace, surplus_p, begin, end)

def CPXNETgetnodeindex(env, net, lname_str, index_p):
    return _amplpy_cplex_swig.CPXNETgetnodeindex(env, net, lname_str, index_p)

def CPXNETgetnodename(env, net, nnames, namestore, namespc, surplus_p, begin, end):
    return _amplpy_cplex_swig.CPXNETgetnodename(env, net, nnames, namestore, namespc, surplus_p, begin, end)

def CPXNETgetnumarcs(env, net):
    return _amplpy_cplex_swig.CPXNETgetnumarcs(env, net)

def CPXNETgetnumnodes(env, net):
    return _amplpy_cplex_swig.CPXNETgetnumnodes(env, net)

def CPXNETgetobj(env, net, obj, begin, end):
    return _amplpy_cplex_swig.CPXNETgetobj(env, net, obj, begin, end)

def CPXNETgetobjsen(env, net):
    return _amplpy_cplex_swig.CPXNETgetobjsen(env, net)

def CPXNETgetobjval(env, net, objval_p):
    return _amplpy_cplex_swig.CPXNETgetobjval(env, net, objval_p)

def CPXNETgetphase1cnt(env, net):
    return _amplpy_cplex_swig.CPXNETgetphase1cnt(env, net)

def CPXNETgetpi(env, net, pi, begin, end):
    return _amplpy_cplex_swig.CPXNETgetpi(env, net, pi, begin, end)

def CPXNETgetprobname(env, net, buf_str, bufspace, surplus_p):
    return _amplpy_cplex_swig.CPXNETgetprobname(env, net, buf_str, bufspace, surplus_p)

def CPXNETgetslack(env, net, slack, begin, end):
    return _amplpy_cplex_swig.CPXNETgetslack(env, net, slack, begin, end)

def CPXNETgetstat(env, net):
    return _amplpy_cplex_swig.CPXNETgetstat(env, net)

def CPXNETgetsupply(env, net, supply, begin, end):
    return _amplpy_cplex_swig.CPXNETgetsupply(env, net, supply, begin, end)

def CPXNETgetub(env, net, up, begin, end):
    return _amplpy_cplex_swig.CPXNETgetub(env, net, up, begin, end)

def CPXNETgetx(env, net, x, begin, end):
    return _amplpy_cplex_swig.CPXNETgetx(env, net, x, begin, end)

def CPXNETprimopt(env, net):
    return _amplpy_cplex_swig.CPXNETprimopt(env, net)

def CPXNETreadcopybase(env, net, filename_str):
    return _amplpy_cplex_swig.CPXNETreadcopybase(env, net, filename_str)

def CPXNETreadcopyprob(env, net, filename_str):
    return _amplpy_cplex_swig.CPXNETreadcopyprob(env, net, filename_str)

def CPXNETsolninfo(env, net, pfeasind_p, dfeasind_p):
    return _amplpy_cplex_swig.CPXNETsolninfo(env, net, pfeasind_p, dfeasind_p)

def CPXNETsolution(env, net, netstat_p, objval_p, x, pi, slack, dj):
    return _amplpy_cplex_swig.CPXNETsolution(env, net, netstat_p, objval_p, x, pi, slack, dj)

def CPXNETwriteprob(env, net, filename_str, format_str):
    return _amplpy_cplex_swig.CPXNETwriteprob(env, net, filename_str, format_str)
CPXQP_H = _amplpy_cplex_swig.CPXQP_H

def CPXchgqpcoef(env, lp, i, j, newvalue):
    return _amplpy_cplex_swig.CPXchgqpcoef(env, lp, i, j, newvalue)

def CPXcopyqpsep(env, lp, qsepvec):
    return _amplpy_cplex_swig.CPXcopyqpsep(env, lp, qsepvec)

def CPXcopyquad(env, lp, qmatbeg, qmatcnt, qmatind, qmatval):
    return _amplpy_cplex_swig.CPXcopyquad(env, lp, qmatbeg, qmatcnt, qmatind, qmatval)

def CPXgetnumqpnz(env, lp):
    return _amplpy_cplex_swig.CPXgetnumqpnz(env, lp)

def CPXgetnumquad(env, lp):
    return _amplpy_cplex_swig.CPXgetnumquad(env, lp)

def CPXgetqpcoef(env, lp, rownum, colnum, coef_p):
    return _amplpy_cplex_swig.CPXgetqpcoef(env, lp, rownum, colnum, coef_p)

def CPXgetquad(env, lp, nzcnt_p, qmatbeg, qmatind, qmatval, qmatspace, surplus_p, begin, end):
    return _amplpy_cplex_swig.CPXgetquad(env, lp, nzcnt_p, qmatbeg, qmatind, qmatval, qmatspace, surplus_p, begin, end)

def CPXqpindefcertificate(env, lp, x):
    return _amplpy_cplex_swig.CPXqpindefcertificate(env, lp, x)

def CPXqpopt(env, lp):
    return _amplpy_cplex_swig.CPXqpopt(env, lp)
CPXSOCP_H = _amplpy_cplex_swig.CPXSOCP_H

def CPXaddqconstr(env, lp, linnzcnt, quadnzcnt, rhs, sense, linind, linval, quadrow, quadcol, quadval, lname_str):
    return _amplpy_cplex_swig.CPXaddqconstr(env, lp, linnzcnt, quadnzcnt, rhs, sense, linind, linval, quadrow, quadcol, quadval, lname_str)

def CPXdelqconstrs(env, lp, begin, end):
    return _amplpy_cplex_swig.CPXdelqconstrs(env, lp, begin, end)

def CPXgetnumqconstrs(env, lp):
    return _amplpy_cplex_swig.CPXgetnumqconstrs(env, lp)

def CPXgetqconstr(env, lp, linnzcnt_p, quadnzcnt_p, rhs_p, sense_p, linind, linval, linspace, linsurplus_p, quadrow, quadcol, quadval, quadspace, quadsurplus_p, which):
    return _amplpy_cplex_swig.CPXgetqconstr(env, lp, linnzcnt_p, quadnzcnt_p, rhs_p, sense_p, linind, linval, linspace, linsurplus_p, quadrow, quadcol, quadval, quadspace, quadsurplus_p, which)

def CPXgetqconstrdslack(env, lp, qind, nz_p, ind, val, space, surplus_p):
    return _amplpy_cplex_swig.CPXgetqconstrdslack(env, lp, qind, nz_p, ind, val, space, surplus_p)

def CPXgetqconstrindex(env, lp, lname_str, index_p):
    return _amplpy_cplex_swig.CPXgetqconstrindex(env, lp, lname_str, index_p)

def CPXgetqconstrinfeas(env, lp, x, infeasout, begin, end):
    return _amplpy_cplex_swig.CPXgetqconstrinfeas(env, lp, x, infeasout, begin, end)

def CPXgetqconstrname(env, lp, buf_str, bufspace, surplus_p, which):
    return _amplpy_cplex_swig.CPXgetqconstrname(env, lp, buf_str, bufspace, surplus_p, which)

def CPXgetqconstrslack(env, lp, qcslack, begin, end):
    return _amplpy_cplex_swig.CPXgetqconstrslack(env, lp, qcslack, begin, end)

def CPXgetxqxax(env, lp, xqxax, begin, end):
    return _amplpy_cplex_swig.CPXgetxqxax(env, lp, xqxax, begin, end)

def CPXqconstrslackfromx(env, lp, x, qcslack):
    return _amplpy_cplex_swig.CPXqconstrslackfromx(env, lp, x, qcslack)

def AMPLCPLEXloadmodel(argc, argv, modelPtr, aslPtr):
    return _amplpy_cplex_swig.AMPLCPLEXloadmodel(argc, argv, modelPtr, aslPtr)

def AMPLCPLEXwritesol(state, modelPtr, status, solFileName):
    return _amplpy_cplex_swig.AMPLCPLEXwritesol(state, modelPtr, status, solFileName)

def AMPLCPLEXgetInternalEnv():
    return _amplpy_cplex_swig.AMPLCPLEXgetInternalEnv()

def AMPLCPLEXfreeASL(aslPtr):
    return _amplpy_cplex_swig.AMPLCPLEXfreeASL(aslPtr)
class CBWrap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def lp_callback_wrapper(env, lp, wf, cbh):
        return _amplpy_cplex_swig.CBWrap_lp_callback_wrapper(env, lp, wf, cbh)

    @staticmethod
    def cut_callback_wrapper(env, cbdata, wherefrom, cbhandle, useraction_p):
        return _amplpy_cplex_swig.CBWrap_cut_callback_wrapper(env, cbdata, wherefrom, cbhandle, useraction_p)

    @staticmethod
    def msg_callback_wrapper(handle, msg):
        return _amplpy_cplex_swig.CBWrap_msg_callback_wrapper(handle, msg)

    @staticmethod
    def incumbent_callback_wrapper(env, cbdata, wherefrom, cbhandle, objval, x, isfeas_p, useraction_p):
        return _amplpy_cplex_swig.CBWrap_incumbent_callback_wrapper(env, cbdata, wherefrom, cbhandle, objval, x, isfeas_p, useraction_p)

    @staticmethod
    def setDefaultCB(env, cbdata, wherefrom, userhandle):
        return _amplpy_cplex_swig.CBWrap_setDefaultCB(env, cbdata, wherefrom, userhandle)

    def __init__(self):
        _amplpy_cplex_swig.CBWrap_swiginit(self, _amplpy_cplex_swig.new_CBWrap())
    __swig_destroy__ = _amplpy_cplex_swig.delete_CBWrap

# Register CBWrap in _amplpy_cplex_swig:
_amplpy_cplex_swig.CBWrap_swigregister(CBWrap)

def CBWrap_lp_callback_wrapper(env, lp, wf, cbh):
    return _amplpy_cplex_swig.CBWrap_lp_callback_wrapper(env, lp, wf, cbh)

def CBWrap_cut_callback_wrapper(env, cbdata, wherefrom, cbhandle, useraction_p):
    return _amplpy_cplex_swig.CBWrap_cut_callback_wrapper(env, cbdata, wherefrom, cbhandle, useraction_p)

def CBWrap_msg_callback_wrapper(handle, msg):
    return _amplpy_cplex_swig.CBWrap_msg_callback_wrapper(handle, msg)

def CBWrap_incumbent_callback_wrapper(env, cbdata, wherefrom, cbhandle, objval, x, isfeas_p, useraction_p):
    return _amplpy_cplex_swig.CBWrap_incumbent_callback_wrapper(env, cbdata, wherefrom, cbhandle, objval, x, isfeas_p, useraction_p)

def CBWrap_setDefaultCB(env, cbdata, wherefrom, userhandle):
    return _amplpy_cplex_swig.CBWrap_setDefaultCB(env, cbdata, wherefrom, userhandle)


def getErrorMsg(env, res):
    return _amplpy_cplex_swig.getErrorMsg(env, res)
class CPLEXDrv(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def loadModel(self, modelName):
        return _amplpy_cplex_swig.CPLEXDrv_loadModel(self, modelName)

    def getEnv(self):
        return _amplpy_cplex_swig.CPLEXDrv_getEnv(self)
    __swig_destroy__ = _amplpy_cplex_swig.delete_CPLEXDrv

    def __init__(self):
        _amplpy_cplex_swig.CPLEXDrv_swiginit(self, _amplpy_cplex_swig.new_CPLEXDrv())

# Register CPLEXDrv in _amplpy_cplex_swig:
_amplpy_cplex_swig.CPLEXDrv_swigregister(CPLEXDrv)

class CPLEXModel(AMPLModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, other):
        _amplpy_cplex_swig.CPLEXModel_swiginit(self, _amplpy_cplex_swig.new_CPLEXModel(other))

    def getStatus(self):
        return _amplpy_cplex_swig.CPLEXModel_getStatus(self)

    def optimize(self):
        return _amplpy_cplex_swig.CPLEXModel_optimize(self)

    def getNumVars(self):
        return _amplpy_cplex_swig.CPLEXModel_getNumVars(self)

    def getObj(self):
        return _amplpy_cplex_swig.CPLEXModel_getObj(self)

    def getSolution(self, first, length, sol):
        return _amplpy_cplex_swig.CPLEXModel_getSolution(self, first, length, sol)

    def error(self, code):
        return _amplpy_cplex_swig.CPLEXModel_error(self, code)

    def enableLazyConstraints(self):
        return _amplpy_cplex_swig.CPLEXModel_enableLazyConstraints(self)

    def getCPXLP(self):
        return _amplpy_cplex_swig.CPLEXModel_getCPXLP(self)

    def getCPXENV(self):
        return _amplpy_cplex_swig.CPLEXModel_getCPXENV(self)

    def setParam(self, *args):
        return _amplpy_cplex_swig.CPLEXModel_setParam(self, *args)
    __swig_destroy__ = _amplpy_cplex_swig.delete_CPLEXModel

# Register CPLEXModel in _amplpy_cplex_swig:
_amplpy_cplex_swig.CPLEXModel_swigregister(CPLEXModel)

class CPLEXCallback(BaseCallback):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def run(self):
        return _amplpy_cplex_swig.CPLEXCallback_run(self)
    __swig_destroy__ = _amplpy_cplex_swig.delete_CPLEXCallback

    def getObj(self):
        return _amplpy_cplex_swig.CPLEXCallback_getObj(self)

    def getWhereString(self):
        return _amplpy_cplex_swig.CPLEXCallback_getWhereString(self)

    def getMessage(self):
        return _amplpy_cplex_swig.CPLEXCallback_getMessage(self)

    def getAMPLWhere(self):
        return _amplpy_cplex_swig.CPLEXCallback_getAMPLWhere(self)

    def get(self, what):
        return _amplpy_cplex_swig.CPLEXCallback_get(self, what)

    def getInt(self, what):
        return _amplpy_cplex_swig.CPLEXCallback_getInt(self, what)

    def getDouble(self, what):
        return _amplpy_cplex_swig.CPLEXCallback_getDouble(self, what)

    def getValue(self, v):
        return _amplpy_cplex_swig.CPLEXCallback_getValue(self, v)

    def __init__(self):
        if self.__class__ == CPLEXCallback:
            _self = None
        else:
            _self = self
        _amplpy_cplex_swig.CPLEXCallback_swiginit(self, _amplpy_cplex_swig.new_CPLEXCallback(_self, ))
    def __disown__(self):
        self.this.disown()
        _amplpy_cplex_swig.disown_CPLEXCallback(self)
        return weakref.proxy(self)

# Register CPLEXCallback in _amplpy_cplex_swig:
_amplpy_cplex_swig.CPLEXCallback_swigregister(CPLEXCallback)



