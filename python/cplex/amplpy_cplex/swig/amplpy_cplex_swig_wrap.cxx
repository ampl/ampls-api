/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGPYTHON
#define SWIGPYTHON
#endif

#define SWIG_DIRECTORS
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE
#define SWIGPYTHON_BUILTIN


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#if defined(__GNUC__) && defined(_WIN32) && !defined(SWIG_PYTHON_NO_HYPOT_WORKAROUND)
/* Workaround for '::hypot' has not been declared', see https://bugs.python.org/issue11566 */
# include <math.h>
#endif

#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */
# undef _DEBUG
# include <Python.h>
# define _DEBUG 1
#else
# include <Python.h>
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03030000
  return (char *)PyUnicode_AsUTF8(str);
#elif PY_VERSION_HEX >= 0x03000000
  char *newstr = 0;
  str = PyUnicode_AsUTF8String(str);
  if (str) {
    char *cstr;
    Py_ssize_t len;
    if (PyBytes_AsStringAndSize(str, &cstr, &len) != -1) {
      newstr = (char *) malloc(len+1);
      if (newstr)
        memcpy(newstr, cstr, len+1);
    }
    Py_XDECREF(str);
  }
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03030000 || PY_VERSION_HEX < 0x03000000
#  define SWIG_Python_str_DelForPy3(x)
#else
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

// SWIGPY_USE_CAPSULE is no longer used within SWIG itself, but some user
// interface files check for it.
# define SWIGPY_USE_CAPSULE
# define SWIGPY_CAPSULE_NAME ("swig_runtime_data" SWIG_RUNTIME_VERSION ".type_pointer_capsule" SWIG_TYPE_TABLE_NAME)

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#define Py_hash_t long
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred())
    PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    PyObject *old_str = PyObject_Str(value);
    const char *tmp = SWIG_Python_str_AsChar(old_str);
    PyErr_Clear();
    Py_XINCREF(type);
    if (tmp)
      PyErr_Format(type, "%s %s", tmp, mesg);
    else
      PyErr_Format(type, "%s", mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

SWIGRUNTIME int
SWIG_Python_TypeErrorOccurred(PyObject *obj)
{
  PyObject *error;
  if (obj)
    return 0;
  error = PyErr_Occurred();
  return error && PyErr_GivenExceptionMatches(error, PyExc_TypeError);
}

SWIGRUNTIME void
SWIG_Python_RaiseOrModifyTypeError(const char *message)
{
  if (SWIG_Python_TypeErrorOccurred(NULL)) {
    /* Use existing TypeError to preserve stacktrace and enhance with given message */
    PyObject *newvalue;
    PyObject *type = NULL, *value = NULL, *traceback = NULL;
    PyErr_Fetch(&type, &value, &traceback);
#if PY_VERSION_HEX >= 0x03000000
    newvalue = PyUnicode_FromFormat("%S\nAdditional information:\n%s", value, message);
#else
    newvalue = PyString_FromFormat("%s\nAdditional information:\n%s", PyString_AsString(value), message);
#endif
    Py_XDECREF(value);
    PyErr_Restore(type, newvalue, traceback);
  } else {
    /* Raise TypeError using given message */
    PyErr_SetString(PyExc_TypeError, message);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    define SWIG_PYTHON_USE_GIL
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  const char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

#if PY_VERSION_HEX < 0x02070000 /* 2.7.0 */
# error "This version of SWIG only supports Python >= 2.7"
#endif

#if PY_VERSION_HEX >= 0x03000000 && PY_VERSION_HEX < 0x03020000
# error "This version of SWIG only supports Python 3 >= 3.2"
#endif

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
}

/* Unpack the argument tuple */

SWIGINTERN Py_ssize_t
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      Py_ssize_t i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      Py_ssize_t i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

SWIGINTERN int
SWIG_Python_CheckNoKeywords(PyObject *kwargs, const char *name) {
  int no_kwargs = 1;
  if (kwargs) {
    assert(PyDict_Check(kwargs));
    if (PyDict_Size(kwargs) > 0) {
      PyErr_Format(PyExc_TypeError, "%s() does not take keyword arguments", name);
      no_kwargs = 0;
    }
  }
  return no_kwargs;
}

/* A functor is a function object with one single object argument */
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  int fail = data ? data->implicitconv : 0;
  if (fail)
    PyErr_SetString(PyExc_TypeError, "Implicit conversion is prohibited for explicit constructors.");
  return fail;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
      data->newraw = PyObject_GetAttrString(data->klass, "__new__");
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, "__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
      data->delargs = !(flags & (METH_O));
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data) {
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;


#ifdef SWIGPYTHON_BUILTIN

SWIGRUNTIME PyObject *
SwigPyObject_get___dict__(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;

  if (!sobj->dict)
    sobj->dict = PyDict_New();

  Py_INCREF(sobj->dict);
  return sobj->dict;
}

#endif

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_repr(SwigPyObject *v)
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (v->next) {
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
# if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
# else
    PyString_ConcatAndDel(&repr,nrep);
# endif
  }
  return repr;  
}

/* We need a version taking two PyObject* parameters so it's a valid
 * PyCFunction to use in swigobject_methods[]. */
SWIGRUNTIME PyObject *
SwigPyObject_repr2(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  return SwigPyObject_repr((SwigPyObject*)v);
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;

      /* PyObject_CallFunction() has the potential to silently drop
         the active exception.  In cases of unnamed temporary
         variable or where we just finished iterating over a generator
         StopIteration will be active right now, and this needs to
         remain true upon return from SwigPyObject_dealloc.  So save
         and restore. */
      
      PyObject *type = NULL, *value = NULL, *traceback = NULL;
      PyErr_Fetch(&type, &value, &traceback);

      if (data->delargs) {
        /* we need to create a temporary object to carry the destroy operation */
        PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
        res = SWIG_Python_CallFunctor(destroy, tmp);
        Py_DECREF(tmp);
      } else {
        PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
        PyObject *mself = PyCFunction_GET_SELF(destroy);
        res = ((*meth)(mself, v));
      }
      if (!res)
        PyErr_WriteUnraisable(destroy);

      PyErr_Restore(type, value, traceback);

      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (!SwigPyObject_Check(next)) {
    PyErr_SetString(PyExc_TypeError, "Attempt to append a non SwigPyObject");
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) {
    return NULL;
  } else {
    SwigPyObject *sobj = (SwigPyObject *)v;
    PyObject *obj = PyBool_FromLong(sobj->own);
    if (val) {
      if (PyObject_IsTrue(val)) {
        SwigPyObject_acquire(v,args);
      } else {
        SwigPyObject_disown(v,args);
      }
    } 
    return obj;
  }
}

static PyMethodDef
swigobject_methods[] = {
  {"disown",  SwigPyObject_disown,  METH_NOARGS,  "releases ownership of the pointer"},
  {"acquire", SwigPyObject_acquire, METH_NOARGS,  "acquires ownership of the pointer"},
  {"own",     SwigPyObject_own,     METH_VARARGS, "returns/sets ownership of the pointer"},
  {"append",  SwigPyObject_append,  METH_O,       "appends another 'this' object"},
  {"next",    SwigPyObject_next,    METH_NOARGS,  "returns the next 'this' object"},
  {"__repr__",SwigPyObject_repr2,   METH_NOARGS,  "returns object representation"},
  {0, 0, 0, 0}  
};

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03050000 /* 3.5 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_matrix_multiply */
#elif PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#else
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyObject",                       /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
      0,                                    /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
      0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,                                    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                    /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                    /* tp_print */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpyobject_type) < 0)
      return NULL;
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((const char *)v->pack, (const char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyPacked",                       /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
      0,                                    /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                    /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                    /* tp_print */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpypacked_type) < 0)
      return NULL;
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

static PyObject *Swig_This_global = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (Swig_This_global == NULL)
    Swig_This_global = SWIG_Python_str_FromChar("this");
  return Swig_This_global;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (own)
      *own = *own | sobj->own;
    if (flags & SWIG_POINTER_DISOWN) {
      sobj->own = 0;
    }
    res = SWIG_OK;
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
      if (!SWIG_IsOK(res) && obj == Py_None) {
        if (ptr)
          *ptr = 0;
        if (PyErr_Occurred())
          PyErr_Clear();
        res = SWIG_OK;
      }
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    swig_cast_info *tc;

    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc)
      return SWIG_ERROR;
    tc = SWIG_TypeCheck(desc,ty);
    if (tc) {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    } else {
      return SWIG_ERROR;
    }
    return SWIG_OK;
  }
}

/* Convert a packed pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      if (PyObject_SetAttr(inst, SWIG_This(), swig_this) == -1) {
        Py_DECREF(inst);
        inst = 0;
      }
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *empty_args = PyTuple_New(0);
    if (empty_args) {
      PyObject *empty_kwargs = PyDict_New();
      if (empty_kwargs) {
        inst = ((PyTypeObject *)data->newargs)->tp_new((PyTypeObject *)data->newargs, empty_args, empty_kwargs);
        Py_DECREF(empty_kwargs);
        if (inst) {
          if (PyObject_SetAttr(inst, SWIG_This(), swig_this) == -1) {
            Py_DECREF(inst);
            inst = 0;
          } else {
            Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
          }
        }
      }
      Py_DECREF(empty_args);
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
}

SWIGRUNTIME int
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
  PyObject **dictptr = _PyObject_GetDictPtr(inst);
  if (dictptr != NULL) {
    PyObject *dict = *dictptr;
    if (dict == NULL) {
      dict = PyDict_New();
      *dictptr = dict;
    }
    return PyDict_SetItem(dict, SWIG_This(), swig_this);
  }
#endif
  return PyObject_SetAttr(inst, SWIG_This(), swig_this);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      if (SWIG_Python_SetSwigThis(obj[0], obj[1]) != 0)
        return NULL;
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
#ifdef SWIGPYTHON_BUILTIN
        newobj->dict = 0;
#endif
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
#ifdef SWIGPYTHON_BUILTIN
      newobj->dict = 0;
#endif
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
    type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

SWIGRUNTIME void
SWIG_Python_DestroyModule(PyObject *obj)
{
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  Swig_This_global = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule("swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule("swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, "type_pointer_capsule" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      PyObject *old_str = PyObject_Str(value);
      const char *tmp = SWIG_Python_str_AsChar(old_str);
      const char *errmesg = tmp ? tmp : "Invalid error message";
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, errmesg);
      } else {
	PyErr_Format(type, "%s %s", errmesg, mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) < 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
      if (!encoded_name)
        return -1;
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C" {
#endif

SWIGINTERN Py_hash_t
SwigPyObject_hash(PyObject *obj) {
  SwigPyObject *sobj = (SwigPyObject *)obj;
  void *ptr = sobj->ptr;
  return (Py_hash_t)ptr;
}

SWIGINTERN Py_hash_t
SWIG_PyNumber_AsPyHash(PyObject *obj) {
  Py_hash_t result = -1;
#if PY_VERSION_HEX < 0x03020000
  if (PyInt_Check(obj))
    result = PyInt_AsLong(obj);
  else if (PyLong_Check(obj))
    result = PyLong_AsLong(obj);
#else
  if (PyNumber_Check(obj))
    result = PyNumber_AsSsize_t(obj, NULL);
#endif
  else
    PyErr_Format(PyExc_TypeError, "Wrong type for hash function");
  return PyErr_Occurred() ? -1 : result;
}

SWIGINTERN int
SwigPyBuiltin_BadInit(PyObject *self, PyObject *SWIGUNUSEDPARM(args), PyObject *SWIGUNUSEDPARM(kwds)) {
  PyErr_Format(PyExc_TypeError, "Cannot create new instances of type '%.300s'", self->ob_type->tp_name);
  return -1;
}

SWIGINTERN void
SwigPyBuiltin_BadDealloc(PyObject *obj) {
  SwigPyObject *sobj = (SwigPyObject *)obj;
  if (sobj->own) {
    PyErr_Format(PyExc_TypeError, "Swig detected a memory leak in type '%.300s': no callable destructor found.", obj->ob_type->tp_name);
  }
}

typedef struct {
  PyCFunction get;
  PyCFunction set;
} SwigPyGetSet;

SWIGINTERN PyObject *
SwigPyBuiltin_GetterClosure (PyObject *obj, void *closure) {
  SwigPyGetSet *getset;
  PyObject *tuple, *result;
  if (!closure)
    return SWIG_Py_Void();
  getset = (SwigPyGetSet *)closure;
  if (!getset->get)
    return SWIG_Py_Void();
  tuple = PyTuple_New(0);
  assert(tuple);
  result = (*getset->get)(obj, tuple);
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyObject *
SwigPyBuiltin_FunpackGetterClosure (PyObject *obj, void *closure) {
  SwigPyGetSet *getset;
  PyObject *result;
  if (!closure)
    return SWIG_Py_Void();
  getset = (SwigPyGetSet *)closure;
  if (!getset->get)
    return SWIG_Py_Void();
  result = (*getset->get)(obj, NULL);
  return result;
}

SWIGINTERN int
SwigPyBuiltin_SetterClosure (PyObject *obj, PyObject *val, void *closure) {
  SwigPyGetSet *getset;
  PyObject *tuple, *result;
  if (!closure) {
    PyErr_Format(PyExc_TypeError, "Missing getset closure");
    return -1;
  }
  getset = (SwigPyGetSet *)closure;
  if (!getset->set) {
    PyErr_Format(PyExc_TypeError, "Illegal member variable assignment in type '%.300s'", obj->ob_type->tp_name);
    return -1;
  }
  tuple = PyTuple_New(1);
  assert(tuple);
  Py_INCREF(val);
  PyTuple_SET_ITEM(tuple, 0, val);
  result = (*getset->set)(obj, tuple);
  Py_DECREF(tuple);
  Py_XDECREF(result);
  return result ? 0 : -1;
}

SWIGINTERN int
SwigPyBuiltin_FunpackSetterClosure (PyObject *obj, PyObject *val, void *closure) {
  SwigPyGetSet *getset;
  PyObject *result;
  if (!closure) {
    PyErr_Format(PyExc_TypeError, "Missing getset closure");
    return -1;
  }
  getset = (SwigPyGetSet *)closure;
  if (!getset->set) {
    PyErr_Format(PyExc_TypeError, "Illegal member variable assignment in type '%.300s'", obj->ob_type->tp_name);
    return -1;
  }
  result = (*getset->set)(obj, val);
  Py_XDECREF(result);
  return result ? 0 : -1;
}

SWIGINTERN void
SwigPyStaticVar_dealloc(PyDescrObject *descr) {
  PyObject_GC_UnTrack(descr);
  Py_XDECREF(PyDescr_TYPE(descr));
  Py_XDECREF(PyDescr_NAME(descr));
  PyObject_GC_Del(descr);
}

SWIGINTERN PyObject *
SwigPyStaticVar_repr(PyGetSetDescrObject *descr) {
#if PY_VERSION_HEX >= 0x03000000

  return PyUnicode_FromFormat("<class attribute '%S' of type '%s'>", PyDescr_NAME(descr), PyDescr_TYPE(descr)->tp_name);
#else
  return PyString_FromFormat("<class attribute '%s' of type '%s'>", PyString_AsString(PyDescr_NAME(descr)), PyDescr_TYPE(descr)->tp_name);
#endif
}

SWIGINTERN int
SwigPyStaticVar_traverse(PyObject *self, visitproc visit, void *arg) {
  PyDescrObject *descr;
  descr = (PyDescrObject *)self;
  Py_VISIT((PyObject*) PyDescr_TYPE(descr));
  return 0;
}

SWIGINTERN PyObject *
SwigPyStaticVar_get(PyGetSetDescrObject *descr, PyObject *obj, PyObject *SWIGUNUSEDPARM(type)) {
  if (descr->d_getset->get != NULL)
    return descr->d_getset->get(obj, descr->d_getset->closure);
#if PY_VERSION_HEX >= 0x03000000
  PyErr_Format(PyExc_AttributeError, "attribute '%.300S' of '%.100s' objects is not readable", PyDescr_NAME(descr), PyDescr_TYPE(descr)->tp_name);
#else
  PyErr_Format(PyExc_AttributeError, "attribute '%.300s' of '%.100s' objects is not readable", PyString_AsString(PyDescr_NAME(descr)), PyDescr_TYPE(descr)->tp_name);
#endif
  return NULL;
}

SWIGINTERN int
SwigPyStaticVar_set(PyGetSetDescrObject *descr, PyObject *obj, PyObject *value) {
  if (descr->d_getset->set != NULL)
    return descr->d_getset->set(obj, value, descr->d_getset->closure);
#if PY_VERSION_HEX >= 0x03000000
  PyErr_Format(PyExc_AttributeError, "attribute '%.300S' of '%.100s' objects is not writable", PyDescr_NAME(descr), PyDescr_TYPE(descr)->tp_name);
#else
  PyErr_Format(PyExc_AttributeError, "attribute '%.300s' of '%.100s' objects is not writable", PyString_AsString(PyDescr_NAME(descr)), PyDescr_TYPE(descr)->tp_name);
#endif
  return -1;
}

SWIGINTERN int
SwigPyObjectType_setattro(PyObject *typeobject, PyObject *name, PyObject *value) {
  PyObject *attribute;
  PyTypeObject *type;
  descrsetfunc local_set;

  assert(PyType_Check(typeobject));
  type = (PyTypeObject *)typeobject;
  attribute = _PyType_Lookup(type, name);
  if (attribute != NULL) {
    /* Implement descriptor functionality, if any */
    local_set = attribute->ob_type->tp_descr_set;
    if (local_set != NULL)
      return local_set(attribute, (PyObject *)type, value);
#if PY_VERSION_HEX >= 0x03000000
    PyErr_Format(PyExc_AttributeError, "cannot modify read-only attribute '%.50s.%.400S'", type->tp_name, name);
#else 
    PyErr_Format(PyExc_AttributeError, "cannot modify read-only attribute '%.50s.%.400s'", type->tp_name, PyString_AS_STRING(name));
#endif
  } else {
#if PY_VERSION_HEX >= 0x03000000
    PyErr_Format(PyExc_AttributeError, "type '%.50s' has no attribute '%.400S'", type->tp_name, name);
#else
    PyErr_Format(PyExc_AttributeError, "type '%.50s' has no attribute '%.400s'", type->tp_name, PyString_AS_STRING(name));
#endif
  }

  return -1;
}

SWIGINTERN PyTypeObject*
SwigPyStaticVar_Type(void) {
  static PyTypeObject staticvar_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(&PyType_Type, 0)
#else
      PyObject_HEAD_INIT(&PyType_Type)
      0,                                        /* ob_size */
#endif
      "swig_static_var_getset_descriptor",      /* tp_name */
      sizeof(PyGetSetDescrObject),              /* tp_basicsize */
      0,                                        /* tp_itemsize */
      (destructor)SwigPyStaticVar_dealloc,      /* tp_dealloc */
      0,                                        /* tp_print */
      0,                                        /* tp_getattr */
      0,                                        /* tp_setattr */
      0,                                        /* tp_compare */
      (reprfunc)SwigPyStaticVar_repr,           /* tp_repr */
      0,                                        /* tp_as_number */
      0,                                        /* tp_as_sequence */
      0,                                        /* tp_as_mapping */
      0,                                        /* tp_hash */
      0,                                        /* tp_call */
      0,                                        /* tp_str */
      PyObject_GenericGetAttr,                  /* tp_getattro */
      0,                                        /* tp_setattro */
      0,                                        /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_CLASS, /* tp_flags */
      0,                                        /* tp_doc */
      SwigPyStaticVar_traverse,                 /* tp_traverse */
      0,                                        /* tp_clear */
      0,                                        /* tp_richcompare */
      0,                                        /* tp_weaklistoffset */
      0,                                        /* tp_iter */
      0,                                        /* tp_iternext */
      0,                                        /* tp_methods */
      0,                                        /* tp_members */
      0,                                        /* tp_getset */
      0,                                        /* tp_base */
      0,                                        /* tp_dict */
      (descrgetfunc)SwigPyStaticVar_get,        /* tp_descr_get */
      (descrsetfunc)SwigPyStaticVar_set,        /* tp_descr_set */
      0,                                        /* tp_dictoffset */
      0,                                        /* tp_init */
      0,                                        /* tp_alloc */
      0,                                        /* tp_new */
      0,                                        /* tp_free */
      0,                                        /* tp_is_gc */
      0,                                        /* tp_bases */
      0,                                        /* tp_mro */
      0,                                        /* tp_cache */
      0,                                        /* tp_subclasses */
      0,                                        /* tp_weaklist */
      0,                                        /* tp_del */
      0,                                        /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                        /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                        /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
      0,                                        /* tp_allocs */
      0,                                        /* tp_frees */
      0,                                        /* tp_maxalloc */
      0,                                        /* tp_prev */
      0                                         /* tp_next */
#endif
    };
    staticvar_type = tmp;
    type_init = 1;
    if (PyType_Ready(&staticvar_type) < 0)
      return NULL;
  }
  return &staticvar_type;
}

SWIGINTERN PyTypeObject*
SwigPyObjectType(void) {
  static char swigpyobjecttype_doc[] = "Metaclass for SWIG wrapped types";
  static PyTypeObject swigpyobjecttype_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(&PyType_Type, 0)
#else
      PyObject_HEAD_INIT(&PyType_Type)
      0,                                        /* ob_size */
#endif
      "SwigPyObjectType",                       /* tp_name */
      PyType_Type.tp_basicsize,                 /* tp_basicsize */
      0,                                        /* tp_itemsize */
      0,                                        /* tp_dealloc */
      0,                                        /* tp_print */
      0,                                        /* tp_getattr */
      0,                                        /* tp_setattr */
      0,                                        /* tp_compare */
      0,                                        /* tp_repr */
      0,                                        /* tp_as_number */
      0,                                        /* tp_as_sequence */
      0,                                        /* tp_as_mapping */
      0,                                        /* tp_hash */
      0,                                        /* tp_call */
      0,                                        /* tp_str */
      0,                                        /* tp_getattro */
      SwigPyObjectType_setattro,                /* tp_setattro */
      0,                                        /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_CLASS, /* tp_flags */
      swigpyobjecttype_doc,                     /* tp_doc */
      0,                                        /* tp_traverse */
      0,                                        /* tp_clear */
      0,                                        /* tp_richcompare */
      0,                                        /* tp_weaklistoffset */
      0,                                        /* tp_iter */
      0,                                        /* tp_iternext */
      0,                                        /* tp_methods */
      0,                                        /* tp_members */
      0,                                        /* tp_getset */
      0,                                        /* tp_base */
      0,                                        /* tp_dict */
      0,                                        /* tp_descr_get */
      0,                                        /* tp_descr_set */
      0,                                        /* tp_dictoffset */
      0,                                        /* tp_init */
      0,                                        /* tp_alloc */
      0,                                        /* tp_new */
      0,                                        /* tp_free */
      0,                                        /* tp_is_gc */
      0,                                        /* tp_bases */
      0,                                        /* tp_mro */
      0,                                        /* tp_cache */
      0,                                        /* tp_subclasses */
      0,                                        /* tp_weaklist */
      0,                                        /* tp_del */
      0,                                        /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                        /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                        /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
      0,                                        /* tp_allocs */
      0,                                        /* tp_frees */
      0,                                        /* tp_maxalloc */
      0,                                        /* tp_prev */
      0                                         /* tp_next */
#endif
    };
    swigpyobjecttype_type = tmp;
    type_init = 1;
    swigpyobjecttype_type.tp_base = &PyType_Type;
    if (PyType_Ready(&swigpyobjecttype_type) < 0)
      return NULL;
  }
  return &swigpyobjecttype_type;
}

SWIGINTERN PyGetSetDescrObject *
SwigPyStaticVar_new_getset(PyTypeObject *type, PyGetSetDef *getset) {

  PyGetSetDescrObject *descr;
  descr = (PyGetSetDescrObject *)PyType_GenericAlloc(SwigPyStaticVar_Type(), 0);
  assert(descr);
  Py_XINCREF(type);
  PyDescr_TYPE(descr) = type;
  PyDescr_NAME(descr) = PyString_InternFromString(getset->name);
  descr->d_getset = getset;
  if (PyDescr_NAME(descr) == NULL) {
    Py_DECREF(descr);
    descr = NULL;
  }
  return descr;
}

SWIGINTERN void
SwigPyBuiltin_InitBases (PyTypeObject *type, PyTypeObject **bases) {
  Py_ssize_t base_count = 0;
  PyTypeObject **b;
  PyObject *tuple;
  Py_ssize_t i;

  if (!bases[0]) {
    bases[0] = SwigPyObject_type();
    bases[1] = NULL;
  }
  type->tp_base = bases[0];
  Py_INCREF((PyObject *)bases[0]);
  for (b = bases; *b != NULL; ++b)
    ++base_count;
  tuple = PyTuple_New(base_count);
  for (i = 0; i < base_count; ++i) {
    Py_INCREF((PyObject *)bases[i]);
    PyTuple_SET_ITEM(tuple, i, (PyObject *)bases[i]);
  }
  type->tp_bases = tuple;
}

SWIGINTERN PyObject *
SwigPyBuiltin_ThisClosure (PyObject *self, void *SWIGUNUSEDPARM(closure)) {
  PyObject *result;
  result = (PyObject *)SWIG_Python_GetSwigThis(self);
  Py_XINCREF(result);
  return result;
}

SWIGINTERN void
SwigPyBuiltin_SetMetaType (PyTypeObject *type, PyTypeObject *metatype)
{
#if PY_VERSION_HEX >= 0x03000000
    type->ob_base.ob_base.ob_type = metatype;
#else
    type->ob_type = metatype;
#endif
}


/* Start of callback function macros for use in PyTypeObject */

typedef PyObject *(*SwigPyWrapperFunction)(PyObject *, PyObject *);

#define SWIGPY_UNARYFUNC_CLOSURE(wrapper)		\
SWIGINTERN PyObject *					\
wrapper##_unaryfunc_closure(PyObject *a) {		\
  return SwigPyBuiltin_unaryfunc_closure(wrapper, a);	\
}
SWIGINTERN PyObject *
SwigPyBuiltin_unaryfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a) {
  return wrapper(a, NULL);
}

#define SWIGPY_DESTRUCTOR_CLOSURE(wrapper)			\
SWIGINTERN void							\
wrapper##_destructor_closure(PyObject *a) {			\
    SwigPyBuiltin_destructor_closure(wrapper, #wrapper, a);	\
}
SWIGINTERN void
SwigPyBuiltin_destructor_closure(SwigPyWrapperFunction wrapper, const char *wrappername, PyObject *a) {
  SwigPyObject *sobj;
  sobj = (SwigPyObject *)a;
  Py_XDECREF(sobj->dict);
  if (sobj->own) {
    PyObject *o;
    PyObject *type = 0, *value = 0, *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    o = wrapper(a, NULL);
    if (!o) {
      PyObject *deallocname = PyString_FromString(wrappername);
      PyErr_WriteUnraisable(deallocname);
      Py_DECREF(deallocname);
    }
    PyErr_Restore(type, value, traceback);
    Py_XDECREF(o);
  }
  if (PyType_IS_GC(a->ob_type)) {
    PyObject_GC_Del(a);
  } else {
    PyObject_Del(a);
  }
}

#define SWIGPY_INQUIRY_CLOSURE(wrapper)			\
SWIGINTERN int						\
wrapper##_inquiry_closure(PyObject *a) {		\
  return SwigPyBuiltin_inquiry_closure(wrapper, a);	\
}
SWIGINTERN int
SwigPyBuiltin_inquiry_closure(SwigPyWrapperFunction wrapper, PyObject *a) {
  PyObject *pyresult;
  int result;
  pyresult = wrapper(a, NULL);
  result = pyresult && PyObject_IsTrue(pyresult) ? 1 : 0;
  Py_XDECREF(pyresult);
  return result;
}

#define SWIGPY_GETITERFUNC_CLOSURE(wrapper)		\
SWIGINTERN PyObject *					\
wrapper##_getiterfunc_closure(PyObject *a) {		\
  return SwigPyBuiltin_getiterfunc_closure(wrapper, a);	\
}
SWIGINTERN PyObject *
SwigPyBuiltin_getiterfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a) {
  return wrapper(a, NULL);
}

#define SWIGPY_BINARYFUNC_CLOSURE(wrapper)			\
SWIGINTERN PyObject *						\
wrapper##_binaryfunc_closure(PyObject *a, PyObject *b) {	\
  return SwigPyBuiltin_binaryfunc_closure(wrapper, a, b);	\
}
SWIGINTERN PyObject *
SwigPyBuiltin_binaryfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a, PyObject *b) {
  PyObject *tuple, *result;
  tuple = PyTuple_New(1);
  assert(tuple);
  Py_INCREF(b);
  PyTuple_SET_ITEM(tuple, 0, b);
  result = wrapper(a, tuple);
  Py_DECREF(tuple);
  return result;
}

typedef ternaryfunc ternarycallfunc;

#define SWIGPY_TERNARYFUNC_CLOSURE(wrapper)				\
SWIGINTERN PyObject *							\
wrapper##_ternaryfunc_closure(PyObject *a, PyObject *b, PyObject *c) {	\
  return SwigPyBuiltin_ternaryfunc_closure(wrapper, a, b, c);		\
}
SWIGINTERN PyObject *
SwigPyBuiltin_ternaryfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a, PyObject *b, PyObject *c) {
  PyObject *tuple, *result;
  tuple = PyTuple_New(2);
  assert(tuple);
  Py_INCREF(b);
  PyTuple_SET_ITEM(tuple, 0, b);
  Py_INCREF(c);
  PyTuple_SET_ITEM(tuple, 1, c);
  result = wrapper(a, tuple);
  Py_DECREF(tuple);
  return result;
}

#define SWIGPY_TERNARYCALLFUNC_CLOSURE(wrapper)					\
SWIGINTERN PyObject *								\
wrapper##_ternarycallfunc_closure(PyObject *a, PyObject *b, PyObject *c) {	\
  return SwigPyBuiltin_ternarycallfunc_closure(wrapper, a, b, c);		\
}
SWIGINTERN PyObject *
SwigPyBuiltin_ternarycallfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a, PyObject *b, PyObject *c) {
  (void) c;
  return wrapper(a, b);
}

#define SWIGPY_LENFUNC_CLOSURE(wrapper)			\
SWIGINTERN Py_ssize_t					\
wrapper##_lenfunc_closure(PyObject *a) {		\
  return SwigPyBuiltin_lenfunc_closure(wrapper, a);	\
}
SWIGINTERN Py_ssize_t
SwigPyBuiltin_lenfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a) {
  PyObject *resultobj;
  Py_ssize_t result;
  resultobj = wrapper(a, NULL);
  result = PyNumber_AsSsize_t(resultobj, NULL);
  Py_DECREF(resultobj);
  return result;
}

#define SWIGPY_SSIZESSIZEARGFUNC_CLOSURE(wrapper)				\
SWIGINTERN PyObject *								\
wrapper##_ssizessizeargfunc_closure(PyObject *a, Py_ssize_t b, Py_ssize_t c) {	\
  return SwigPyBuiltin_ssizessizeargfunc_closure(wrapper, a, b, c);		\
}
SWIGINTERN PyObject *
SwigPyBuiltin_ssizessizeargfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a, Py_ssize_t b, Py_ssize_t c) {
  PyObject *tuple, *result;
  tuple = PyTuple_New(2);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, _PyLong_FromSsize_t(b));
  PyTuple_SET_ITEM(tuple, 1, _PyLong_FromSsize_t(c));
  result = wrapper(a, tuple);
  Py_DECREF(tuple);
  return result;
}

#define SWIGPY_SSIZESSIZEOBJARGPROC_CLOSURE(wrapper)						\
SWIGINTERN int											\
wrapper##_ssizessizeobjargproc_closure(PyObject *a, Py_ssize_t b, Py_ssize_t c, PyObject *d) {	\
  return SwigPyBuiltin_ssizessizeobjargproc_closure(wrapper, a, b, c, d);			\
}
SWIGINTERN int
SwigPyBuiltin_ssizessizeobjargproc_closure(SwigPyWrapperFunction wrapper, PyObject *a, Py_ssize_t b, Py_ssize_t c, PyObject *d) {
  PyObject *tuple, *resultobj;
  int result;
  tuple = PyTuple_New(d ? 3 : 2);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, _PyLong_FromSsize_t(b));
  PyTuple_SET_ITEM(tuple, 1, _PyLong_FromSsize_t(c));
  if (d) {
    Py_INCREF(d);
    PyTuple_SET_ITEM(tuple, 2, d);
  }
  resultobj = wrapper(a, tuple);
  result = resultobj ? 0 : -1;
  Py_DECREF(tuple);
  Py_XDECREF(resultobj);
  return result;
}

#define SWIGPY_SSIZEARGFUNC_CLOSURE(wrapper)				\
SWIGINTERN PyObject *							\
wrapper##_ssizeargfunc_closure(PyObject *a, Py_ssize_t b) {		\
  return SwigPyBuiltin_funpack_ssizeargfunc_closure(wrapper, a, b);	\
}
SWIGINTERN PyObject *
SwigPyBuiltin_funpack_ssizeargfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a, Py_ssize_t b) {
  PyObject *tuple, *result;
  tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, _PyLong_FromSsize_t(b));
  result = wrapper(a, tuple);
  Py_DECREF(tuple);
  return result;
}

#define SWIGPY_FUNPACK_SSIZEARGFUNC_CLOSURE(wrapper)			\
SWIGINTERN PyObject *							\
wrapper##_ssizeargfunc_closure(PyObject *a, Py_ssize_t b) {		\
  return SwigPyBuiltin_ssizeargfunc_closure(wrapper, a, b);		\
}
SWIGINTERN PyObject *
SwigPyBuiltin_ssizeargfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a, Py_ssize_t b) {
  PyObject *arg, *result;
  arg = _PyLong_FromSsize_t(b);
  result = wrapper(a, arg);
  Py_DECREF(arg);
  return result;
}

#define SWIGPY_SSIZEOBJARGPROC_CLOSURE(wrapper)					\
SWIGINTERN int									\
wrapper##_ssizeobjargproc_closure(PyObject *a, Py_ssize_t b, PyObject *c) {	\
  return SwigPyBuiltin_ssizeobjargproc_closure(wrapper, a, b, c);		\
}
SWIGINTERN int
SwigPyBuiltin_ssizeobjargproc_closure(SwigPyWrapperFunction wrapper, PyObject *a, Py_ssize_t b, PyObject *c) {
  PyObject *tuple, *resultobj;
  int result;
  tuple = PyTuple_New(2);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, _PyLong_FromSsize_t(b));
  Py_INCREF(c);
  PyTuple_SET_ITEM(tuple, 1, c);
  resultobj = wrapper(a, tuple);
  result = resultobj ? 0 : -1;
  Py_XDECREF(resultobj);
  Py_DECREF(tuple);
  return result;
}

#define SWIGPY_OBJOBJPROC_CLOSURE(wrapper)			\
SWIGINTERN int							\
wrapper##_objobjproc_closure(PyObject *a, PyObject *b) {	\
  return SwigPyBuiltin_objobjproc_closure(wrapper, a, b);	\
}
SWIGINTERN int
SwigPyBuiltin_objobjproc_closure(SwigPyWrapperFunction wrapper, PyObject *a, PyObject *b) {
  int result;
  PyObject *pyresult;
  PyObject *tuple;
  tuple = PyTuple_New(1);
  assert(tuple);
  Py_INCREF(b);
  PyTuple_SET_ITEM(tuple, 0, b);
  pyresult = wrapper(a, tuple);
  result = pyresult ? (PyObject_IsTrue(pyresult) ? 1 : 0) : -1;
  Py_XDECREF(pyresult);
  Py_DECREF(tuple);
  return result;
}

#define SWIGPY_FUNPACK_OBJOBJPROC_CLOSURE(wrapper)			\
SWIGINTERN int								\
wrapper##_objobjproc_closure(PyObject *a, PyObject *b) {		\
  return SwigPyBuiltin_funpack_objobjproc_closure(wrapper, a, b);	\
}
SWIGINTERN int
SwigPyBuiltin_funpack_objobjproc_closure(SwigPyWrapperFunction wrapper, PyObject *a, PyObject *b) {
  int result;
  PyObject *pyresult;
  pyresult = wrapper(a, b);
  result = pyresult ? (PyObject_IsTrue(pyresult) ? 1 : 0) : -1;
  Py_XDECREF(pyresult);
  return result;
}

#define SWIGPY_OBJOBJARGPROC_CLOSURE(wrapper)					\
SWIGINTERN int									\
wrapper##_objobjargproc_closure(PyObject *a, PyObject *b, PyObject *c) {	\
  return SwigPyBuiltin_objobjargproc_closure(wrapper, a, b, c);			\
}
SWIGINTERN int
SwigPyBuiltin_objobjargproc_closure(SwigPyWrapperFunction wrapper, PyObject *a, PyObject *b, PyObject *c) {
  PyObject *tuple, *resultobj;
  int result;
  tuple = PyTuple_New(c ? 2 : 1);
  assert(tuple);
  Py_INCREF(b);
  PyTuple_SET_ITEM(tuple, 0, b);
  if (c) {
    Py_INCREF(c);
    PyTuple_SET_ITEM(tuple, 1, c);
  }
  resultobj = wrapper(a, tuple);
  result = resultobj ? 0 : -1;
  Py_XDECREF(resultobj);
  Py_DECREF(tuple);
  return result;
}

#define SWIGPY_REPRFUNC_CLOSURE(wrapper)		\
SWIGINTERN PyObject *					\
wrapper##_reprfunc_closure(PyObject *a) {		\
  return SwigPyBuiltin_reprfunc_closure(wrapper, a);	\
}
SWIGINTERN PyObject *
SwigPyBuiltin_reprfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a) {
  return wrapper(a, NULL);
}

#define SWIGPY_HASHFUNC_CLOSURE(wrapper)		\
SWIGINTERN Py_hash_t					\
wrapper##_hashfunc_closure(PyObject *a) {		\
  return SwigPyBuiltin_hashfunc_closure(wrapper, a);	\
}
SWIGINTERN Py_hash_t
SwigPyBuiltin_hashfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a) {
  PyObject *pyresult;
  Py_hash_t result;
  pyresult = wrapper(a, NULL);
  if (!pyresult)
    return -1;
  result = SWIG_PyNumber_AsPyHash(pyresult);
  Py_DECREF(pyresult);
  return result;
}

#define SWIGPY_ITERNEXTFUNC_CLOSURE(wrapper)		\
SWIGINTERN PyObject *					\
wrapper##_iternextfunc_closure(PyObject *a) {		\
  return SwigPyBuiltin_iternextfunc_closure(wrapper, a);\
}
SWIGINTERN PyObject *
SwigPyBuiltin_iternextfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a) {
  return wrapper(a, NULL);
}

/* End of callback function macros for use in PyTypeObject */

#ifdef __cplusplus
}
#endif




#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



#ifdef __cplusplus
extern "C" {
#endif

/* Method creation and docstring support functions */

SWIGINTERN PyMethodDef *SWIG_PythonGetProxyDoc(const char *name);
SWIGINTERN PyObject *SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func);
SWIGINTERN PyObject *SWIG_PyStaticMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func);

#ifdef __cplusplus
}
#endif


  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Python proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DIRECTOR_PYTHON_HEADER_
#define SWIG_DIRECTOR_PYTHON_HEADER_

#include <string>
#include <iostream>
#include <exception>
#include <vector>
#include <map>


/*
  Use -DSWIG_PYTHON_DIRECTOR_NO_VTABLE if you don't want to generate a 'virtual
  table', and avoid multiple GetAttr calls to retrieve the python
  methods.
*/

#ifndef SWIG_PYTHON_DIRECTOR_NO_VTABLE
#ifndef SWIG_PYTHON_DIRECTOR_VTABLE
#define SWIG_PYTHON_DIRECTOR_VTABLE
#endif
#endif



/*
  Use -DSWIG_DIRECTOR_NO_UEH if you prefer to avoid the use of the
  Undefined Exception Handler provided by swig.
*/
#ifndef SWIG_DIRECTOR_NO_UEH
#ifndef SWIG_DIRECTOR_UEH
#define SWIG_DIRECTOR_UEH
#endif
#endif


/*
  Use -DSWIG_DIRECTOR_NORTTI if you prefer to avoid the use of the
  native C++ RTTI and dynamic_cast<>. But be aware that directors
  could stop working when using this option.
*/
#ifdef SWIG_DIRECTOR_NORTTI
/*
   When we don't use the native C++ RTTI, we implement a minimal one
   only for Directors.
*/
# ifndef SWIG_DIRECTOR_RTDIR
# define SWIG_DIRECTOR_RTDIR

namespace Swig {
  class Director;
  SWIGINTERN std::map<void *, Director *>& get_rtdir_map() {
    static std::map<void *, Director *> rtdir_map;
    return rtdir_map;
  }

  SWIGINTERNINLINE void set_rtdir(void *vptr, Director *rtdir) {
    get_rtdir_map()[vptr] = rtdir;
  }

  SWIGINTERNINLINE Director *get_rtdir(void *vptr) {
    std::map<void *, Director *>::const_iterator pos = get_rtdir_map().find(vptr);
    Director *rtdir = (pos != get_rtdir_map().end()) ? pos->second : 0;
    return rtdir;
  }
}
# endif /* SWIG_DIRECTOR_RTDIR */

# define SWIG_DIRECTOR_CAST(ARG) Swig::get_rtdir(static_cast<void *>(ARG))
# define SWIG_DIRECTOR_RGTR(ARG1, ARG2) Swig::set_rtdir(static_cast<void *>(ARG1), ARG2)

#else

# define SWIG_DIRECTOR_CAST(ARG) dynamic_cast<Swig::Director *>(ARG)
# define SWIG_DIRECTOR_RGTR(ARG1, ARG2)

#endif /* SWIG_DIRECTOR_NORTTI */

extern "C" {
  struct swig_type_info;
}

namespace Swig {

  /* memory handler */
  struct GCItem {
    virtual ~GCItem() {}

    virtual int get_own() const {
      return 0;
    }
  };

  struct GCItem_var {
    GCItem_var(GCItem *item = 0) : _item(item) {
    }

    GCItem_var& operator=(GCItem *item) {
      GCItem *tmp = _item;
      _item = item;
      delete tmp;
      return *this;
    }

    ~GCItem_var() {
      delete _item;
    }

    GCItem * operator->() const {
      return _item;
    }

  private:
    GCItem *_item;
  };

  struct GCItem_Object : GCItem {
    GCItem_Object(int own) : _own(own) {
    }

    virtual ~GCItem_Object() {
    }

    int get_own() const {
      return _own;
    }

  private:
    int _own;
  };

  template <typename Type>
  struct GCItem_T : GCItem {
    GCItem_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCItem_T() {
      delete _ptr;
    }

  private:
    Type *_ptr;
  };

  template <typename Type>
  struct GCArray_T : GCItem {
    GCArray_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCArray_T() {
      delete[] _ptr;
    }

  private:
    Type *_ptr;
  };

  /* base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;
  public:
    DirectorException(PyObject *error, const char *hdr ="", const char *msg ="") : swig_msg(hdr) {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (msg[0]) {
        swig_msg += " ";
        swig_msg += msg;
      }
      if (!PyErr_Occurred()) {
        PyErr_SetString(error, what());
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
    }

    virtual ~DirectorException() throw() {
    }

    /* Deprecated, use what() instead */
    const char *getMessage() const {
      return what();
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }

    static void raise(PyObject *error, const char *msg) {
      throw DirectorException(error, msg);
    }

    static void raise(const char *msg) {
      raise(PyExc_RuntimeError, msg);
    }
  };

  /* type mismatch in the return value from a python method call */
  class DirectorTypeMismatchException : public DirectorException {
  public:
    DirectorTypeMismatchException(PyObject *error, const char *msg="")
      : DirectorException(error, "SWIG director type mismatch", msg) {
    }

    DirectorTypeMismatchException(const char *msg="")
      : DirectorException(PyExc_TypeError, "SWIG director type mismatch", msg) {
    }

    static void raise(PyObject *error, const char *msg) {
      throw DirectorTypeMismatchException(error, msg);
    }

    static void raise(const char *msg) {
      throw DirectorTypeMismatchException(msg);
    }
  };

  /* any python exception that occurs during a director method call */
  class DirectorMethodException : public DirectorException {
  public:
    DirectorMethodException(const char *msg = "")
      : DirectorException(PyExc_RuntimeError, "SWIG director method error.", msg) {
    }

    static void raise(const char *msg) {
      throw DirectorMethodException(msg);
    }
  };

  /* attempt to call a pure virtual method via a director method */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg = "")
      : DirectorException(PyExc_RuntimeError, "SWIG director pure virtual method called", msg) {
    }

    static void raise(const char *msg) {
      throw DirectorPureVirtualException(msg);
    }
  };


#if defined(SWIG_PYTHON_THREADS)
/*  __THREAD__ is the old macro to activate some thread support */
# if !defined(__THREAD__)
#   define __THREAD__ 1
# endif
#endif

#ifdef __THREAD__
# include "pythread.h"
  class Guard {
    PyThread_type_lock &mutex_;

  public:
    Guard(PyThread_type_lock & mutex) : mutex_(mutex) {
      PyThread_acquire_lock(mutex_, WAIT_LOCK);
    }

    ~Guard() {
      PyThread_release_lock(mutex_);
    }
  };
# define SWIG_GUARD(mutex) Guard _guard(mutex)
#else
# define SWIG_GUARD(mutex)
#endif

  /* director base class */
  class Director {
  private:
    /* pointer to the wrapped python object */
    PyObject *swig_self;
    /* flag indicating whether the object is owned by python or c++ */
    mutable bool swig_disown_flag;

    /* decrement the reference count of the wrapped python object */
    void swig_decref() const {
      if (swig_disown_flag) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_DECREF(swig_self);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }

  public:
    /* wrap a python object. */
    Director(PyObject *self) : swig_self(self), swig_disown_flag(false) {
    }

    /* discard our reference at destruction */
    virtual ~Director() {
      swig_decref();
    }

    /* return a pointer to the wrapped python object */
    PyObject *swig_get_self() const {
      return swig_self;
    }

    /* acquire ownership of the wrapped python object (the sense of "disown" is from python) */
    void swig_disown() const {
      if (!swig_disown_flag) {
        swig_disown_flag=true;
        swig_incref();
      }
    }

    /* increase the reference count of the wrapped python object */
    void swig_incref() const {
      if (swig_disown_flag) {
        Py_INCREF(swig_self);
      }
    }

    /* methods to implement pseudo protected director members */
    virtual bool swig_get_inner(const char * /* swig_protected_method_name */) const {
      return true;
    }

    virtual void swig_set_inner(const char * /* swig_protected_method_name */, bool /* swig_val */) const {
    }

  /* ownership management */
  private:
    typedef std::map<void *, GCItem_var> swig_ownership_map;
    mutable swig_ownership_map swig_owner;
#ifdef __THREAD__
    static PyThread_type_lock swig_mutex_own;
#endif

  public:
    template <typename Type>
    void swig_acquire_ownership_array(Type *vptr) const {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCArray_T<Type>(vptr);
      }
    }

    template <typename Type>
    void swig_acquire_ownership(Type *vptr) const {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCItem_T<Type>(vptr);
      }
    }

    void swig_acquire_ownership_obj(void *vptr, int own) const {
      if (vptr && own) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCItem_Object(own);
      }
    }

    int swig_release_ownership(void *vptr) const {
      int own = 0;
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_ownership_map::iterator iter = swig_owner.find(vptr);
        if (iter != swig_owner.end()) {
          own = iter->second->get_own();
          swig_owner.erase(iter);
        }
      }
      return own;
    }

    template <typename Type>
    static PyObject *swig_pyobj_disown(PyObject *pyobj, PyObject *SWIGUNUSEDPARM(args)) {
      SwigPyObject *sobj = (SwigPyObject *)pyobj;
      sobj->own = 0;
      Director *d = SWIG_DIRECTOR_CAST(reinterpret_cast<Type *>(sobj->ptr));
      if (d)
        d->swig_disown();
      return PyWeakref_NewProxy(pyobj, NULL);
    }
  };

#ifdef __THREAD__
  PyThread_type_lock Director::swig_mutex_own = PyThread_allocate_lock();
#endif
}

#endif

/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_CPXCALLBACKINFO swig_types[0]
#define SWIGTYPE_p_CPXCALLBACKSOLUTIONSTRATEGY swig_types[1]
#define SWIGTYPE_p_CPXINFOTYPE swig_types[2]
#define SWIGTYPE_p_SwigPyObject swig_types[3]
#define SWIGTYPE_p_a_sizeof_CPXBYTE___1_1__1__int swig_types[4]
#define SWIGTYPE_p_a_sizeof_CPXBYTE___1_1__1__intArray swig_types[5]
#define SWIGTYPE_p_a_sizeof_CPXINT___4_1__1__int swig_types[6]
#define SWIGTYPE_p_a_sizeof_CPXINT___4_1__1__intArray swig_types[7]
#define SWIGTYPE_p_a_sizeof_CPXLONG___8_1__1__int swig_types[8]
#define SWIGTYPE_p_a_sizeof_CPXLONG___8_1__1__intArray swig_types[9]
#define SWIGTYPE_p_a_sizeof_CPXSHORT___2_1__1__int swig_types[10]
#define SWIGTYPE_p_a_sizeof_CPXSHORT___2_1__1__intArray swig_types[11]
#define SWIGTYPE_p_a_sizeof_CPXSIZE___sizeof_size_t__1__1__int swig_types[12]
#define SWIGTYPE_p_a_sizeof_CPXSIZE___sizeof_size_t__1__1__intArray swig_types[13]
#define SWIGTYPE_p_a_sizeof_CPXULONG___8_1__1__int swig_types[14]
#define SWIGTYPE_p_a_sizeof_CPXULONG___8_1__1__intArray swig_types[15]
#define SWIGTYPE_p_allocator_type swig_types[16]
#define SWIGTYPE_p_ampls__AMPLModel swig_types[17]
#define SWIGTYPE_p_ampls__AMPLSolverException swig_types[18]
#define SWIGTYPE_p_ampls__CPLEXCallback swig_types[19]
#define SWIGTYPE_p_ampls__CPLEXDrv swig_types[20]
#define SWIGTYPE_p_ampls__CPLEXModel swig_types[21]
#define SWIGTYPE_p_ampls__Constraint swig_types[22]
#define SWIGTYPE_p_ampls__CutDirection swig_types[23]
#define SWIGTYPE_p_ampls__Entity swig_types[24]
#define SWIGTYPE_p_ampls__GenericCallback swig_types[25]
#define SWIGTYPE_p_ampls__LPAlgorithms swig_types[26]
#define SWIGTYPE_p_ampls__SolverParams swig_types[27]
#define SWIGTYPE_p_ampls__Status swig_types[28]
#define SWIGTYPE_p_ampls__Value swig_types[29]
#define SWIGTYPE_p_ampls__VarType swig_types[30]
#define SWIGTYPE_p_ampls__Variable swig_types[31]
#define SWIGTYPE_p_ampls__Variant swig_types[32]
#define SWIGTYPE_p_ampls__Where swig_types[33]
#define SWIGTYPE_p_ampls__cpx__impl__CBWrap swig_types[34]
#define SWIGTYPE_p_ampls__cpx__impl__CPLEXDriverState swig_types[35]
#define SWIGTYPE_p_ampls__impl__AMPLMutex swig_types[36]
#define SWIGTYPE_p_ampls__impl__BaseCallback swig_types[37]
#define SWIGTYPE_p_ampls__impl__Records swig_types[38]
#define SWIGTYPE_p_ampls__impl__SolverDriverT_ampls__CPLEXModel_t swig_types[39]
#define SWIGTYPE_p_char swig_types[40]
#define SWIGTYPE_p_cpxcallbackcontext swig_types[41]
#define SWIGTYPE_p_cpxchannel swig_types[42]
#define SWIGTYPE_p_cpxdeserializer swig_types[43]
#define SWIGTYPE_p_cpxenv swig_types[44]
#define SWIGTYPE_p_cpxiodevice swig_types[45]
#define SWIGTYPE_p_cpxlp swig_types[46]
#define SWIGTYPE_p_cpxnet swig_types[47]
#define SWIGTYPE_p_cpxserializer swig_types[48]
#define SWIGTYPE_p_dblArray swig_types[49]
#define SWIGTYPE_p_difference_type swig_types[50]
#define SWIGTYPE_p_double swig_types[51]
#define SWIGTYPE_p_f_int_p_cpxiodevice__int swig_types[52]
#define SWIGTYPE_p_f_int_p_cpxiodevice__intArray swig_types[53]
#define SWIGTYPE_p_f_int_p_q_const__char_p_void__int swig_types[54]
#define SWIGTYPE_p_f_int_p_q_const__char_p_void__intArray swig_types[55]
#define SWIGTYPE_p_f_p_cpxcallbackcontext_long_long_p_void__int swig_types[56]
#define SWIGTYPE_p_f_p_cpxcallbackcontext_long_long_p_void__intArray swig_types[57]
#define SWIGTYPE_p_f_p_cpxdeserializer_long_long_p_double__int swig_types[58]
#define SWIGTYPE_p_f_p_cpxdeserializer_long_long_p_double__intArray swig_types[59]
#define SWIGTYPE_p_f_p_cpxdeserializer_long_long_p_float__int swig_types[60]
#define SWIGTYPE_p_f_p_cpxdeserializer_long_long_p_float__intArray swig_types[61]
#define SWIGTYPE_p_f_p_cpxdeserializer_long_long_p_int__int swig_types[62]
#define SWIGTYPE_p_f_p_cpxdeserializer_long_long_p_int__intArray swig_types[63]
#define SWIGTYPE_p_f_p_cpxdeserializer_long_long_p_long_long__int swig_types[64]
#define SWIGTYPE_p_f_p_cpxdeserializer_long_long_p_long_long__intArray swig_types[65]
#define SWIGTYPE_p_f_p_cpxdeserializer_long_long_p_short__int swig_types[66]
#define SWIGTYPE_p_f_p_cpxdeserializer_long_long_p_short__intArray swig_types[67]
#define SWIGTYPE_p_f_p_cpxdeserializer_long_long_p_signed_char__int swig_types[68]
#define SWIGTYPE_p_f_p_cpxdeserializer_long_long_p_signed_char__intArray swig_types[69]
#define SWIGTYPE_p_f_p_cpxdeserializer_p_double__int swig_types[70]
#define SWIGTYPE_p_f_p_cpxdeserializer_p_double__intArray swig_types[71]
#define SWIGTYPE_p_f_p_cpxdeserializer_p_float__int swig_types[72]
#define SWIGTYPE_p_f_p_cpxdeserializer_p_float__intArray swig_types[73]
#define SWIGTYPE_p_f_p_cpxdeserializer_p_int__int swig_types[74]
#define SWIGTYPE_p_f_p_cpxdeserializer_p_int__intArray swig_types[75]
#define SWIGTYPE_p_f_p_cpxdeserializer_p_long_long__int swig_types[76]
#define SWIGTYPE_p_f_p_cpxdeserializer_p_long_long__intArray swig_types[77]
#define SWIGTYPE_p_f_p_cpxdeserializer_p_short__int swig_types[78]
#define SWIGTYPE_p_f_p_cpxdeserializer_p_short__intArray swig_types[79]
#define SWIGTYPE_p_f_p_cpxdeserializer_p_signed_char__int swig_types[80]
#define SWIGTYPE_p_f_p_cpxdeserializer_p_signed_char__intArray swig_types[81]
#define SWIGTYPE_p_f_p_cpxenv_enum_CPXINFOTYPE_int_long_long_p_q_const__void_p_void__void swig_types[82]
#define SWIGTYPE_p_f_p_cpxenv_int_long_long_p_q_const__void_long_long_p_long_long_p_void_p_void__int swig_types[83]
#define SWIGTYPE_p_f_p_cpxenv_int_long_long_p_q_const__void_long_long_p_long_long_p_void_p_void__intArray swig_types[84]
#define SWIGTYPE_p_f_p_cpxiodevice__int swig_types[85]
#define SWIGTYPE_p_f_p_cpxiodevice__intArray swig_types[86]
#define SWIGTYPE_p_f_p_cpxserializer_double__int swig_types[87]
#define SWIGTYPE_p_f_p_cpxserializer_double__intArray swig_types[88]
#define SWIGTYPE_p_f_p_cpxserializer_float__int swig_types[89]
#define SWIGTYPE_p_f_p_cpxserializer_float__intArray swig_types[90]
#define SWIGTYPE_p_f_p_cpxserializer_int__int swig_types[91]
#define SWIGTYPE_p_f_p_cpxserializer_int__intArray swig_types[92]
#define SWIGTYPE_p_f_p_cpxserializer_long_long__int swig_types[93]
#define SWIGTYPE_p_f_p_cpxserializer_long_long__intArray swig_types[94]
#define SWIGTYPE_p_f_p_cpxserializer_long_long_p_q_const__double__int swig_types[95]
#define SWIGTYPE_p_f_p_cpxserializer_long_long_p_q_const__double__intArray swig_types[96]
#define SWIGTYPE_p_f_p_cpxserializer_long_long_p_q_const__float__int swig_types[97]
#define SWIGTYPE_p_f_p_cpxserializer_long_long_p_q_const__float__intArray swig_types[98]
#define SWIGTYPE_p_f_p_cpxserializer_long_long_p_q_const__int__int swig_types[99]
#define SWIGTYPE_p_f_p_cpxserializer_long_long_p_q_const__int__intArray swig_types[100]
#define SWIGTYPE_p_f_p_cpxserializer_long_long_p_q_const__long_long__int swig_types[101]
#define SWIGTYPE_p_f_p_cpxserializer_long_long_p_q_const__long_long__intArray swig_types[102]
#define SWIGTYPE_p_f_p_cpxserializer_long_long_p_q_const__short__int swig_types[103]
#define SWIGTYPE_p_f_p_cpxserializer_long_long_p_q_const__short__intArray swig_types[104]
#define SWIGTYPE_p_f_p_cpxserializer_long_long_p_q_const__signed_char__int swig_types[105]
#define SWIGTYPE_p_f_p_cpxserializer_long_long_p_q_const__signed_char__intArray swig_types[106]
#define SWIGTYPE_p_f_p_cpxserializer_short__int swig_types[107]
#define SWIGTYPE_p_f_p_cpxserializer_short__intArray swig_types[108]
#define SWIGTYPE_p_f_p_cpxserializer_signed_char__int swig_types[109]
#define SWIGTYPE_p_f_p_cpxserializer_signed_char__intArray swig_types[110]
#define SWIGTYPE_p_f_p_q_const__char_p_cpxiodevice__int swig_types[111]
#define SWIGTYPE_p_f_p_q_const__char_p_cpxiodevice__intArray swig_types[112]
#define SWIGTYPE_p_f_p_q_const__cpxenv_int_p_void__int swig_types[113]
#define SWIGTYPE_p_f_p_q_const__cpxenv_int_p_void__intArray swig_types[114]
#define SWIGTYPE_p_f_p_q_const__cpxenv_int_p_void_int_p_void__void swig_types[115]
#define SWIGTYPE_p_f_p_q_const__cpxenv_p_void_int_p_void__int swig_types[116]
#define SWIGTYPE_p_f_p_q_const__cpxenv_p_void_int_p_void__intArray swig_types[117]
#define SWIGTYPE_p_f_p_q_const__cpxenv_p_void_int_p_void_double_p_double_p_int_p_int__int swig_types[118]
#define SWIGTYPE_p_f_p_q_const__cpxenv_p_void_int_p_void_double_p_double_p_int_p_int__intArray swig_types[119]
#define SWIGTYPE_p_f_p_q_const__cpxenv_p_void_int_p_void_int_int_int_int_p_q_const__int_p_q_const__int_p_q_const__char_p_q_const__double_p_q_const__double_p_int__int swig_types[120]
#define SWIGTYPE_p_f_p_q_const__cpxenv_p_void_int_p_void_int_int_int_int_p_q_const__int_p_q_const__int_p_q_const__char_p_q_const__double_p_q_const__double_p_int__intArray swig_types[121]
#define SWIGTYPE_p_f_p_q_const__cpxenv_p_void_int_p_void_p_double_p_double_p_int_p_int__int swig_types[122]
#define SWIGTYPE_p_f_p_q_const__cpxenv_p_void_int_p_void_p_double_p_double_p_int_p_int__intArray swig_types[123]
#define SWIGTYPE_p_f_p_q_const__cpxenv_p_void_int_p_void_p_int__int swig_types[124]
#define SWIGTYPE_p_f_p_q_const__cpxenv_p_void_int_p_void_p_int__intArray swig_types[125]
#define SWIGTYPE_p_f_p_q_const__cpxenv_p_void_int_p_void_p_int_p_int__int swig_types[126]
#define SWIGTYPE_p_f_p_q_const__cpxenv_p_void_int_p_void_p_int_p_int__intArray swig_types[127]
#define SWIGTYPE_p_f_p_q_const__void_size_t_p_cpxiodevice__size_t swig_types[128]
#define SWIGTYPE_p_f_p_void_long_long_p_char__p_char swig_types[129]
#define SWIGTYPE_p_f_p_void_p_q_const__char__void swig_types[130]
#define SWIGTYPE_p_f_p_void_size_t_p_cpxiodevice__size_t swig_types[131]
#define SWIGTYPE_p_int swig_types[132]
#define SWIGTYPE_p_intArray swig_types[133]
#define SWIGTYPE_p_key_type swig_types[134]
#define SWIGTYPE_p_long_long swig_types[135]
#define SWIGTYPE_p_mapped_type swig_types[136]
#define SWIGTYPE_p_p_ASL swig_types[137]
#define SWIGTYPE_p_p_PyObject swig_types[138]
#define SWIGTYPE_p_p_char swig_types[139]
#define SWIGTYPE_p_p_cpxchannel swig_types[140]
#define SWIGTYPE_p_p_cpxdeserializer swig_types[141]
#define SWIGTYPE_p_p_cpxenv swig_types[142]
#define SWIGTYPE_p_p_cpxlp swig_types[143]
#define SWIGTYPE_p_p_cpxnet swig_types[144]
#define SWIGTYPE_p_p_cpxserializer swig_types[145]
#define SWIGTYPE_p_p_f_int_p_q_const__char_p_void__int swig_types[146]
#define SWIGTYPE_p_p_f_int_p_q_const__char_p_void__intArray swig_types[147]
#define SWIGTYPE_p_p_f_p_cpxcallbackcontext_long_long_p_void__int swig_types[148]
#define SWIGTYPE_p_p_f_p_cpxcallbackcontext_long_long_p_void__intArray swig_types[149]
#define SWIGTYPE_p_p_f_p_q_const__cpxenv_int_p_void_int_p_void__void swig_types[150]
#define SWIGTYPE_p_p_f_p_q_const__cpxenv_p_void_int_p_void__int swig_types[151]
#define SWIGTYPE_p_p_f_p_q_const__cpxenv_p_void_int_p_void__intArray swig_types[152]
#define SWIGTYPE_p_p_f_p_q_const__cpxenv_p_void_int_p_void_double_p_double_p_int_p_int__int swig_types[153]
#define SWIGTYPE_p_p_f_p_q_const__cpxenv_p_void_int_p_void_double_p_double_p_int_p_int__intArray swig_types[154]
#define SWIGTYPE_p_p_f_p_q_const__cpxenv_p_void_int_p_void_int_int_int_int_p_q_const__int_p_q_const__int_p_q_const__char_p_q_const__double_p_q_const__double_p_int__int swig_types[155]
#define SWIGTYPE_p_p_f_p_q_const__cpxenv_p_void_int_p_void_int_int_int_int_p_q_const__int_p_q_const__int_p_q_const__char_p_q_const__double_p_q_const__double_p_int__intArray swig_types[156]
#define SWIGTYPE_p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_double_p_double_p_int_p_int__int swig_types[157]
#define SWIGTYPE_p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_double_p_double_p_int_p_int__intArray swig_types[158]
#define SWIGTYPE_p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_int__int swig_types[159]
#define SWIGTYPE_p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_int__intArray swig_types[160]
#define SWIGTYPE_p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_int_p_int__int swig_types[161]
#define SWIGTYPE_p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_int_p_int__intArray swig_types[162]
#define SWIGTYPE_p_p_paramset swig_types[163]
#define SWIGTYPE_p_p_void swig_types[164]
#define SWIGTYPE_p_paramset swig_types[165]
#define SWIGTYPE_p_pthread_mutex_t swig_types[166]
#define SWIGTYPE_p_short swig_types[167]
#define SWIGTYPE_p_signed_char swig_types[168]
#define SWIGTYPE_p_size_type swig_types[169]
#define SWIGTYPE_p_std__allocatorT_double_t swig_types[170]
#define SWIGTYPE_p_std__allocatorT_std__pairT_int_const_std__string_t_t swig_types[171]
#define SWIGTYPE_p_std__allocatorT_std__pairT_std__string_const_double_t_t swig_types[172]
#define SWIGTYPE_p_std__allocatorT_std__pairT_std__string_const_int_t_t swig_types[173]
#define SWIGTYPE_p_std__allocatorT_std__string_t swig_types[174]
#define SWIGTYPE_p_std__invalid_argument swig_types[175]
#define SWIGTYPE_p_std__lessT_int_t swig_types[176]
#define SWIGTYPE_p_std__lessT_std__string_t swig_types[177]
#define SWIGTYPE_p_std__mapT_int_std__string_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__string_t_t_t swig_types[178]
#define SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t swig_types[179]
#define SWIGTYPE_p_std__mapT_std__string_int_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_int_t_t_t swig_types[180]
#define SWIGTYPE_p_std__runtime_error swig_types[181]
#define SWIGTYPE_p_std__string swig_types[182]
#define SWIGTYPE_p_std__vectorT_ampls__Constraint_std__allocatorT_ampls__Constraint_t_t swig_types[183]
#define SWIGTYPE_p_std__vectorT_ampls__Entity_p_std__allocatorT_ampls__Entity_p_t_t swig_types[184]
#define SWIGTYPE_p_std__vectorT_ampls__Variable_std__allocatorT_ampls__Variable_t_t swig_types[185]
#define SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t swig_types[186]
#define SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t swig_types[187]
#define SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t swig_types[188]
#define SWIGTYPE_p_swig__SwigPyIterator swig_types[189]
#define SWIGTYPE_p_unsigned_char swig_types[190]
#define SWIGTYPE_p_unsigned_int swig_types[191]
#define SWIGTYPE_p_unsigned_long_long swig_types[192]
#define SWIGTYPE_p_unsigned_short swig_types[193]
#define SWIGTYPE_p_value_type swig_types[194]
#define SWIGTYPE_p_void swig_types[195]
static swig_type_info *swig_types[197];
static swig_module_info swig_module = {swig_types, 196, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#ifdef SWIG_TypeQuery
# undef SWIG_TypeQuery
#endif
#define SWIG_TypeQuery SWIG_Python_TypeQuery

/*-----------------------------------------------
              @(target):= _amplpy_cplex_swig.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__amplpy_cplex_swig

#else
#  define SWIG_init    init_amplpy_cplex_swig

#endif
#define SWIG_name    "_amplpy_cplex_swig"

#define SWIGVERSION 0x040002 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(_obj);      
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_XINCREF(_obj);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XDECREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#include <stddef.h>


#include <string>


typedef double dblArray;


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
#if PY_VERSION_HEX < 0x03000000
  } else if (PyInt_Check(obj)) {
    if (val) *val = (double) PyInt_AsLong(obj);
    return SWIG_OK;
#endif
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else
#endif
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_unsigned_SS_long_SS_long (PyObject *obj, unsigned long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    unsigned long long v = PyLong_AsUnsignedLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && !SWIG_CanCastAsInteger(&d, 0, mant_max))
      return SWIG_OverflowError;
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, mant_max)) {
      if (val) *val = (unsigned long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
    unsigned long long v;
    res = SWIG_AsVal_unsigned_SS_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  }
#endif
  return res;
}

SWIGINTERN dblArray *new_dblArray(size_t nelements){
    return (new double[nelements]());
  }
SWIGINTERN void delete_dblArray(dblArray *self){
    delete[] self;
  }
SWIGINTERN double dblArray___getitem__(dblArray *self,size_t index){
    return self[index];
  }

  #define SWIG_From_double   PyFloat_FromDouble 

SWIGINTERN void dblArray___setitem__(dblArray *self,size_t index,double value){
    self[index] = value;
  }
SWIGINTERN double *dblArray_cast(dblArray *self){
    return self;
  }
SWIGINTERN dblArray *dblArray_frompointer(double *t){
    return static_cast< dblArray * >(t);
  }

typedef int intArray;

SWIGINTERN intArray *new_intArray(size_t nelements){
    return (new int[nelements]());
  }
SWIGINTERN void delete_intArray(intArray *self){
    delete[] self;
  }
SWIGINTERN int intArray___getitem__(intArray *self,size_t index){
    return self[index];
  }

SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else
#endif
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}

SWIGINTERN void intArray___setitem__(intArray *self,size_t index,int value){
    self[index] = value;
  }
SWIGINTERN int *intArray_cast(intArray *self){
    return self;
  }
SWIGINTERN intArray *intArray_frompointer(int *t){
    return static_cast< intArray * >(t);
  }

#include <stdint.h>		// Use the C99 official header


#include <typeinfo>
#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <utility>


#include <iostream>

#if PY_VERSION_HEX >= 0x03020000
# define SWIGPY_SLICE_ARG(obj) ((PyObject*) (obj))
#else
# define SWIGPY_SLICE_ARG(obj) ((PySliceObject*) (obj))
#endif


namespace swig {
  struct stop_iteration {
  };

  struct SwigPyIterator {
  private:
    SwigPtr_PyObject _seq;

  protected:
    SwigPyIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~SwigPyIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual SwigPyIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual SwigPyIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual SwigPyIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    /* Make an alias for Python 3.x */
    PyObject *__next__()
    {
      return next();
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    SwigPyIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const SwigPyIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const SwigPyIterator& x) const
    {
      return ! operator==(x);
    }
      
    SwigPyIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    SwigPyIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    SwigPyIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    SwigPyIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const SwigPyIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::SwigPyIterator *");
	init = 1;
      }	
      return desc;
    }    
  };

#if defined(SWIGPYTHON_BUILTIN)
  inline PyObject* make_output_iterator_builtin (PyObject *pyself)
  {
    Py_INCREF(pyself);
    return pyself;
  }
#endif
}


  #define SWIG_From_long   PyInt_FromLong 


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_long_SS_long  (long long value)
{
  return ((value < LONG_MIN) || (value > LONG_MAX)) ?
    PyLong_FromLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif


SWIGINTERNINLINE PyObject *
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
    return SWIG_From_long  (static_cast< long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(ptrdiff_t) <= sizeof(long long) */
    return SWIG_From_long_SS_long  (static_cast< long long >(value));
  }
#endif
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_long_SS_long (PyObject *obj, long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    long long v = PyLong_AsLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    long v;
    res = SWIG_AsVal_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    const double mant_min = -mant_max;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && !SWIG_CanCastAsInteger(&d, mant_min, mant_max))
      return SWIG_OverflowError;
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, mant_min, mant_max)) {
      if (val) *val = (long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (PyObject * obj, ptrdiff_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
    long v;
    res = SWIG_AsVal_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(ptrdiff_t) <= sizeof(long long)) {
    long long v;
    res = SWIG_AsVal_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  }
#endif
  return res;
}


#include <algorithm>


#include <map>


#include <algorithm>


#include <vector>


  #include "ampls/ampls.h"


namespace swig {
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  /*
    Partial specialization for pointers (traits_info)
  */
  template <class Type> struct traits_info<Type *> {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers (traits)
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category>
  struct traits_as { };

  template <class Type, class Category>
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_InternalNewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static PyObject *from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      int res = SWIG_ERROR;
      swig_type_info *descriptor = type_info<Type>();
      if (val) {
        Type *p = 0;
        int newmem = 0;
        res = descriptor ? SWIG_ConvertPtrAndOwn(obj, (void **)&p, descriptor, 0, &newmem) : SWIG_ERROR;
        if (SWIG_IsOK(res)) {
          if (newmem & SWIG_CAST_NEW_MEMORY) {
            res |= SWIG_NEWOBJMASK;
          }
          *val = p;
        }
      } else {
        res = descriptor ? SWIG_ConvertPtr(obj, 0, descriptor, 0) : SWIG_ERROR;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	throw std::invalid_argument("bad type");
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	throw std::invalid_argument("bad type");
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj) {
    return traits_as<Type, typename traits<Type>::category>::as(obj);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


#include <functional>

namespace std {
  template <>
  struct less <PyObject *>
  {
    bool
    operator()(PyObject * v, PyObject *w) const
    { 
      bool res;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      res = PyObject_RichCompareBool(v, w, Py_LT) ? true : false;
      /* This may fall into a case of inconsistent
               eg. ObjA > ObjX > ObjB
               but ObjA < ObjB
      */
      if( PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError) )
      {
        /* Objects can't be compared, this mostly occurred in Python 3.0 */
        /* Compare their ptr directly for a workaround */
        res = (v < w);
        PyErr_Clear();
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return res;
    }
  };

  template <>
  struct less <swig::SwigPtr_PyObject>
  {
    bool
    operator()(const swig::SwigPtr_PyObject& v, const swig::SwigPtr_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

  template <>
  struct less <swig::SwigVar_PyObject>
  {
    bool
    operator()(const swig::SwigVar_PyObject& v, const swig::SwigVar_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

}

namespace swig {
  template <> struct traits<PyObject *> {
    typedef value_category category;
    static const char* type_name() { return "PyObject *"; }
  };  

  template <>  struct traits_asval<PyObject * > {   
    typedef PyObject * value_type;
    static int asval(PyObject *obj, value_type *val) {
      if (val) *val = obj;
      return SWIG_OK;
    }
  };

  template <> 
  struct traits_check<PyObject *, value_category> {
    static bool check(PyObject *) {
      return true;
    }
  };

  template <>  struct traits_from<PyObject *> {
    typedef PyObject * value_type;
    static PyObject *from(const value_type& val) {
      Py_XINCREF(val);
      return val;
    }
  };
  
}

namespace swig {
  template <class Difference>
  inline size_t
  check_index(Difference i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    throw std::out_of_range("index out of range");
  }

  template <class Difference>
  void
  slice_adjust(Difference i, Difference j, Py_ssize_t step, size_t size, Difference &ii, Difference &jj, bool insert = false) {
    if (step == 0) {
      throw std::invalid_argument("slice step cannot be zero");
    } else if (step > 0) {
      // Required range: 0 <= i < size, 0 <= j < size, i <= j
      if (i < 0) {
        ii = 0;
      } else if (i < (Difference)size) {
        ii = i;
      } else if (insert && (i >= (Difference)size)) {
        ii = (Difference)size;
      }
      if (j < 0) {
        jj = 0;
      } else {
        jj = (j < (Difference)size) ? j : (Difference)size;
      }
      if (jj < ii)
        jj = ii;
    } else {
      // Required range: -1 <= i < size-1, -1 <= j < size-1, i >= j
      if (i < -1) {
        ii = -1;
      } else if (i < (Difference) size) {
        ii = i;
      } else if (i >= (Difference)(size-1)) {
        ii = (Difference)(size-1);
      }
      if (j < -1) {
        jj = -1;
      } else {
        jj = (j < (Difference)size ) ? j : (Difference)(size-1);
      }
      if (ii < jj)
        ii = jj;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence>
  inline void
  erase(Sequence* seq, const typename Sequence::iterator& position) {
    seq->erase(position);
  }

  template <class Sequence>
  struct traits_reserve {
    static void reserve(Sequence & /*seq*/, typename Sequence::size_type /*n*/) {
      // This should be specialized for types that support reserve
    }
  };

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj);

    if (step > 0) {
      typename Sequence::const_iterator sb = self->begin();
      typename Sequence::const_iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      if (step == 1) {
        return new Sequence(sb, se);
      } else {
        Sequence *sequence = new Sequence();
        swig::traits_reserve<Sequence>::reserve(*sequence, (jj - ii + step - 1) / step);
        typename Sequence::const_iterator it = sb;
        while (it!=se) {
          sequence->push_back(*it);
          for (Py_ssize_t c=0; c<step && it!=se; ++c)
            it++;
        }
        return sequence;
      } 
    } else {
      Sequence *sequence = new Sequence();
      swig::traits_reserve<Sequence>::reserve(*sequence, (ii - jj - step - 1) / -step);
      typename Sequence::const_reverse_iterator sb = self->rbegin();
      typename Sequence::const_reverse_iterator se = self->rbegin();
      std::advance(sb,size-ii-1);
      std::advance(se,size-jj-1);
      typename Sequence::const_reverse_iterator it = sb;
      while (it!=se) {
        sequence->push_back(*it);
        for (Py_ssize_t c=0; c<-step && it!=se; ++c)
          it++;
      }
      return sequence;
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, Py_ssize_t step, const InputSeq& is = InputSeq()) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      if (step == 1) {
        size_t ssize = jj - ii;
        if (ssize <= is.size()) {
          // expanding/staying the same size
          swig::traits_reserve<Sequence>::reserve(*self, self->size() - ssize + is.size());
          typename Sequence::iterator sb = self->begin();
          typename InputSeq::const_iterator isit = is.begin();
          std::advance(sb,ii);
          std::advance(isit, jj - ii);
          self->insert(std::copy(is.begin(), isit, sb), isit, is.end());
        } else {
          // shrinking
          typename Sequence::iterator sb = self->begin();
          typename Sequence::iterator se = self->begin();
          std::advance(sb,ii);
          std::advance(se,jj);
          self->erase(sb,se);
          sb = self->begin();
          std::advance(sb,ii);
          self->insert(sb, is.begin(), is.end());
        }
      } else {
        size_t replacecount = (jj - ii + step - 1) / step;
        if (is.size() != replacecount) {
          char msg[1024];
          sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
          throw std::invalid_argument(msg);
        }
        typename Sequence::const_iterator isit = is.begin();
        typename Sequence::iterator it = self->begin();
        std::advance(it,ii);
        for (size_t rc=0; rc<replacecount && it != self->end(); ++rc) {
          *it++ = *isit++;
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
        }
      }
    } else {
      size_t replacecount = (ii - jj - step - 1) / -step;
      if (is.size() != replacecount) {
        char msg[1024];
        sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
        throw std::invalid_argument(msg);
      }
      typename Sequence::const_iterator isit = is.begin();
      typename Sequence::reverse_iterator it = self->rbegin();
      std::advance(it,size-ii-1);
      for (size_t rc=0; rc<replacecount && it != self->rend(); ++rc) {
        *it++ = *isit++;
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
      }
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      typename Sequence::iterator sb = self->begin();
      std::advance(sb,ii);
      if (step == 1) {
        typename Sequence::iterator se = self->begin();
        std::advance(se,jj);
        self->erase(sb,se);
      } else {
        typename Sequence::iterator it = sb;
        size_t delcount = (jj - ii + step - 1) / step;
        while (delcount) {
          it = self->erase(it);
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
          delcount--;
        }
      }
    } else {
      typename Sequence::reverse_iterator sb = self->rbegin();
      std::advance(sb,size-ii-1);
      typename Sequence::reverse_iterator it = sb;
      size_t delcount = (ii - jj - step - 1) / -step;
      while (delcount) {
        it = typename Sequence::reverse_iterator(self->erase((++it).base()));
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
        delcount--;
      }
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class SwigPyIterator_T :  public SwigPyIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef SwigPyIterator_T<out_iterator> self_type;

    SwigPyIterator_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef PyObject *result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyForwardIteratorOpen_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyForwardIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyForwardIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq)
    {
    }
    
    PyObject *value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorOpen_T :  public SwigPyForwardIteratorOpen_T<OutIterator, ValueType, FromOper>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyForwardIteratorOpen_T<OutIterator>(curr, seq)
    {
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyForwardIteratorClosed_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;    
    typedef SwigPyForwardIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyForwardIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    PyObject *value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

  protected:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorClosed_T :  public SwigPyForwardIteratorClosed_T<OutIterator,ValueType,FromOper>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyForwardIteratorClosed_T<OutIterator, ValueType, FromOper> base0;
    typedef SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyForwardIteratorClosed_T<OutIterator,ValueType,FromOper>(curr, first, last, seq)
    {
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == base0::begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }
  };


  template<typename OutIter>
  inline SwigPyIterator*
  make_output_forward_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyForwardIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_forward_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyForwardIteratorOpen_T<OutIter>(current, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyIteratorOpen_T<OutIter>(current, seq);
  }

}


namespace swig
{
  template <class T>
  struct SwigPySequence_Ref
  {
    SwigPySequence_Ref(PyObject* seq, Py_ssize_t index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      swig::SwigVar_PyObject item = PySequence_GetItem(_seq, _index);
      try {
	return swig::as<T>(item);
      } catch (const std::invalid_argument& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", (int)_index);
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	SWIG_Python_AddErrorMsg(msg);
	SWIG_Python_AddErrorMsg(e.what());
	throw;
      }
    }

    SwigPySequence_Ref& operator=(const T& v)
    {
      PySequence_SetItem(_seq, _index, swig::from<T>(v));
      return *this;
    }

  private:
    PyObject* _seq;
    Py_ssize_t _index;
  };

  template <class T>
  struct SwigPySequence_ArrowProxy
  {
    SwigPySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };

  template <class T, class Reference >
  struct SwigPySequence_InputIterator
  {
    typedef SwigPySequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef Py_ssize_t difference_type;

    SwigPySequence_InputIterator()
    {
    }

    SwigPySequence_InputIterator(PyObject* seq, Py_ssize_t index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    SwigPySequence_ArrowProxy<T>
    operator->() const {
      return SwigPySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    PyObject* _seq;
    difference_type _index;
  };

  // STL container wrapper around a Python sequence
  template <class T>
  struct SwigPySequence_Cont
  {
    typedef SwigPySequence_Ref<T> reference;
    typedef const SwigPySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef Py_ssize_t difference_type;
    typedef size_t size_type;
    typedef const pointer const_pointer;
    typedef SwigPySequence_InputIterator<T, reference> iterator;
    typedef SwigPySequence_InputIterator<T, const_reference> const_iterator;

    SwigPySequence_Cont(PyObject* seq) : _seq(0)
    {
      if (!PySequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
    }

    ~SwigPySequence_Cont()
    {
      Py_XDECREF(_seq);
    }

    size_type size() const
    {
      return static_cast<size_type>(PySequence_Size(_seq));
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check() const
    {
      Py_ssize_t s = size();
      for (Py_ssize_t i = 0; i < s; ++i) {
	swig::SwigVar_PyObject item = PySequence_GetItem(_seq, i);
	if (!swig::check<value_type>(item))
	  return false;
      }
      return true;
    }

  private:
    PyObject* _seq;
  };

}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
  if (PyBytes_Check(obj))
#else
  if (PyUnicode_Check(obj))
#endif
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
    int ret = SWIG_OK;
#if PY_VERSION_HEX>=0x03000000
#if !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    if (!obj)
      return SWIG_TypeError;
    if (alloc)
      *alloc = SWIG_NEWOBJ;
#endif
    if (PyBytes_AsStringAndSize(obj, &cstr, &len) == -1)
      return SWIG_TypeError;
#else
    if (PyString_AsStringAndSize(obj, &cstr, &len) == -1)
      return SWIG_TypeError;
#endif
    if (cptr) {
      if (alloc) {
	if (*alloc == SWIG_NEWOBJ) {
	  *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
	  *alloc = SWIG_NEWOBJ;
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
	*cptr = PyBytes_AsString(obj);
#else
	assert(0); /* Should never reach here with Unicode strings in Python 3 */
#endif
#else
	*cptr = SWIG_Python_str_AsChar(obj);
        if (!*cptr)
          ret = SWIG_TypeError;
#endif
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000 && !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    Py_XDECREF(obj);
#endif
    return ret;
  } else {
#if defined(SWIG_PYTHON_2_UNICODE)
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
#error "Cannot use both SWIG_PYTHON_2_UNICODE and SWIG_PYTHON_STRICT_BYTE_CHAR at once"
#endif
#if PY_VERSION_HEX<0x03000000
    if (PyUnicode_Check(obj)) {
      char *cstr; Py_ssize_t len;
      if (!alloc && cptr) {
        return SWIG_RuntimeError;
      }
      obj = PyUnicode_AsUTF8String(obj);
      if (!obj)
        return SWIG_TypeError;
      if (PyString_AsStringAndSize(obj, &cstr, &len) != -1) {
        if (cptr) {
          if (alloc) *alloc = SWIG_NEWOBJ;
          *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
        }
        if (psize) *psize = len + 1;

        Py_XDECREF(obj);
        return SWIG_OK;
      } else {
        Py_XDECREF(obj);
      }
    }
#endif
#endif

    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERN int
SWIG_AsVal_std_string (PyObject * obj, std::string *val)
{
  std::string* v = (std::string *) 0;
  int res = SWIG_AsPtr_std_string (obj, &v);
  if (!SWIG_IsOK(res)) return res;
  if (v) {
    if (val) *val = *v;
    if (SWIG_IsNewObj(res)) {
      delete v;
      res = SWIG_DelNewMask(res);
    }
    return res;
  }
  return SWIG_ERROR;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
      return PyBytes_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#else
      return PyUnicode_DecodeUTF8(carray, static_cast< Py_ssize_t >(size), "surrogateescape");
#endif
#else
      return PyString_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


namespace swig {
  template <> struct traits< std::string > {
    typedef value_category category;
    static const char* type_name() { return"std::string"; }
  };
  template <>  struct traits_asval< std::string > {
    typedef std::string value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_std_string (obj, val);
    }
  };
  template <>  struct traits_from< std::string > {
    typedef std::string value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_std_string  (val);
    }
  };
}


namespace swig {
  template <> struct traits< int > {
    typedef value_category category;
    static const char* type_name() { return"int"; }
  };
  template <>  struct traits_asval< int > {
    typedef int value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_int (obj, val);
    }
  };
  template <>  struct traits_from< int > {
    typedef int value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_int  (val);
    }
  };
}


  namespace swig {


















































    template <class T, class U >
    struct traits_asptr<std::pair<T,U> >  {
      typedef std::pair<T,U> value_type;

      static int get_pair(PyObject* first, PyObject* second,
			  std::pair<T,U> **val) 
      {
	if (val) {
	  value_type *vp = (new std::pair<T,U>());
	  T *pfirst = &(vp->first);
	  int res1 = swig::asval((PyObject*)first, pfirst);
	  if (!SWIG_IsOK(res1)) {
	    delete vp;
	    return res1;
	  }
	  U *psecond = &(vp->second);
	  int res2 = swig::asval((PyObject*)second, psecond);
	  if (!SWIG_IsOK(res2)) {
	    delete vp;
	    return res2;
	  }
	  *val = vp;
	  return SWIG_AddNewMask(res1 > res2 ? res1 : res2);
	} else {
	  T *pfirst = 0;
	  int res1 = swig::asval((PyObject*)first, pfirst);
	  if (!SWIG_IsOK(res1)) return res1;
	  U *psecond = 0;
	  int res2 = swig::asval((PyObject*)second, psecond);
	  if (!SWIG_IsOK(res2)) return res2;
	  return res1 > res2 ? res1 : res2;
	}
      }

      static int asptr(PyObject *obj, std::pair<T,U> **val) {
	int res = SWIG_ERROR;
	if (PyTuple_Check(obj)) {
	  if (PyTuple_GET_SIZE(obj) == 2) {
	    res = get_pair(PyTuple_GET_ITEM(obj,0),PyTuple_GET_ITEM(obj,1), val);
	  }
	} else if (PySequence_Check(obj)) {
	  if (PySequence_Size(obj) == 2) {
	    swig::SwigVar_PyObject first = PySequence_GetItem(obj,0);
	    swig::SwigVar_PyObject second = PySequence_GetItem(obj,1);
	    res = get_pair(first, second, val);
	  }
	} else {
	  value_type *p = 0;
	  swig_type_info *descriptor = swig::type_info<value_type>();
	  res = descriptor ? SWIG_ConvertPtr(obj, (void **)&p, descriptor, 0) : SWIG_ERROR;
	  if (SWIG_IsOK(res) && val)  *val = p;
	}
	return res;
      }
    };


    template <class T, class U >
    struct traits_from<std::pair<T,U> >   {
      static PyObject *from(const std::pair<T,U>& val) {
	PyObject* obj = PyTuple_New(2);
	PyTuple_SetItem(obj,0,swig::from(val.first));
	PyTuple_SetItem(obj,1,swig::from(val.second));
	return obj;
      }
    };
  }


SWIGINTERN Py_ssize_t
SwigPython_std_pair_len (PyObject *a)
{
    return 2;
}

SWIGINTERN PyObject*
SwigPython_std_pair_repr (PyObject *o)
{
    PyObject *tuple = PyTuple_New(2);
    assert(tuple);
    PyTuple_SET_ITEM(tuple, 0, PyObject_GetAttrString(o, (char*) "first"));
    PyTuple_SET_ITEM(tuple, 1, PyObject_GetAttrString(o, (char*) "second"));
    PyObject *result = PyObject_Repr(tuple);
    Py_DECREF(tuple);
    return result;
}

SWIGINTERN PyObject*
SwigPython_std_pair_getitem (PyObject *a, Py_ssize_t b)
{
    PyObject *result = PyObject_GetAttrString(a, b % 2 ? (char*) "second" : (char*) "first");
    return result;
}

SWIGINTERN int
SwigPython_std_pair_setitem (PyObject *a, Py_ssize_t b, PyObject *c)
{
    int result = PyObject_SetAttrString(a, b % 2 ? (char*) "second" : (char*) "first", c);
    return result;
}




      namespace swig {
	template <>  struct traits<std::pair< std::string, int > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::pair<" "std::string" "," "int" " >";
	  }
	};
      }
    

namespace swig {
  template <class SwigPySeq, class Seq>
  inline void
  assign(const SwigPySeq& swigpyseq, Seq* seq) {
    // seq->assign(swigpyseq.begin(), swigpyseq.end()); // not used as not always implemented
    typedef typename SwigPySeq::value_type value_type;
    typename SwigPySeq::const_iterator it = swigpyseq.begin();
    for (;it != swigpyseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static int asptr(PyObject *obj, sequence **seq) {
      if (obj == Py_None || SWIG_Python_GetSwigThis(obj)) {
	sequence *p;
	swig_type_info *descriptor = swig::type_info<sequence>();
	if (descriptor && SWIG_IsOK(::SWIG_ConvertPtr(obj, (void **)&p, descriptor, 0))) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      } else if (PySequence_Check(obj)) {
	try {
	  SwigPySequence_Cont<value_type> swigpyseq(obj);
	  if (seq) {
	    sequence *pseq = new sequence();
	    assign(swigpyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return swigpyseq.check() ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    if (!PyErr_Occurred()) {
	      PyErr_SetString(PyExc_TypeError, e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static PyObject *from(const sequence& seq) {
#ifdef SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS
      swig_type_info *desc = swig::type_info<sequence>();
      if (desc && desc->clientdata) {
	return SWIG_InternalNewPointerObj(new sequence(seq), desc, SWIG_POINTER_OWN);
      }
#endif
      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	PyObject *obj = PyTuple_New((Py_ssize_t)size);
	Py_ssize_t i = 0;
	for (const_iterator it = seq.begin(); it != seq.end(); ++it, ++i) {
	  PyTuple_SetItem(obj,i,swig::from<value_type>(*it));
	}
	return obj;
      } else {
	PyErr_SetString(PyExc_OverflowError,"sequence size not valid in python");
	return NULL;
      }
    }
  };
}


  namespace swig {
    template <class ValueType>
    struct from_key_oper 
    {
      typedef const ValueType& argument_type;
      typedef  PyObject *result_type;
      result_type operator()(argument_type v) const
      {
	return swig::from(v.first);
      }
    };

    template <class ValueType>
    struct from_value_oper 
    {
      typedef const ValueType& argument_type;
      typedef  PyObject *result_type;
      result_type operator()(argument_type v) const
      {
	return swig::from(v.second);
      }
    };

    template<class OutIterator, class FromOper, class ValueType = typename OutIterator::value_type>
    struct SwigPyMapIterator_T : SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper>
    {
      SwigPyMapIterator_T(OutIterator curr, OutIterator first, OutIterator last, PyObject *seq)
	: SwigPyIteratorClosed_T<OutIterator,ValueType,FromOper>(curr, first, last, seq)
      {
      }
    };


    template<class OutIterator,
	     class FromOper = from_key_oper<typename OutIterator::value_type> >
    struct SwigPyMapKeyIterator_T : SwigPyMapIterator_T<OutIterator, FromOper>
    {
      SwigPyMapKeyIterator_T(OutIterator curr, OutIterator first, OutIterator last, PyObject *seq)
	: SwigPyMapIterator_T<OutIterator, FromOper>(curr, first, last, seq)
      {
      }
    };

    template<typename OutIter>
    inline SwigPyIterator*
    make_output_key_iterator(const OutIter& current, const OutIter& begin, const OutIter& end, PyObject *seq = 0)
    {
      return new SwigPyMapKeyIterator_T<OutIter>(current, begin, end, seq);
    }

    template<class OutIterator,
	     class FromOper = from_value_oper<typename OutIterator::value_type> >
    struct SwigPyMapValueIterator_T : SwigPyMapIterator_T<OutIterator, FromOper>
    {
      SwigPyMapValueIterator_T(OutIterator curr, OutIterator first, OutIterator last, PyObject *seq)
	: SwigPyMapIterator_T<OutIterator, FromOper>(curr, first, last, seq)
      {
      }
    };
    

    template<typename OutIter>
    inline SwigPyIterator*
    make_output_value_iterator(const OutIter& current, const OutIter& begin, const OutIter& end, PyObject *seq = 0)
    {
      return new SwigPyMapValueIterator_T<OutIter>(current, begin, end, seq);
    }
  }


  namespace swig {
    template <class SwigPySeq, class K, class T, class Compare, class Alloc >
    inline void
    assign(const SwigPySeq& swigpyseq, std::map<K,T,Compare,Alloc > *map) {
      typedef typename std::map<K,T,Compare,Alloc >::value_type value_type;
      typename SwigPySeq::const_iterator it = swigpyseq.begin();
      for (;it != swigpyseq.end(); ++it) {
	map->insert(value_type(it->first, it->second));
      }
    }

    template <class K, class T, class Compare, class Alloc>
    struct traits_asptr<std::map<K,T,Compare,Alloc > >  {
      typedef std::map<K,T,Compare,Alloc > map_type;
      static int asptr(PyObject *obj, map_type **val) {
	int res = SWIG_ERROR;
	SWIG_PYTHON_THREAD_BEGIN_BLOCK;
	if (PyDict_Check(obj)) {
	  SwigVar_PyObject items = PyObject_CallMethod(obj,(char *)"items",NULL);
#if PY_VERSION_HEX >= 0x03000000
          /* In Python 3.x the ".items()" method returns a dict_items object */
          items = PySequence_Fast(items, ".items() didn't return a sequence!");
#endif
	  res = traits_asptr_stdseq<map_type, std::pair<K, T> >::asptr(items, val);
	} else {
	  map_type *p = 0;
	  swig_type_info *descriptor = swig::type_info<map_type>();
	  res = descriptor ? SWIG_ConvertPtr(obj, (void **)&p, descriptor, 0) : SWIG_ERROR;
	  if (SWIG_IsOK(res) && val)  *val = p;
	}
	SWIG_PYTHON_THREAD_END_BLOCK;
	return res;
      }      
    };
      
    template <class K, class T, class Compare, class Alloc >
    struct traits_from<std::map<K,T,Compare,Alloc > >  {
      typedef std::map<K,T,Compare,Alloc > map_type;
      typedef typename map_type::const_iterator const_iterator;
      typedef typename map_type::size_type size_type;

      static PyObject *asdict(const map_type& map) {
	SWIG_PYTHON_THREAD_BEGIN_BLOCK;
	size_type size = map.size();
	Py_ssize_t pysize = (size <= (size_type) INT_MAX) ? (Py_ssize_t) size : -1;
	if (pysize < 0) {
	  PyErr_SetString(PyExc_OverflowError, "map size not valid in python");
	  SWIG_PYTHON_THREAD_END_BLOCK;
	  return NULL;
	}
	PyObject *obj = PyDict_New();
	for (const_iterator i= map.begin(); i!= map.end(); ++i) {
	  swig::SwigVar_PyObject key = swig::from(i->first);
	  swig::SwigVar_PyObject val = swig::from(i->second);
	  PyDict_SetItem(obj, key, val);
	}
	SWIG_PYTHON_THREAD_END_BLOCK;
	return obj;
      }
                
      static PyObject *from(const map_type& map) {
	swig_type_info *desc = swig::type_info<map_type>();
	if (desc && desc->clientdata) {
	  return SWIG_InternalNewPointerObj(new map_type(map), desc, SWIG_POINTER_OWN);
	} else {
	  return asdict(map);
	}
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::map< std::string, int, std::less< std::string >, std::allocator< std::pair< std::string const,int > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::map<" "std::string" "," "int" "," "std::less< std::string >" "," "std::allocator< std::pair< std::string const,int > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_map_Sl_std_string_Sc_int_Sg__iterator(std::map< std::string,int > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_map_Sl_std_string_Sc_int_Sg____nonzero__(std::map< std::string,int > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_map_Sl_std_string_Sc_int_Sg____bool__(std::map< std::string,int > const *self){
      return !(self->empty());
    }
SWIGINTERN std::map< std::string,int >::size_type std_map_Sl_std_string_Sc_int_Sg____len__(std::map< std::string,int > const *self){
      return self->size();
    }

SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value));
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long_SS_long  (unsigned long long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif


SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(size_t) <= sizeof(unsigned long long) */
    return SWIG_From_unsigned_SS_long_SS_long  (static_cast< unsigned long long >(value));
  }
#endif
}

SWIGINTERN swig::SwigPyIterator *std_map_Sl_std_string_Sc_int_Sg__iterkeys(std::map< std::string,int > *self,PyObject **PYTHON_SELF){
      return swig::make_output_key_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN swig::SwigPyIterator *std_map_Sl_std_string_Sc_int_Sg__itervalues(std::map< std::string,int > *self,PyObject **PYTHON_SELF){
      return swig::make_output_value_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN swig::SwigPyIterator *std_map_Sl_std_string_Sc_int_Sg__iteritems(std::map< std::string,int > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN std::map< std::string,int >::mapped_type const &std_map_Sl_std_string_Sc_int_Sg____getitem__(std::map< std::string,int > *self,std::map< std::string,int >::key_type const &key){
      std::map< std::string,int,std::less< std::string >,std::allocator< std::pair< std::string const,int > > >::const_iterator i = self->find(key);
      if (i != self->end())
	return i->second;
      else
	throw std::out_of_range("key not found");
    }
SWIGINTERN void std_map_Sl_std_string_Sc_int_Sg____delitem__(std::map< std::string,int > *self,std::map< std::string,int >::key_type const &key){
      std::map< std::string,int,std::less< std::string >,std::allocator< std::pair< std::string const,int > > >::iterator i = self->find(key);
      if (i != self->end())
	self->erase(i);
      else
	throw std::out_of_range("key not found");
    }
SWIGINTERN bool std_map_Sl_std_string_Sc_int_Sg__has_key(std::map< std::string,int > const *self,std::map< std::string,int >::key_type const &key){
      std::map< std::string,int,std::less< std::string >,std::allocator< std::pair< std::string const,int > > >::const_iterator i = self->find(key);
      return i != self->end();
    }
SWIGINTERN PyObject *std_map_Sl_std_string_Sc_int_Sg__keys(std::map< std::string,int > *self){
      std::map< std::string,int,std::less< std::string >,std::allocator< std::pair< std::string const,int > > >::size_type size = self->size();
      Py_ssize_t pysize = (size <= (std::map< std::string,int,std::less< std::string >,std::allocator< std::pair< std::string const,int > > >::size_type) INT_MAX) ? (Py_ssize_t) size : -1;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError, "map size not valid in python");
	SWIG_PYTHON_THREAD_END_BLOCK;
	return NULL;
      }
      PyObject* keyList = PyList_New(pysize);
      std::map< std::string,int,std::less< std::string >,std::allocator< std::pair< std::string const,int > > >::const_iterator i = self->begin();
      for (Py_ssize_t j = 0; j < pysize; ++i, ++j) {
	PyList_SET_ITEM(keyList, j, swig::from(i->first));
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return keyList;
    }
SWIGINTERN PyObject *std_map_Sl_std_string_Sc_int_Sg__values(std::map< std::string,int > *self){
      std::map< std::string,int,std::less< std::string >,std::allocator< std::pair< std::string const,int > > >::size_type size = self->size();
      Py_ssize_t pysize = (size <= (std::map< std::string,int,std::less< std::string >,std::allocator< std::pair< std::string const,int > > >::size_type) INT_MAX) ? (Py_ssize_t) size : -1;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError, "map size not valid in python");
	SWIG_PYTHON_THREAD_END_BLOCK;
	return NULL;
      }
      PyObject* valList = PyList_New(pysize);
      std::map< std::string,int,std::less< std::string >,std::allocator< std::pair< std::string const,int > > >::const_iterator i = self->begin();
      for (Py_ssize_t j = 0; j < pysize; ++i, ++j) {
	PyList_SET_ITEM(valList, j, swig::from(i->second));
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return valList;
    }
SWIGINTERN PyObject *std_map_Sl_std_string_Sc_int_Sg__items(std::map< std::string,int > *self){
      std::map< std::string,int,std::less< std::string >,std::allocator< std::pair< std::string const,int > > >::size_type size = self->size();
      Py_ssize_t pysize = (size <= (std::map< std::string,int,std::less< std::string >,std::allocator< std::pair< std::string const,int > > >::size_type) INT_MAX) ? (Py_ssize_t) size : -1;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError, "map size not valid in python");
	SWIG_PYTHON_THREAD_END_BLOCK;
	return NULL;
      }    
      PyObject* itemList = PyList_New(pysize);
      std::map< std::string,int,std::less< std::string >,std::allocator< std::pair< std::string const,int > > >::const_iterator i = self->begin();
      for (Py_ssize_t j = 0; j < pysize; ++i, ++j) {
	PyList_SET_ITEM(itemList, j, swig::from(*i));
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return itemList;
    }
SWIGINTERN bool std_map_Sl_std_string_Sc_int_Sg____contains__(std::map< std::string,int > *self,std::map< std::string,int >::key_type const &key){
      return self->find(key) != self->end();
    }
SWIGINTERN swig::SwigPyIterator *std_map_Sl_std_string_Sc_int_Sg__key_iterator(std::map< std::string,int > *self,PyObject **PYTHON_SELF){
      return swig::make_output_key_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN swig::SwigPyIterator *std_map_Sl_std_string_Sc_int_Sg__value_iterator(std::map< std::string,int > *self,PyObject **PYTHON_SELF){
      return swig::make_output_value_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN void std_map_Sl_std_string_Sc_int_Sg____setitem____SWIG_0(std::map< std::string,int > *self,std::map< std::string,int >::key_type const &key){
      self->erase(key);
    }
SWIGINTERN void std_map_Sl_std_string_Sc_int_Sg____setitem____SWIG_1(std::map< std::string,int > *self,std::map< std::string,int >::key_type const &key,std::map< std::string,int >::mapped_type const &x){
      (*self)[key] = x;
    }
SWIGINTERN PyObject *std_map_Sl_std_string_Sc_int_Sg__asdict(std::map< std::string,int > *self){
      return swig::traits_from< std::map< std::string,int,std::less< std::string >,std::allocator< std::pair< std::string const,int > > > >::asdict(*self);
    }
SWIGINTERN void std_map_Sl_std_string_Sc_int_Sg__erase__SWIG_1(std::map< std::string,int > *self,std::map< std::string,int >::iterator position){ self->erase(position); }
SWIGINTERN void std_map_Sl_std_string_Sc_int_Sg__erase__SWIG_2(std::map< std::string,int > *self,std::map< std::string,int >::iterator first,std::map< std::string,int >::iterator last){ self->erase(first, last); }

      namespace swig {
	template <>  struct traits<std::pair< int, std::string > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::pair<" "int" "," "std::string" " >";
	  }
	};
      }
    

      namespace swig {
	template <>  struct traits<std::map< int, std::string, std::less< int >, std::allocator< std::pair< int const,std::string > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::map<" "int" "," "std::string" "," "std::less< int >" "," "std::allocator< std::pair< int const,std::string > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_map_Sl_int_Sc_std_string_Sg__iterator(std::map< int,std::string > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_map_Sl_int_Sc_std_string_Sg____nonzero__(std::map< int,std::string > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_map_Sl_int_Sc_std_string_Sg____bool__(std::map< int,std::string > const *self){
      return !(self->empty());
    }
SWIGINTERN std::map< int,std::string >::size_type std_map_Sl_int_Sc_std_string_Sg____len__(std::map< int,std::string > const *self){
      return self->size();
    }
SWIGINTERN swig::SwigPyIterator *std_map_Sl_int_Sc_std_string_Sg__iterkeys(std::map< int,std::string > *self,PyObject **PYTHON_SELF){
      return swig::make_output_key_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN swig::SwigPyIterator *std_map_Sl_int_Sc_std_string_Sg__itervalues(std::map< int,std::string > *self,PyObject **PYTHON_SELF){
      return swig::make_output_value_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN swig::SwigPyIterator *std_map_Sl_int_Sc_std_string_Sg__iteritems(std::map< int,std::string > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN std::map< int,std::string >::mapped_type const &std_map_Sl_int_Sc_std_string_Sg____getitem__(std::map< int,std::string > *self,std::map< int,std::string >::key_type const &key){
      std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > >::const_iterator i = self->find(key);
      if (i != self->end())
	return i->second;
      else
	throw std::out_of_range("key not found");
    }
SWIGINTERN void std_map_Sl_int_Sc_std_string_Sg____delitem__(std::map< int,std::string > *self,std::map< int,std::string >::key_type const &key){
      std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > >::iterator i = self->find(key);
      if (i != self->end())
	self->erase(i);
      else
	throw std::out_of_range("key not found");
    }
SWIGINTERN bool std_map_Sl_int_Sc_std_string_Sg__has_key(std::map< int,std::string > const *self,std::map< int,std::string >::key_type const &key){
      std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > >::const_iterator i = self->find(key);
      return i != self->end();
    }
SWIGINTERN PyObject *std_map_Sl_int_Sc_std_string_Sg__keys(std::map< int,std::string > *self){
      std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > >::size_type size = self->size();
      Py_ssize_t pysize = (size <= (std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > >::size_type) INT_MAX) ? (Py_ssize_t) size : -1;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError, "map size not valid in python");
	SWIG_PYTHON_THREAD_END_BLOCK;
	return NULL;
      }
      PyObject* keyList = PyList_New(pysize);
      std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > >::const_iterator i = self->begin();
      for (Py_ssize_t j = 0; j < pysize; ++i, ++j) {
	PyList_SET_ITEM(keyList, j, swig::from(i->first));
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return keyList;
    }
SWIGINTERN PyObject *std_map_Sl_int_Sc_std_string_Sg__values(std::map< int,std::string > *self){
      std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > >::size_type size = self->size();
      Py_ssize_t pysize = (size <= (std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > >::size_type) INT_MAX) ? (Py_ssize_t) size : -1;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError, "map size not valid in python");
	SWIG_PYTHON_THREAD_END_BLOCK;
	return NULL;
      }
      PyObject* valList = PyList_New(pysize);
      std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > >::const_iterator i = self->begin();
      for (Py_ssize_t j = 0; j < pysize; ++i, ++j) {
	PyList_SET_ITEM(valList, j, swig::from(i->second));
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return valList;
    }
SWIGINTERN PyObject *std_map_Sl_int_Sc_std_string_Sg__items(std::map< int,std::string > *self){
      std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > >::size_type size = self->size();
      Py_ssize_t pysize = (size <= (std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > >::size_type) INT_MAX) ? (Py_ssize_t) size : -1;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError, "map size not valid in python");
	SWIG_PYTHON_THREAD_END_BLOCK;
	return NULL;
      }    
      PyObject* itemList = PyList_New(pysize);
      std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > >::const_iterator i = self->begin();
      for (Py_ssize_t j = 0; j < pysize; ++i, ++j) {
	PyList_SET_ITEM(itemList, j, swig::from(*i));
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return itemList;
    }
SWIGINTERN bool std_map_Sl_int_Sc_std_string_Sg____contains__(std::map< int,std::string > *self,std::map< int,std::string >::key_type const &key){
      return self->find(key) != self->end();
    }
SWIGINTERN swig::SwigPyIterator *std_map_Sl_int_Sc_std_string_Sg__key_iterator(std::map< int,std::string > *self,PyObject **PYTHON_SELF){
      return swig::make_output_key_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN swig::SwigPyIterator *std_map_Sl_int_Sc_std_string_Sg__value_iterator(std::map< int,std::string > *self,PyObject **PYTHON_SELF){
      return swig::make_output_value_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN void std_map_Sl_int_Sc_std_string_Sg____setitem____SWIG_0(std::map< int,std::string > *self,std::map< int,std::string >::key_type const &key){
      self->erase(key);
    }
SWIGINTERN void std_map_Sl_int_Sc_std_string_Sg____setitem____SWIG_1(std::map< int,std::string > *self,std::map< int,std::string >::key_type const &key,std::map< int,std::string >::mapped_type const &x){
      (*self)[key] = x;
    }
SWIGINTERN PyObject *std_map_Sl_int_Sc_std_string_Sg__asdict(std::map< int,std::string > *self){
      return swig::traits_from< std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > > >::asdict(*self);
    }
SWIGINTERN void std_map_Sl_int_Sc_std_string_Sg__erase__SWIG_1(std::map< int,std::string > *self,std::map< int,std::string >::iterator position){ self->erase(position); }
SWIGINTERN void std_map_Sl_int_Sc_std_string_Sg__erase__SWIG_2(std::map< int,std::string > *self,std::map< int,std::string >::iterator first,std::map< int,std::string >::iterator last){ self->erase(first, last); }

namespace swig {
  template <> struct traits< double > {
    typedef value_category category;
    static const char* type_name() { return"double"; }
  };
  template <>  struct traits_asval< double > {
    typedef double value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_double (obj, val);
    }
  };
  template <>  struct traits_from< double > {
    typedef double value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_double  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::pair< std::string, double > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::pair<" "std::string" "," "double" " >";
	  }
	};
      }
    

      namespace swig {
	template <>  struct traits<std::map< std::string, double, std::less< std::string >, std::allocator< std::pair< std::string const,double > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::map<" "std::string" "," "double" "," "std::less< std::string >" "," "std::allocator< std::pair< std::string const,double > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_map_Sl_std_string_Sc_double_Sg__iterator(std::map< std::string,double > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_map_Sl_std_string_Sc_double_Sg____nonzero__(std::map< std::string,double > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_map_Sl_std_string_Sc_double_Sg____bool__(std::map< std::string,double > const *self){
      return !(self->empty());
    }
SWIGINTERN std::map< std::string,double >::size_type std_map_Sl_std_string_Sc_double_Sg____len__(std::map< std::string,double > const *self){
      return self->size();
    }
SWIGINTERN swig::SwigPyIterator *std_map_Sl_std_string_Sc_double_Sg__iterkeys(std::map< std::string,double > *self,PyObject **PYTHON_SELF){
      return swig::make_output_key_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN swig::SwigPyIterator *std_map_Sl_std_string_Sc_double_Sg__itervalues(std::map< std::string,double > *self,PyObject **PYTHON_SELF){
      return swig::make_output_value_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN swig::SwigPyIterator *std_map_Sl_std_string_Sc_double_Sg__iteritems(std::map< std::string,double > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN std::map< std::string,double >::mapped_type const &std_map_Sl_std_string_Sc_double_Sg____getitem__(std::map< std::string,double > *self,std::map< std::string,double >::key_type const &key){
      std::map< std::string,double,std::less< std::string >,std::allocator< std::pair< std::string const,double > > >::const_iterator i = self->find(key);
      if (i != self->end())
	return i->second;
      else
	throw std::out_of_range("key not found");
    }
SWIGINTERN void std_map_Sl_std_string_Sc_double_Sg____delitem__(std::map< std::string,double > *self,std::map< std::string,double >::key_type const &key){
      std::map< std::string,double,std::less< std::string >,std::allocator< std::pair< std::string const,double > > >::iterator i = self->find(key);
      if (i != self->end())
	self->erase(i);
      else
	throw std::out_of_range("key not found");
    }
SWIGINTERN bool std_map_Sl_std_string_Sc_double_Sg__has_key(std::map< std::string,double > const *self,std::map< std::string,double >::key_type const &key){
      std::map< std::string,double,std::less< std::string >,std::allocator< std::pair< std::string const,double > > >::const_iterator i = self->find(key);
      return i != self->end();
    }
SWIGINTERN PyObject *std_map_Sl_std_string_Sc_double_Sg__keys(std::map< std::string,double > *self){
      std::map< std::string,double,std::less< std::string >,std::allocator< std::pair< std::string const,double > > >::size_type size = self->size();
      Py_ssize_t pysize = (size <= (std::map< std::string,double,std::less< std::string >,std::allocator< std::pair< std::string const,double > > >::size_type) INT_MAX) ? (Py_ssize_t) size : -1;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError, "map size not valid in python");
	SWIG_PYTHON_THREAD_END_BLOCK;
	return NULL;
      }
      PyObject* keyList = PyList_New(pysize);
      std::map< std::string,double,std::less< std::string >,std::allocator< std::pair< std::string const,double > > >::const_iterator i = self->begin();
      for (Py_ssize_t j = 0; j < pysize; ++i, ++j) {
	PyList_SET_ITEM(keyList, j, swig::from(i->first));
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return keyList;
    }
SWIGINTERN PyObject *std_map_Sl_std_string_Sc_double_Sg__values(std::map< std::string,double > *self){
      std::map< std::string,double,std::less< std::string >,std::allocator< std::pair< std::string const,double > > >::size_type size = self->size();
      Py_ssize_t pysize = (size <= (std::map< std::string,double,std::less< std::string >,std::allocator< std::pair< std::string const,double > > >::size_type) INT_MAX) ? (Py_ssize_t) size : -1;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError, "map size not valid in python");
	SWIG_PYTHON_THREAD_END_BLOCK;
	return NULL;
      }
      PyObject* valList = PyList_New(pysize);
      std::map< std::string,double,std::less< std::string >,std::allocator< std::pair< std::string const,double > > >::const_iterator i = self->begin();
      for (Py_ssize_t j = 0; j < pysize; ++i, ++j) {
	PyList_SET_ITEM(valList, j, swig::from(i->second));
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return valList;
    }
SWIGINTERN PyObject *std_map_Sl_std_string_Sc_double_Sg__items(std::map< std::string,double > *self){
      std::map< std::string,double,std::less< std::string >,std::allocator< std::pair< std::string const,double > > >::size_type size = self->size();
      Py_ssize_t pysize = (size <= (std::map< std::string,double,std::less< std::string >,std::allocator< std::pair< std::string const,double > > >::size_type) INT_MAX) ? (Py_ssize_t) size : -1;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError, "map size not valid in python");
	SWIG_PYTHON_THREAD_END_BLOCK;
	return NULL;
      }    
      PyObject* itemList = PyList_New(pysize);
      std::map< std::string,double,std::less< std::string >,std::allocator< std::pair< std::string const,double > > >::const_iterator i = self->begin();
      for (Py_ssize_t j = 0; j < pysize; ++i, ++j) {
	PyList_SET_ITEM(itemList, j, swig::from(*i));
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return itemList;
    }
SWIGINTERN bool std_map_Sl_std_string_Sc_double_Sg____contains__(std::map< std::string,double > *self,std::map< std::string,double >::key_type const &key){
      return self->find(key) != self->end();
    }
SWIGINTERN swig::SwigPyIterator *std_map_Sl_std_string_Sc_double_Sg__key_iterator(std::map< std::string,double > *self,PyObject **PYTHON_SELF){
      return swig::make_output_key_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN swig::SwigPyIterator *std_map_Sl_std_string_Sc_double_Sg__value_iterator(std::map< std::string,double > *self,PyObject **PYTHON_SELF){
      return swig::make_output_value_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN void std_map_Sl_std_string_Sc_double_Sg____setitem____SWIG_0(std::map< std::string,double > *self,std::map< std::string,double >::key_type const &key){
      self->erase(key);
    }
SWIGINTERN void std_map_Sl_std_string_Sc_double_Sg____setitem____SWIG_1(std::map< std::string,double > *self,std::map< std::string,double >::key_type const &key,std::map< std::string,double >::mapped_type const &x){
      (*self)[key] = x;
    }
SWIGINTERN PyObject *std_map_Sl_std_string_Sc_double_Sg__asdict(std::map< std::string,double > *self){
      return swig::traits_from< std::map< std::string,double,std::less< std::string >,std::allocator< std::pair< std::string const,double > > > >::asdict(*self);
    }
SWIGINTERN void std_map_Sl_std_string_Sc_double_Sg__erase__SWIG_1(std::map< std::string,double > *self,std::map< std::string,double >::iterator position){ self->erase(position); }
SWIGINTERN void std_map_Sl_std_string_Sc_double_Sg__erase__SWIG_2(std::map< std::string,double > *self,std::map< std::string,double >::iterator first,std::map< std::string,double >::iterator last){ self->erase(first, last); }

  namespace swig {
    template <class T>
    struct traits_reserve<std::vector<T> > {
      static void reserve(std::vector<T> &seq, typename std::vector<T>::size_type n) {
        seq.reserve(n);
      }
    };

    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< std::string, std::allocator< std::string > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::string" "," "std::allocator< std::string >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_string_Sg__iterator(std::vector< std::string > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_string_Sg____nonzero__(std::vector< std::string > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_string_Sg____bool__(std::vector< std::string > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::string >::size_type std_vector_Sl_std_string_Sg____len__(std::vector< std::string > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::string,std::allocator< std::string > > *std_vector_Sl_std_string_Sg____getslice__(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setslice____SWIG_0(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< std::string,std::allocator< std::string > >());
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setslice____SWIG_1(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j,std::vector< std::string,std::allocator< std::string > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____delslice__(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____delitem____SWIG_0(std::vector< std::string > *self,std::vector< std::string >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< std::string,std::allocator< std::string > > *std_vector_Sl_std_string_Sg____getitem____SWIG_0(std::vector< std::string > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::string,std::allocator< std::string > >::difference_type id = i;
      std::vector< std::string,std::allocator< std::string > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setitem____SWIG_0(std::vector< std::string > *self,PySliceObject *slice,std::vector< std::string,std::allocator< std::string > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::string,std::allocator< std::string > >::difference_type id = i;
      std::vector< std::string,std::allocator< std::string > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setitem____SWIG_1(std::vector< std::string > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::string,std::allocator< std::string > >::difference_type id = i;
      std::vector< std::string,std::allocator< std::string > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____delitem____SWIG_1(std::vector< std::string > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::string,std::allocator< std::string > >::difference_type id = i;
      std::vector< std::string,std::allocator< std::string > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< std::string >::value_type const &std_vector_Sl_std_string_Sg____getitem____SWIG_1(std::vector< std::string > const *self,std::vector< std::string >::difference_type i){
      return *(swig::cgetpos(self, i));
    }

namespace swig {
  static PyObject* container_owner_attribute() {
    static PyObject* attr = SWIG_Python_str_FromChar("__swig_container");
    return attr;
  }

  template <typename T>
  struct container_owner {
    // By default, do not add the back-reference (for value types)
    // Specialization below will check the reference for pointer types.
    static bool back_reference(PyObject* /*child*/, PyObject* /*owner*/) {
      return false;
    }
  };

  template <>
  struct container_owner<swig::pointer_category> {  
    /*
     * Call to add a back-reference to the owning object when returning a 
     * reference from a container.  Will only set the reference if child
     * is a SWIG wrapper object that does not own the pointer.
     *
     * returns whether the reference was set or not
     */
    static bool back_reference(PyObject* child, PyObject* owner) {
      SwigPyObject* swigThis = SWIG_Python_GetSwigThis(child);
      if (swigThis && (swigThis->own & SWIG_POINTER_OWN) != SWIG_POINTER_OWN) {
        return PyObject_SetAttr(child, container_owner_attribute(), owner) != -1;
      }
      return false;
    }
  };
}

SWIGINTERN void std_vector_Sl_std_string_Sg____setitem____SWIG_2(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setitem____SWIG_3(std::vector< std::string > *self,std::vector< std::string >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< std::string >::value_type std_vector_Sl_std_string_Sg__pop(std::vector< std::string > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< std::string,std::allocator< std::string > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_std_string_Sg__append(std::vector< std::string > *self,std::vector< std::string >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< std::string >::iterator std_vector_Sl_std_string_Sg__erase__SWIG_0(std::vector< std::string > *self,std::vector< std::string >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< std::string >::iterator std_vector_Sl_std_string_Sg__erase__SWIG_1(std::vector< std::string > *self,std::vector< std::string >::iterator first,std::vector< std::string >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< std::string >::iterator std_vector_Sl_std_string_Sg__insert__SWIG_0(std::vector< std::string > *self,std::vector< std::string >::iterator pos,std::vector< std::string >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_std_string_Sg__insert__SWIG_1(std::vector< std::string > *self,std::vector< std::string >::iterator pos,std::vector< std::string >::size_type n,std::vector< std::string >::value_type const &x){ self->insert(pos, n, x); }

      namespace swig {
	template <>  struct traits<std::vector< double, std::allocator< double > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "double" "," "std::allocator< double >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_double_Sg__iterator(std::vector< double > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_double_Sg____nonzero__(std::vector< double > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_double_Sg____bool__(std::vector< double > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< double >::size_type std_vector_Sl_double_Sg____len__(std::vector< double > const *self){
      return self->size();
    }
SWIGINTERN std::vector< double,std::allocator< double > > *std_vector_Sl_double_Sg____getslice__(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_double_Sg____setslice____SWIG_0(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< double,std::allocator< double > >());
    }
SWIGINTERN void std_vector_Sl_double_Sg____setslice____SWIG_1(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j,std::vector< double,std::allocator< double > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_double_Sg____delslice__(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_double_Sg____delitem____SWIG_0(std::vector< double > *self,std::vector< double >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< double,std::allocator< double > > *std_vector_Sl_double_Sg____getitem____SWIG_0(std::vector< double > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< double,std::allocator< double > >::difference_type id = i;
      std::vector< double,std::allocator< double > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_double_Sg____setitem____SWIG_0(std::vector< double > *self,PySliceObject *slice,std::vector< double,std::allocator< double > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< double,std::allocator< double > >::difference_type id = i;
      std::vector< double,std::allocator< double > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_double_Sg____setitem____SWIG_1(std::vector< double > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< double,std::allocator< double > >::difference_type id = i;
      std::vector< double,std::allocator< double > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_double_Sg____delitem____SWIG_1(std::vector< double > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< double,std::allocator< double > >::difference_type id = i;
      std::vector< double,std::allocator< double > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< double >::value_type const &std_vector_Sl_double_Sg____getitem____SWIG_1(std::vector< double > const *self,std::vector< double >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_double_Sg____setitem____SWIG_2(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_double_Sg____setitem____SWIG_3(std::vector< double > *self,std::vector< double >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< double >::value_type std_vector_Sl_double_Sg__pop(std::vector< double > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< double,std::allocator< double > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_double_Sg__append(std::vector< double > *self,std::vector< double >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< double >::iterator std_vector_Sl_double_Sg__erase__SWIG_0(std::vector< double > *self,std::vector< double >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< double >::iterator std_vector_Sl_double_Sg__erase__SWIG_1(std::vector< double > *self,std::vector< double >::iterator first,std::vector< double >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< double >::iterator std_vector_Sl_double_Sg__insert__SWIG_0(std::vector< double > *self,std::vector< double >::iterator pos,std::vector< double >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_double_Sg__insert__SWIG_1(std::vector< double > *self,std::vector< double >::iterator pos,std::vector< double >::size_type n,std::vector< double >::value_type const &x){ self->insert(pos, n, x); }




SWIGINTERNINLINE PyObject * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r;
  if (!PyBool_Check(obj))
    return SWIG_ERROR;
  r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}

SWIGINTERN PyObject *ampls_impl_BaseCallback_getSolutionDict(ampls::impl::BaseCallback *self){
    PyObject* res = PyDict_New();
    std::vector<double> sol = self->getSolutionVector();
    std::map<int, std::string> map = self->getVarMapInverse();
    std::map<int, std::string>::const_iterator it;
    for (it = map.begin(); it != map.end(); ++it) {
      PyDict_SetItem(res, PyString_FromString(it->second.c_str()), PyFloat_FromDouble(sol[it->first]));
    }
    return res;
  }
SWIGINTERN PyObject *ampls_impl_BaseCallback_getVarMap(ampls::impl::BaseCallback *self){
    PyObject* res = PyDict_New();
    std::map<std::string, int> map = self->getVarMap();
    std::map<std::string, int>::const_iterator it;
    for (it = map.begin(); it != map.end(); ++it) {
      PyDict_SetItem(res, PyString_FromString(it->first.c_str()), PyInt_FromLong(it->second));
    }
    return res;
  }
SWIGINTERN PyObject *ampls_impl_BaseCallback_getVarMapInverse(ampls::impl::BaseCallback *self){
    PyObject* res = PyDict_New();
    std::map<int,std::string> map = self->getVarMapInverse();
    std::map<int,std::string>::const_iterator it;
    for (it = map.begin(); it != map.end(); ++it) {
      PyDict_SetItem(res, PyInt_FromLong(it->first), PyString_FromString(it->second.c_str()));
    }
    return res;
  }
SWIGINTERN PyObject *ampls_AMPLModel_getSolutionDict(ampls::AMPLModel *self){
    PyObject* res = PyDict_New();
    std::vector<double> sol = self->getSolutionVector();
    std::map<int, std::string> map = self->getVarMapInverse();
    std::map<int, std::string>::const_iterator it;
    for (it = map.begin(); it != map.end(); ++it) {
      PyDict_SetItem(res, PyString_FromString(it->second.c_str()), PyFloat_FromDouble(sol[it->first]));
    }
    return res;
  }
SWIGINTERN PyObject *ampls_AMPLModel_getVarMap(ampls::AMPLModel *self){
    PyObject* res = PyDict_New();
    std::map<std::string, int> map = self->getVarMap();
    std::map<std::string, int>::const_iterator it;
    for (it = map.begin(); it != map.end(); ++it) {
      PyDict_SetItem(res, PyString_FromString(it->first.c_str()), PyInt_FromLong(it->second));
    }
    return res;
  }
SWIGINTERN PyObject *ampls_AMPLModel_getVarMapFiltered(ampls::AMPLModel *self,char const *beginWith){
    PyObject* res = PyDict_New();
    std::map<std::string, int> map = self->getVarMapFiltered(beginWith);
    std::map<std::string, int>::const_iterator it;
    for (it = map.begin(); it != map.end(); ++it) {
      PyDict_SetItem(res, PyString_FromString(it->first.c_str()), PyInt_FromLong(it->second));
    }
    return res;
  }
SWIGINTERN PyObject *ampls_AMPLModel_getVarMapInverse(ampls::AMPLModel *self){
    PyObject* res = PyDict_New();
    std::map<int,std::string> map = self->getVarMapInverse();
    std::map<int,std::string>::const_iterator it;
    for (it = map.begin(); it != map.end(); ++it) {
      PyDict_SetItem(res, PyInt_FromLong(it->first), PyString_FromString(it->second.c_str()));
    }
    return res;
  }

  #include "ilcplex/cplexx.h"
  #include "cplex_callback.h"
  #include "cplex_interface.h"


SWIGINTERNINLINE PyObject *
SWIG_From_char  (char c) 
{ 
  return SWIG_FromCharPtrAndSize(&c,1);
}


SWIGINTERN size_t
SWIG_strnlen(const char* s, size_t maxlen)
{
  const char *p;
  for (p = s; maxlen-- && *p; p++)
    ;
  return p - s;
}



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "amplpy_cplex_swig_wrap.h"

SwigDirector_GenericCallback::SwigDirector_GenericCallback(PyObject *self): ampls::GenericCallback(), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((ampls::GenericCallback *)this, this); 
}




int SwigDirector_GenericCallback::doAddCut(ampls::Constraint const &c, int type) {
  PyObject *self = NULL;
  (void)self;
  return ampls::GenericCallback::doAddCut(c,type);
}


int SwigDirector_GenericCallback::run() {
  int c_result = SwigValueInit< int >() ;
  
  PyObject *self = NULL;
  (void)self;
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call GenericCallback.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 0;
  const char *const swig_method_name = "run";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject args = PyTuple_New(0);
  swig::SwigVar_PyObject result = PyObject_Call(method, (PyObject *) args, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("run");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'GenericCallback.run'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


SwigDirector_GenericCallback::~SwigDirector_GenericCallback() {
}

int SwigDirector_GenericCallback::getSolution(int len, double *sol) {
  PyObject *self = NULL;
  (void)self;
  return ampls::GenericCallback::getSolution(len,sol);
}


double SwigDirector_GenericCallback::getObj() {
  double c_result = SwigValueInit< double >() ;
  
  PyObject *self = NULL;
  (void)self;
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call GenericCallback.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 1;
  const char *const swig_method_name = "getObj";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject args = PyTuple_New(0);
  swig::SwigVar_PyObject result = PyObject_Call(method, (PyObject *) args, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("getObj");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'GenericCallback.getObj'");
    }
  }
  double swig_val;
  int swig_res = SWIG_AsVal_double(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""double""'");
  }
  c_result = static_cast< double >(swig_val);
  return (double) c_result;
}


int SwigDirector_GenericCallback::getWhere() {
  int c_result = SwigValueInit< int >() ;
  
  PyObject *self = NULL;
  (void)self;
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call GenericCallback.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 2;
  const char *const swig_method_name = "getWhere";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject args = PyTuple_New(0);
  swig::SwigVar_PyObject result = PyObject_Call(method, (PyObject *) args, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("getWhere");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'GenericCallback.getWhere'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


char const *SwigDirector_GenericCallback::getWhereString() {
  char *c_result = 0 ;
  int res ;
  char *buf = 0 ;
  int alloc = SWIG_NEWOBJ ;
  
  PyObject *self = NULL;
  (void)self;
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call GenericCallback.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 3;
  const char *const swig_method_name = "getWhereString";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject args = PyTuple_New(0);
  swig::SwigVar_PyObject result = PyObject_Call(method, (PyObject *) args, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("getWhereString");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'GenericCallback.getWhereString'");
    }
  }
  res = SWIG_AsCharPtrAndSize(result, &buf, NULL, &alloc);
  if (!SWIG_IsOK(res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(res)), "in output value of type '""char const *""'");
  }
  if (alloc == SWIG_NEWOBJ) {
    swig_acquire_ownership_array(buf);
  }
  c_result = reinterpret_cast< char * >(buf);
  return (char const *) c_result;
}


char const *SwigDirector_GenericCallback::getMessage() {
  char *c_result = 0 ;
  int res ;
  char *buf = 0 ;
  int alloc = SWIG_NEWOBJ ;
  
  PyObject *self = NULL;
  (void)self;
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call GenericCallback.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 4;
  const char *const swig_method_name = "getMessage";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject args = PyTuple_New(0);
  swig::SwigVar_PyObject result = PyObject_Call(method, (PyObject *) args, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("getMessage");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'GenericCallback.getMessage'");
    }
  }
  res = SWIG_AsCharPtrAndSize(result, &buf, NULL, &alloc);
  if (!SWIG_IsOK(res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(res)), "in output value of type '""char const *""'");
  }
  if (alloc == SWIG_NEWOBJ) {
    swig_acquire_ownership_array(buf);
  }
  c_result = reinterpret_cast< char * >(buf);
  return (char const *) c_result;
}


ampls::Where::CBWhere SwigDirector_GenericCallback::getAMPLWhere() {
  ampls::Where::CBWhere c_result = SwigValueInit< ampls::Where::CBWhere >() ;
  
  PyObject *self = NULL;
  (void)self;
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call GenericCallback.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 5;
  const char *const swig_method_name = "getAMPLWhere";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject args = PyTuple_New(0);
  swig::SwigVar_PyObject result = PyObject_Call(method, (PyObject *) args, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("getAMPLWhere");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'GenericCallback.getAMPLWhere'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""ampls::Where::CBWhere""'");
  }
  c_result = static_cast< ampls::Where::CBWhere >(swig_val);
  return (ampls::Where::CBWhere) c_result;
}


ampls::Variant SwigDirector_GenericCallback::getValue(ampls::Value::CBValue v) {
  void *swig_argp ;
  int swig_res = 0 ;
  
  ampls::Variant c_result;
  PyObject *self = NULL;
  (void)self;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_int(static_cast< int >(v));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call GenericCallback.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 6;
  const char *const swig_method_name = "getValue";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("getValue");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'GenericCallback.getValue'");
    }
  }
  swig_res = SWIG_ConvertPtr(result,&swig_argp,SWIGTYPE_p_ampls__Variant,  0  | 0);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""ampls::Variant""'");
  }
  c_result = *(reinterpret_cast< ampls::Variant * >(swig_argp));
  if (SWIG_IsNewObj(swig_res)) delete reinterpret_cast< ampls::Variant * >(swig_argp);
  return (ampls::Variant) c_result;
}


SwigDirector_CPLEXCallback::SwigDirector_CPLEXCallback(PyObject *self): ampls::CPLEXCallback(), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((ampls::CPLEXCallback *)this, this); 
}




int SwigDirector_CPLEXCallback::doAddCut(ampls::Constraint const &c, int type) {
  PyObject *self = NULL;
  (void)self;
  return ampls::CPLEXCallback::doAddCut(c,type);
}


int SwigDirector_CPLEXCallback::run() {
  int c_result = SwigValueInit< int >() ;
  
  PyObject *self = NULL;
  (void)self;
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call CPLEXCallback.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 0;
  const char *const swig_method_name = "run";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject args = PyTuple_New(0);
  swig::SwigVar_PyObject result = PyObject_Call(method, (PyObject *) args, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("run");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'CPLEXCallback.run'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


SwigDirector_CPLEXCallback::~SwigDirector_CPLEXCallback() {
}

int SwigDirector_CPLEXCallback::getSolution(int len, double *sol) {
  PyObject *self = NULL;
  (void)self;
  return ampls::CPLEXCallback::getSolution(len,sol);
}


double SwigDirector_CPLEXCallback::getObj() {
  double c_result = SwigValueInit< double >() ;
  
  PyObject *self = NULL;
  (void)self;
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call CPLEXCallback.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 1;
  const char *const swig_method_name = "getObj";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject args = PyTuple_New(0);
  swig::SwigVar_PyObject result = PyObject_Call(method, (PyObject *) args, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("getObj");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'CPLEXCallback.getObj'");
    }
  }
  double swig_val;
  int swig_res = SWIG_AsVal_double(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""double""'");
  }
  c_result = static_cast< double >(swig_val);
  return (double) c_result;
}


int SwigDirector_CPLEXCallback::getWhere() {
  int c_result = SwigValueInit< int >() ;
  
  PyObject *self = NULL;
  (void)self;
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call CPLEXCallback.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 2;
  const char *const swig_method_name = "getWhere";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject args = PyTuple_New(0);
  swig::SwigVar_PyObject result = PyObject_Call(method, (PyObject *) args, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("getWhere");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'CPLEXCallback.getWhere'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


char const *SwigDirector_CPLEXCallback::getWhereString() {
  char *c_result = 0 ;
  int res ;
  char *buf = 0 ;
  int alloc = SWIG_NEWOBJ ;
  
  PyObject *self = NULL;
  (void)self;
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call CPLEXCallback.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 3;
  const char *const swig_method_name = "getWhereString";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject args = PyTuple_New(0);
  swig::SwigVar_PyObject result = PyObject_Call(method, (PyObject *) args, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("getWhereString");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'CPLEXCallback.getWhereString'");
    }
  }
  res = SWIG_AsCharPtrAndSize(result, &buf, NULL, &alloc);
  if (!SWIG_IsOK(res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(res)), "in output value of type '""char const *""'");
  }
  if (alloc == SWIG_NEWOBJ) {
    swig_acquire_ownership_array(buf);
  }
  c_result = reinterpret_cast< char * >(buf);
  return (char const *) c_result;
}


char const *SwigDirector_CPLEXCallback::getMessage() {
  char *c_result = 0 ;
  int res ;
  char *buf = 0 ;
  int alloc = SWIG_NEWOBJ ;
  
  PyObject *self = NULL;
  (void)self;
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call CPLEXCallback.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 4;
  const char *const swig_method_name = "getMessage";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject args = PyTuple_New(0);
  swig::SwigVar_PyObject result = PyObject_Call(method, (PyObject *) args, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("getMessage");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'CPLEXCallback.getMessage'");
    }
  }
  res = SWIG_AsCharPtrAndSize(result, &buf, NULL, &alloc);
  if (!SWIG_IsOK(res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(res)), "in output value of type '""char const *""'");
  }
  if (alloc == SWIG_NEWOBJ) {
    swig_acquire_ownership_array(buf);
  }
  c_result = reinterpret_cast< char * >(buf);
  return (char const *) c_result;
}


ampls::Where::CBWhere SwigDirector_CPLEXCallback::getAMPLWhere() {
  ampls::Where::CBWhere c_result = SwigValueInit< ampls::Where::CBWhere >() ;
  
  PyObject *self = NULL;
  (void)self;
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call CPLEXCallback.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 5;
  const char *const swig_method_name = "getAMPLWhere";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject args = PyTuple_New(0);
  swig::SwigVar_PyObject result = PyObject_Call(method, (PyObject *) args, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("getAMPLWhere");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'CPLEXCallback.getAMPLWhere'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""ampls::Where::CBWhere""'");
  }
  c_result = static_cast< ampls::Where::CBWhere >(swig_val);
  return (ampls::Where::CBWhere) c_result;
}


ampls::Variant SwigDirector_CPLEXCallback::getValue(ampls::Value::CBValue v) {
  void *swig_argp ;
  int swig_res = 0 ;
  
  ampls::Variant c_result;
  PyObject *self = NULL;
  (void)self;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_int(static_cast< int >(v));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call CPLEXCallback.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 6;
  const char *const swig_method_name = "getValue";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("getValue");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'CPLEXCallback.getValue'");
    }
  }
  swig_res = SWIG_ConvertPtr(result,&swig_argp,SWIGTYPE_p_ampls__Variant,  0  | 0);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""ampls::Variant""'");
  }
  c_result = *(reinterpret_cast< ampls::Variant * >(swig_argp));
  if (SWIG_IsNewObj(swig_res)) delete reinterpret_cast< ampls::Variant * >(swig_argp);
  return (ampls::Variant) c_result;
}


#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN int _wrap_new_dblArray(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  size_t arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  dblArray *result = 0 ;
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_dblArray")) SWIG_fail;
  if (!SWIG_Python_UnpackTuple(args, "new_dblArray", 1, 1, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_dblArray" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  result = (dblArray *)new_dblArray(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dblArray, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_dblArray(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dblArray *arg1 = (dblArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args, "delete_dblArray", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_dblArray, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_dblArray" "', argument " "1"" of type '" "dblArray *""'"); 
  }
  arg1 = reinterpret_cast< dblArray * >(argp1);
  delete_dblArray(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dblArray___getitem__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dblArray *arg1 = (dblArray *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_dblArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dblArray___getitem__" "', argument " "1"" of type '" "dblArray *""'"); 
  }
  arg1 = reinterpret_cast< dblArray * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dblArray___getitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (double)dblArray___getitem__(arg1,arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dblArray___setitem__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dblArray *arg1 = (dblArray *) 0 ;
  size_t arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "dblArray___setitem__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_dblArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dblArray___setitem__" "', argument " "1"" of type '" "dblArray *""'"); 
  }
  arg1 = reinterpret_cast< dblArray * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dblArray___setitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "dblArray___setitem__" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  dblArray___setitem__(arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dblArray_cast(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dblArray *arg1 = (dblArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "dblArray_cast", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_dblArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dblArray_cast" "', argument " "1"" of type '" "dblArray *""'"); 
  }
  arg1 = reinterpret_cast< dblArray * >(argp1);
  result = (double *)dblArray_cast(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dblArray_frompointer(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  double *arg1 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  dblArray *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dblArray_frompointer" "', argument " "1"" of type '" "double *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  result = (dblArray *)dblArray_frompointer(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dblArray, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_dblArray) /* defines _wrap_delete_dblArray_destructor_closure */

SWIGPY_FUNPACK_SSIZEARGFUNC_CLOSURE(_wrap_dblArray___getitem__) /* defines _wrap_dblArray___getitem___ssizeargfunc_closure */

SWIGPY_SSIZEOBJARGPROC_CLOSURE(_wrap_dblArray___setitem__) /* defines _wrap_dblArray___setitem___ssizeobjargproc_closure */

SWIGINTERN int _wrap_new_intArray(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  size_t arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  intArray *result = 0 ;
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_intArray")) SWIG_fail;
  if (!SWIG_Python_UnpackTuple(args, "new_intArray", 1, 1, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_intArray" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  result = (intArray *)new_intArray(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_intArray, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_intArray(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  intArray *arg1 = (intArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args, "delete_intArray", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_intArray, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_intArray" "', argument " "1"" of type '" "intArray *""'"); 
  }
  arg1 = reinterpret_cast< intArray * >(argp1);
  delete_intArray(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_intArray___getitem__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  intArray *arg1 = (intArray *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_intArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intArray___getitem__" "', argument " "1"" of type '" "intArray *""'"); 
  }
  arg1 = reinterpret_cast< intArray * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "intArray___getitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (int)intArray___getitem__(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_intArray___setitem__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  intArray *arg1 = (intArray *) 0 ;
  size_t arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "intArray___setitem__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_intArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intArray___setitem__" "', argument " "1"" of type '" "intArray *""'"); 
  }
  arg1 = reinterpret_cast< intArray * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "intArray___setitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "intArray___setitem__" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  intArray___setitem__(arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_intArray_cast(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  intArray *arg1 = (intArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "intArray_cast", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_intArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intArray_cast" "', argument " "1"" of type '" "intArray *""'"); 
  }
  arg1 = reinterpret_cast< intArray * >(argp1);
  result = (int *)intArray_cast(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_intArray_frompointer(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  intArray *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intArray_frompointer" "', argument " "1"" of type '" "int *""'"); 
  }
  arg1 = reinterpret_cast< int * >(argp1);
  result = (intArray *)intArray_frompointer(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_intArray, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_intArray) /* defines _wrap_delete_intArray_destructor_closure */

SWIGPY_FUNPACK_SSIZEARGFUNC_CLOSURE(_wrap_intArray___getitem__) /* defines _wrap_intArray___getitem___ssizeargfunc_closure */

SWIGPY_SSIZEOBJARGPROC_CLOSURE(_wrap_intArray___setitem__) /* defines _wrap_intArray___setitem___ssizeobjargproc_closure */

SWIGINTERN PyObject *_wrap_delete_SwigPyIterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args, "delete_SwigPyIterator", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SwigPyIterator" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_value(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator_value", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_value" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)((swig::SwigPyIterator const *)arg1)->value();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_incr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SwigPyIterator_incr", 0, 2, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_incr__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_incr__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SwigPyIterator_incr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::incr(size_t)\n"
    "    swig::SwigPyIterator::incr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_decr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SwigPyIterator_decr", 0, 2, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_decr__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_decr__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SwigPyIterator_decr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::decr(size_t)\n"
    "    swig::SwigPyIterator::decr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_distance(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  ptrdiff_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_distance" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = ((swig::SwigPyIterator const *)arg1)->distance((swig::SwigPyIterator const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_equal(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_equal" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = (bool)((swig::SwigPyIterator const *)arg1)->equal((swig::SwigPyIterator const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_copy(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator_copy", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_copy" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->copy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_next(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator_next", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_next" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->next();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___next__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___next__", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___next__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->__next__();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_previous(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator_previous", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_previous" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->previous();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_advance(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_advance" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->advance(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___eq__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___eq__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator ==((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___ne__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___ne__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator !=((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___iadd__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___iadd__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___iadd__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator +=(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___isub__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___isub__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___isub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator -=(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___add__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___add__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___add__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator +(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator -(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  ptrdiff_t result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = ((swig::SwigPyIterator const *)arg1)->operator -((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SwigPyIterator___sub__", 0, 2, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_SwigPyIterator) /* defines _wrap_delete_SwigPyIterator_destructor_closure */

SWIGPY_ITERNEXTFUNC_CLOSURE(_wrap_SwigPyIterator___next__) /* defines _wrap_SwigPyIterator___next___iternextfunc_closure */

SWIGPY_BINARYFUNC_CLOSURE(_wrap_SwigPyIterator___sub__) /* defines _wrap_SwigPyIterator___sub___binaryfunc_closure */

SWIGINTERN int _wrap_new_map_string_int__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::less< std::string > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::map< std::string,int > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__lessT_std__string_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_map_string_int" "', argument " "1"" of type '" "std::less< std::string > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_map_string_int" "', argument " "1"" of type '" "std::less< std::string > const &""'"); 
  }
  arg1 = reinterpret_cast< std::less< std::string > * >(argp1);
  {
    try {
      result = (std::map< std::string,int > *)new std::map< std::string,int >((std::less< std::string > const &)*arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_std__string_int_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_int_t_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_map_string_int_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &self;
  if (!SWIG_Python_UnpackTuple(args, "map_string_int_iterator", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_int_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_int_iterator" "', argument " "1"" of type '" "std::map< std::string,int > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,int > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_map_Sl_std_string_Sc_int_Sg__iterator(arg1,arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_int___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "map_string_int___nonzero__", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_int_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_int___nonzero__" "', argument " "1"" of type '" "std::map< std::string,int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,int > * >(argp1);
  {
    try {
      result = (bool)std_map_Sl_std_string_Sc_int_Sg____nonzero__((std::map< std::string,int > const *)arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_int___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "map_string_int___bool__", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_int_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_int___bool__" "', argument " "1"" of type '" "std::map< std::string,int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,int > * >(argp1);
  {
    try {
      result = (bool)std_map_Sl_std_string_Sc_int_Sg____bool__((std::map< std::string,int > const *)arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_int___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< std::string,int >::size_type result;
  
  if (!SWIG_Python_UnpackTuple(args, "map_string_int___len__", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_int_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_int___len__" "', argument " "1"" of type '" "std::map< std::string,int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,int > * >(argp1);
  {
    try {
      result = std_map_Sl_std_string_Sc_int_Sg____len__((std::map< std::string,int > const *)arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_int_iterkeys(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &self;
  if (!SWIG_Python_UnpackTuple(args, "map_string_int_iterkeys", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_int_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_int_iterkeys" "', argument " "1"" of type '" "std::map< std::string,int > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,int > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_map_Sl_std_string_Sc_int_Sg__iterkeys(arg1,arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_int_itervalues(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &self;
  if (!SWIG_Python_UnpackTuple(args, "map_string_int_itervalues", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_int_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_int_itervalues" "', argument " "1"" of type '" "std::map< std::string,int > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,int > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_map_Sl_std_string_Sc_int_Sg__itervalues(arg1,arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_int_iteritems(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &self;
  if (!SWIG_Python_UnpackTuple(args, "map_string_int_iteritems", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_int_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_int_iteritems" "', argument " "1"" of type '" "std::map< std::string,int > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,int > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_map_Sl_std_string_Sc_int_Sg__iteritems(arg1,arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_int___getitem__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  std::map< std::string,int >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  std::map< std::string,int >::mapped_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_int_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_int___getitem__" "', argument " "1"" of type '" "std::map< std::string,int > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,int > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_string_int___getitem__" "', argument " "2"" of type '" "std::map< std::string,int >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_string_int___getitem__" "', argument " "2"" of type '" "std::map< std::string,int >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      try {
        result = (std::map< std::string,int >::mapped_type *) &std_map_Sl_std_string_Sc_int_Sg____getitem__(arg1,(std::string const &)*arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_int___delitem__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  std::map< std::string,int >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_int_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_int___delitem__" "', argument " "1"" of type '" "std::map< std::string,int > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,int > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_string_int___delitem__" "', argument " "2"" of type '" "std::map< std::string,int >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_string_int___delitem__" "', argument " "2"" of type '" "std::map< std::string,int >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      try {
        std_map_Sl_std_string_Sc_int_Sg____delitem__(arg1,(std::string const &)*arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_int_has_key(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  std::map< std::string,int >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_int_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_int_has_key" "', argument " "1"" of type '" "std::map< std::string,int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,int > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_string_int_has_key" "', argument " "2"" of type '" "std::map< std::string,int >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_string_int_has_key" "', argument " "2"" of type '" "std::map< std::string,int >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)std_map_Sl_std_string_Sc_int_Sg__has_key((std::map< std::string,int > const *)arg1,(std::string const &)*arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_int_keys(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "map_string_int_keys", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_int_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_int_keys" "', argument " "1"" of type '" "std::map< std::string,int > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,int > * >(argp1);
  {
    try {
      result = (PyObject *)std_map_Sl_std_string_Sc_int_Sg__keys(arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_int_values(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "map_string_int_values", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_int_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_int_values" "', argument " "1"" of type '" "std::map< std::string,int > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,int > * >(argp1);
  {
    try {
      result = (PyObject *)std_map_Sl_std_string_Sc_int_Sg__values(arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_int_items(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "map_string_int_items", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_int_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_int_items" "', argument " "1"" of type '" "std::map< std::string,int > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,int > * >(argp1);
  {
    try {
      result = (PyObject *)std_map_Sl_std_string_Sc_int_Sg__items(arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_int___contains__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  std::map< std::string,int >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_int_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_int___contains__" "', argument " "1"" of type '" "std::map< std::string,int > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,int > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_string_int___contains__" "', argument " "2"" of type '" "std::map< std::string,int >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_string_int___contains__" "', argument " "2"" of type '" "std::map< std::string,int >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)std_map_Sl_std_string_Sc_int_Sg____contains__(arg1,(std::string const &)*arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_int_key_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &self;
  if (!SWIG_Python_UnpackTuple(args, "map_string_int_key_iterator", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_int_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_int_key_iterator" "', argument " "1"" of type '" "std::map< std::string,int > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,int > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_map_Sl_std_string_Sc_int_Sg__key_iterator(arg1,arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_int_value_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &self;
  if (!SWIG_Python_UnpackTuple(args, "map_string_int_value_iterator", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_int_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_int_value_iterator" "', argument " "1"" of type '" "std::map< std::string,int > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,int > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_map_Sl_std_string_Sc_int_Sg__value_iterator(arg1,arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_int___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  std::map< std::string,int >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_int_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_int___setitem__" "', argument " "1"" of type '" "std::map< std::string,int > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,int > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_string_int___setitem__" "', argument " "2"" of type '" "std::map< std::string,int >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_string_int___setitem__" "', argument " "2"" of type '" "std::map< std::string,int >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      std_map_Sl_std_string_Sc_int_Sg____setitem____SWIG_0(arg1,(std::string const &)*arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_int___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  std::map< std::string,int >::key_type *arg2 = 0 ;
  std::map< std::string,int >::mapped_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::map< std::string,int >::mapped_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_int_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_int___setitem__" "', argument " "1"" of type '" "std::map< std::string,int > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,int > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_string_int___setitem__" "', argument " "2"" of type '" "std::map< std::string,int >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_string_int___setitem__" "', argument " "2"" of type '" "std::map< std::string,int >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "map_string_int___setitem__" "', argument " "3"" of type '" "std::map< std::string,int >::mapped_type""'");
  } 
  temp3 = static_cast< std::map< std::string,int >::mapped_type >(val3);
  arg3 = &temp3;
  {
    try {
      try {
        std_map_Sl_std_string_Sc_int_Sg____setitem____SWIG_1(arg1,(std::string const &)*arg2,(int const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_int___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "map_string_int___setitem__", 0, 3, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::map< std::string,int,std::less< std::string >,std::allocator< std::pair< std::string const,int > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_map_string_int___setitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::map< std::string,int,std::less< std::string >,std::allocator< std::pair< std::string const,int > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_map_string_int___setitem____SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'map_string_int___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::map< std::string,int >::__setitem__(std::map< std::string,int >::key_type const &)\n"
    "    std::map< std::string,int >::__setitem__(std::map< std::string,int >::key_type const &,std::map< std::string,int >::mapped_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_map_string_int_asdict(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "map_string_int_asdict", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_int_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_int_asdict" "', argument " "1"" of type '" "std::map< std::string,int > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,int > * >(argp1);
  {
    try {
      result = (PyObject *)std_map_Sl_std_string_Sc_int_Sg__asdict(arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_map_string_int__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::map< std::string,int > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (std::map< std::string,int > *)new std::map< std::string,int >();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_std__string_int_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_int_t_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_map_string_int__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::map< std::string,int > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::map< std::string,int > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::map< std::string,int,std::less< std::string >,std::allocator< std::pair< std::string const,int > > > *ptr = (std::map< std::string,int,std::less< std::string >,std::allocator< std::pair< std::string const,int > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_map_string_int" "', argument " "1"" of type '" "std::map< std::string,int > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_map_string_int" "', argument " "1"" of type '" "std::map< std::string,int > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::map< std::string,int > *)new std::map< std::string,int >((std::map< std::string,int > const &)*arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_std__string_int_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_int_t_t_t, SWIG_BUILTIN_INIT |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj == Py_None ? -1 : 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return -1;
}


SWIGINTERN int _wrap_new_map_string_int(PyObject *self, PyObject *args, PyObject *kwargs) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_map_string_int")) SWIG_fail;
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_map_string_int", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_map_string_int__SWIG_1(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__lessT_std__string_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_map_string_int__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::map< std::string,int,std::less< std::string >,std::allocator< std::pair< std::string const,int > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_map_string_int__SWIG_2(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_map_string_int'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::map< std::string,int >::map(std::less< std::string > const &)\n"
    "    std::map< std::string,int >::map()\n"
    "    std::map< std::string,int >::map(std::map< std::string,int > const &)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_map_string_int_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "map_string_int_empty", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_int_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_int_empty" "', argument " "1"" of type '" "std::map< std::string,int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,int > * >(argp1);
  {
    try {
      result = (bool)((std::map< std::string,int > const *)arg1)->empty();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_int_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< std::string,int >::size_type result;
  
  if (!SWIG_Python_UnpackTuple(args, "map_string_int_size", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_int_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_int_size" "', argument " "1"" of type '" "std::map< std::string,int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,int > * >(argp1);
  {
    try {
      result = ((std::map< std::string,int > const *)arg1)->size();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_int_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  std::map< std::string,int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_int_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_int_swap" "', argument " "1"" of type '" "std::map< std::string,int > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,int > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_std__mapT_std__string_int_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_int_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_string_int_swap" "', argument " "2"" of type '" "std::map< std::string,int > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_string_int_swap" "', argument " "2"" of type '" "std::map< std::string,int > &""'"); 
  }
  arg2 = reinterpret_cast< std::map< std::string,int > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_int_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< std::string,int >::iterator result;
  
  if (!SWIG_Python_UnpackTuple(args, "map_string_int_begin", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_int_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_int_begin" "', argument " "1"" of type '" "std::map< std::string,int > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,int > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_int_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< std::string,int >::iterator result;
  
  if (!SWIG_Python_UnpackTuple(args, "map_string_int_end", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_int_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_int_end" "', argument " "1"" of type '" "std::map< std::string,int > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,int > * >(argp1);
  {
    try {
      result = (arg1)->end();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_int_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< std::string,int >::reverse_iterator result;
  
  if (!SWIG_Python_UnpackTuple(args, "map_string_int_rbegin", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_int_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_int_rbegin" "', argument " "1"" of type '" "std::map< std::string,int > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,int > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,int >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_int_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< std::string,int >::reverse_iterator result;
  
  if (!SWIG_Python_UnpackTuple(args, "map_string_int_rend", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_int_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_int_rend" "', argument " "1"" of type '" "std::map< std::string,int > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,int > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,int >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_int_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args, "map_string_int_clear", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_int_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_int_clear" "', argument " "1"" of type '" "std::map< std::string,int > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,int > * >(argp1);
  {
    try {
      (arg1)->clear();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_int_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< std::pair< std::string const,int > > > result;
  
  if (!SWIG_Python_UnpackTuple(args, "map_string_int_get_allocator", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_int_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_int_get_allocator" "', argument " "1"" of type '" "std::map< std::string,int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,int > * >(argp1);
  {
    try {
      result = ((std::map< std::string,int > const *)arg1)->get_allocator();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new std::map< std::string,int >::allocator_type(static_cast< const std::map< std::string,int >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_std__pairT_std__string_const_int_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_int_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  std::map< std::string,int >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::map< std::string,int >::size_type result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_int_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_int_erase" "', argument " "1"" of type '" "std::map< std::string,int > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,int > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_string_int_erase" "', argument " "2"" of type '" "std::map< std::string,int >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_string_int_erase" "', argument " "2"" of type '" "std::map< std::string,int >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (arg1)->erase((std::map< std::string,int >::key_type const &)*arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_int_count(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  std::map< std::string,int >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  std::map< std::string,int >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_int_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_int_count" "', argument " "1"" of type '" "std::map< std::string,int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,int > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_string_int_count" "', argument " "2"" of type '" "std::map< std::string,int >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_string_int_count" "', argument " "2"" of type '" "std::map< std::string,int >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = ((std::map< std::string,int > const *)arg1)->count((std::map< std::string,int >::key_type const &)*arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_int_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  std::map< std::string,int >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_int_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_int_erase" "', argument " "1"" of type '" "std::map< std::string,int > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,int > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "map_string_int_erase" "', argument " "2"" of type '" "std::map< std::string,int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::map< std::string,int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::map< std::string,int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "map_string_int_erase" "', argument " "2"" of type '" "std::map< std::string,int >::iterator""'");
    }
  }
  {
    try {
      std_map_Sl_std_string_Sc_int_Sg__erase__SWIG_1(arg1,arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_int_erase__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  std::map< std::string,int >::iterator arg2 ;
  std::map< std::string,int >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_int_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_int_erase" "', argument " "1"" of type '" "std::map< std::string,int > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,int > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "map_string_int_erase" "', argument " "2"" of type '" "std::map< std::string,int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::map< std::string,int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::map< std::string,int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "map_string_int_erase" "', argument " "2"" of type '" "std::map< std::string,int >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "map_string_int_erase" "', argument " "3"" of type '" "std::map< std::string,int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::map< std::string,int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::map< std::string,int >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "map_string_int_erase" "', argument " "3"" of type '" "std::map< std::string,int >::iterator""'");
    }
  }
  {
    try {
      std_map_Sl_std_string_Sc_int_Sg__erase__SWIG_2(arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_int_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "map_string_int_erase", 0, 3, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::map< std::string,int,std::less< std::string >,std::allocator< std::pair< std::string const,int > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::map< std::string,int >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_map_string_int_erase__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::map< std::string,int,std::less< std::string >,std::allocator< std::pair< std::string const,int > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_map_string_int_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::map< std::string,int,std::less< std::string >,std::allocator< std::pair< std::string const,int > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::map< std::string,int >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::map< std::string,int >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_map_string_int_erase__SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'map_string_int_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::map< std::string,int >::erase(std::map< std::string,int >::key_type const &)\n"
    "    std::map< std::string,int >::erase(std::map< std::string,int >::iterator)\n"
    "    std::map< std::string,int >::erase(std::map< std::string,int >::iterator,std::map< std::string,int >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_map_string_int_find(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  std::map< std::string,int >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  std::map< std::string,int >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_int_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_int_find" "', argument " "1"" of type '" "std::map< std::string,int > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,int > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_string_int_find" "', argument " "2"" of type '" "std::map< std::string,int >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_string_int_find" "', argument " "2"" of type '" "std::map< std::string,int >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (arg1)->find((std::map< std::string,int >::key_type const &)*arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_int_lower_bound(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  std::map< std::string,int >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  std::map< std::string,int >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_int_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_int_lower_bound" "', argument " "1"" of type '" "std::map< std::string,int > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,int > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_string_int_lower_bound" "', argument " "2"" of type '" "std::map< std::string,int >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_string_int_lower_bound" "', argument " "2"" of type '" "std::map< std::string,int >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (arg1)->lower_bound((std::map< std::string,int >::key_type const &)*arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_int_upper_bound(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  std::map< std::string,int >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  std::map< std::string,int >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_int_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_int_upper_bound" "', argument " "1"" of type '" "std::map< std::string,int > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,int > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_string_int_upper_bound" "', argument " "2"" of type '" "std::map< std::string,int >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_string_int_upper_bound" "', argument " "2"" of type '" "std::map< std::string,int >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (arg1)->upper_bound((std::map< std::string,int >::key_type const &)*arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_map_string_int(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args, "delete_map_string_int", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_int_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_int_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_map_string_int" "', argument " "1"" of type '" "std::map< std::string,int > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,int > * >(argp1);
  {
    try {
      delete arg1;
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_GETITERFUNC_CLOSURE(_wrap_map_string_int_iterator) /* defines _wrap_map_string_int_iterator_getiterfunc_closure */

SWIGPY_INQUIRY_CLOSURE(_wrap_map_string_int___nonzero__) /* defines _wrap_map_string_int___nonzero___inquiry_closure */

SWIGPY_LENFUNC_CLOSURE(_wrap_map_string_int___len__) /* defines _wrap_map_string_int___len___lenfunc_closure */

SWIGPY_FUNPACK_OBJOBJPROC_CLOSURE(_wrap_map_string_int___contains__) /* defines _wrap_map_string_int___contains___objobjproc_closure */

SWIGPY_GETITERFUNC_CLOSURE(_wrap_map_string_int_key_iterator) /* defines _wrap_map_string_int_key_iterator_getiterfunc_closure */

SWIGPY_OBJOBJARGPROC_CLOSURE(_wrap_map_string_int___setitem__) /* defines _wrap_map_string_int___setitem___objobjargproc_closure */

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_map_string_int) /* defines _wrap_delete_map_string_int_destructor_closure */

SWIGINTERN int _wrap_new_map_int_string__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::less< int > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::map< int,std::string > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__lessT_int_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_map_int_string" "', argument " "1"" of type '" "std::less< int > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_map_int_string" "', argument " "1"" of type '" "std::less< int > const &""'"); 
  }
  arg1 = reinterpret_cast< std::less< int > * >(argp1);
  {
    try {
      result = (std::map< int,std::string > *)new std::map< int,std::string >((std::less< int > const &)*arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_int_std__string_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__string_t_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_map_int_string_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &self;
  if (!SWIG_Python_UnpackTuple(args, "map_int_string_iterator", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_int_std__string_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_string_iterator" "', argument " "1"" of type '" "std::map< int,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_map_Sl_int_Sc_std_string_Sg__iterator(arg1,arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_string___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "map_int_string___nonzero__", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_int_std__string_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_string___nonzero__" "', argument " "1"" of type '" "std::map< int,std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  {
    try {
      result = (bool)std_map_Sl_int_Sc_std_string_Sg____nonzero__((std::map< int,std::string > const *)arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_string___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "map_int_string___bool__", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_int_std__string_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_string___bool__" "', argument " "1"" of type '" "std::map< int,std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  {
    try {
      result = (bool)std_map_Sl_int_Sc_std_string_Sg____bool__((std::map< int,std::string > const *)arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_string___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< int,std::string >::size_type result;
  
  if (!SWIG_Python_UnpackTuple(args, "map_int_string___len__", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_int_std__string_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_string___len__" "', argument " "1"" of type '" "std::map< int,std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  {
    try {
      result = std_map_Sl_int_Sc_std_string_Sg____len__((std::map< int,std::string > const *)arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_string_iterkeys(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &self;
  if (!SWIG_Python_UnpackTuple(args, "map_int_string_iterkeys", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_int_std__string_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_string_iterkeys" "', argument " "1"" of type '" "std::map< int,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_map_Sl_int_Sc_std_string_Sg__iterkeys(arg1,arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_string_itervalues(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &self;
  if (!SWIG_Python_UnpackTuple(args, "map_int_string_itervalues", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_int_std__string_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_string_itervalues" "', argument " "1"" of type '" "std::map< int,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_map_Sl_int_Sc_std_string_Sg__itervalues(arg1,arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_string_iteritems(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &self;
  if (!SWIG_Python_UnpackTuple(args, "map_int_string_iteritems", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_int_std__string_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_string_iteritems" "', argument " "1"" of type '" "std::map< int,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_map_Sl_int_Sc_std_string_Sg__iteritems(arg1,arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_string___getitem__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  std::map< int,std::string >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::map< int,std::string >::key_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  std::map< int,std::string >::mapped_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_int_std__string_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_string___getitem__" "', argument " "1"" of type '" "std::map< int,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "map_int_string___getitem__" "', argument " "2"" of type '" "std::map< int,std::string >::key_type""'");
  } 
  temp2 = static_cast< std::map< int,std::string >::key_type >(val2);
  arg2 = &temp2;
  {
    try {
      try {
        result = (std::map< int,std::string >::mapped_type *) &std_map_Sl_int_Sc_std_string_Sg____getitem__(arg1,(int const &)*arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_string___delitem__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  std::map< int,std::string >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::map< int,std::string >::key_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_int_std__string_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_string___delitem__" "', argument " "1"" of type '" "std::map< int,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "map_int_string___delitem__" "', argument " "2"" of type '" "std::map< int,std::string >::key_type""'");
  } 
  temp2 = static_cast< std::map< int,std::string >::key_type >(val2);
  arg2 = &temp2;
  {
    try {
      try {
        std_map_Sl_int_Sc_std_string_Sg____delitem__(arg1,(int const &)*arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_string_has_key(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  std::map< int,std::string >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::map< int,std::string >::key_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_int_std__string_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_string_has_key" "', argument " "1"" of type '" "std::map< int,std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "map_int_string_has_key" "', argument " "2"" of type '" "std::map< int,std::string >::key_type""'");
  } 
  temp2 = static_cast< std::map< int,std::string >::key_type >(val2);
  arg2 = &temp2;
  {
    try {
      result = (bool)std_map_Sl_int_Sc_std_string_Sg__has_key((std::map< int,std::string > const *)arg1,(int const &)*arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_string_keys(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "map_int_string_keys", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_int_std__string_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_string_keys" "', argument " "1"" of type '" "std::map< int,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  {
    try {
      result = (PyObject *)std_map_Sl_int_Sc_std_string_Sg__keys(arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_string_values(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "map_int_string_values", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_int_std__string_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_string_values" "', argument " "1"" of type '" "std::map< int,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  {
    try {
      result = (PyObject *)std_map_Sl_int_Sc_std_string_Sg__values(arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_string_items(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "map_int_string_items", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_int_std__string_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_string_items" "', argument " "1"" of type '" "std::map< int,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  {
    try {
      result = (PyObject *)std_map_Sl_int_Sc_std_string_Sg__items(arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_string___contains__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  std::map< int,std::string >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::map< int,std::string >::key_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_int_std__string_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_string___contains__" "', argument " "1"" of type '" "std::map< int,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "map_int_string___contains__" "', argument " "2"" of type '" "std::map< int,std::string >::key_type""'");
  } 
  temp2 = static_cast< std::map< int,std::string >::key_type >(val2);
  arg2 = &temp2;
  {
    try {
      result = (bool)std_map_Sl_int_Sc_std_string_Sg____contains__(arg1,(int const &)*arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_string_key_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &self;
  if (!SWIG_Python_UnpackTuple(args, "map_int_string_key_iterator", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_int_std__string_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_string_key_iterator" "', argument " "1"" of type '" "std::map< int,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_map_Sl_int_Sc_std_string_Sg__key_iterator(arg1,arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_string_value_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &self;
  if (!SWIG_Python_UnpackTuple(args, "map_int_string_value_iterator", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_int_std__string_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_string_value_iterator" "', argument " "1"" of type '" "std::map< int,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_map_Sl_int_Sc_std_string_Sg__value_iterator(arg1,arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_string___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  std::map< int,std::string >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::map< int,std::string >::key_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_int_std__string_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_string___setitem__" "', argument " "1"" of type '" "std::map< int,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "map_int_string___setitem__" "', argument " "2"" of type '" "std::map< int,std::string >::key_type""'");
  } 
  temp2 = static_cast< std::map< int,std::string >::key_type >(val2);
  arg2 = &temp2;
  {
    try {
      std_map_Sl_int_Sc_std_string_Sg____setitem____SWIG_0(arg1,(int const &)*arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_string___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  std::map< int,std::string >::key_type *arg2 = 0 ;
  std::map< int,std::string >::mapped_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::map< int,std::string >::key_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_int_std__string_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_string___setitem__" "', argument " "1"" of type '" "std::map< int,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "map_int_string___setitem__" "', argument " "2"" of type '" "std::map< int,std::string >::key_type""'");
  } 
  temp2 = static_cast< std::map< int,std::string >::key_type >(val2);
  arg2 = &temp2;
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "map_int_string___setitem__" "', argument " "3"" of type '" "std::map< int,std::string >::mapped_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_int_string___setitem__" "', argument " "3"" of type '" "std::map< int,std::string >::mapped_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_map_Sl_int_Sc_std_string_Sg____setitem____SWIG_1(arg1,(int const &)*arg2,(std::string const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_string___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "map_int_string___setitem__", 0, 3, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_map_int_string___setitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_map_int_string___setitem____SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'map_int_string___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::map< int,std::string >::__setitem__(std::map< int,std::string >::key_type const &)\n"
    "    std::map< int,std::string >::__setitem__(std::map< int,std::string >::key_type const &,std::map< int,std::string >::mapped_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_map_int_string_asdict(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "map_int_string_asdict", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_int_std__string_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_string_asdict" "', argument " "1"" of type '" "std::map< int,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  {
    try {
      result = (PyObject *)std_map_Sl_int_Sc_std_string_Sg__asdict(arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_map_int_string__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (std::map< int,std::string > *)new std::map< int,std::string >();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_int_std__string_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__string_t_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_map_int_string__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::map< int,std::string > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > > *ptr = (std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_map_int_string" "', argument " "1"" of type '" "std::map< int,std::string > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_map_int_string" "', argument " "1"" of type '" "std::map< int,std::string > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::map< int,std::string > *)new std::map< int,std::string >((std::map< int,std::string > const &)*arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_int_std__string_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__string_t_t_t, SWIG_BUILTIN_INIT |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj == Py_None ? -1 : 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return -1;
}


SWIGINTERN int _wrap_new_map_int_string(PyObject *self, PyObject *args, PyObject *kwargs) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_map_int_string")) SWIG_fail;
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_map_int_string", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_map_int_string__SWIG_1(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__lessT_int_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_map_int_string__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_map_int_string__SWIG_2(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_map_int_string'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::map< int,std::string >::map(std::less< int > const &)\n"
    "    std::map< int,std::string >::map()\n"
    "    std::map< int,std::string >::map(std::map< int,std::string > const &)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_map_int_string_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "map_int_string_empty", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_int_std__string_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_string_empty" "', argument " "1"" of type '" "std::map< int,std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  {
    try {
      result = (bool)((std::map< int,std::string > const *)arg1)->empty();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_string_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< int,std::string >::size_type result;
  
  if (!SWIG_Python_UnpackTuple(args, "map_int_string_size", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_int_std__string_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_string_size" "', argument " "1"" of type '" "std::map< int,std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  {
    try {
      result = ((std::map< int,std::string > const *)arg1)->size();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_string_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  std::map< int,std::string > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_int_std__string_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_string_swap" "', argument " "1"" of type '" "std::map< int,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_std__mapT_int_std__string_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__string_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_int_string_swap" "', argument " "2"" of type '" "std::map< int,std::string > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_int_string_swap" "', argument " "2"" of type '" "std::map< int,std::string > &""'"); 
  }
  arg2 = reinterpret_cast< std::map< int,std::string > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_string_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< int,std::string >::iterator result;
  
  if (!SWIG_Python_UnpackTuple(args, "map_int_string_begin", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_int_std__string_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_string_begin" "', argument " "1"" of type '" "std::map< int,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< int,std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_string_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< int,std::string >::iterator result;
  
  if (!SWIG_Python_UnpackTuple(args, "map_int_string_end", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_int_std__string_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_string_end" "', argument " "1"" of type '" "std::map< int,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  {
    try {
      result = (arg1)->end();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< int,std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_string_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< int,std::string >::reverse_iterator result;
  
  if (!SWIG_Python_UnpackTuple(args, "map_int_string_rbegin", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_int_std__string_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_string_rbegin" "', argument " "1"" of type '" "std::map< int,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< int,std::string >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_string_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< int,std::string >::reverse_iterator result;
  
  if (!SWIG_Python_UnpackTuple(args, "map_int_string_rend", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_int_std__string_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_string_rend" "', argument " "1"" of type '" "std::map< int,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< int,std::string >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_string_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args, "map_int_string_clear", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_int_std__string_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_string_clear" "', argument " "1"" of type '" "std::map< int,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  {
    try {
      (arg1)->clear();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_string_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< std::pair< int const,std::string > > > result;
  
  if (!SWIG_Python_UnpackTuple(args, "map_int_string_get_allocator", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_int_std__string_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_string_get_allocator" "', argument " "1"" of type '" "std::map< int,std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  {
    try {
      result = ((std::map< int,std::string > const *)arg1)->get_allocator();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new std::map< int,std::string >::allocator_type(static_cast< const std::map< int,std::string >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_std__pairT_int_const_std__string_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_string_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  std::map< int,std::string >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::map< int,std::string >::key_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  std::map< int,std::string >::size_type result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_int_std__string_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_string_erase" "', argument " "1"" of type '" "std::map< int,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "map_int_string_erase" "', argument " "2"" of type '" "std::map< int,std::string >::key_type""'");
  } 
  temp2 = static_cast< std::map< int,std::string >::key_type >(val2);
  arg2 = &temp2;
  {
    try {
      result = (arg1)->erase((std::map< int,std::string >::key_type const &)*arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_string_count(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  std::map< int,std::string >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::map< int,std::string >::key_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  std::map< int,std::string >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_int_std__string_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_string_count" "', argument " "1"" of type '" "std::map< int,std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "map_int_string_count" "', argument " "2"" of type '" "std::map< int,std::string >::key_type""'");
  } 
  temp2 = static_cast< std::map< int,std::string >::key_type >(val2);
  arg2 = &temp2;
  {
    try {
      result = ((std::map< int,std::string > const *)arg1)->count((std::map< int,std::string >::key_type const &)*arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_string_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  std::map< int,std::string >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_int_std__string_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_string_erase" "', argument " "1"" of type '" "std::map< int,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "map_int_string_erase" "', argument " "2"" of type '" "std::map< int,std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::map< int,std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::map< int,std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "map_int_string_erase" "', argument " "2"" of type '" "std::map< int,std::string >::iterator""'");
    }
  }
  {
    try {
      std_map_Sl_int_Sc_std_string_Sg__erase__SWIG_1(arg1,arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_string_erase__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  std::map< int,std::string >::iterator arg2 ;
  std::map< int,std::string >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_int_std__string_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_string_erase" "', argument " "1"" of type '" "std::map< int,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "map_int_string_erase" "', argument " "2"" of type '" "std::map< int,std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::map< int,std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::map< int,std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "map_int_string_erase" "', argument " "2"" of type '" "std::map< int,std::string >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "map_int_string_erase" "', argument " "3"" of type '" "std::map< int,std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::map< int,std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::map< int,std::string >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "map_int_string_erase" "', argument " "3"" of type '" "std::map< int,std::string >::iterator""'");
    }
  }
  {
    try {
      std_map_Sl_int_Sc_std_string_Sg__erase__SWIG_2(arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_string_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "map_int_string_erase", 0, 3, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::map< int,std::string >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_map_int_string_erase__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_map_int_string_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::map< int,std::string >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::map< int,std::string >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_map_int_string_erase__SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'map_int_string_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::map< int,std::string >::erase(std::map< int,std::string >::key_type const &)\n"
    "    std::map< int,std::string >::erase(std::map< int,std::string >::iterator)\n"
    "    std::map< int,std::string >::erase(std::map< int,std::string >::iterator,std::map< int,std::string >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_map_int_string_find(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  std::map< int,std::string >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::map< int,std::string >::key_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  std::map< int,std::string >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_int_std__string_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_string_find" "', argument " "1"" of type '" "std::map< int,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "map_int_string_find" "', argument " "2"" of type '" "std::map< int,std::string >::key_type""'");
  } 
  temp2 = static_cast< std::map< int,std::string >::key_type >(val2);
  arg2 = &temp2;
  {
    try {
      result = (arg1)->find((std::map< int,std::string >::key_type const &)*arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< int,std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_string_lower_bound(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  std::map< int,std::string >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::map< int,std::string >::key_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  std::map< int,std::string >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_int_std__string_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_string_lower_bound" "', argument " "1"" of type '" "std::map< int,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "map_int_string_lower_bound" "', argument " "2"" of type '" "std::map< int,std::string >::key_type""'");
  } 
  temp2 = static_cast< std::map< int,std::string >::key_type >(val2);
  arg2 = &temp2;
  {
    try {
      result = (arg1)->lower_bound((std::map< int,std::string >::key_type const &)*arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< int,std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_string_upper_bound(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  std::map< int,std::string >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::map< int,std::string >::key_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  std::map< int,std::string >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_int_std__string_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_string_upper_bound" "', argument " "1"" of type '" "std::map< int,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "map_int_string_upper_bound" "', argument " "2"" of type '" "std::map< int,std::string >::key_type""'");
  } 
  temp2 = static_cast< std::map< int,std::string >::key_type >(val2);
  arg2 = &temp2;
  {
    try {
      result = (arg1)->upper_bound((std::map< int,std::string >::key_type const &)*arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< int,std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_map_int_string(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args, "delete_map_int_string", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_int_std__string_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__string_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_map_int_string" "', argument " "1"" of type '" "std::map< int,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  {
    try {
      delete arg1;
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_GETITERFUNC_CLOSURE(_wrap_map_int_string_iterator) /* defines _wrap_map_int_string_iterator_getiterfunc_closure */

SWIGPY_INQUIRY_CLOSURE(_wrap_map_int_string___nonzero__) /* defines _wrap_map_int_string___nonzero___inquiry_closure */

SWIGPY_LENFUNC_CLOSURE(_wrap_map_int_string___len__) /* defines _wrap_map_int_string___len___lenfunc_closure */

SWIGPY_FUNPACK_OBJOBJPROC_CLOSURE(_wrap_map_int_string___contains__) /* defines _wrap_map_int_string___contains___objobjproc_closure */

SWIGPY_GETITERFUNC_CLOSURE(_wrap_map_int_string_key_iterator) /* defines _wrap_map_int_string_key_iterator_getiterfunc_closure */

SWIGPY_OBJOBJARGPROC_CLOSURE(_wrap_map_int_string___setitem__) /* defines _wrap_map_int_string___setitem___objobjargproc_closure */

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_map_int_string) /* defines _wrap_delete_map_int_string_destructor_closure */

SWIGINTERN int _wrap_new_map_string_double__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::less< std::string > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::map< std::string,double > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__lessT_std__string_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_map_string_double" "', argument " "1"" of type '" "std::less< std::string > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_map_string_double" "', argument " "1"" of type '" "std::less< std::string > const &""'"); 
  }
  arg1 = reinterpret_cast< std::less< std::string > * >(argp1);
  {
    try {
      result = (std::map< std::string,double > *)new std::map< std::string,double >((std::less< std::string > const &)*arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_map_string_double_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &self;
  if (!SWIG_Python_UnpackTuple(args, "map_string_double_iterator", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_double_iterator" "', argument " "1"" of type '" "std::map< std::string,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_map_Sl_std_string_Sc_double_Sg__iterator(arg1,arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_double___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "map_string_double___nonzero__", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_double___nonzero__" "', argument " "1"" of type '" "std::map< std::string,double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  {
    try {
      result = (bool)std_map_Sl_std_string_Sc_double_Sg____nonzero__((std::map< std::string,double > const *)arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_double___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "map_string_double___bool__", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_double___bool__" "', argument " "1"" of type '" "std::map< std::string,double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  {
    try {
      result = (bool)std_map_Sl_std_string_Sc_double_Sg____bool__((std::map< std::string,double > const *)arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_double___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< std::string,double >::size_type result;
  
  if (!SWIG_Python_UnpackTuple(args, "map_string_double___len__", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_double___len__" "', argument " "1"" of type '" "std::map< std::string,double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  {
    try {
      result = std_map_Sl_std_string_Sc_double_Sg____len__((std::map< std::string,double > const *)arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_double_iterkeys(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &self;
  if (!SWIG_Python_UnpackTuple(args, "map_string_double_iterkeys", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_double_iterkeys" "', argument " "1"" of type '" "std::map< std::string,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_map_Sl_std_string_Sc_double_Sg__iterkeys(arg1,arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_double_itervalues(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &self;
  if (!SWIG_Python_UnpackTuple(args, "map_string_double_itervalues", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_double_itervalues" "', argument " "1"" of type '" "std::map< std::string,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_map_Sl_std_string_Sc_double_Sg__itervalues(arg1,arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_double_iteritems(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &self;
  if (!SWIG_Python_UnpackTuple(args, "map_string_double_iteritems", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_double_iteritems" "', argument " "1"" of type '" "std::map< std::string,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_map_Sl_std_string_Sc_double_Sg__iteritems(arg1,arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_double___getitem__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  std::map< std::string,double >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  std::map< std::string,double >::mapped_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_double___getitem__" "', argument " "1"" of type '" "std::map< std::string,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_string_double___getitem__" "', argument " "2"" of type '" "std::map< std::string,double >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_string_double___getitem__" "', argument " "2"" of type '" "std::map< std::string,double >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      try {
        result = (std::map< std::string,double >::mapped_type *) &std_map_Sl_std_string_Sc_double_Sg____getitem__(arg1,(std::string const &)*arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_double___delitem__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  std::map< std::string,double >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_double___delitem__" "', argument " "1"" of type '" "std::map< std::string,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_string_double___delitem__" "', argument " "2"" of type '" "std::map< std::string,double >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_string_double___delitem__" "', argument " "2"" of type '" "std::map< std::string,double >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      try {
        std_map_Sl_std_string_Sc_double_Sg____delitem__(arg1,(std::string const &)*arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_double_has_key(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  std::map< std::string,double >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_double_has_key" "', argument " "1"" of type '" "std::map< std::string,double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_string_double_has_key" "', argument " "2"" of type '" "std::map< std::string,double >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_string_double_has_key" "', argument " "2"" of type '" "std::map< std::string,double >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)std_map_Sl_std_string_Sc_double_Sg__has_key((std::map< std::string,double > const *)arg1,(std::string const &)*arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_double_keys(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "map_string_double_keys", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_double_keys" "', argument " "1"" of type '" "std::map< std::string,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  {
    try {
      result = (PyObject *)std_map_Sl_std_string_Sc_double_Sg__keys(arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_double_values(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "map_string_double_values", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_double_values" "', argument " "1"" of type '" "std::map< std::string,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  {
    try {
      result = (PyObject *)std_map_Sl_std_string_Sc_double_Sg__values(arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_double_items(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "map_string_double_items", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_double_items" "', argument " "1"" of type '" "std::map< std::string,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  {
    try {
      result = (PyObject *)std_map_Sl_std_string_Sc_double_Sg__items(arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_double___contains__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  std::map< std::string,double >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_double___contains__" "', argument " "1"" of type '" "std::map< std::string,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_string_double___contains__" "', argument " "2"" of type '" "std::map< std::string,double >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_string_double___contains__" "', argument " "2"" of type '" "std::map< std::string,double >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)std_map_Sl_std_string_Sc_double_Sg____contains__(arg1,(std::string const &)*arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_double_key_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &self;
  if (!SWIG_Python_UnpackTuple(args, "map_string_double_key_iterator", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_double_key_iterator" "', argument " "1"" of type '" "std::map< std::string,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_map_Sl_std_string_Sc_double_Sg__key_iterator(arg1,arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_double_value_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &self;
  if (!SWIG_Python_UnpackTuple(args, "map_string_double_value_iterator", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_double_value_iterator" "', argument " "1"" of type '" "std::map< std::string,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_map_Sl_std_string_Sc_double_Sg__value_iterator(arg1,arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_double___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  std::map< std::string,double >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_double___setitem__" "', argument " "1"" of type '" "std::map< std::string,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_string_double___setitem__" "', argument " "2"" of type '" "std::map< std::string,double >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_string_double___setitem__" "', argument " "2"" of type '" "std::map< std::string,double >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      std_map_Sl_std_string_Sc_double_Sg____setitem____SWIG_0(arg1,(std::string const &)*arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_double___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  std::map< std::string,double >::key_type *arg2 = 0 ;
  std::map< std::string,double >::mapped_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::map< std::string,double >::mapped_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_double___setitem__" "', argument " "1"" of type '" "std::map< std::string,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_string_double___setitem__" "', argument " "2"" of type '" "std::map< std::string,double >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_string_double___setitem__" "', argument " "2"" of type '" "std::map< std::string,double >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "map_string_double___setitem__" "', argument " "3"" of type '" "std::map< std::string,double >::mapped_type""'");
  } 
  temp3 = static_cast< std::map< std::string,double >::mapped_type >(val3);
  arg3 = &temp3;
  {
    try {
      try {
        std_map_Sl_std_string_Sc_double_Sg____setitem____SWIG_1(arg1,(std::string const &)*arg2,(double const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_double___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "map_string_double___setitem__", 0, 3, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::map< std::string,double,std::less< std::string >,std::allocator< std::pair< std::string const,double > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_map_string_double___setitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::map< std::string,double,std::less< std::string >,std::allocator< std::pair< std::string const,double > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_map_string_double___setitem____SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'map_string_double___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::map< std::string,double >::__setitem__(std::map< std::string,double >::key_type const &)\n"
    "    std::map< std::string,double >::__setitem__(std::map< std::string,double >::key_type const &,std::map< std::string,double >::mapped_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_map_string_double_asdict(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "map_string_double_asdict", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_double_asdict" "', argument " "1"" of type '" "std::map< std::string,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  {
    try {
      result = (PyObject *)std_map_Sl_std_string_Sc_double_Sg__asdict(arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_map_string_double__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (std::map< std::string,double > *)new std::map< std::string,double >();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_map_string_double__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::map< std::string,double > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::map< std::string,double,std::less< std::string >,std::allocator< std::pair< std::string const,double > > > *ptr = (std::map< std::string,double,std::less< std::string >,std::allocator< std::pair< std::string const,double > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_map_string_double" "', argument " "1"" of type '" "std::map< std::string,double > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_map_string_double" "', argument " "1"" of type '" "std::map< std::string,double > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::map< std::string,double > *)new std::map< std::string,double >((std::map< std::string,double > const &)*arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, SWIG_BUILTIN_INIT |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj == Py_None ? -1 : 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return -1;
}


SWIGINTERN int _wrap_new_map_string_double(PyObject *self, PyObject *args, PyObject *kwargs) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_map_string_double")) SWIG_fail;
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_map_string_double", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_map_string_double__SWIG_1(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__lessT_std__string_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_map_string_double__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::map< std::string,double,std::less< std::string >,std::allocator< std::pair< std::string const,double > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_map_string_double__SWIG_2(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_map_string_double'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::map< std::string,double >::map(std::less< std::string > const &)\n"
    "    std::map< std::string,double >::map()\n"
    "    std::map< std::string,double >::map(std::map< std::string,double > const &)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_map_string_double_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "map_string_double_empty", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_double_empty" "', argument " "1"" of type '" "std::map< std::string,double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  {
    try {
      result = (bool)((std::map< std::string,double > const *)arg1)->empty();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_double_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< std::string,double >::size_type result;
  
  if (!SWIG_Python_UnpackTuple(args, "map_string_double_size", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_double_size" "', argument " "1"" of type '" "std::map< std::string,double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  {
    try {
      result = ((std::map< std::string,double > const *)arg1)->size();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_double_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  std::map< std::string,double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_double_swap" "', argument " "1"" of type '" "std::map< std::string,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_string_double_swap" "', argument " "2"" of type '" "std::map< std::string,double > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_string_double_swap" "', argument " "2"" of type '" "std::map< std::string,double > &""'"); 
  }
  arg2 = reinterpret_cast< std::map< std::string,double > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_double_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< std::string,double >::iterator result;
  
  if (!SWIG_Python_UnpackTuple(args, "map_string_double_begin", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_double_begin" "', argument " "1"" of type '" "std::map< std::string,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_double_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< std::string,double >::iterator result;
  
  if (!SWIG_Python_UnpackTuple(args, "map_string_double_end", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_double_end" "', argument " "1"" of type '" "std::map< std::string,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  {
    try {
      result = (arg1)->end();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_double_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< std::string,double >::reverse_iterator result;
  
  if (!SWIG_Python_UnpackTuple(args, "map_string_double_rbegin", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_double_rbegin" "', argument " "1"" of type '" "std::map< std::string,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,double >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_double_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< std::string,double >::reverse_iterator result;
  
  if (!SWIG_Python_UnpackTuple(args, "map_string_double_rend", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_double_rend" "', argument " "1"" of type '" "std::map< std::string,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,double >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_double_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args, "map_string_double_clear", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_double_clear" "', argument " "1"" of type '" "std::map< std::string,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  {
    try {
      (arg1)->clear();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_double_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< std::pair< std::string const,double > > > result;
  
  if (!SWIG_Python_UnpackTuple(args, "map_string_double_get_allocator", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_double_get_allocator" "', argument " "1"" of type '" "std::map< std::string,double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  {
    try {
      result = ((std::map< std::string,double > const *)arg1)->get_allocator();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new std::map< std::string,double >::allocator_type(static_cast< const std::map< std::string,double >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_std__pairT_std__string_const_double_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_double_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  std::map< std::string,double >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::map< std::string,double >::size_type result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_double_erase" "', argument " "1"" of type '" "std::map< std::string,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_string_double_erase" "', argument " "2"" of type '" "std::map< std::string,double >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_string_double_erase" "', argument " "2"" of type '" "std::map< std::string,double >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (arg1)->erase((std::map< std::string,double >::key_type const &)*arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_double_count(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  std::map< std::string,double >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  std::map< std::string,double >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_double_count" "', argument " "1"" of type '" "std::map< std::string,double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_string_double_count" "', argument " "2"" of type '" "std::map< std::string,double >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_string_double_count" "', argument " "2"" of type '" "std::map< std::string,double >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = ((std::map< std::string,double > const *)arg1)->count((std::map< std::string,double >::key_type const &)*arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_double_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  std::map< std::string,double >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_double_erase" "', argument " "1"" of type '" "std::map< std::string,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "map_string_double_erase" "', argument " "2"" of type '" "std::map< std::string,double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::map< std::string,double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::map< std::string,double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "map_string_double_erase" "', argument " "2"" of type '" "std::map< std::string,double >::iterator""'");
    }
  }
  {
    try {
      std_map_Sl_std_string_Sc_double_Sg__erase__SWIG_1(arg1,arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_double_erase__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  std::map< std::string,double >::iterator arg2 ;
  std::map< std::string,double >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_double_erase" "', argument " "1"" of type '" "std::map< std::string,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "map_string_double_erase" "', argument " "2"" of type '" "std::map< std::string,double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::map< std::string,double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::map< std::string,double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "map_string_double_erase" "', argument " "2"" of type '" "std::map< std::string,double >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "map_string_double_erase" "', argument " "3"" of type '" "std::map< std::string,double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::map< std::string,double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::map< std::string,double >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "map_string_double_erase" "', argument " "3"" of type '" "std::map< std::string,double >::iterator""'");
    }
  }
  {
    try {
      std_map_Sl_std_string_Sc_double_Sg__erase__SWIG_2(arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_double_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "map_string_double_erase", 0, 3, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::map< std::string,double,std::less< std::string >,std::allocator< std::pair< std::string const,double > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::map< std::string,double >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_map_string_double_erase__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::map< std::string,double,std::less< std::string >,std::allocator< std::pair< std::string const,double > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_map_string_double_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::map< std::string,double,std::less< std::string >,std::allocator< std::pair< std::string const,double > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::map< std::string,double >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::map< std::string,double >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_map_string_double_erase__SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'map_string_double_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::map< std::string,double >::erase(std::map< std::string,double >::key_type const &)\n"
    "    std::map< std::string,double >::erase(std::map< std::string,double >::iterator)\n"
    "    std::map< std::string,double >::erase(std::map< std::string,double >::iterator,std::map< std::string,double >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_map_string_double_find(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  std::map< std::string,double >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  std::map< std::string,double >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_double_find" "', argument " "1"" of type '" "std::map< std::string,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_string_double_find" "', argument " "2"" of type '" "std::map< std::string,double >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_string_double_find" "', argument " "2"" of type '" "std::map< std::string,double >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (arg1)->find((std::map< std::string,double >::key_type const &)*arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_double_lower_bound(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  std::map< std::string,double >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  std::map< std::string,double >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_double_lower_bound" "', argument " "1"" of type '" "std::map< std::string,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_string_double_lower_bound" "', argument " "2"" of type '" "std::map< std::string,double >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_string_double_lower_bound" "', argument " "2"" of type '" "std::map< std::string,double >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (arg1)->lower_bound((std::map< std::string,double >::key_type const &)*arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_double_upper_bound(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  std::map< std::string,double >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  std::map< std::string,double >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_double_upper_bound" "', argument " "1"" of type '" "std::map< std::string,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_string_double_upper_bound" "', argument " "2"" of type '" "std::map< std::string,double >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_string_double_upper_bound" "', argument " "2"" of type '" "std::map< std::string,double >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (arg1)->upper_bound((std::map< std::string,double >::key_type const &)*arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_map_string_double(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args, "delete_map_string_double", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_map_string_double" "', argument " "1"" of type '" "std::map< std::string,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  {
    try {
      delete arg1;
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_GETITERFUNC_CLOSURE(_wrap_map_string_double_iterator) /* defines _wrap_map_string_double_iterator_getiterfunc_closure */

SWIGPY_INQUIRY_CLOSURE(_wrap_map_string_double___nonzero__) /* defines _wrap_map_string_double___nonzero___inquiry_closure */

SWIGPY_LENFUNC_CLOSURE(_wrap_map_string_double___len__) /* defines _wrap_map_string_double___len___lenfunc_closure */

SWIGPY_FUNPACK_OBJOBJPROC_CLOSURE(_wrap_map_string_double___contains__) /* defines _wrap_map_string_double___contains___objobjproc_closure */

SWIGPY_GETITERFUNC_CLOSURE(_wrap_map_string_double_key_iterator) /* defines _wrap_map_string_double_key_iterator_getiterfunc_closure */

SWIGPY_OBJOBJARGPROC_CLOSURE(_wrap_map_string_double___setitem__) /* defines _wrap_map_string_double___setitem___objobjargproc_closure */

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_map_string_double) /* defines _wrap_delete_map_string_double_destructor_closure */

SWIGINTERN PyObject *_wrap_vector_string_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &self;
  if (!SWIG_Python_UnpackTuple(args, "vector_string_iterator", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_iterator" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_vector_Sl_std_string_Sg__iterator(arg1,arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_string___nonzero__", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___nonzero__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_std_string_Sg____nonzero__((std::vector< std::string > const *)arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_string___bool__", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___bool__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_std_string_Sg____bool__((std::vector< std::string > const *)arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string >::size_type result;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_string___len__", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___len__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = std_vector_Sl_std_string_Sg____len__((std::vector< std::string > const *)arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_string___getslice__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___getslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_string___getslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_string___getslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  {
    try {
      try {
        result = (std::vector< std::string,std::allocator< std::string > > *)std_vector_Sl_std_string_Sg____getslice__(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___setslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_string___setslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_string___setslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_std_string_Sg____setslice____SWIG_0(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  std::vector< std::string,std::allocator< std::string > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___setslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_string___setslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_string___setslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vector_string___setslice__" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_string___setslice__" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_std_string_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< std::string,std::allocator< std::string > > const &)*arg4);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_string___setslice__", 0, 4, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vector_string___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< std::string,std::allocator< std::string > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vector_string___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_string___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::__setslice__(std::vector< std::string >::difference_type,std::vector< std::string >::difference_type)\n"
    "    std::vector< std::string >::__setslice__(std::vector< std::string >::difference_type,std::vector< std::string >::difference_type,std::vector< std::string,std::allocator< std::string > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_string___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_string___delslice__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___delslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_string___delslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_string___delslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_std_string_Sg____delslice__(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___delitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_string___delitem__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  {
    try {
      try {
        std_vector_Sl_std_string_Sg____delitem____SWIG_0(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___getitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_string___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        result = (std::vector< std::string,std::allocator< std::string > > *)std_vector_Sl_std_string_Sg____getitem____SWIG_0(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___setitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_string___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_string___setitem__" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_string___setitem__" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_std_string_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___setitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_string___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        std_vector_Sl_std_string_Sg____setitem____SWIG_1(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___delitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_string___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        std_vector_Sl_std_string_Sg____delitem____SWIG_1(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_string___delitem__", 0, 2, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_string___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_string___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_string___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::__delitem__(std::vector< std::string >::difference_type)\n"
    "    std::vector< std::string >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_string___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___getitem__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_string___getitem__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  {
    try {
      try {
        result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg____getitem____SWIG_1((std::vector< std::string > const *)arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::string >::value_type>::category>::back_reference(resultobj, self);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_string___getitem__", 0, 2, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_string___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_string___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_string___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::__getitem__(PySliceObject *)\n"
    "    std::vector< std::string >::__getitem__(std::vector< std::string >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_string___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___setitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_string___setitem__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_string___setitem__" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_string___setitem__" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_std_string_Sg____setitem____SWIG_2(arg1,arg2,(std::string const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string___setitem____SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___setitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_string___setitem__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  {
    try {
      try {
        std_vector_Sl_std_string_Sg____setitem____SWIG_3(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_string___setitem__", 0, 3, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_string___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_string___setitem____SWIG_3(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::string,std::allocator< std::string > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_string___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_string___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_string___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::__setitem__(PySliceObject *,std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    std::vector< std::string >::__setitem__(PySliceObject *)\n"
    "    std::vector< std::string >::__setitem__(std::vector< std::string >::difference_type,std::vector< std::string >::value_type const &)\n"
    "    std::vector< std::string >::__setitem__(std::vector< std::string >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_string_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string >::value_type result;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_string_pop", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_pop" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      try {
        result = std_vector_Sl_std_string_Sg__pop(arg1);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_append" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_string_append" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_string_append" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      std_vector_Sl_std_string_Sg__append(arg1,(std::string const &)*arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN int _wrap_new_vector_string__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< std::string > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (std::vector< std::string > *)new std::vector< std::string >();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_vector_string__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< std::string > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vector_string" "', argument " "1"" of type '" "std::vector< std::string > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_string" "', argument " "1"" of type '" "std::vector< std::string > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_BUILTIN_INIT |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj == Py_None ? -1 : 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return -1;
}


SWIGINTERN PyObject *_wrap_vector_string_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_string_empty", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_empty" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = (bool)((std::vector< std::string > const *)arg1)->empty();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string >::size_type result;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_string_size", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_size" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = ((std::vector< std::string > const *)arg1)->size();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_swap" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_string_swap" "', argument " "2"" of type '" "std::vector< std::string > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_string_swap" "', argument " "2"" of type '" "std::vector< std::string > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string >::iterator result;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_string_begin", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_begin" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string >::iterator result;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_string_end", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_end" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = (arg1)->end();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string >::reverse_iterator result;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_string_rbegin", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_rbegin" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string >::reverse_iterator result;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_string_rend", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_rend" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_string_clear", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_clear" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      (arg1)->clear();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< std::string > > result;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_string_get_allocator", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_get_allocator" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = ((std::vector< std::string > const *)arg1)->get_allocator();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< std::string >::allocator_type(static_cast< const std::vector< std::string >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_std__string_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_vector_string__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_string" "', argument " "1"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::string >::size_type >(val1);
  {
    try {
      result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_vector_string_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_string_pop_back", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_pop_back" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      (arg1)->pop_back();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_resize" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_string_resize" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< std::string >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_erase" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_string_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_string_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_std_string_Sg__erase__SWIG_0(arg1,arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  std::vector< std::string >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< std::string >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_erase" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_string_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_string_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_string_erase" "', argument " "3"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_string_erase" "', argument " "3"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_std_string_Sg__erase__SWIG_1(arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_string_erase", 0, 3, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vector_string_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vector_string_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_string_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::erase(std::vector< std::string >::iterator)\n"
    "    std::vector< std::string >::erase(std::vector< std::string >::iterator,std::vector< std::string >::iterator)\n");
  return 0;
}


SWIGINTERN int _wrap_new_vector_string__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::vector< std::string > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_string" "', argument " "1"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::string >::size_type >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_vector_string" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_string" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (std::vector< std::string > *)new std::vector< std::string >(arg1,(std::vector< std::string >::value_type const &)*arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_BUILTIN_INIT |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj == Py_None ? -1 : 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return -1;
}


SWIGINTERN int _wrap_new_vector_string(PyObject *self, PyObject *args, PyObject *kwargs) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_vector_string")) SWIG_fail;
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_vector_string", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_vector_string__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vector_string__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vector_string__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_vector_string__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_vector_string'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::vector()\n"
    "    std::vector< std::string >::vector(std::vector< std::string > const &)\n"
    "    std::vector< std::string >::vector(std::vector< std::string >::size_type)\n"
    "    std::vector< std::string >::vector(std::vector< std::string >::size_type,std::vector< std::string >::value_type const &)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_vector_string_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_push_back" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_string_push_back" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_string_push_back" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string >::value_type *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_string_front", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_front" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = (std::vector< std::string >::value_type *) &((std::vector< std::string > const *)arg1)->front();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::string >::value_type>::category>::back_reference(resultobj, self);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string >::value_type *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_string_back", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_back" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = (std::vector< std::string >::value_type *) &((std::vector< std::string > const *)arg1)->back();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::string >::value_type>::category>::back_reference(resultobj, self);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_string_assign", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_assign" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_string_assign" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_string_assign" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_string_assign" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->assign(arg2,(std::vector< std::string >::value_type const &)*arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_resize" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_string_resize" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_string_resize" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_string_resize" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->resize(arg2,(std::vector< std::string >::value_type const &)*arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_string_resize", 0, 3, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_string_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_string_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_string_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::resize(std::vector< std::string >::size_type)\n"
    "    std::vector< std::string >::resize(std::vector< std::string >::size_type,std::vector< std::string >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_string_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  std::vector< std::string >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_insert" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_string_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_string_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_string_insert" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_string_insert" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = std_vector_Sl_std_string_Sg__insert__SWIG_0(arg1,arg2,(std::string const &)*arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  std::vector< std::string >::size_type arg3 ;
  std::vector< std::string >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_insert" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_string_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_string_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_string_insert" "', argument " "3"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::size_type >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vector_string_insert" "', argument " "4"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_string_insert" "', argument " "4"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      std_vector_Sl_std_string_Sg__insert__SWIG_1(arg1,arg2,arg3,(std::string const &)*arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_string_insert", 0, 4, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_string_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vector_string_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_string_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::insert(std::vector< std::string >::iterator,std::vector< std::string >::value_type const &)\n"
    "    std::vector< std::string >::insert(std::vector< std::string >::iterator,std::vector< std::string >::size_type,std::vector< std::string >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_string_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_reserve" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_string_reserve" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  {
    try {
      (arg1)->reserve(arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string >::size_type result;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_string_capacity", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_capacity" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = ((std::vector< std::string > const *)arg1)->capacity();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vector_string(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args, "delete_vector_string", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vector_string" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      delete arg1;
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_GETITERFUNC_CLOSURE(_wrap_vector_string_iterator) /* defines _wrap_vector_string_iterator_getiterfunc_closure */

SWIGPY_INQUIRY_CLOSURE(_wrap_vector_string___nonzero__) /* defines _wrap_vector_string___nonzero___inquiry_closure */

SWIGPY_LENFUNC_CLOSURE(_wrap_vector_string___len__) /* defines _wrap_vector_string___len___lenfunc_closure */

SWIGPY_BINARYFUNC_CLOSURE(_wrap_vector_string___getitem__) /* defines _wrap_vector_string___getitem___binaryfunc_closure */

SWIGPY_OBJOBJARGPROC_CLOSURE(_wrap_vector_string___setitem__) /* defines _wrap_vector_string___setitem___objobjargproc_closure */

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_vector_string) /* defines _wrap_delete_vector_string_destructor_closure */

SWIGINTERN PyObject *_wrap_vector_double_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &self;
  if (!SWIG_Python_UnpackTuple(args, "vector_double_iterator", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_iterator" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_vector_Sl_double_Sg__iterator(arg1,arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_double___nonzero__", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double___nonzero__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_double_Sg____nonzero__((std::vector< double > const *)arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_double___bool__", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double___bool__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_double_Sg____bool__((std::vector< double > const *)arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double >::size_type result;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_double___len__", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double___len__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = std_vector_Sl_double_Sg____len__((std::vector< double > const *)arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_double___getslice__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double___getslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double___getslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_double___getslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  {
    try {
      try {
        result = (std::vector< double,std::allocator< double > > *)std_vector_Sl_double_Sg____getslice__(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double___setslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double___setslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_double___setslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_double_Sg____setslice____SWIG_0(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  std::vector< double,std::allocator< double > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double___setslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double___setslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_double___setslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vector_double___setslice__" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_double___setslice__" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_double_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< double,std::allocator< double > > const &)*arg4);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_double___setslice__", 0, 4, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vector_double___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vector_double___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_double___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::__setslice__(std::vector< double >::difference_type,std::vector< double >::difference_type)\n"
    "    std::vector< double >::__setslice__(std::vector< double >::difference_type,std::vector< double >::difference_type,std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_double___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_double___delslice__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double___delslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double___delslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_double___delslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_double_Sg____delslice__(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double___delitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double___delitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  {
    try {
      try {
        std_vector_Sl_double_Sg____delitem____SWIG_0(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double___getitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        result = (std::vector< double,std::allocator< double > > *)std_vector_Sl_double_Sg____getitem____SWIG_0(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double___setitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_double___setitem__" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_double___setitem__" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_double_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double___setitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        std_vector_Sl_double_Sg____setitem____SWIG_1(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double___delitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        std_vector_Sl_double_Sg____delitem____SWIG_1(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_double___delitem__", 0, 2, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_double___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_double___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_double___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::__delitem__(std::vector< double >::difference_type)\n"
    "    std::vector< double >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_double___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double___getitem__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double___getitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  {
    try {
      try {
        result = (std::vector< double >::value_type *) &std_vector_Sl_double_Sg____getitem____SWIG_1((std::vector< double > const *)arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  (void)swig::container_owner<swig::traits<std::vector< double >::value_type>::category>::back_reference(resultobj, self);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_double___getitem__", 0, 2, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_double___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_double___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_double___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::__getitem__(PySliceObject *)\n"
    "    std::vector< double >::__getitem__(std::vector< double >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_double___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double___setitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double___setitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_double___setitem__" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      try {
        std_vector_Sl_double_Sg____setitem____SWIG_2(arg1,arg2,(double const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double___setitem____SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double___setitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double___setitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  {
    try {
      try {
        std_vector_Sl_double_Sg____setitem____SWIG_3(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_double___setitem__", 0, 3, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_double___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_double___setitem____SWIG_3(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_double___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vector_double___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_double___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::__setitem__(PySliceObject *,std::vector< double,std::allocator< double > > const &)\n"
    "    std::vector< double >::__setitem__(PySliceObject *)\n"
    "    std::vector< double >::__setitem__(std::vector< double >::difference_type,std::vector< double >::value_type const &)\n"
    "    std::vector< double >::__setitem__(std::vector< double >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_double_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double >::value_type result;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_double_pop", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_pop" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      try {
        result = (std::vector< double >::value_type)std_vector_Sl_double_Sg__pop(arg1);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_append" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double_append" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  {
    try {
      std_vector_Sl_double_Sg__append(arg1,(double const &)*arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_vector_double__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< double > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (std::vector< double > *)new std::vector< double >();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_vector_double__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< double > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vector_double" "', argument " "1"" of type '" "std::vector< double > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_double" "', argument " "1"" of type '" "std::vector< double > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_BUILTIN_INIT |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj == Py_None ? -1 : 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return -1;
}


SWIGINTERN PyObject *_wrap_vector_double_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_double_empty", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_empty" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (bool)((std::vector< double > const *)arg1)->empty();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double >::size_type result;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_double_size", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_size" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = ((std::vector< double > const *)arg1)->size();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_swap" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_double_swap" "', argument " "2"" of type '" "std::vector< double > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_double_swap" "', argument " "2"" of type '" "std::vector< double > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double >::iterator result;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_double_begin", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_begin" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double >::iterator result;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_double_end", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_end" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (arg1)->end();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double >::reverse_iterator result;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_double_rbegin", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_rbegin" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double >::reverse_iterator result;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_double_rend", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_rend" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_double_clear", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_clear" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      (arg1)->clear();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< double > > result;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_double_get_allocator", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_get_allocator" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = ((std::vector< double > const *)arg1)->get_allocator();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< double >::allocator_type(static_cast< const std::vector< double >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_vector_double__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< double > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_double" "', argument " "1"" of type '" "std::vector< double >::size_type""'");
  } 
  arg1 = static_cast< std::vector< double >::size_type >(val1);
  {
    try {
      result = (std::vector< double > *)new std::vector< double >(arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_vector_double_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_double_pop_back", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_pop_back" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      (arg1)->pop_back();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_resize" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double_resize" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< double >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_erase" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_double_Sg__erase__SWIG_0(arg1,arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  std::vector< double >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< double >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_erase" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_erase" "', argument " "3"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_erase" "', argument " "3"" of type '" "std::vector< double >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_double_Sg__erase__SWIG_1(arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_double_erase", 0, 3, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vector_double_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vector_double_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_double_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::erase(std::vector< double >::iterator)\n"
    "    std::vector< double >::erase(std::vector< double >::iterator,std::vector< double >::iterator)\n");
  return 0;
}


SWIGINTERN int _wrap_new_vector_double__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double >::size_type arg1 ;
  std::vector< double >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  std::vector< double > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_double" "', argument " "1"" of type '" "std::vector< double >::size_type""'");
  } 
  arg1 = static_cast< std::vector< double >::size_type >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_vector_double" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  {
    try {
      result = (std::vector< double > *)new std::vector< double >(arg1,(std::vector< double >::value_type const &)*arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_vector_double(PyObject *self, PyObject *args, PyObject *kwargs) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_vector_double")) SWIG_fail;
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_vector_double", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_vector_double__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vector_double__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vector_double__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_vector_double__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_vector_double'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::vector()\n"
    "    std::vector< double >::vector(std::vector< double > const &)\n"
    "    std::vector< double >::vector(std::vector< double >::size_type)\n"
    "    std::vector< double >::vector(std::vector< double >::size_type,std::vector< double >::value_type const &)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_vector_double_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_push_back" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double_push_back" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->push_back((std::vector< double >::value_type const &)*arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double >::value_type *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_double_front", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_front" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (std::vector< double >::value_type *) &((std::vector< double > const *)arg1)->front();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  (void)swig::container_owner<swig::traits<std::vector< double >::value_type>::category>::back_reference(resultobj, self);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double >::value_type *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_double_back", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_back" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (std::vector< double >::value_type *) &((std::vector< double > const *)arg1)->back();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  (void)swig::container_owner<swig::traits<std::vector< double >::value_type>::category>::back_reference(resultobj, self);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_double_assign", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_assign" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double_assign" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_double_assign" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      (arg1)->assign(arg2,(std::vector< double >::value_type const &)*arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_resize" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double_resize" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_double_resize" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      (arg1)->resize(arg2,(std::vector< double >::value_type const &)*arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_double_resize", 0, 3, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_double_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vector_double_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_double_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::resize(std::vector< double >::size_type)\n"
    "    std::vector< double >::resize(std::vector< double >::size_type,std::vector< double >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_double_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  std::vector< double >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_insert" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_double_insert" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      result = std_vector_Sl_double_Sg__insert__SWIG_0(arg1,arg2,(double const &)*arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  std::vector< double >::size_type arg3 ;
  std::vector< double >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector< double >::value_type temp4 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_insert" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_double_insert" "', argument " "3"" of type '" "std::vector< double >::size_type""'");
  } 
  arg3 = static_cast< std::vector< double >::size_type >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "vector_double_insert" "', argument " "4"" of type '" "std::vector< double >::value_type""'");
  } 
  temp4 = static_cast< std::vector< double >::value_type >(val4);
  arg4 = &temp4;
  {
    try {
      std_vector_Sl_double_Sg__insert__SWIG_1(arg1,arg2,arg3,(double const &)*arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_double_insert", 0, 4, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vector_double_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_vector_double_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_double_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::insert(std::vector< double >::iterator,std::vector< double >::value_type const &)\n"
    "    std::vector< double >::insert(std::vector< double >::iterator,std::vector< double >::size_type,std::vector< double >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_double_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_reserve" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double_reserve" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  {
    try {
      (arg1)->reserve(arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double >::size_type result;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_double_capacity", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_capacity" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = ((std::vector< double > const *)arg1)->capacity();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vector_double(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args, "delete_vector_double", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vector_double" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      delete arg1;
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_GETITERFUNC_CLOSURE(_wrap_vector_double_iterator) /* defines _wrap_vector_double_iterator_getiterfunc_closure */

SWIGPY_INQUIRY_CLOSURE(_wrap_vector_double___nonzero__) /* defines _wrap_vector_double___nonzero___inquiry_closure */

SWIGPY_LENFUNC_CLOSURE(_wrap_vector_double___len__) /* defines _wrap_vector_double___len___lenfunc_closure */

SWIGPY_BINARYFUNC_CLOSURE(_wrap_vector_double___getitem__) /* defines _wrap_vector_double___getitem___binaryfunc_closure */

SWIGPY_OBJOBJARGPROC_CLOSURE(_wrap_vector_double___setitem__) /* defines _wrap_vector_double___setitem___objobjargproc_closure */

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_vector_double) /* defines _wrap_delete_vector_double_destructor_closure */

SWIGINTERN int _wrap_new_AMPLSolverException__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  ampls::AMPLSolverException *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AMPLSolverException" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try {
      result = (ampls::AMPLSolverException *)new ampls::AMPLSolverException((char const *)arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ampls__AMPLSolverException, SWIG_BUILTIN_INIT |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj == Py_None ? -1 : 0;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return -1;
}


SWIGINTERN int _wrap_new_AMPLSolverException__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ampls::AMPLSolverException *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AMPLSolverException" "', argument " "1"" of type '" "std::string &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AMPLSolverException" "', argument " "1"" of type '" "std::string &""'"); 
  }
  arg1 = reinterpret_cast< std::string * >(argp1);
  {
    try {
      result = (ampls::AMPLSolverException *)new ampls::AMPLSolverException(*arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ampls__AMPLSolverException, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_AMPLSolverException(PyObject *self, PyObject *args, PyObject *kwargs) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_AMPLSolverException")) SWIG_fail;
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_AMPLSolverException", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_AMPLSolverException__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_AMPLSolverException__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_AMPLSolverException'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ampls::AMPLSolverException::AMPLSolverException(char const *)\n"
    "    ampls::AMPLSolverException::AMPLSolverException(std::string &)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_AMPLSolverException_format__varargs__(PyObject *self, PyObject *args, PyObject *varargs) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< ampls::AMPLSolverException > result;
  
  if (!PyArg_UnpackTuple(args, "AMPLSolverException_format", 1, 1, &obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AMPLSolverException_format" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try {
      result = ampls::AMPLSolverException::format((char const *)arg1,arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new ampls::AMPLSolverException(static_cast< const ampls::AMPLSolverException& >(result))), SWIGTYPE_p_ampls__AMPLSolverException, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AMPLSolverException_format(PyObject *self, PyObject *args) {
  PyObject *resultobj;
  PyObject *varargs;
  PyObject *newargs;
  
  newargs = PyTuple_GetSlice(args,0,1);
  varargs = PyTuple_GetSlice(args,1,PyTuple_Size(args));
  resultobj = _wrap_AMPLSolverException_format__varargs__(self,newargs,varargs);
  Py_XDECREF(newargs);
  Py_XDECREF(varargs);
  return resultobj;
}


SWIGINTERN PyObject *_wrap_delete_AMPLSolverException(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::AMPLSolverException *arg1 = (ampls::AMPLSolverException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args, "delete_AMPLSolverException", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__AMPLSolverException, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AMPLSolverException" "', argument " "1"" of type '" "ampls::AMPLSolverException *""'"); 
  }
  arg1 = reinterpret_cast< ampls::AMPLSolverException * >(argp1);
  {
    try {
      delete arg1;
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_AMPLSolverException) /* defines _wrap_delete_AMPLSolverException_destructor_closure */

SWIGINTERN PyObject *_wrap_Variant_str_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::Variant *arg1 = (ampls::Variant *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_str_set" "', argument " "1"" of type '" "ampls::Variant *""'"); 
  }
  arg1 = reinterpret_cast< ampls::Variant * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Variant_str_set" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->str = (char const *)reinterpret_cast< char* >(memcpy(new char[size], arg2, sizeof(char)*(size)));
  } else {
    arg1->str = 0;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_str_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::Variant *arg1 = (ampls::Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "Variant_str_get", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_str_get" "', argument " "1"" of type '" "ampls::Variant *""'"); 
  }
  arg1 = reinterpret_cast< ampls::Variant * >(argp1);
  result = (char *) ((arg1)->str);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_integer_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::Variant *arg1 = (ampls::Variant *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_integer_set" "', argument " "1"" of type '" "ampls::Variant *""'"); 
  }
  arg1 = reinterpret_cast< ampls::Variant * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Variant_integer_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->integer = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_integer_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::Variant *arg1 = (ampls::Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "Variant_integer_get", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_integer_get" "', argument " "1"" of type '" "ampls::Variant *""'"); 
  }
  arg1 = reinterpret_cast< ampls::Variant * >(argp1);
  result = (int) ((arg1)->integer);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_dbl_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::Variant *arg1 = (ampls::Variant *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_dbl_set" "', argument " "1"" of type '" "ampls::Variant *""'"); 
  }
  arg1 = reinterpret_cast< ampls::Variant * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Variant_dbl_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->dbl = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_dbl_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::Variant *arg1 = (ampls::Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "Variant_dbl_get", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_dbl_get" "', argument " "1"" of type '" "ampls::Variant *""'"); 
  }
  arg1 = reinterpret_cast< ampls::Variant * >(argp1);
  result = (double) ((arg1)->dbl);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_type_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::Variant *arg1 = (ampls::Variant *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_type_set" "', argument " "1"" of type '" "ampls::Variant *""'"); 
  }
  arg1 = reinterpret_cast< ampls::Variant * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Variant_type_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->type = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_type_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::Variant *arg1 = (ampls::Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "Variant_type_get", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_type_get" "', argument " "1"" of type '" "ampls::Variant *""'"); 
  }
  arg1 = reinterpret_cast< ampls::Variant * >(argp1);
  result = (int) ((arg1)->type);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_Variant__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  ampls::Variant *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (ampls::Variant *)new ampls::Variant();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ampls__Variant, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Variant__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  ampls::Variant *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Variant" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try {
      result = (ampls::Variant *)new ampls::Variant((char const *)arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ampls__Variant, SWIG_BUILTIN_INIT |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj == Py_None ? -1 : 0;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return -1;
}


SWIGINTERN int _wrap_new_Variant__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  ampls::Variant *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Variant" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (ampls::Variant *)new ampls::Variant(arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ampls__Variant, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Variant__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  ampls::Variant *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Variant" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = (ampls::Variant *)new ampls::Variant(arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ampls__Variant, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Variant(PyObject *self, PyObject *args, PyObject *kwargs) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_Variant")) SWIG_fail;
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_Variant", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Variant__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Variant__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Variant__SWIG_3(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Variant__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Variant'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ampls::Variant::Variant()\n"
    "    ampls::Variant::Variant(char const *)\n"
    "    ampls::Variant::Variant(int)\n"
    "    ampls::Variant::Variant(double)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_Variant(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::Variant *arg1 = (ampls::Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args, "delete_Variant", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__Variant, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Variant" "', argument " "1"" of type '" "ampls::Variant *""'"); 
  }
  arg1 = reinterpret_cast< ampls::Variant * >(argp1);
  {
    try {
      delete arg1;
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_Variant) /* defines _wrap_delete_Variant_destructor_closure */

SWIGINTERN PyObject *_wrap_generateArguments(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  std::vector< std::string,std::allocator< std::string > > arg2 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[2] ;
  char **result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "generateArguments", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generateArguments" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    int res = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "generateArguments" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > >""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (char **)ampls::generateArguments((char const *)arg1,arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_char, 0 |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_deleteParams(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char **arg1 = (char **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "deleteParams" "', argument " "1"" of type '" "char **""'"); 
  }
  arg1 = reinterpret_cast< char ** >(argp1);
  {
    try {
      ampls::deleteParams(arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_VarType(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  ampls::VarType *result = 0 ;
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_VarType")) SWIG_fail;
  if (!SWIG_Python_UnpackTuple(args, "new_VarType", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (ampls::VarType *)new ampls::VarType();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ampls__VarType, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_VarType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::VarType *arg1 = (ampls::VarType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args, "delete_VarType", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__VarType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VarType" "', argument " "1"" of type '" "ampls::VarType *""'"); 
  }
  arg1 = reinterpret_cast< ampls::VarType * >(argp1);
  {
    try {
      delete arg1;
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_VarType) /* defines _wrap_delete_VarType_destructor_closure */

SWIGINTERN int _wrap_new_SolverParams(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  ampls::SolverParams *result = 0 ;
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_SolverParams")) SWIG_fail;
  if (!SWIG_Python_UnpackTuple(args, "new_SolverParams", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (ampls::SolverParams *)new ampls::SolverParams();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ampls__SolverParams, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_SolverParams(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::SolverParams *arg1 = (ampls::SolverParams *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args, "delete_SolverParams", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__SolverParams, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SolverParams" "', argument " "1"" of type '" "ampls::SolverParams *""'"); 
  }
  arg1 = reinterpret_cast< ampls::SolverParams * >(argp1);
  {
    try {
      delete arg1;
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_SolverParams) /* defines _wrap_delete_SolverParams_destructor_closure */

SWIGINTERN int _wrap_new_LPAlgorithms(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  ampls::LPAlgorithms *result = 0 ;
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_LPAlgorithms")) SWIG_fail;
  if (!SWIG_Python_UnpackTuple(args, "new_LPAlgorithms", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (ampls::LPAlgorithms *)new ampls::LPAlgorithms();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ampls__LPAlgorithms, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_LPAlgorithms(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::LPAlgorithms *arg1 = (ampls::LPAlgorithms *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args, "delete_LPAlgorithms", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__LPAlgorithms, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LPAlgorithms" "', argument " "1"" of type '" "ampls::LPAlgorithms *""'"); 
  }
  arg1 = reinterpret_cast< ampls::LPAlgorithms * >(argp1);
  {
    try {
      delete arg1;
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_LPAlgorithms) /* defines _wrap_delete_LPAlgorithms_destructor_closure */

SWIGINTERN int _wrap_new_Where(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  ampls::Where *result = 0 ;
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_Where")) SWIG_fail;
  if (!SWIG_Python_UnpackTuple(args, "new_Where", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (ampls::Where *)new ampls::Where();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ampls__Where, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_Where(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::Where *arg1 = (ampls::Where *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args, "delete_Where", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__Where, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Where" "', argument " "1"" of type '" "ampls::Where *""'"); 
  }
  arg1 = reinterpret_cast< ampls::Where * >(argp1);
  {
    try {
      delete arg1;
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_Where) /* defines _wrap_delete_Where_destructor_closure */

SWIGINTERN int _wrap_new_Value(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  ampls::Value *result = 0 ;
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_Value")) SWIG_fail;
  if (!SWIG_Python_UnpackTuple(args, "new_Value", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (ampls::Value *)new ampls::Value();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ampls__Value, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_Value(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::Value *arg1 = (ampls::Value *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args, "delete_Value", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__Value, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Value" "', argument " "1"" of type '" "ampls::Value *""'"); 
  }
  arg1 = reinterpret_cast< ampls::Value * >(argp1);
  {
    try {
      delete arg1;
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_Value) /* defines _wrap_delete_Value_destructor_closure */

SWIGINTERN PyObject *_wrap_CutDirection_toString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::CutDirection::Direction arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CutDirection_toString" "', argument " "1"" of type '" "ampls::CutDirection::Direction""'");
  } 
  arg1 = static_cast< ampls::CutDirection::Direction >(val1);
  {
    try {
      result = ampls::CutDirection::toString(arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_CutDirection(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  ampls::CutDirection *result = 0 ;
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_CutDirection")) SWIG_fail;
  if (!SWIG_Python_UnpackTuple(args, "new_CutDirection", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (ampls::CutDirection *)new ampls::CutDirection();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ampls__CutDirection, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_CutDirection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::CutDirection *arg1 = (ampls::CutDirection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args, "delete_CutDirection", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__CutDirection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CutDirection" "', argument " "1"" of type '" "ampls::CutDirection *""'"); 
  }
  arg1 = reinterpret_cast< ampls::CutDirection * >(argp1);
  {
    try {
      delete arg1;
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_CutDirection) /* defines _wrap_delete_CutDirection_destructor_closure */

SWIGINTERN int _wrap_new_Status(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  ampls::Status *result = 0 ;
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_Status")) SWIG_fail;
  if (!SWIG_Python_UnpackTuple(args, "new_Status", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (ampls::Status *)new ampls::Status();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ampls__Status, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_Status(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::Status *arg1 = (ampls::Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args, "delete_Status", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__Status, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Status" "', argument " "1"" of type '" "ampls::Status *""'"); 
  }
  arg1 = reinterpret_cast< ampls::Status * >(argp1);
  {
    try {
      delete arg1;
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_Status) /* defines _wrap_delete_Status_destructor_closure */

SWIGINTERN PyObject *_wrap_Entity_name(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::Entity *arg1 = (ampls::Entity *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!SWIG_Python_UnpackTuple(args, "Entity_name", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__Entity, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Entity_name" "', argument " "1"" of type '" "ampls::Entity const *""'"); 
  }
  arg1 = reinterpret_cast< ampls::Entity * >(argp1);
  {
    try {
      result = ((ampls::Entity const *)arg1)->name();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Entity_indices(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::Entity *arg1 = (ampls::Entity *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::vector< int,std::allocator< int > > > result;
  
  if (!SWIG_Python_UnpackTuple(args, "Entity_indices", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__Entity, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Entity_indices" "', argument " "1"" of type '" "ampls::Entity const *""'"); 
  }
  arg1 = reinterpret_cast< ampls::Entity * >(argp1);
  {
    try {
      result = ((ampls::Entity const *)arg1)->indices();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< int,std::allocator< int > >(static_cast< const std::vector< int,std::allocator< int > >& >(result))), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Entity_coeffs(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::Entity *arg1 = (ampls::Entity *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double,std::allocator< double > > result;
  
  if (!SWIG_Python_UnpackTuple(args, "Entity_coeffs", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__Entity, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Entity_coeffs" "', argument " "1"" of type '" "ampls::Entity const *""'"); 
  }
  arg1 = reinterpret_cast< ampls::Entity * >(argp1);
  {
    try {
      result = ((ampls::Entity const *)arg1)->coeffs();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Entity_solverIndex__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ampls::Entity *arg1 = (ampls::Entity *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__Entity, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Entity_solverIndex" "', argument " "1"" of type '" "ampls::Entity *""'"); 
  }
  arg1 = reinterpret_cast< ampls::Entity * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Entity_solverIndex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->solverIndex(arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Entity_solverIndex__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  ampls::Entity *arg1 = (ampls::Entity *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__Entity, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Entity_solverIndex" "', argument " "1"" of type '" "ampls::Entity const *""'"); 
  }
  arg1 = reinterpret_cast< ampls::Entity * >(argp1);
  {
    try {
      result = (int)((ampls::Entity const *)arg1)->solverIndex();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Entity_solverIndex(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Entity_solverIndex", 0, 2, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ampls__Entity, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Entity_solverIndex__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ampls__Entity, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Entity_solverIndex__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Entity_solverIndex'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ampls::Entity::solverIndex(int)\n"
    "    ampls::Entity::solverIndex() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Entity_value__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ampls::Entity *arg1 = (ampls::Entity *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__Entity, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Entity_value" "', argument " "1"" of type '" "ampls::Entity *""'"); 
  }
  arg1 = reinterpret_cast< ampls::Entity * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Entity_value" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->value(arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Entity_value__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  ampls::Entity *arg1 = (ampls::Entity *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__Entity, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Entity_value" "', argument " "1"" of type '" "ampls::Entity const *""'"); 
  }
  arg1 = reinterpret_cast< ampls::Entity * >(argp1);
  {
    try {
      result = (double)((ampls::Entity const *)arg1)->value();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Entity_value(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Entity_value", 0, 2, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ampls__Entity, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Entity_value__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ampls__Entity, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Entity_value__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Entity_value'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ampls::Entity::value(double)\n"
    "    ampls::Entity::value() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Entity_toAMPLString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::Entity *arg1 = (ampls::Entity *) 0 ;
  std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > > *arg2 = 0 ;
  std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > > *arg3 = 0 ;
  ampls::impl::Records *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  std::string result;
  
  if (!SWIG_Python_UnpackTuple(args, "Entity_toAMPLString", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__Entity, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Entity_toAMPLString" "', argument " "1"" of type '" "ampls::Entity const *""'"); 
  }
  arg1 = reinterpret_cast< ampls::Entity * >(argp1);
  {
    std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > > *ptr = (std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > > *)0;
    res2 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Entity_toAMPLString" "', argument " "2"" of type '" "std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Entity_toAMPLString" "', argument " "2"" of type '" "std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > > *ptr = (std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > > *)0;
    res3 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Entity_toAMPLString" "', argument " "3"" of type '" "std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Entity_toAMPLString" "', argument " "3"" of type '" "std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > > const &""'"); 
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(swig_obj[2], &argp4, SWIGTYPE_p_ampls__impl__Records,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Entity_toAMPLString" "', argument " "4"" of type '" "ampls::impl::Records const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Entity_toAMPLString" "', argument " "4"" of type '" "ampls::impl::Records const &""'"); 
  }
  arg4 = reinterpret_cast< ampls::impl::Records * >(argp4);
  {
    try {
      result = ((ampls::Entity const *)arg1)->toAMPLString((std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > > const &)*arg2,(std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > > const &)*arg3,(ampls::impl::Records const &)*arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Entity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::Entity *arg1 = (ampls::Entity *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args, "delete_Entity", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__Entity, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Entity" "', argument " "1"" of type '" "ampls::Entity *""'"); 
  }
  arg1 = reinterpret_cast< ampls::Entity * >(argp1);
  {
    try {
      delete arg1;
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_Entity) /* defines _wrap_delete_Entity_destructor_closure */

SWIGINTERN int _wrap_new_Constraint__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  SwigValueWrapper< std::vector< int,std::allocator< int > > > arg2 ;
  std::vector< double,std::allocator< double > > arg3 ;
  ampls::CutDirection::Direction arg4 ;
  double arg5 ;
  void *argp2 ;
  int res2 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  ampls::Constraint *result = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Constraint" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Constraint" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Constraint" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > >""'");
    } else {
      std::vector< int,std::allocator< int > > * temp = reinterpret_cast< std::vector< int,std::allocator< int > > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    int res = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Constraint" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > >""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Constraint" "', argument " "4"" of type '" "ampls::CutDirection::Direction""'");
  } 
  arg4 = static_cast< ampls::CutDirection::Direction >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_Constraint" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      result = (ampls::Constraint *)new ampls::Constraint(arg1,arg2,arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ampls__Constraint, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Constraint__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  double *arg4 = (double *) 0 ;
  ampls::CutDirection::Direction arg5 ;
  double arg6 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  ampls::Constraint *result = 0 ;
  
  if ((nobjs < 6) || (nobjs > 6)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Constraint" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Constraint" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[2])) {
      int size = (int)PyList_Size(swig_obj[2]);
      int i = 0;
      arg3 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[2], i);
        if (PyInt_Check(o)) {
          arg3[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg3);
          return NULL;
        }
      }
    }
    else if (swig_obj[2] == Py_None) {
      arg3 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[3])) {
      int size = (int)PyList_Size(swig_obj[3]);
      int i = 0;
      arg4 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[3], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg4[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg4);
          return NULL;
        }
      }
    }
    else if (swig_obj[3] == Py_None) {
      arg4 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_Constraint" "', argument " "5"" of type '" "ampls::CutDirection::Direction""'");
  } 
  arg5 = static_cast< ampls::CutDirection::Direction >(val5);
  ecode6 = SWIG_AsVal_double(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_Constraint" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    try {
      result = (ampls::Constraint *)new ampls::Constraint((char const *)arg1,arg2,(int const *)arg3,(double const *)arg4,arg5,arg6);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ampls__Constraint, SWIG_BUILTIN_INIT |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    free(arg3);
  }
  {
    free(arg4);
  }
  return resultobj == Py_None ? -1 : 0;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    free(arg3);
  }
  {
    free(arg4);
  }
  return -1;
}


SWIGINTERN int _wrap_new_Constraint(PyObject *self, PyObject *args, PyObject *kwargs) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_Constraint")) SWIG_fail;
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_Constraint", 0, 6, argv))) SWIG_fail;
  --argc;
  if (argc == 5) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_Constraint__SWIG_0(self, argc, argv);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_int, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_new_Constraint__SWIG_1(self, argc, argv);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Constraint'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ampls::Constraint::Constraint(std::string,std::vector< int,std::allocator< int > >,std::vector< double,std::allocator< double > >,ampls::CutDirection::Direction,double)\n"
    "    ampls::Constraint::Constraint(char const *,int,int const *,double const *,ampls::CutDirection::Direction,double)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_Constraint_sense(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::Constraint *arg1 = (ampls::Constraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ampls::CutDirection::Direction result;
  
  if (!SWIG_Python_UnpackTuple(args, "Constraint_sense", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__Constraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Constraint_sense" "', argument " "1"" of type '" "ampls::Constraint const *""'"); 
  }
  arg1 = reinterpret_cast< ampls::Constraint * >(argp1);
  {
    try {
      result = (ampls::CutDirection::Direction)((ampls::Constraint const *)arg1)->sense();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Constraint_rhs(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::Constraint *arg1 = (ampls::Constraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "Constraint_rhs", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__Constraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Constraint_rhs" "', argument " "1"" of type '" "ampls::Constraint const *""'"); 
  }
  arg1 = reinterpret_cast< ampls::Constraint * >(argp1);
  {
    try {
      result = (double)((ampls::Constraint const *)arg1)->rhs();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Constraint_toAMPLString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::Constraint *arg1 = (ampls::Constraint *) 0 ;
  std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > > *arg2 = 0 ;
  std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > > *arg3 = 0 ;
  ampls::impl::Records *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  std::string result;
  
  if (!SWIG_Python_UnpackTuple(args, "Constraint_toAMPLString", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__Constraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Constraint_toAMPLString" "', argument " "1"" of type '" "ampls::Constraint const *""'"); 
  }
  arg1 = reinterpret_cast< ampls::Constraint * >(argp1);
  {
    std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > > *ptr = (std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > > *)0;
    res2 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Constraint_toAMPLString" "', argument " "2"" of type '" "std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Constraint_toAMPLString" "', argument " "2"" of type '" "std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > > *ptr = (std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > > *)0;
    res3 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Constraint_toAMPLString" "', argument " "3"" of type '" "std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Constraint_toAMPLString" "', argument " "3"" of type '" "std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > > const &""'"); 
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(swig_obj[2], &argp4, SWIGTYPE_p_ampls__impl__Records,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Constraint_toAMPLString" "', argument " "4"" of type '" "ampls::impl::Records const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Constraint_toAMPLString" "', argument " "4"" of type '" "ampls::impl::Records const &""'"); 
  }
  arg4 = reinterpret_cast< ampls::impl::Records * >(argp4);
  {
    try {
      result = ((ampls::Constraint const *)arg1)->toAMPLString((std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > > const &)*arg2,(std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > > const &)*arg3,(ampls::impl::Records const &)*arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Constraint(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::Constraint *arg1 = (ampls::Constraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args, "delete_Constraint", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__Constraint, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Constraint" "', argument " "1"" of type '" "ampls::Constraint *""'"); 
  }
  arg1 = reinterpret_cast< ampls::Constraint * >(argp1);
  {
    try {
      delete arg1;
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_Constraint) /* defines _wrap_delete_Constraint_destructor_closure */

SWIGINTERN int _wrap_new_Variable__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  SwigValueWrapper< std::vector< int,std::allocator< int > > > arg2 ;
  std::vector< double,std::allocator< double > > arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  ampls::VarType::Type arg7 ;
  void *argp2 ;
  int res2 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  ampls::Variable *result = 0 ;
  
  if ((nobjs < 7) || (nobjs > 7)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Variable" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Variable" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Variable" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > >""'");
    } else {
      std::vector< int,std::allocator< int > > * temp = reinterpret_cast< std::vector< int,std::allocator< int > > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    int res = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Variable" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > >""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Variable" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_Variable" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_Variable" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_int(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_Variable" "', argument " "7"" of type '" "ampls::VarType::Type""'");
  } 
  arg7 = static_cast< ampls::VarType::Type >(val7);
  {
    try {
      result = (ampls::Variable *)new ampls::Variable(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ampls__Variable, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Variable__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  double *arg4 = (double *) 0 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  ampls::VarType::Type arg8 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  ampls::Variable *result = 0 ;
  
  if ((nobjs < 8) || (nobjs > 8)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Variable" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Variable" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[2])) {
      int size = (int)PyList_Size(swig_obj[2]);
      int i = 0;
      arg3 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[2], i);
        if (PyInt_Check(o)) {
          arg3[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg3);
          return NULL;
        }
      }
    }
    else if (swig_obj[2] == Py_None) {
      arg3 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[3])) {
      int size = (int)PyList_Size(swig_obj[3]);
      int i = 0;
      arg4 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[3], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg4[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg4);
          return NULL;
        }
      }
    }
    else if (swig_obj[3] == Py_None) {
      arg4 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_Variable" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_Variable" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_Variable" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_int(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_Variable" "', argument " "8"" of type '" "ampls::VarType::Type""'");
  } 
  arg8 = static_cast< ampls::VarType::Type >(val8);
  {
    try {
      result = (ampls::Variable *)new ampls::Variable((char const *)arg1,arg2,(int const *)arg3,(double const *)arg4,arg5,arg6,arg7,arg8);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ampls__Variable, SWIG_BUILTIN_INIT |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    free(arg3);
  }
  {
    free(arg4);
  }
  return resultobj == Py_None ? -1 : 0;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    free(arg3);
  }
  {
    free(arg4);
  }
  return -1;
}


SWIGINTERN int _wrap_new_Variable(PyObject *self, PyObject *args, PyObject *kwargs) {
  Py_ssize_t argc;
  PyObject *argv[9] = {
    0
  };
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_Variable")) SWIG_fail;
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_Variable", 0, 8, argv))) SWIG_fail;
  --argc;
  if (argc == 7) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_new_Variable__SWIG_0(self, argc, argv);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_int, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_int(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_new_Variable__SWIG_1(self, argc, argv);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Variable'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ampls::Variable::Variable(std::string,std::vector< int,std::allocator< int > >,std::vector< double,std::allocator< double > >,double,double,double,ampls::VarType::Type)\n"
    "    ampls::Variable::Variable(char const *,int,int const *,double const *,double,double,double,ampls::VarType::Type)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_Variable_ub__set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::Variable *arg1 = (ampls::Variable *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__Variable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variable_ub__set" "', argument " "1"" of type '" "ampls::Variable *""'"); 
  }
  arg1 = reinterpret_cast< ampls::Variable * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Variable_ub__set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->ub_ = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variable_ub__get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::Variable *arg1 = (ampls::Variable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "Variable_ub__get", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__Variable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variable_ub__get" "', argument " "1"" of type '" "ampls::Variable *""'"); 
  }
  arg1 = reinterpret_cast< ampls::Variable * >(argp1);
  result = (double) ((arg1)->ub_);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variable_lb__set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::Variable *arg1 = (ampls::Variable *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__Variable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variable_lb__set" "', argument " "1"" of type '" "ampls::Variable *""'"); 
  }
  arg1 = reinterpret_cast< ampls::Variable * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Variable_lb__set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->lb_ = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variable_lb__get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::Variable *arg1 = (ampls::Variable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "Variable_lb__get", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__Variable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variable_lb__get" "', argument " "1"" of type '" "ampls::Variable *""'"); 
  }
  arg1 = reinterpret_cast< ampls::Variable * >(argp1);
  result = (double) ((arg1)->lb_);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variable_obj__set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::Variable *arg1 = (ampls::Variable *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__Variable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variable_obj__set" "', argument " "1"" of type '" "ampls::Variable *""'"); 
  }
  arg1 = reinterpret_cast< ampls::Variable * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Variable_obj__set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->obj_ = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variable_obj__get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::Variable *arg1 = (ampls::Variable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "Variable_obj__get", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__Variable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variable_obj__get" "', argument " "1"" of type '" "ampls::Variable *""'"); 
  }
  arg1 = reinterpret_cast< ampls::Variable * >(argp1);
  result = (double) ((arg1)->obj_);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variable_type__set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::Variable *arg1 = (ampls::Variable *) 0 ;
  ampls::VarType::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__Variable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variable_type__set" "', argument " "1"" of type '" "ampls::Variable *""'"); 
  }
  arg1 = reinterpret_cast< ampls::Variable * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Variable_type__set" "', argument " "2"" of type '" "ampls::VarType::Type""'");
  } 
  arg2 = static_cast< ampls::VarType::Type >(val2);
  if (arg1) (arg1)->type_ = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variable_type__get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::Variable *arg1 = (ampls::Variable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ampls::VarType::Type result;
  
  if (!SWIG_Python_UnpackTuple(args, "Variable_type__get", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__Variable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variable_type__get" "', argument " "1"" of type '" "ampls::Variable *""'"); 
  }
  arg1 = reinterpret_cast< ampls::Variable * >(argp1);
  result = (ampls::VarType::Type) ((arg1)->type_);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variable_toAMPLString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::Variable *arg1 = (ampls::Variable *) 0 ;
  std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > > *arg2 = 0 ;
  std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > > *arg3 = 0 ;
  ampls::impl::Records *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  std::string result;
  
  if (!SWIG_Python_UnpackTuple(args, "Variable_toAMPLString", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__Variable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variable_toAMPLString" "', argument " "1"" of type '" "ampls::Variable const *""'"); 
  }
  arg1 = reinterpret_cast< ampls::Variable * >(argp1);
  {
    std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > > *ptr = (std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > > *)0;
    res2 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Variable_toAMPLString" "', argument " "2"" of type '" "std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Variable_toAMPLString" "', argument " "2"" of type '" "std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > > *ptr = (std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > > *)0;
    res3 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Variable_toAMPLString" "', argument " "3"" of type '" "std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Variable_toAMPLString" "', argument " "3"" of type '" "std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > > const &""'"); 
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(swig_obj[2], &argp4, SWIGTYPE_p_ampls__impl__Records,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Variable_toAMPLString" "', argument " "4"" of type '" "ampls::impl::Records const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Variable_toAMPLString" "', argument " "4"" of type '" "ampls::impl::Records const &""'"); 
  }
  arg4 = reinterpret_cast< ampls::impl::Records * >(argp4);
  {
    try {
      result = ((ampls::Variable const *)arg1)->toAMPLString((std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > > const &)*arg2,(std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > > const &)*arg3,(ampls::impl::Records const &)*arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Variable(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::Variable *arg1 = (ampls::Variable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args, "delete_Variable", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__Variable, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Variable" "', argument " "1"" of type '" "ampls::Variable *""'"); 
  }
  arg1 = reinterpret_cast< ampls::Variable * >(argp1);
  {
    try {
      delete arg1;
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_Variable) /* defines _wrap_delete_Variable_destructor_closure */

SWIGINTERN int _wrap_new_Records(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  ampls::AMPLModel *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ampls::impl::Records *result = 0 ;
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_Records")) SWIG_fail;
  if (!SWIG_Python_UnpackTuple(args, "new_Records", 1, 1, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ampls__AMPLModel,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Records" "', argument " "1"" of type '" "ampls::AMPLModel &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Records" "', argument " "1"" of type '" "ampls::AMPLModel &""'"); 
  }
  arg1 = reinterpret_cast< ampls::AMPLModel * >(argp1);
  {
    try {
      result = (ampls::impl::Records *)new ampls::impl::Records(*arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ampls__impl__Records, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_Records_vars__set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::impl::Records *arg1 = (ampls::impl::Records *) 0 ;
  std::vector< ampls::Variable,std::allocator< ampls::Variable > > *arg2 = (std::vector< ampls::Variable,std::allocator< ampls::Variable > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__impl__Records, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Records_vars__set" "', argument " "1"" of type '" "ampls::impl::Records *""'"); 
  }
  arg1 = reinterpret_cast< ampls::impl::Records * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2,SWIGTYPE_p_std__vectorT_ampls__Variable_std__allocatorT_ampls__Variable_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Records_vars__set" "', argument " "2"" of type '" "std::vector< ampls::Variable,std::allocator< ampls::Variable > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ampls::Variable,std::allocator< ampls::Variable > > * >(argp2);
  if (arg1) (arg1)->vars_ = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Records_vars__get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::impl::Records *arg1 = (ampls::impl::Records *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< ampls::Variable,std::allocator< ampls::Variable > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "Records_vars__get", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__impl__Records, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Records_vars__get" "', argument " "1"" of type '" "ampls::impl::Records *""'"); 
  }
  arg1 = reinterpret_cast< ampls::impl::Records * >(argp1);
  result = (std::vector< ampls::Variable,std::allocator< ampls::Variable > > *)& ((arg1)->vars_);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ampls__Variable_std__allocatorT_ampls__Variable_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Records_cons__set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::impl::Records *arg1 = (ampls::impl::Records *) 0 ;
  std::vector< ampls::Constraint,std::allocator< ampls::Constraint > > *arg2 = (std::vector< ampls::Constraint,std::allocator< ampls::Constraint > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__impl__Records, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Records_cons__set" "', argument " "1"" of type '" "ampls::impl::Records *""'"); 
  }
  arg1 = reinterpret_cast< ampls::impl::Records * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2,SWIGTYPE_p_std__vectorT_ampls__Constraint_std__allocatorT_ampls__Constraint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Records_cons__set" "', argument " "2"" of type '" "std::vector< ampls::Constraint,std::allocator< ampls::Constraint > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ampls::Constraint,std::allocator< ampls::Constraint > > * >(argp2);
  if (arg1) (arg1)->cons_ = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Records_cons__get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::impl::Records *arg1 = (ampls::impl::Records *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< ampls::Constraint,std::allocator< ampls::Constraint > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "Records_cons__get", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__impl__Records, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Records_cons__get" "', argument " "1"" of type '" "ampls::impl::Records *""'"); 
  }
  arg1 = reinterpret_cast< ampls::impl::Records * >(argp1);
  result = (std::vector< ampls::Constraint,std::allocator< ampls::Constraint > > *)& ((arg1)->cons_);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ampls__Constraint_std__allocatorT_ampls__Constraint_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Records_entities__set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::impl::Records *arg1 = (ampls::impl::Records *) 0 ;
  std::vector< ampls::Entity *,std::allocator< ampls::Entity * > > *arg2 = (std::vector< ampls::Entity *,std::allocator< ampls::Entity * > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__impl__Records, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Records_entities__set" "', argument " "1"" of type '" "ampls::impl::Records *""'"); 
  }
  arg1 = reinterpret_cast< ampls::impl::Records * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2,SWIGTYPE_p_std__vectorT_ampls__Entity_p_std__allocatorT_ampls__Entity_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Records_entities__set" "', argument " "2"" of type '" "std::vector< ampls::Entity *,std::allocator< ampls::Entity * > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ampls::Entity *,std::allocator< ampls::Entity * > > * >(argp2);
  if (arg1) (arg1)->entities_ = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Records_entities__get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::impl::Records *arg1 = (ampls::impl::Records *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< ampls::Entity *,std::allocator< ampls::Entity * > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "Records_entities__get", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__impl__Records, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Records_entities__get" "', argument " "1"" of type '" "ampls::impl::Records *""'"); 
  }
  arg1 = reinterpret_cast< ampls::impl::Records * >(argp1);
  result = (std::vector< ampls::Entity *,std::allocator< ampls::Entity * > > *)& ((arg1)->entities_);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ampls__Entity_p_std__allocatorT_ampls__Entity_p_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Records_getRecordedEntities__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ampls::impl::Records *arg1 = (ampls::impl::Records *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  std::string result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__impl__Records, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Records_getRecordedEntities" "', argument " "1"" of type '" "ampls::impl::Records *""'"); 
  }
  arg1 = reinterpret_cast< ampls::impl::Records * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Records_getRecordedEntities" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      result = (arg1)->getRecordedEntities(arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Records_getRecordedEntities__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  ampls::impl::Records *arg1 = (ampls::impl::Records *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__impl__Records, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Records_getRecordedEntities" "', argument " "1"" of type '" "ampls::impl::Records *""'"); 
  }
  arg1 = reinterpret_cast< ampls::impl::Records * >(argp1);
  {
    try {
      result = (arg1)->getRecordedEntities();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Records_getRecordedEntities(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Records_getRecordedEntities", 0, 2, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ampls__impl__Records, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Records_getRecordedEntities__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ampls__impl__Records, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Records_getRecordedEntities__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Records_getRecordedEntities'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ampls::impl::Records::getRecordedEntities(bool)\n"
    "    ampls::impl::Records::getRecordedEntities()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Records_addVariable(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::impl::Records *arg1 = (ampls::impl::Records *) 0 ;
  ampls::Variable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__impl__Records, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Records_addVariable" "', argument " "1"" of type '" "ampls::impl::Records *""'"); 
  }
  arg1 = reinterpret_cast< ampls::impl::Records * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_ampls__Variable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Records_addVariable" "', argument " "2"" of type '" "ampls::Variable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Records_addVariable" "', argument " "2"" of type '" "ampls::Variable const &""'"); 
  }
  arg2 = reinterpret_cast< ampls::Variable * >(argp2);
  {
    try {
      (arg1)->addVariable((ampls::Variable const &)*arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Records_addConstraint(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::impl::Records *arg1 = (ampls::impl::Records *) 0 ;
  ampls::Constraint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__impl__Records, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Records_addConstraint" "', argument " "1"" of type '" "ampls::impl::Records *""'"); 
  }
  arg1 = reinterpret_cast< ampls::impl::Records * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_ampls__Constraint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Records_addConstraint" "', argument " "2"" of type '" "ampls::Constraint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Records_addConstraint" "', argument " "2"" of type '" "ampls::Constraint const &""'"); 
  }
  arg2 = reinterpret_cast< ampls::Constraint * >(argp2);
  {
    try {
      (arg1)->addConstraint((ampls::Constraint const &)*arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Records_getVarIndices(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::impl::Records *arg1 = (ampls::impl::Records *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::vector< int,std::allocator< int > > > result;
  
  if (!SWIG_Python_UnpackTuple(args, "Records_getVarIndices", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__impl__Records, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Records_getVarIndices" "', argument " "1"" of type '" "ampls::impl::Records *""'"); 
  }
  arg1 = reinterpret_cast< ampls::impl::Records * >(argp1);
  {
    try {
      result = (arg1)->getVarIndices();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< int,std::allocator< int > >(static_cast< const std::vector< int,std::allocator< int > >& >(result))), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Records_getConsIndices(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::impl::Records *arg1 = (ampls::impl::Records *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::vector< int,std::allocator< int > > > result;
  
  if (!SWIG_Python_UnpackTuple(args, "Records_getConsIndices", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__impl__Records, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Records_getConsIndices" "', argument " "1"" of type '" "ampls::impl::Records *""'"); 
  }
  arg1 = reinterpret_cast< ampls::impl::Records * >(argp1);
  {
    try {
      result = (arg1)->getConsIndices();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< int,std::allocator< int > >(static_cast< const std::vector< int,std::allocator< int > >& >(result))), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Records_getNumConstraints(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::impl::Records *arg1 = (ampls::impl::Records *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::size_t result;
  
  if (!SWIG_Python_UnpackTuple(args, "Records_getNumConstraints", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__impl__Records, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Records_getNumConstraints" "', argument " "1"" of type '" "ampls::impl::Records *""'"); 
  }
  arg1 = reinterpret_cast< ampls::impl::Records * >(argp1);
  {
    try {
      result = (arg1)->getNumConstraints();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Records_getNumVariables(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::impl::Records *arg1 = (ampls::impl::Records *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::size_t result;
  
  if (!SWIG_Python_UnpackTuple(args, "Records_getNumVariables", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__impl__Records, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Records_getNumVariables" "', argument " "1"" of type '" "ampls::impl::Records *""'"); 
  }
  arg1 = reinterpret_cast< ampls::impl::Records * >(argp1);
  {
    try {
      result = (arg1)->getNumVariables();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Records(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::impl::Records *arg1 = (ampls::impl::Records *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args, "delete_Records", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__impl__Records, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Records" "', argument " "1"" of type '" "ampls::impl::Records *""'"); 
  }
  arg1 = reinterpret_cast< ampls::impl::Records * >(argp1);
  {
    try {
      delete arg1;
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_Records) /* defines _wrap_delete_Records_destructor_closure */

SWIGINTERN int _wrap_new_AMPLMutex(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  ampls::impl::AMPLMutex *result = 0 ;
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_AMPLMutex")) SWIG_fail;
  if (!SWIG_Python_UnpackTuple(args, "new_AMPLMutex", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (ampls::impl::AMPLMutex *)new ampls::impl::AMPLMutex();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ampls__impl__AMPLMutex, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_AMPLMutex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::impl::AMPLMutex *arg1 = (ampls::impl::AMPLMutex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args, "delete_AMPLMutex", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__impl__AMPLMutex, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AMPLMutex" "', argument " "1"" of type '" "ampls::impl::AMPLMutex *""'"); 
  }
  arg1 = reinterpret_cast< ampls::impl::AMPLMutex * >(argp1);
  {
    try {
      delete arg1;
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AMPLMutex_Lock(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::impl::AMPLMutex *arg1 = (ampls::impl::AMPLMutex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args, "AMPLMutex_Lock", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__impl__AMPLMutex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AMPLMutex_Lock" "', argument " "1"" of type '" "ampls::impl::AMPLMutex *""'"); 
  }
  arg1 = reinterpret_cast< ampls::impl::AMPLMutex * >(argp1);
  {
    try {
      (arg1)->Lock();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AMPLMutex_Unlock(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::impl::AMPLMutex *arg1 = (ampls::impl::AMPLMutex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args, "AMPLMutex_Unlock", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__impl__AMPLMutex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AMPLMutex_Unlock" "', argument " "1"" of type '" "ampls::impl::AMPLMutex *""'"); 
  }
  arg1 = reinterpret_cast< ampls::impl::AMPLMutex * >(argp1);
  {
    try {
      (arg1)->Unlock();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_AMPLMutex) /* defines _wrap_delete_AMPLMutex_destructor_closure */

SWIGINTERN PyObject *_wrap_BaseCallback_record__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ampls::impl::BaseCallback *arg1 = (ampls::impl::BaseCallback *) 0 ;
  ampls::Variable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__impl__BaseCallback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseCallback_record" "', argument " "1"" of type '" "ampls::impl::BaseCallback *""'"); 
  }
  arg1 = reinterpret_cast< ampls::impl::BaseCallback * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ampls__Variable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BaseCallback_record" "', argument " "2"" of type '" "ampls::Variable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BaseCallback_record" "', argument " "2"" of type '" "ampls::Variable const &""'"); 
  }
  arg2 = reinterpret_cast< ampls::Variable * >(argp2);
  {
    try {
      (arg1)->record((ampls::Variable const &)*arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseCallback_record__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ampls::impl::BaseCallback *arg1 = (ampls::impl::BaseCallback *) 0 ;
  ampls::Constraint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__impl__BaseCallback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseCallback_record" "', argument " "1"" of type '" "ampls::impl::BaseCallback *""'"); 
  }
  arg1 = reinterpret_cast< ampls::impl::BaseCallback * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ampls__Constraint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BaseCallback_record" "', argument " "2"" of type '" "ampls::Constraint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BaseCallback_record" "', argument " "2"" of type '" "ampls::Constraint const &""'"); 
  }
  arg2 = reinterpret_cast< ampls::Constraint * >(argp2);
  {
    try {
      (arg1)->record((ampls::Constraint const &)*arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseCallback_record(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BaseCallback_record", 0, 2, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ampls__impl__BaseCallback, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ampls__Variable, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BaseCallback_record__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ampls__impl__BaseCallback, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ampls__Constraint, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BaseCallback_record__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BaseCallback_record'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ampls::impl::BaseCallback::record(ampls::Variable const &)\n"
    "    ampls::impl::BaseCallback::record(ampls::Constraint const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BaseCallback_addVariable__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ampls::impl::BaseCallback *arg1 = (ampls::impl::BaseCallback *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  double *arg4 = (double *) 0 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  ampls::VarType::Type arg8 ;
  char *arg9 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  int res9 ;
  char *buf9 = 0 ;
  int alloc9 = 0 ;
  SwigValueWrapper< ampls::Variable > result;
  
  if ((nobjs < 9) || (nobjs > 9)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__impl__BaseCallback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseCallback_addVariable" "', argument " "1"" of type '" "ampls::impl::BaseCallback *""'"); 
  }
  arg1 = reinterpret_cast< ampls::impl::BaseCallback * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BaseCallback_addVariable" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[2])) {
      int size = (int)PyList_Size(swig_obj[2]);
      int i = 0;
      arg3 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[2], i);
        if (PyInt_Check(o)) {
          arg3[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg3);
          return NULL;
        }
      }
    }
    else if (swig_obj[2] == Py_None) {
      arg3 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[3])) {
      int size = (int)PyList_Size(swig_obj[3]);
      int i = 0;
      arg4 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[3], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg4[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg4);
          return NULL;
        }
      }
    }
    else if (swig_obj[3] == Py_None) {
      arg4 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "BaseCallback_addVariable" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "BaseCallback_addVariable" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "BaseCallback_addVariable" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_int(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "BaseCallback_addVariable" "', argument " "8"" of type '" "ampls::VarType::Type""'");
  } 
  arg8 = static_cast< ampls::VarType::Type >(val8);
  res9 = SWIG_AsCharPtrAndSize(swig_obj[8], &buf9, NULL, &alloc9);
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "BaseCallback_addVariable" "', argument " "9"" of type '" "char const *""'");
  }
  arg9 = reinterpret_cast< char * >(buf9);
  {
    try {
      result = (arg1)->addVariable(arg2,(int const *)arg3,(double const *)arg4,arg5,arg6,arg7,arg8,(char const *)arg9);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new ampls::Variable(static_cast< const ampls::Variable& >(result))), SWIGTYPE_p_ampls__Variable, SWIG_POINTER_OWN |  0 );
  {
    free(arg3);
  }
  {
    free(arg4);
  }
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  return resultobj;
fail:
  {
    free(arg3);
  }
  {
    free(arg4);
  }
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseCallback_addVariable__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ampls::impl::BaseCallback *arg1 = (ampls::impl::BaseCallback *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  double *arg4 = (double *) 0 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  ampls::VarType::Type arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  SwigValueWrapper< ampls::Variable > result;
  
  if ((nobjs < 8) || (nobjs > 8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__impl__BaseCallback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseCallback_addVariable" "', argument " "1"" of type '" "ampls::impl::BaseCallback *""'"); 
  }
  arg1 = reinterpret_cast< ampls::impl::BaseCallback * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BaseCallback_addVariable" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[2])) {
      int size = (int)PyList_Size(swig_obj[2]);
      int i = 0;
      arg3 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[2], i);
        if (PyInt_Check(o)) {
          arg3[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg3);
          return NULL;
        }
      }
    }
    else if (swig_obj[2] == Py_None) {
      arg3 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[3])) {
      int size = (int)PyList_Size(swig_obj[3]);
      int i = 0;
      arg4 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[3], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg4[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg4);
          return NULL;
        }
      }
    }
    else if (swig_obj[3] == Py_None) {
      arg4 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "BaseCallback_addVariable" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "BaseCallback_addVariable" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "BaseCallback_addVariable" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_int(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "BaseCallback_addVariable" "', argument " "8"" of type '" "ampls::VarType::Type""'");
  } 
  arg8 = static_cast< ampls::VarType::Type >(val8);
  {
    try {
      result = (arg1)->addVariable(arg2,(int const *)arg3,(double const *)arg4,arg5,arg6,arg7,arg8);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new ampls::Variable(static_cast< const ampls::Variable& >(result))), SWIGTYPE_p_ampls__Variable, SWIG_POINTER_OWN |  0 );
  {
    free(arg3);
  }
  {
    free(arg4);
  }
  return resultobj;
fail:
  {
    free(arg3);
  }
  {
    free(arg4);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseCallback_addVariable__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ampls::impl::BaseCallback *arg1 = (ampls::impl::BaseCallback *) 0 ;
  double arg2 ;
  double arg3 ;
  ampls::VarType::Type arg4 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  SwigValueWrapper< ampls::Variable > result;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__impl__BaseCallback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseCallback_addVariable" "', argument " "1"" of type '" "ampls::impl::BaseCallback *""'"); 
  }
  arg1 = reinterpret_cast< ampls::impl::BaseCallback * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BaseCallback_addVariable" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BaseCallback_addVariable" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BaseCallback_addVariable" "', argument " "4"" of type '" "ampls::VarType::Type""'");
  } 
  arg4 = static_cast< ampls::VarType::Type >(val4);
  res5 = SWIG_AsCharPtrAndSize(swig_obj[4], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "BaseCallback_addVariable" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = reinterpret_cast< char * >(buf5);
  {
    try {
      result = (arg1)->addVariable(arg2,arg3,arg4,(char const *)arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new ampls::Variable(static_cast< const ampls::Variable& >(result))), SWIGTYPE_p_ampls__Variable, SWIG_POINTER_OWN |  0 );
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return resultobj;
fail:
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseCallback_addVariable__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ampls::impl::BaseCallback *arg1 = (ampls::impl::BaseCallback *) 0 ;
  double arg2 ;
  double arg3 ;
  ampls::VarType::Type arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  SwigValueWrapper< ampls::Variable > result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__impl__BaseCallback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseCallback_addVariable" "', argument " "1"" of type '" "ampls::impl::BaseCallback *""'"); 
  }
  arg1 = reinterpret_cast< ampls::impl::BaseCallback * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BaseCallback_addVariable" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BaseCallback_addVariable" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BaseCallback_addVariable" "', argument " "4"" of type '" "ampls::VarType::Type""'");
  } 
  arg4 = static_cast< ampls::VarType::Type >(val4);
  {
    try {
      result = (arg1)->addVariable(arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new ampls::Variable(static_cast< const ampls::Variable& >(result))), SWIGTYPE_p_ampls__Variable, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseCallback_addVariable(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[10] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BaseCallback_addVariable", 0, 9, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ampls__impl__BaseCallback, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_BaseCallback_addVariable__SWIG_3(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ampls__impl__BaseCallback, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_BaseCallback_addVariable__SWIG_2(self, argc, argv);
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ampls__impl__BaseCallback, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_int, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_int(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_BaseCallback_addVariable__SWIG_1(self, argc, argv);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ampls__impl__BaseCallback, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_int, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_int(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    int res = SWIG_AsCharPtrAndSize(argv[8], 0, NULL, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      return _wrap_BaseCallback_addVariable__SWIG_0(self, argc, argv);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BaseCallback_addVariable'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ampls::impl::BaseCallback::addVariable(int,int const *,double const *,double,double,double,ampls::VarType::Type,char const *)\n"
    "    ampls::impl::BaseCallback::addVariable(int,int const *,double const *,double,double,double,ampls::VarType::Type)\n"
    "    ampls::impl::BaseCallback::addVariable(double,double,ampls::VarType::Type,char const *)\n"
    "    ampls::impl::BaseCallback::addVariable(double,double,ampls::VarType::Type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BaseCallback_setDebugCuts(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::impl::BaseCallback *arg1 = (ampls::impl::BaseCallback *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  
  if (!SWIG_Python_UnpackTuple(args, "BaseCallback_setDebugCuts", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__impl__BaseCallback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseCallback_setDebugCuts" "', argument " "1"" of type '" "ampls::impl::BaseCallback *""'"); 
  }
  arg1 = reinterpret_cast< ampls::impl::BaseCallback * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BaseCallback_setDebugCuts" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BaseCallback_setDebugCuts" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_bool(swig_obj[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BaseCallback_setDebugCuts" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      (arg1)->setDebugCuts(arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseCallback_run(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::impl::BaseCallback *arg1 = (ampls::impl::BaseCallback *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "BaseCallback_run", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__impl__BaseCallback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseCallback_run" "', argument " "1"" of type '" "ampls::impl::BaseCallback *""'"); 
  }
  arg1 = reinterpret_cast< ampls::impl::BaseCallback * >(argp1);
  {
    try {
      result = (int)(arg1)->run();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BaseCallback(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::impl::BaseCallback *arg1 = (ampls::impl::BaseCallback *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args, "delete_BaseCallback", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__impl__BaseCallback, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BaseCallback" "', argument " "1"" of type '" "ampls::impl::BaseCallback *""'"); 
  }
  arg1 = reinterpret_cast< ampls::impl::BaseCallback * >(argp1);
  {
    try {
      delete arg1;
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseCallback_addCut(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::impl::BaseCallback *arg1 = (ampls::impl::BaseCallback *) 0 ;
  std::vector< std::string,std::allocator< std::string > > arg2 ;
  double *arg3 = (double *) 0 ;
  ampls::CutDirection::Direction arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  SwigValueWrapper< ampls::Constraint > result;
  
  if (!SWIG_Python_UnpackTuple(args, "BaseCallback_addCut", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__impl__BaseCallback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseCallback_addCut" "', argument " "1"" of type '" "ampls::impl::BaseCallback *""'"); 
  }
  arg1 = reinterpret_cast< ampls::impl::BaseCallback * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    int res = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BaseCallback_addCut" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > >""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[1])) {
      int size = (int)PyList_Size(swig_obj[1]);
      int i = 0;
      arg3 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[1], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg3[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg3);
          return NULL;
        }
      }
    }
    else if (swig_obj[1] == Py_None) {
      arg3 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  ecode4 = SWIG_AsVal_int(swig_obj[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BaseCallback_addCut" "', argument " "4"" of type '" "ampls::CutDirection::Direction""'");
  } 
  arg4 = static_cast< ampls::CutDirection::Direction >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "BaseCallback_addCut" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      result = (arg1)->addCut(arg2,(double const *)arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new ampls::Constraint(static_cast< const ampls::Constraint& >(result))), SWIGTYPE_p_ampls__Constraint, SWIG_POINTER_OWN |  0 );
  {
    free(arg3);
  }
  return resultobj;
fail:
  {
    free(arg3);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseCallback_addLazy(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::impl::BaseCallback *arg1 = (ampls::impl::BaseCallback *) 0 ;
  std::vector< std::string,std::allocator< std::string > > arg2 ;
  double *arg3 = (double *) 0 ;
  ampls::CutDirection::Direction arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  SwigValueWrapper< ampls::Constraint > result;
  
  if (!SWIG_Python_UnpackTuple(args, "BaseCallback_addLazy", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__impl__BaseCallback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseCallback_addLazy" "', argument " "1"" of type '" "ampls::impl::BaseCallback *""'"); 
  }
  arg1 = reinterpret_cast< ampls::impl::BaseCallback * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    int res = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BaseCallback_addLazy" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > >""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[1])) {
      int size = (int)PyList_Size(swig_obj[1]);
      int i = 0;
      arg3 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[1], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg3[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg3);
          return NULL;
        }
      }
    }
    else if (swig_obj[1] == Py_None) {
      arg3 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  ecode4 = SWIG_AsVal_int(swig_obj[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BaseCallback_addLazy" "', argument " "4"" of type '" "ampls::CutDirection::Direction""'");
  } 
  arg4 = static_cast< ampls::CutDirection::Direction >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "BaseCallback_addLazy" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      result = (arg1)->addLazy(arg2,(double const *)arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new ampls::Constraint(static_cast< const ampls::Constraint& >(result))), SWIGTYPE_p_ampls__Constraint, SWIG_POINTER_OWN |  0 );
  {
    free(arg3);
  }
  return resultobj;
fail:
  {
    free(arg3);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseCallback_addCutsIndices(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::impl::BaseCallback *arg1 = (ampls::impl::BaseCallback *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  double *arg4 = (double *) 0 ;
  ampls::CutDirection::Direction arg5 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject *swig_obj[5] ;
  SwigValueWrapper< ampls::Constraint > result;
  
  if (!SWIG_Python_UnpackTuple(args, "BaseCallback_addCutsIndices", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__impl__BaseCallback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseCallback_addCutsIndices" "', argument " "1"" of type '" "ampls::impl::BaseCallback *""'"); 
  }
  arg1 = reinterpret_cast< ampls::impl::BaseCallback * >(argp1);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[0])) {
      int size = (int)PyList_Size(swig_obj[0]);
      int i = 0;
      arg2 = size;
      arg3 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[0], i);
        if (PyInt_Check(o)) {
          arg3[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg3);
          return NULL;
        }
      }
    }
    else if (swig_obj[0] == Py_None) {
      arg3 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[1])) {
      int size = (int)PyList_Size(swig_obj[1]);
      int i = 0;
      arg4 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[1], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg4[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg4);
          return NULL;
        }
      }
    }
    else if (swig_obj[1] == Py_None) {
      arg4 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  ecode5 = SWIG_AsVal_int(swig_obj[2], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "BaseCallback_addCutsIndices" "', argument " "5"" of type '" "ampls::CutDirection::Direction""'");
  } 
  arg5 = static_cast< ampls::CutDirection::Direction >(val5);
  ecode6 = SWIG_AsVal_double(swig_obj[3], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "BaseCallback_addCutsIndices" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    try {
      result = (arg1)->addCutsIndices(arg2,(int const *)arg3,(double const *)arg4,arg5,arg6);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new ampls::Constraint(static_cast< const ampls::Constraint& >(result))), SWIGTYPE_p_ampls__Constraint, SWIG_POINTER_OWN |  0 );
  {
    free(arg3);
  }
  {
    free(arg4);
  }
  return resultobj;
fail:
  {
    free(arg3);
  }
  {
    free(arg4);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseCallback_addLazyIndices(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::impl::BaseCallback *arg1 = (ampls::impl::BaseCallback *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  double *arg4 = (double *) 0 ;
  ampls::CutDirection::Direction arg5 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject *swig_obj[5] ;
  SwigValueWrapper< ampls::Constraint > result;
  
  if (!SWIG_Python_UnpackTuple(args, "BaseCallback_addLazyIndices", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__impl__BaseCallback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseCallback_addLazyIndices" "', argument " "1"" of type '" "ampls::impl::BaseCallback *""'"); 
  }
  arg1 = reinterpret_cast< ampls::impl::BaseCallback * >(argp1);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[0])) {
      int size = (int)PyList_Size(swig_obj[0]);
      int i = 0;
      arg2 = size;
      arg3 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[0], i);
        if (PyInt_Check(o)) {
          arg3[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg3);
          return NULL;
        }
      }
    }
    else if (swig_obj[0] == Py_None) {
      arg3 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[1])) {
      int size = (int)PyList_Size(swig_obj[1]);
      int i = 0;
      arg4 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[1], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg4[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg4);
          return NULL;
        }
      }
    }
    else if (swig_obj[1] == Py_None) {
      arg4 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  ecode5 = SWIG_AsVal_int(swig_obj[2], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "BaseCallback_addLazyIndices" "', argument " "5"" of type '" "ampls::CutDirection::Direction""'");
  } 
  arg5 = static_cast< ampls::CutDirection::Direction >(val5);
  ecode6 = SWIG_AsVal_double(swig_obj[3], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "BaseCallback_addLazyIndices" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    try {
      result = (arg1)->addLazyIndices(arg2,(int const *)arg3,(double const *)arg4,arg5,arg6);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new ampls::Constraint(static_cast< const ampls::Constraint& >(result))), SWIGTYPE_p_ampls__Constraint, SWIG_POINTER_OWN |  0 );
  {
    free(arg3);
  }
  {
    free(arg4);
  }
  return resultobj;
fail:
  {
    free(arg3);
  }
  {
    free(arg4);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseCallback_getSolutionVector(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::impl::BaseCallback *arg1 = (ampls::impl::BaseCallback *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double,std::allocator< double > > result;
  
  if (!SWIG_Python_UnpackTuple(args, "BaseCallback_getSolutionVector", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__impl__BaseCallback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseCallback_getSolutionVector" "', argument " "1"" of type '" "ampls::impl::BaseCallback *""'"); 
  }
  arg1 = reinterpret_cast< ampls::impl::BaseCallback * >(argp1);
  {
    try {
      result = (arg1)->getSolutionVector();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseCallback_getSolution(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::impl::BaseCallback *arg1 = (ampls::impl::BaseCallback *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "BaseCallback_getSolution", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__impl__BaseCallback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseCallback_getSolution" "', argument " "1"" of type '" "ampls::impl::BaseCallback *""'"); 
  }
  arg1 = reinterpret_cast< ampls::impl::BaseCallback * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BaseCallback_getSolution" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[1], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BaseCallback_getSolution" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  {
    try {
      result = (int)(arg1)->getSolution(arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseCallback_getObj(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::impl::BaseCallback *arg1 = (ampls::impl::BaseCallback *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "BaseCallback_getObj", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__impl__BaseCallback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseCallback_getObj" "', argument " "1"" of type '" "ampls::impl::BaseCallback *""'"); 
  }
  arg1 = reinterpret_cast< ampls::impl::BaseCallback * >(argp1);
  {
    try {
      result = (double)(arg1)->getObj();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseCallback_getWhere(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::impl::BaseCallback *arg1 = (ampls::impl::BaseCallback *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "BaseCallback_getWhere", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__impl__BaseCallback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseCallback_getWhere" "', argument " "1"" of type '" "ampls::impl::BaseCallback *""'"); 
  }
  arg1 = reinterpret_cast< ampls::impl::BaseCallback * >(argp1);
  {
    try {
      result = (int)(arg1)->getWhere();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseCallback_getWhereString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::impl::BaseCallback *arg1 = (ampls::impl::BaseCallback *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "BaseCallback_getWhereString", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__impl__BaseCallback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseCallback_getWhereString" "', argument " "1"" of type '" "ampls::impl::BaseCallback *""'"); 
  }
  arg1 = reinterpret_cast< ampls::impl::BaseCallback * >(argp1);
  {
    try {
      result = (char *)(arg1)->getWhereString();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseCallback_getMessage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::impl::BaseCallback *arg1 = (ampls::impl::BaseCallback *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "BaseCallback_getMessage", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__impl__BaseCallback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseCallback_getMessage" "', argument " "1"" of type '" "ampls::impl::BaseCallback *""'"); 
  }
  arg1 = reinterpret_cast< ampls::impl::BaseCallback * >(argp1);
  {
    try {
      result = (char *)(arg1)->getMessage();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseCallback_getAMPLWhere(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::impl::BaseCallback *arg1 = (ampls::impl::BaseCallback *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ampls::Where::CBWhere result;
  
  if (!SWIG_Python_UnpackTuple(args, "BaseCallback_getAMPLWhere", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__impl__BaseCallback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseCallback_getAMPLWhere" "', argument " "1"" of type '" "ampls::impl::BaseCallback *""'"); 
  }
  arg1 = reinterpret_cast< ampls::impl::BaseCallback * >(argp1);
  {
    try {
      result = (ampls::Where::CBWhere)(arg1)->getAMPLWhere();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseCallback_getValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::impl::BaseCallback *arg1 = (ampls::impl::BaseCallback *) 0 ;
  ampls::Value::CBValue arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  ampls::Variant result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__impl__BaseCallback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseCallback_getValue" "', argument " "1"" of type '" "ampls::impl::BaseCallback *""'"); 
  }
  arg1 = reinterpret_cast< ampls::impl::BaseCallback * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BaseCallback_getValue" "', argument " "2"" of type '" "ampls::Value::CBValue""'");
  } 
  arg2 = static_cast< ampls::Value::CBValue >(val2);
  {
    try {
      result = (arg1)->getValue(arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new ampls::Variant(static_cast< const ampls::Variant& >(result))), SWIGTYPE_p_ampls__Variant, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseCallback_getSolutionDict(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::impl::BaseCallback *arg1 = (ampls::impl::BaseCallback *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "BaseCallback_getSolutionDict", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__impl__BaseCallback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseCallback_getSolutionDict" "', argument " "1"" of type '" "ampls::impl::BaseCallback *""'"); 
  }
  arg1 = reinterpret_cast< ampls::impl::BaseCallback * >(argp1);
  {
    try {
      result = (PyObject *)ampls_impl_BaseCallback_getSolutionDict(arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseCallback_getVarMap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::impl::BaseCallback *arg1 = (ampls::impl::BaseCallback *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "BaseCallback_getVarMap", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__impl__BaseCallback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseCallback_getVarMap" "', argument " "1"" of type '" "ampls::impl::BaseCallback *""'"); 
  }
  arg1 = reinterpret_cast< ampls::impl::BaseCallback * >(argp1);
  {
    try {
      result = (PyObject *)ampls_impl_BaseCallback_getVarMap(arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseCallback_getVarMapInverse(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::impl::BaseCallback *arg1 = (ampls::impl::BaseCallback *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "BaseCallback_getVarMapInverse", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__impl__BaseCallback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseCallback_getVarMapInverse" "', argument " "1"" of type '" "ampls::impl::BaseCallback *""'"); 
  }
  arg1 = reinterpret_cast< ampls::impl::BaseCallback * >(argp1);
  {
    try {
      result = (PyObject *)ampls_impl_BaseCallback_getVarMapInverse(arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_BaseCallback) /* defines _wrap_delete_BaseCallback_destructor_closure */

SWIGINTERN PyObject *_wrap_GenericCallback_getObj(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::GenericCallback *arg1 = (ampls::GenericCallback *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Swig::Director *director = 0;
  bool upcall = false;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "GenericCallback_getObj", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__GenericCallback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericCallback_getObj" "', argument " "1"" of type '" "ampls::GenericCallback *""'"); 
  }
  arg1 = reinterpret_cast< ampls::GenericCallback * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==self));
  try {
    {
      try {
        if (upcall) {
          result = (double)(arg1)->ampls::GenericCallback::getObj();
        } else {
          result = (double)(arg1)->getObj();
        }
      } catch(const ampls::AMPLSolverException &e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      } 
      catch(...) {
        SWIG_exception(SWIG_RuntimeError, "Unknown exception");
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GenericCallback_getWhere(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::GenericCallback *arg1 = (ampls::GenericCallback *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "GenericCallback_getWhere", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__GenericCallback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericCallback_getWhere" "', argument " "1"" of type '" "ampls::GenericCallback *""'"); 
  }
  arg1 = reinterpret_cast< ampls::GenericCallback * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==self));
  try {
    {
      try {
        if (upcall) {
          result = (int)(arg1)->ampls::GenericCallback::getWhere();
        } else {
          result = (int)(arg1)->getWhere();
        }
      } catch(const ampls::AMPLSolverException &e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      } 
      catch(...) {
        SWIG_exception(SWIG_RuntimeError, "Unknown exception");
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GenericCallback_getAMPLWhere(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::GenericCallback *arg1 = (ampls::GenericCallback *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Swig::Director *director = 0;
  bool upcall = false;
  ampls::Where::CBWhere result;
  
  if (!SWIG_Python_UnpackTuple(args, "GenericCallback_getAMPLWhere", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__GenericCallback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericCallback_getAMPLWhere" "', argument " "1"" of type '" "ampls::GenericCallback *""'"); 
  }
  arg1 = reinterpret_cast< ampls::GenericCallback * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==self));
  try {
    {
      try {
        if (upcall) {
          result = (ampls::Where::CBWhere)(arg1)->ampls::GenericCallback::getAMPLWhere();
        } else {
          result = (ampls::Where::CBWhere)(arg1)->getAMPLWhere();
        }
      } catch(const ampls::AMPLSolverException &e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      } 
      catch(...) {
        SWIG_exception(SWIG_RuntimeError, "Unknown exception");
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GenericCallback_getWhereString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::GenericCallback *arg1 = (ampls::GenericCallback *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Swig::Director *director = 0;
  bool upcall = false;
  char *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "GenericCallback_getWhereString", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__GenericCallback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericCallback_getWhereString" "', argument " "1"" of type '" "ampls::GenericCallback *""'"); 
  }
  arg1 = reinterpret_cast< ampls::GenericCallback * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==self));
  try {
    {
      try {
        if (upcall) {
          result = (char *)(arg1)->ampls::GenericCallback::getWhereString();
        } else {
          result = (char *)(arg1)->getWhereString();
        }
      } catch(const ampls::AMPLSolverException &e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      } 
      catch(...) {
        SWIG_exception(SWIG_RuntimeError, "Unknown exception");
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (director) {
    director->swig_release_ownership(SWIG_as_voidptr(result));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GenericCallback_getMessage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::GenericCallback *arg1 = (ampls::GenericCallback *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Swig::Director *director = 0;
  bool upcall = false;
  char *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "GenericCallback_getMessage", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__GenericCallback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericCallback_getMessage" "', argument " "1"" of type '" "ampls::GenericCallback *""'"); 
  }
  arg1 = reinterpret_cast< ampls::GenericCallback * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==self));
  try {
    {
      try {
        if (upcall) {
          result = (char *)(arg1)->ampls::GenericCallback::getMessage();
        } else {
          result = (char *)(arg1)->getMessage();
        }
      } catch(const ampls::AMPLSolverException &e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      } 
      catch(...) {
        SWIG_exception(SWIG_RuntimeError, "Unknown exception");
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (director) {
    director->swig_release_ownership(SWIG_as_voidptr(result));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GenericCallback_getValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::GenericCallback *arg1 = (ampls::GenericCallback *) 0 ;
  ampls::Value::CBValue arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  ampls::Variant result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__GenericCallback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericCallback_getValue" "', argument " "1"" of type '" "ampls::GenericCallback *""'"); 
  }
  arg1 = reinterpret_cast< ampls::GenericCallback * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GenericCallback_getValue" "', argument " "2"" of type '" "ampls::Value::CBValue""'");
  } 
  arg2 = static_cast< ampls::Value::CBValue >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==self));
  try {
    {
      try {
        if (upcall) {
          result = (arg1)->ampls::GenericCallback::getValue(arg2);
        } else {
          result = (arg1)->getValue(arg2);
        }
      } catch(const ampls::AMPLSolverException &e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      } 
      catch(...) {
        SWIG_exception(SWIG_RuntimeError, "Unknown exception");
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_NewPointerObj((new ampls::Variant(static_cast< const ampls::Variant& >(result))), SWIGTYPE_p_ampls__Variant, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_GenericCallback(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject *swig_obj[1] ;
  ampls::GenericCallback *result = 0 ;
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_GenericCallback")) SWIG_fail;
  if (!SWIG_Python_UnpackTuple(args, "new_GenericCallback", 0, 0, 0)) SWIG_fail;
  arg1 = self;
  {
    try {
      if ( self->ob_type != ((SwigPyClientData *)(SWIGTYPE_p_ampls__GenericCallback)->clientdata)->pytype ) {
        /* subclassed */
        result = (ampls::GenericCallback *)new SwigDirector_GenericCallback(arg1); 
      } else {
        SWIG_SetErrorMsg(PyExc_RuntimeError,"accessing abstract class or protected constructor"); 
        SWIG_fail;
      }
      
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ampls__GenericCallback, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_GenericCallback(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::GenericCallback *arg1 = (ampls::GenericCallback *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args, "delete_GenericCallback", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__GenericCallback, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GenericCallback" "', argument " "1"" of type '" "ampls::GenericCallback *""'"); 
  }
  arg1 = reinterpret_cast< ampls::GenericCallback * >(argp1);
  {
    try {
      delete arg1;
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_GenericCallback(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::GenericCallback *arg1 = (ampls::GenericCallback *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ampls__GenericCallback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_GenericCallback" "', argument " "1"" of type '" "ampls::GenericCallback *""'"); 
  }
  arg1 = reinterpret_cast< ampls::GenericCallback * >(argp1);
  {
    Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
    if (director) director->swig_disown();
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_GenericCallback) /* defines _wrap_delete_GenericCallback_destructor_closure */

SWIGINTERN PyObject *_wrap_AMPLModel_getRecordedEntities__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ampls::AMPLModel *arg1 = (ampls::AMPLModel *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  std::string result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__AMPLModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AMPLModel_getRecordedEntities" "', argument " "1"" of type '" "ampls::AMPLModel *""'"); 
  }
  arg1 = reinterpret_cast< ampls::AMPLModel * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AMPLModel_getRecordedEntities" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      result = (arg1)->getRecordedEntities(arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AMPLModel_getRecordedEntities__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  ampls::AMPLModel *arg1 = (ampls::AMPLModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__AMPLModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AMPLModel_getRecordedEntities" "', argument " "1"" of type '" "ampls::AMPLModel *""'"); 
  }
  arg1 = reinterpret_cast< ampls::AMPLModel * >(argp1);
  {
    try {
      result = (arg1)->getRecordedEntities();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AMPLModel_getRecordedEntities(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "AMPLModel_getRecordedEntities", 0, 2, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ampls__AMPLModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_AMPLModel_getRecordedEntities__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ampls__AMPLModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_AMPLModel_getRecordedEntities__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'AMPLModel_getRecordedEntities'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ampls::AMPLModel::getRecordedEntities(bool)\n"
    "    ampls::AMPLModel::getRecordedEntities()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_AMPLModel_addConstraint__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ampls::AMPLModel *arg1 = (ampls::AMPLModel *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  double *arg4 = (double *) 0 ;
  ampls::CutDirection::Direction arg5 ;
  double arg6 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  SwigValueWrapper< ampls::Constraint > result;
  
  if ((nobjs < 7) || (nobjs > 7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__AMPLModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AMPLModel_addConstraint" "', argument " "1"" of type '" "ampls::AMPLModel *""'"); 
  }
  arg1 = reinterpret_cast< ampls::AMPLModel * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AMPLModel_addConstraint" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[2])) {
      int size = (int)PyList_Size(swig_obj[2]);
      int i = 0;
      arg3 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[2], i);
        if (PyInt_Check(o)) {
          arg3[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg3);
          return NULL;
        }
      }
    }
    else if (swig_obj[2] == Py_None) {
      arg3 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[3])) {
      int size = (int)PyList_Size(swig_obj[3]);
      int i = 0;
      arg4 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[3], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg4[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg4);
          return NULL;
        }
      }
    }
    else if (swig_obj[3] == Py_None) {
      arg4 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AMPLModel_addConstraint" "', argument " "5"" of type '" "ampls::CutDirection::Direction""'");
  } 
  arg5 = static_cast< ampls::CutDirection::Direction >(val5);
  ecode6 = SWIG_AsVal_double(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "AMPLModel_addConstraint" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  res7 = SWIG_AsCharPtrAndSize(swig_obj[6], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "AMPLModel_addConstraint" "', argument " "7"" of type '" "char const *""'");
  }
  arg7 = reinterpret_cast< char * >(buf7);
  {
    try {
      result = (arg1)->addConstraint(arg2,(int const *)arg3,(double const *)arg4,arg5,arg6,(char const *)arg7);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new ampls::Constraint(static_cast< const ampls::Constraint& >(result))), SWIGTYPE_p_ampls__Constraint, SWIG_POINTER_OWN |  0 );
  {
    free(arg3);
  }
  {
    free(arg4);
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return resultobj;
fail:
  {
    free(arg3);
  }
  {
    free(arg4);
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AMPLModel_addConstraint__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ampls::AMPLModel *arg1 = (ampls::AMPLModel *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  double *arg4 = (double *) 0 ;
  ampls::CutDirection::Direction arg5 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  SwigValueWrapper< ampls::Constraint > result;
  
  if ((nobjs < 6) || (nobjs > 6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__AMPLModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AMPLModel_addConstraint" "', argument " "1"" of type '" "ampls::AMPLModel *""'"); 
  }
  arg1 = reinterpret_cast< ampls::AMPLModel * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AMPLModel_addConstraint" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[2])) {
      int size = (int)PyList_Size(swig_obj[2]);
      int i = 0;
      arg3 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[2], i);
        if (PyInt_Check(o)) {
          arg3[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg3);
          return NULL;
        }
      }
    }
    else if (swig_obj[2] == Py_None) {
      arg3 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[3])) {
      int size = (int)PyList_Size(swig_obj[3]);
      int i = 0;
      arg4 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[3], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg4[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg4);
          return NULL;
        }
      }
    }
    else if (swig_obj[3] == Py_None) {
      arg4 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AMPLModel_addConstraint" "', argument " "5"" of type '" "ampls::CutDirection::Direction""'");
  } 
  arg5 = static_cast< ampls::CutDirection::Direction >(val5);
  ecode6 = SWIG_AsVal_double(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "AMPLModel_addConstraint" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    try {
      result = (arg1)->addConstraint(arg2,(int const *)arg3,(double const *)arg4,arg5,arg6);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new ampls::Constraint(static_cast< const ampls::Constraint& >(result))), SWIGTYPE_p_ampls__Constraint, SWIG_POINTER_OWN |  0 );
  {
    free(arg3);
  }
  {
    free(arg4);
  }
  return resultobj;
fail:
  {
    free(arg3);
  }
  {
    free(arg4);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_AMPLModel_addConstraint(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[8] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "AMPLModel_addConstraint", 0, 7, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ampls__AMPLModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_int, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_AMPLModel_addConstraint__SWIG_1(self, argc, argv);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ampls__AMPLModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_int, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_AMPLModel_addConstraint__SWIG_0(self, argc, argv);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'AMPLModel_addConstraint'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ampls::AMPLModel::addConstraint(int,int const *,double const *,ampls::CutDirection::Direction,double,char const *)\n"
    "    ampls::AMPLModel::addConstraint(int,int const *,double const *,ampls::CutDirection::Direction,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_AMPLModel_record__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ampls::AMPLModel *arg1 = (ampls::AMPLModel *) 0 ;
  ampls::Constraint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__AMPLModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AMPLModel_record" "', argument " "1"" of type '" "ampls::AMPLModel *""'"); 
  }
  arg1 = reinterpret_cast< ampls::AMPLModel * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ampls__Constraint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AMPLModel_record" "', argument " "2"" of type '" "ampls::Constraint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AMPLModel_record" "', argument " "2"" of type '" "ampls::Constraint const &""'"); 
  }
  arg2 = reinterpret_cast< ampls::Constraint * >(argp2);
  {
    try {
      (arg1)->record((ampls::Constraint const &)*arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AMPLModel_record__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ampls::AMPLModel *arg1 = (ampls::AMPLModel *) 0 ;
  ampls::Variable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__AMPLModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AMPLModel_record" "', argument " "1"" of type '" "ampls::AMPLModel *""'"); 
  }
  arg1 = reinterpret_cast< ampls::AMPLModel * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ampls__Variable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AMPLModel_record" "', argument " "2"" of type '" "ampls::Variable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AMPLModel_record" "', argument " "2"" of type '" "ampls::Variable const &""'"); 
  }
  arg2 = reinterpret_cast< ampls::Variable * >(argp2);
  {
    try {
      (arg1)->record((ampls::Variable const &)*arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AMPLModel_record(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "AMPLModel_record", 0, 2, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ampls__AMPLModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ampls__Constraint, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_AMPLModel_record__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ampls__AMPLModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ampls__Variable, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_AMPLModel_record__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'AMPLModel_record'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ampls::AMPLModel::record(ampls::Constraint const &)\n"
    "    ampls::AMPLModel::record(ampls::Variable const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_AMPLModel_addVariable__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ampls::AMPLModel *arg1 = (ampls::AMPLModel *) 0 ;
  double arg2 ;
  double arg3 ;
  ampls::VarType::Type arg4 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  SwigValueWrapper< ampls::Variable > result;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__AMPLModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AMPLModel_addVariable" "', argument " "1"" of type '" "ampls::AMPLModel *""'"); 
  }
  arg1 = reinterpret_cast< ampls::AMPLModel * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AMPLModel_addVariable" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AMPLModel_addVariable" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AMPLModel_addVariable" "', argument " "4"" of type '" "ampls::VarType::Type""'");
  } 
  arg4 = static_cast< ampls::VarType::Type >(val4);
  res5 = SWIG_AsCharPtrAndSize(swig_obj[4], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "AMPLModel_addVariable" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = reinterpret_cast< char * >(buf5);
  {
    try {
      result = (arg1)->addVariable(arg2,arg3,arg4,(char const *)arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new ampls::Variable(static_cast< const ampls::Variable& >(result))), SWIGTYPE_p_ampls__Variable, SWIG_POINTER_OWN |  0 );
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return resultobj;
fail:
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AMPLModel_addVariable__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ampls::AMPLModel *arg1 = (ampls::AMPLModel *) 0 ;
  double arg2 ;
  double arg3 ;
  ampls::VarType::Type arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  SwigValueWrapper< ampls::Variable > result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__AMPLModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AMPLModel_addVariable" "', argument " "1"" of type '" "ampls::AMPLModel *""'"); 
  }
  arg1 = reinterpret_cast< ampls::AMPLModel * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AMPLModel_addVariable" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AMPLModel_addVariable" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AMPLModel_addVariable" "', argument " "4"" of type '" "ampls::VarType::Type""'");
  } 
  arg4 = static_cast< ampls::VarType::Type >(val4);
  {
    try {
      result = (arg1)->addVariable(arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new ampls::Variable(static_cast< const ampls::Variable& >(result))), SWIGTYPE_p_ampls__Variable, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AMPLModel_addVariable__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ampls::AMPLModel *arg1 = (ampls::AMPLModel *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  double *arg4 = (double *) 0 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  ampls::VarType::Type arg8 ;
  char *arg9 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  int res9 ;
  char *buf9 = 0 ;
  int alloc9 = 0 ;
  SwigValueWrapper< ampls::Variable > result;
  
  if ((nobjs < 9) || (nobjs > 9)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__AMPLModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AMPLModel_addVariable" "', argument " "1"" of type '" "ampls::AMPLModel *""'"); 
  }
  arg1 = reinterpret_cast< ampls::AMPLModel * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AMPLModel_addVariable" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[2])) {
      int size = (int)PyList_Size(swig_obj[2]);
      int i = 0;
      arg3 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[2], i);
        if (PyInt_Check(o)) {
          arg3[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg3);
          return NULL;
        }
      }
    }
    else if (swig_obj[2] == Py_None) {
      arg3 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[3])) {
      int size = (int)PyList_Size(swig_obj[3]);
      int i = 0;
      arg4 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[3], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg4[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg4);
          return NULL;
        }
      }
    }
    else if (swig_obj[3] == Py_None) {
      arg4 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AMPLModel_addVariable" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "AMPLModel_addVariable" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "AMPLModel_addVariable" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_int(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "AMPLModel_addVariable" "', argument " "8"" of type '" "ampls::VarType::Type""'");
  } 
  arg8 = static_cast< ampls::VarType::Type >(val8);
  res9 = SWIG_AsCharPtrAndSize(swig_obj[8], &buf9, NULL, &alloc9);
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "AMPLModel_addVariable" "', argument " "9"" of type '" "char const *""'");
  }
  arg9 = reinterpret_cast< char * >(buf9);
  {
    try {
      result = (arg1)->addVariable(arg2,(int const *)arg3,(double const *)arg4,arg5,arg6,arg7,arg8,(char const *)arg9);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new ampls::Variable(static_cast< const ampls::Variable& >(result))), SWIGTYPE_p_ampls__Variable, SWIG_POINTER_OWN |  0 );
  {
    free(arg3);
  }
  {
    free(arg4);
  }
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  return resultobj;
fail:
  {
    free(arg3);
  }
  {
    free(arg4);
  }
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AMPLModel_addVariable__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ampls::AMPLModel *arg1 = (ampls::AMPLModel *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  double *arg4 = (double *) 0 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  ampls::VarType::Type arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  SwigValueWrapper< ampls::Variable > result;
  
  if ((nobjs < 8) || (nobjs > 8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__AMPLModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AMPLModel_addVariable" "', argument " "1"" of type '" "ampls::AMPLModel *""'"); 
  }
  arg1 = reinterpret_cast< ampls::AMPLModel * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AMPLModel_addVariable" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[2])) {
      int size = (int)PyList_Size(swig_obj[2]);
      int i = 0;
      arg3 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[2], i);
        if (PyInt_Check(o)) {
          arg3[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg3);
          return NULL;
        }
      }
    }
    else if (swig_obj[2] == Py_None) {
      arg3 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[3])) {
      int size = (int)PyList_Size(swig_obj[3]);
      int i = 0;
      arg4 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[3], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg4[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg4);
          return NULL;
        }
      }
    }
    else if (swig_obj[3] == Py_None) {
      arg4 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AMPLModel_addVariable" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "AMPLModel_addVariable" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "AMPLModel_addVariable" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_int(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "AMPLModel_addVariable" "', argument " "8"" of type '" "ampls::VarType::Type""'");
  } 
  arg8 = static_cast< ampls::VarType::Type >(val8);
  {
    try {
      result = (arg1)->addVariable(arg2,(int const *)arg3,(double const *)arg4,arg5,arg6,arg7,arg8);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new ampls::Variable(static_cast< const ampls::Variable& >(result))), SWIGTYPE_p_ampls__Variable, SWIG_POINTER_OWN |  0 );
  {
    free(arg3);
  }
  {
    free(arg4);
  }
  return resultobj;
fail:
  {
    free(arg3);
  }
  {
    free(arg4);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_AMPLModel_addVariable(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[10] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "AMPLModel_addVariable", 0, 9, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ampls__AMPLModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_AMPLModel_addVariable__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ampls__AMPLModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_AMPLModel_addVariable__SWIG_0(self, argc, argv);
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ampls__AMPLModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_int, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_int(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_AMPLModel_addVariable__SWIG_3(self, argc, argv);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ampls__AMPLModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_int, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_int(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    int res = SWIG_AsCharPtrAndSize(argv[8], 0, NULL, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      return _wrap_AMPLModel_addVariable__SWIG_2(self, argc, argv);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'AMPLModel_addVariable'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ampls::AMPLModel::addVariable(double,double,ampls::VarType::Type,char const *)\n"
    "    ampls::AMPLModel::addVariable(double,double,ampls::VarType::Type)\n"
    "    ampls::AMPLModel::addVariable(int,int const *,double const *,double,double,double,ampls::VarType::Type,char const *)\n"
    "    ampls::AMPLModel::addVariable(int,int const *,double const *,double,double,double,ampls::VarType::Type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_AMPLModel_getFileName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::AMPLModel *arg1 = (ampls::AMPLModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!SWIG_Python_UnpackTuple(args, "AMPLModel_getFileName", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__AMPLModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AMPLModel_getFileName" "', argument " "1"" of type '" "ampls::AMPLModel *""'"); 
  }
  arg1 = reinterpret_cast< ampls::AMPLModel * >(argp1);
  {
    try {
      result = (arg1)->getFileName();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_AMPLModel__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ampls::AMPLModel *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ampls::AMPLModel *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ampls__AMPLModel,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AMPLModel" "', argument " "1"" of type '" "ampls::AMPLModel const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AMPLModel" "', argument " "1"" of type '" "ampls::AMPLModel const &""'"); 
  }
  arg1 = reinterpret_cast< ampls::AMPLModel * >(argp1);
  {
    try {
      result = (ampls::AMPLModel *)new ampls::AMPLModel((ampls::AMPLModel const &)*arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ampls__AMPLModel, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_AMPLModel(PyObject *self, PyObject *args, PyObject *kwargs) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_AMPLModel")) SWIG_fail;
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_AMPLModel", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ampls__AMPLModel, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_AMPLModel__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_AMPLModel'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ampls::AMPLModel::AMPLModel(ampls::AMPLModel const &)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_AMPLModel_getConsMapInverse(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::AMPLModel *arg1 = (ampls::AMPLModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > > result;
  
  if (!SWIG_Python_UnpackTuple(args, "AMPLModel_getConsMapInverse", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__AMPLModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AMPLModel_getConsMapInverse" "', argument " "1"" of type '" "ampls::AMPLModel *""'"); 
  }
  arg1 = reinterpret_cast< ampls::AMPLModel * >(argp1);
  {
    try {
      result = (arg1)->getConsMapInverse();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = swig::from(static_cast< std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AMPLModel_getConsMap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::AMPLModel *arg1 = (ampls::AMPLModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< std::string,int,std::less< std::string >,std::allocator< std::pair< std::string const,int > > > result;
  
  if (!SWIG_Python_UnpackTuple(args, "AMPLModel_getConsMap", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__AMPLModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AMPLModel_getConsMap" "', argument " "1"" of type '" "ampls::AMPLModel *""'"); 
  }
  arg1 = reinterpret_cast< ampls::AMPLModel * >(argp1);
  {
    try {
      result = (arg1)->getConsMap();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = swig::from(static_cast< std::map< std::string,int,std::less< std::string >,std::allocator< std::pair< std::string const,int > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AMPLModel_getConsMapFiltered(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::AMPLModel *arg1 = (ampls::AMPLModel *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  std::map< std::string,int,std::less< std::string >,std::allocator< std::pair< std::string const,int > > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__AMPLModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AMPLModel_getConsMapFiltered" "', argument " "1"" of type '" "ampls::AMPLModel *""'"); 
  }
  arg1 = reinterpret_cast< ampls::AMPLModel * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AMPLModel_getConsMapFiltered" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      result = (arg1)->getConsMapFiltered((char const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = swig::from(static_cast< std::map< std::string,int,std::less< std::string >,std::allocator< std::pair< std::string const,int > > > >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AMPLModel_setCallback__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ampls::AMPLModel *arg1 = (ampls::AMPLModel *) 0 ;
  ampls::GenericCallback *arg2 = (ampls::GenericCallback *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__AMPLModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AMPLModel_setCallback" "', argument " "1"" of type '" "ampls::AMPLModel *""'"); 
  }
  arg1 = reinterpret_cast< ampls::AMPLModel * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_ampls__GenericCallback, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AMPLModel_setCallback" "', argument " "2"" of type '" "ampls::GenericCallback *""'"); 
  }
  arg2 = reinterpret_cast< ampls::GenericCallback * >(argp2);
  {
    try {
      result = (int)(arg1)->setCallback(arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AMPLModel_setCallback__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ampls::AMPLModel *arg1 = (ampls::AMPLModel *) 0 ;
  ampls::impl::BaseCallback *arg2 = (ampls::impl::BaseCallback *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__AMPLModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AMPLModel_setCallback" "', argument " "1"" of type '" "ampls::AMPLModel *""'"); 
  }
  arg1 = reinterpret_cast< ampls::AMPLModel * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_ampls__impl__BaseCallback, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AMPLModel_setCallback" "', argument " "2"" of type '" "ampls::impl::BaseCallback *""'"); 
  }
  arg2 = reinterpret_cast< ampls::impl::BaseCallback * >(argp2);
  {
    try {
      result = (int)(arg1)->setCallback(arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AMPLModel_setCallback(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "AMPLModel_setCallback", 0, 2, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ampls__AMPLModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ampls__GenericCallback, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_AMPLModel_setCallback__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ampls__AMPLModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ampls__impl__BaseCallback, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_AMPLModel_setCallback__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'AMPLModel_setCallback'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ampls::AMPLModel::setCallback(ampls::GenericCallback *)\n"
    "    ampls::AMPLModel::setCallback(ampls::impl::BaseCallback *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_AMPLModel_getSolutionVector(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::AMPLModel *arg1 = (ampls::AMPLModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double,std::allocator< double > > result;
  
  if (!SWIG_Python_UnpackTuple(args, "AMPLModel_getSolutionVector", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__AMPLModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AMPLModel_getSolutionVector" "', argument " "1"" of type '" "ampls::AMPLModel *""'"); 
  }
  arg1 = reinterpret_cast< ampls::AMPLModel * >(argp1);
  {
    try {
      result = (arg1)->getSolutionVector();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AMPLModel_getNumVars(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::AMPLModel *arg1 = (ampls::AMPLModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "AMPLModel_getNumVars", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__AMPLModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AMPLModel_getNumVars" "', argument " "1"" of type '" "ampls::AMPLModel *""'"); 
  }
  arg1 = reinterpret_cast< ampls::AMPLModel * >(argp1);
  {
    try {
      result = (int)(arg1)->getNumVars();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AMPLModel_getNumCons(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::AMPLModel *arg1 = (ampls::AMPLModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "AMPLModel_getNumCons", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__AMPLModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AMPLModel_getNumCons" "', argument " "1"" of type '" "ampls::AMPLModel *""'"); 
  }
  arg1 = reinterpret_cast< ampls::AMPLModel * >(argp1);
  {
    try {
      result = (int)(arg1)->getNumCons();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AMPLModel_getStatus(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::AMPLModel *arg1 = (ampls::AMPLModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ampls::Status::SolStatus result;
  
  if (!SWIG_Python_UnpackTuple(args, "AMPLModel_getStatus", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__AMPLModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AMPLModel_getStatus" "', argument " "1"" of type '" "ampls::AMPLModel *""'"); 
  }
  arg1 = reinterpret_cast< ampls::AMPLModel * >(argp1);
  {
    try {
      result = (ampls::Status::SolStatus)(arg1)->getStatus();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AMPLModel_optimize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::AMPLModel *arg1 = (ampls::AMPLModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "AMPLModel_optimize", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__AMPLModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AMPLModel_optimize" "', argument " "1"" of type '" "ampls::AMPLModel *""'"); 
  }
  arg1 = reinterpret_cast< ampls::AMPLModel * >(argp1);
  {
    try {
      result = (int)(arg1)->optimize();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AMPLModel_writeSol__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  ampls::AMPLModel *arg1 = (ampls::AMPLModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__AMPLModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AMPLModel_writeSol" "', argument " "1"" of type '" "ampls::AMPLModel *""'"); 
  }
  arg1 = reinterpret_cast< ampls::AMPLModel * >(argp1);
  {
    try {
      (arg1)->writeSol();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AMPLModel_writeSol__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ampls::AMPLModel *arg1 = (ampls::AMPLModel *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__AMPLModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AMPLModel_writeSol" "', argument " "1"" of type '" "ampls::AMPLModel *""'"); 
  }
  arg1 = reinterpret_cast< ampls::AMPLModel * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AMPLModel_writeSol" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      (arg1)->writeSol((char const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AMPLModel_writeSol(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "AMPLModel_writeSol", 0, 2, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ampls__AMPLModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_AMPLModel_writeSol__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ampls__AMPLModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_AMPLModel_writeSol__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'AMPLModel_writeSol'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ampls::AMPLModel::writeSol()\n"
    "    ampls::AMPLModel::writeSol(char const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_AMPLModel_getSolution(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::AMPLModel *arg1 = (ampls::AMPLModel *) 0 ;
  int arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "AMPLModel_getSolution", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__AMPLModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AMPLModel_getSolution" "', argument " "1"" of type '" "ampls::AMPLModel *""'"); 
  }
  arg1 = reinterpret_cast< ampls::AMPLModel * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AMPLModel_getSolution" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AMPLModel_getSolution" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[2], &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AMPLModel_getSolution" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  {
    try {
      result = (int)(arg1)->getSolution(arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AMPLModel_getObj(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::AMPLModel *arg1 = (ampls::AMPLModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "AMPLModel_getObj", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__AMPLModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AMPLModel_getObj" "', argument " "1"" of type '" "ampls::AMPLModel *""'"); 
  }
  arg1 = reinterpret_cast< ampls::AMPLModel * >(argp1);
  {
    try {
      result = (double)(arg1)->getObj();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AMPLModel_error(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::AMPLModel *arg1 = (ampls::AMPLModel *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__AMPLModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AMPLModel_error" "', argument " "1"" of type '" "ampls::AMPLModel *""'"); 
  }
  arg1 = reinterpret_cast< ampls::AMPLModel * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AMPLModel_error" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (arg1)->error(arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AMPLModel_enableLazyConstraints(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::AMPLModel *arg1 = (ampls::AMPLModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args, "AMPLModel_enableLazyConstraints", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__AMPLModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AMPLModel_enableLazyConstraints" "', argument " "1"" of type '" "ampls::AMPLModel *""'"); 
  }
  arg1 = reinterpret_cast< ampls::AMPLModel * >(argp1);
  {
    try {
      (arg1)->enableLazyConstraints();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AMPLModel_printModelVars(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::AMPLModel *arg1 = (ampls::AMPLModel *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__AMPLModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AMPLModel_printModelVars" "', argument " "1"" of type '" "ampls::AMPLModel *""'"); 
  }
  arg1 = reinterpret_cast< ampls::AMPLModel * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AMPLModel_printModelVars" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->printModelVars(arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AMPLModel_setAMPLsParameter__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ampls::AMPLModel *arg1 = (ampls::AMPLModel *) 0 ;
  ampls::SolverParams::SolverParameters arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__AMPLModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AMPLModel_setAMPLsParameter" "', argument " "1"" of type '" "ampls::AMPLModel *""'"); 
  }
  arg1 = reinterpret_cast< ampls::AMPLModel * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AMPLModel_setAMPLsParameter" "', argument " "2"" of type '" "ampls::SolverParams::SolverParameters""'");
  } 
  arg2 = static_cast< ampls::SolverParams::SolverParameters >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AMPLModel_setAMPLsParameter" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->setAMPLsParameter(arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AMPLModel_setAMPLsParameter__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ampls::AMPLModel *arg1 = (ampls::AMPLModel *) 0 ;
  ampls::SolverParams::SolverParameters arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__AMPLModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AMPLModel_setAMPLsParameter" "', argument " "1"" of type '" "ampls::AMPLModel *""'"); 
  }
  arg1 = reinterpret_cast< ampls::AMPLModel * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AMPLModel_setAMPLsParameter" "', argument " "2"" of type '" "ampls::SolverParams::SolverParameters""'");
  } 
  arg2 = static_cast< ampls::SolverParams::SolverParameters >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AMPLModel_setAMPLsParameter" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      (arg1)->setAMPLsParameter(arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AMPLModel_setAMPLsParameter(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "AMPLModel_setAMPLsParameter", 0, 3, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ampls__AMPLModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_AMPLModel_setAMPLsParameter__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ampls__AMPLModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_AMPLModel_setAMPLsParameter__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'AMPLModel_setAMPLsParameter'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ampls::AMPLModel::setAMPLsParameter(ampls::SolverParams::SolverParameters,int)\n"
    "    ampls::AMPLModel::setAMPLsParameter(ampls::SolverParams::SolverParameters,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_AMPLModel_getAMPLsIntParameter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::AMPLModel *arg1 = (ampls::AMPLModel *) 0 ;
  ampls::SolverParams::SolverParameters arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__AMPLModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AMPLModel_getAMPLsIntParameter" "', argument " "1"" of type '" "ampls::AMPLModel *""'"); 
  }
  arg1 = reinterpret_cast< ampls::AMPLModel * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AMPLModel_getAMPLsIntParameter" "', argument " "2"" of type '" "ampls::SolverParams::SolverParameters""'");
  } 
  arg2 = static_cast< ampls::SolverParams::SolverParameters >(val2);
  {
    try {
      result = (int)(arg1)->getAMPLsIntParameter(arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AMPLModel_getAMPLsDoubleParameter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::AMPLModel *arg1 = (ampls::AMPLModel *) 0 ;
  ampls::SolverParams::SolverParameters arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__AMPLModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AMPLModel_getAMPLsDoubleParameter" "', argument " "1"" of type '" "ampls::AMPLModel *""'"); 
  }
  arg1 = reinterpret_cast< ampls::AMPLModel * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AMPLModel_getAMPLsDoubleParameter" "', argument " "2"" of type '" "ampls::SolverParams::SolverParameters""'");
  } 
  arg2 = static_cast< ampls::SolverParams::SolverParameters >(val2);
  {
    try {
      result = (double)(arg1)->getAMPLsDoubleParameter(arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AMPLModel_getSolutionDict(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::AMPLModel *arg1 = (ampls::AMPLModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "AMPLModel_getSolutionDict", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__AMPLModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AMPLModel_getSolutionDict" "', argument " "1"" of type '" "ampls::AMPLModel *""'"); 
  }
  arg1 = reinterpret_cast< ampls::AMPLModel * >(argp1);
  {
    try {
      result = (PyObject *)ampls_AMPLModel_getSolutionDict(arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AMPLModel_getVarMap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::AMPLModel *arg1 = (ampls::AMPLModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "AMPLModel_getVarMap", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__AMPLModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AMPLModel_getVarMap" "', argument " "1"" of type '" "ampls::AMPLModel *""'"); 
  }
  arg1 = reinterpret_cast< ampls::AMPLModel * >(argp1);
  {
    try {
      result = (PyObject *)ampls_AMPLModel_getVarMap(arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AMPLModel_getVarMapFiltered(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::AMPLModel *arg1 = (ampls::AMPLModel *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__AMPLModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AMPLModel_getVarMapFiltered" "', argument " "1"" of type '" "ampls::AMPLModel *""'"); 
  }
  arg1 = reinterpret_cast< ampls::AMPLModel * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AMPLModel_getVarMapFiltered" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      result = (PyObject *)ampls_AMPLModel_getVarMapFiltered(arg1,(char const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = result;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AMPLModel_getVarMapInverse(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::AMPLModel *arg1 = (ampls::AMPLModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "AMPLModel_getVarMapInverse", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__AMPLModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AMPLModel_getVarMapInverse" "', argument " "1"" of type '" "ampls::AMPLModel *""'"); 
  }
  arg1 = reinterpret_cast< ampls::AMPLModel * >(argp1);
  {
    try {
      result = (PyObject *)ampls_AMPLModel_getVarMapInverse(arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_AMPLModel(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::AMPLModel *arg1 = (ampls::AMPLModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args, "delete_AMPLModel", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__AMPLModel, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AMPLModel" "', argument " "1"" of type '" "ampls::AMPLModel *""'"); 
  }
  arg1 = reinterpret_cast< ampls::AMPLModel * >(argp1);
  {
    try {
      delete arg1;
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_AMPLModel) /* defines _wrap_delete_AMPLModel_destructor_closure */

SWIGINTERN PyObject *_wrap_delete_SolverDriverCPLEX(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::impl::SolverDriver< ampls::CPLEXModel > *arg1 = (ampls::impl::SolverDriver< ampls::CPLEXModel > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args, "delete_SolverDriverCPLEX", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__impl__SolverDriverT_ampls__CPLEXModel_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SolverDriverCPLEX" "', argument " "1"" of type '" "ampls::impl::SolverDriver< ampls::CPLEXModel > *""'"); 
  }
  arg1 = reinterpret_cast< ampls::impl::SolverDriver< ampls::CPLEXModel > * >(argp1);
  {
    try {
      delete arg1;
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverDriverCPLEX_setOptions(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::impl::SolverDriver< ampls::CPLEXModel > *arg1 = (ampls::impl::SolverDriver< ampls::CPLEXModel > *) 0 ;
  std::vector< std::string,std::allocator< std::string > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__impl__SolverDriverT_ampls__CPLEXModel_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverDriverCPLEX_setOptions" "', argument " "1"" of type '" "ampls::impl::SolverDriver< ampls::CPLEXModel > *""'"); 
  }
  arg1 = reinterpret_cast< ampls::impl::SolverDriver< ampls::CPLEXModel > * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    int res = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "SolverDriverCPLEX_setOptions" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > >""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->setOptions(arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_SolverDriverCPLEX) /* defines _wrap_delete_SolverDriverCPLEX_destructor_closure */

SWIGINTERN PyObject *_wrap_cpxiodevice_cpxiodev_eof_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxiodevice *arg1 = (cpxiodevice *) 0 ;
  int (*arg2)(cpxiodevice *) = (int (*)(cpxiodevice *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxiodevice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxiodevice_cpxiodev_eof_set" "', argument " "1"" of type '" "cpxiodevice *""'"); 
  }
  arg1 = reinterpret_cast< cpxiodevice * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[0], (void**)(&arg2), SWIGTYPE_p_f_p_cpxiodevice__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpxiodevice_cpxiodev_eof_set" "', argument " "2"" of type '" "int (*)(cpxiodevice *)""'"); 
    }
  }
  if (arg1) (arg1)->cpxiodev_eof = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxiodevice_cpxiodev_eof_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxiodevice *arg1 = (cpxiodevice *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int (*result)(cpxiodevice *) = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "cpxiodevice_cpxiodev_eof_get", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxiodevice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxiodevice_cpxiodev_eof_get" "', argument " "1"" of type '" "cpxiodevice *""'"); 
  }
  arg1 = reinterpret_cast< cpxiodevice * >(argp1);
  result = (int (*)(cpxiodevice *)) ((arg1)->cpxiodev_eof);
  resultobj = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_cpxiodevice__int);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxiodevice_cpxiodev_error_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxiodevice *arg1 = (cpxiodevice *) 0 ;
  int (*arg2)(cpxiodevice *) = (int (*)(cpxiodevice *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxiodevice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxiodevice_cpxiodev_error_set" "', argument " "1"" of type '" "cpxiodevice *""'"); 
  }
  arg1 = reinterpret_cast< cpxiodevice * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[0], (void**)(&arg2), SWIGTYPE_p_f_p_cpxiodevice__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpxiodevice_cpxiodev_error_set" "', argument " "2"" of type '" "int (*)(cpxiodevice *)""'"); 
    }
  }
  if (arg1) (arg1)->cpxiodev_error = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxiodevice_cpxiodev_error_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxiodevice *arg1 = (cpxiodevice *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int (*result)(cpxiodevice *) = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "cpxiodevice_cpxiodev_error_get", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxiodevice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxiodevice_cpxiodev_error_get" "', argument " "1"" of type '" "cpxiodevice *""'"); 
  }
  arg1 = reinterpret_cast< cpxiodevice * >(argp1);
  result = (int (*)(cpxiodevice *)) ((arg1)->cpxiodev_error);
  resultobj = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_cpxiodevice__int);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxiodevice_cpxiodev_rewind_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxiodevice *arg1 = (cpxiodevice *) 0 ;
  int (*arg2)(cpxiodevice *) = (int (*)(cpxiodevice *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxiodevice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxiodevice_cpxiodev_rewind_set" "', argument " "1"" of type '" "cpxiodevice *""'"); 
  }
  arg1 = reinterpret_cast< cpxiodevice * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[0], (void**)(&arg2), SWIGTYPE_p_f_p_cpxiodevice__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpxiodevice_cpxiodev_rewind_set" "', argument " "2"" of type '" "int (*)(cpxiodevice *)""'"); 
    }
  }
  if (arg1) (arg1)->cpxiodev_rewind = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxiodevice_cpxiodev_rewind_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxiodevice *arg1 = (cpxiodevice *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int (*result)(cpxiodevice *) = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "cpxiodevice_cpxiodev_rewind_get", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxiodevice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxiodevice_cpxiodev_rewind_get" "', argument " "1"" of type '" "cpxiodevice *""'"); 
  }
  arg1 = reinterpret_cast< cpxiodevice * >(argp1);
  result = (int (*)(cpxiodevice *)) ((arg1)->cpxiodev_rewind);
  resultobj = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_cpxiodevice__int);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxiodevice_cpxiodev_flush_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxiodevice *arg1 = (cpxiodevice *) 0 ;
  int (*arg2)(cpxiodevice *) = (int (*)(cpxiodevice *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxiodevice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxiodevice_cpxiodev_flush_set" "', argument " "1"" of type '" "cpxiodevice *""'"); 
  }
  arg1 = reinterpret_cast< cpxiodevice * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[0], (void**)(&arg2), SWIGTYPE_p_f_p_cpxiodevice__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpxiodevice_cpxiodev_flush_set" "', argument " "2"" of type '" "int (*)(cpxiodevice *)""'"); 
    }
  }
  if (arg1) (arg1)->cpxiodev_flush = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxiodevice_cpxiodev_flush_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxiodevice *arg1 = (cpxiodevice *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int (*result)(cpxiodevice *) = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "cpxiodevice_cpxiodev_flush_get", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxiodevice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxiodevice_cpxiodev_flush_get" "', argument " "1"" of type '" "cpxiodevice *""'"); 
  }
  arg1 = reinterpret_cast< cpxiodevice * >(argp1);
  result = (int (*)(cpxiodevice *)) ((arg1)->cpxiodev_flush);
  resultobj = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_cpxiodevice__int);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxiodevice_cpxiodev_close_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxiodevice *arg1 = (cpxiodevice *) 0 ;
  int (*arg2)(cpxiodevice *) = (int (*)(cpxiodevice *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxiodevice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxiodevice_cpxiodev_close_set" "', argument " "1"" of type '" "cpxiodevice *""'"); 
  }
  arg1 = reinterpret_cast< cpxiodevice * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[0], (void**)(&arg2), SWIGTYPE_p_f_p_cpxiodevice__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpxiodevice_cpxiodev_close_set" "', argument " "2"" of type '" "int (*)(cpxiodevice *)""'"); 
    }
  }
  if (arg1) (arg1)->cpxiodev_close = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxiodevice_cpxiodev_close_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxiodevice *arg1 = (cpxiodevice *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int (*result)(cpxiodevice *) = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "cpxiodevice_cpxiodev_close_get", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxiodevice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxiodevice_cpxiodev_close_get" "', argument " "1"" of type '" "cpxiodevice *""'"); 
  }
  arg1 = reinterpret_cast< cpxiodevice * >(argp1);
  result = (int (*)(cpxiodevice *)) ((arg1)->cpxiodev_close);
  resultobj = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_cpxiodevice__int);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxiodevice_cpxiodev_putc_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxiodevice *arg1 = (cpxiodevice *) 0 ;
  int (*arg2)(int,cpxiodevice *) = (int (*)(int,cpxiodevice *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxiodevice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxiodevice_cpxiodev_putc_set" "', argument " "1"" of type '" "cpxiodevice *""'"); 
  }
  arg1 = reinterpret_cast< cpxiodevice * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[0], (void**)(&arg2), SWIGTYPE_p_f_int_p_cpxiodevice__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpxiodevice_cpxiodev_putc_set" "', argument " "2"" of type '" "int (*)(int,cpxiodevice *)""'"); 
    }
  }
  if (arg1) (arg1)->cpxiodev_putc = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxiodevice_cpxiodev_putc_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxiodevice *arg1 = (cpxiodevice *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int (*result)(int,cpxiodevice *) = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "cpxiodevice_cpxiodev_putc_get", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxiodevice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxiodevice_cpxiodev_putc_get" "', argument " "1"" of type '" "cpxiodevice *""'"); 
  }
  arg1 = reinterpret_cast< cpxiodevice * >(argp1);
  result = (int (*)(int,cpxiodevice *)) ((arg1)->cpxiodev_putc);
  resultobj = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_int_p_cpxiodevice__int);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxiodevice_cpxiodev_puts_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxiodevice *arg1 = (cpxiodevice *) 0 ;
  int (*arg2)(char const *,cpxiodevice *) = (int (*)(char const *,cpxiodevice *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxiodevice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxiodevice_cpxiodev_puts_set" "', argument " "1"" of type '" "cpxiodevice *""'"); 
  }
  arg1 = reinterpret_cast< cpxiodevice * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[0], (void**)(&arg2), SWIGTYPE_p_f_p_q_const__char_p_cpxiodevice__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpxiodevice_cpxiodev_puts_set" "', argument " "2"" of type '" "int (*)(char const *,cpxiodevice *)""'"); 
    }
  }
  if (arg1) (arg1)->cpxiodev_puts = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxiodevice_cpxiodev_puts_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxiodevice *arg1 = (cpxiodevice *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int (*result)(char const *,cpxiodevice *) = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "cpxiodevice_cpxiodev_puts_get", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxiodevice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxiodevice_cpxiodev_puts_get" "', argument " "1"" of type '" "cpxiodevice *""'"); 
  }
  arg1 = reinterpret_cast< cpxiodevice * >(argp1);
  result = (int (*)(char const *,cpxiodevice *)) ((arg1)->cpxiodev_puts);
  resultobj = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_q_const__char_p_cpxiodevice__int);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxiodevice_cpxiodev_read_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxiodevice *arg1 = (cpxiodevice *) 0 ;
  size_t (*arg2)(void *,size_t,cpxiodevice *) = (size_t (*)(void *,size_t,cpxiodevice *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxiodevice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxiodevice_cpxiodev_read_set" "', argument " "1"" of type '" "cpxiodevice *""'"); 
  }
  arg1 = reinterpret_cast< cpxiodevice * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[0], (void**)(&arg2), SWIGTYPE_p_f_p_void_size_t_p_cpxiodevice__size_t);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpxiodevice_cpxiodev_read_set" "', argument " "2"" of type '" "size_t (*)(void *,size_t,cpxiodevice *)""'"); 
    }
  }
  if (arg1) (arg1)->cpxiodev_read = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxiodevice_cpxiodev_read_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxiodevice *arg1 = (cpxiodevice *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t (*result)(void *,size_t,cpxiodevice *) = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "cpxiodevice_cpxiodev_read_get", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxiodevice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxiodevice_cpxiodev_read_get" "', argument " "1"" of type '" "cpxiodevice *""'"); 
  }
  arg1 = reinterpret_cast< cpxiodevice * >(argp1);
  result = (size_t (*)(void *,size_t,cpxiodevice *)) ((arg1)->cpxiodev_read);
  resultobj = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_void_size_t_p_cpxiodevice__size_t);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxiodevice_cpxiodev_write_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxiodevice *arg1 = (cpxiodevice *) 0 ;
  size_t (*arg2)(void const *,size_t,cpxiodevice *) = (size_t (*)(void const *,size_t,cpxiodevice *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxiodevice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxiodevice_cpxiodev_write_set" "', argument " "1"" of type '" "cpxiodevice *""'"); 
  }
  arg1 = reinterpret_cast< cpxiodevice * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[0], (void**)(&arg2), SWIGTYPE_p_f_p_q_const__void_size_t_p_cpxiodevice__size_t);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpxiodevice_cpxiodev_write_set" "', argument " "2"" of type '" "size_t (*)(void const *,size_t,cpxiodevice *)""'"); 
    }
  }
  if (arg1) (arg1)->cpxiodev_write = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxiodevice_cpxiodev_write_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxiodevice *arg1 = (cpxiodevice *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t (*result)(void const *,size_t,cpxiodevice *) = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "cpxiodevice_cpxiodev_write_get", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxiodevice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxiodevice_cpxiodev_write_get" "', argument " "1"" of type '" "cpxiodevice *""'"); 
  }
  arg1 = reinterpret_cast< cpxiodevice * >(argp1);
  result = (size_t (*)(void const *,size_t,cpxiodevice *)) ((arg1)->cpxiodev_write);
  resultobj = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_q_const__void_size_t_p_cpxiodevice__size_t);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_cpxiodevice(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  cpxiodevice *result = 0 ;
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_cpxiodevice")) SWIG_fail;
  if (!SWIG_Python_UnpackTuple(args, "new_cpxiodevice", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (cpxiodevice *)new cpxiodevice();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpxiodevice, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_cpxiodevice(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxiodevice *arg1 = (cpxiodevice *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args, "delete_cpxiodevice", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxiodevice, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_cpxiodevice" "', argument " "1"" of type '" "cpxiodevice *""'"); 
  }
  arg1 = reinterpret_cast< cpxiodevice * >(argp1);
  {
    try {
      delete arg1;
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_cpxiodevice) /* defines _wrap_delete_cpxiodevice_destructor_closure */

SWIGINTERN PyObject *_wrap_cpxdeserializer_getbyte_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxdeserializer *arg1 = (cpxdeserializer *) 0 ;
  int (*arg2)(CPXDESERIALIZERptr,CPXBYTE *) = (int (*)(CPXDESERIALIZERptr,CPXBYTE *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxdeserializer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxdeserializer_getbyte_set" "', argument " "1"" of type '" "cpxdeserializer *""'"); 
  }
  arg1 = reinterpret_cast< cpxdeserializer * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[0], (void**)(&arg2), SWIGTYPE_p_f_p_cpxdeserializer_p_signed_char__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpxdeserializer_getbyte_set" "', argument " "2"" of type '" "int (*)(CPXDESERIALIZERptr,CPXBYTE *)""'"); 
    }
  }
  if (arg1) (arg1)->getbyte = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxdeserializer_getbyte_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxdeserializer *arg1 = (cpxdeserializer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int (*result)(CPXDESERIALIZERptr,CPXBYTE *) = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "cpxdeserializer_getbyte_get", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxdeserializer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxdeserializer_getbyte_get" "', argument " "1"" of type '" "cpxdeserializer *""'"); 
  }
  arg1 = reinterpret_cast< cpxdeserializer * >(argp1);
  result = (int (*)(CPXDESERIALIZERptr,CPXBYTE *)) ((arg1)->getbyte);
  resultobj = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_cpxdeserializer_p_signed_char__int);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxdeserializer_getshort_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxdeserializer *arg1 = (cpxdeserializer *) 0 ;
  int (*arg2)(CPXDESERIALIZERptr,CPXSHORT *) = (int (*)(CPXDESERIALIZERptr,CPXSHORT *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxdeserializer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxdeserializer_getshort_set" "', argument " "1"" of type '" "cpxdeserializer *""'"); 
  }
  arg1 = reinterpret_cast< cpxdeserializer * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[0], (void**)(&arg2), SWIGTYPE_p_f_p_cpxdeserializer_p_short__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpxdeserializer_getshort_set" "', argument " "2"" of type '" "int (*)(CPXDESERIALIZERptr,CPXSHORT *)""'"); 
    }
  }
  if (arg1) (arg1)->getshort = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxdeserializer_getshort_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxdeserializer *arg1 = (cpxdeserializer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int (*result)(CPXDESERIALIZERptr,CPXSHORT *) = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "cpxdeserializer_getshort_get", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxdeserializer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxdeserializer_getshort_get" "', argument " "1"" of type '" "cpxdeserializer *""'"); 
  }
  arg1 = reinterpret_cast< cpxdeserializer * >(argp1);
  result = (int (*)(CPXDESERIALIZERptr,CPXSHORT *)) ((arg1)->getshort);
  resultobj = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_cpxdeserializer_p_short__int);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxdeserializer_getint_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxdeserializer *arg1 = (cpxdeserializer *) 0 ;
  int (*arg2)(CPXDESERIALIZERptr,CPXINT *) = (int (*)(CPXDESERIALIZERptr,CPXINT *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxdeserializer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxdeserializer_getint_set" "', argument " "1"" of type '" "cpxdeserializer *""'"); 
  }
  arg1 = reinterpret_cast< cpxdeserializer * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[0], (void**)(&arg2), SWIGTYPE_p_f_p_cpxdeserializer_p_int__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpxdeserializer_getint_set" "', argument " "2"" of type '" "int (*)(CPXDESERIALIZERptr,CPXINT *)""'"); 
    }
  }
  if (arg1) (arg1)->getint = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxdeserializer_getint_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxdeserializer *arg1 = (cpxdeserializer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int (*result)(CPXDESERIALIZERptr,CPXINT *) = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "cpxdeserializer_getint_get", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxdeserializer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxdeserializer_getint_get" "', argument " "1"" of type '" "cpxdeserializer *""'"); 
  }
  arg1 = reinterpret_cast< cpxdeserializer * >(argp1);
  result = (int (*)(CPXDESERIALIZERptr,CPXINT *)) ((arg1)->getint);
  resultobj = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_cpxdeserializer_p_int__int);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxdeserializer_getlong_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxdeserializer *arg1 = (cpxdeserializer *) 0 ;
  int (*arg2)(CPXDESERIALIZERptr,CPXLONG *) = (int (*)(CPXDESERIALIZERptr,CPXLONG *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxdeserializer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxdeserializer_getlong_set" "', argument " "1"" of type '" "cpxdeserializer *""'"); 
  }
  arg1 = reinterpret_cast< cpxdeserializer * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[0], (void**)(&arg2), SWIGTYPE_p_f_p_cpxdeserializer_p_long_long__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpxdeserializer_getlong_set" "', argument " "2"" of type '" "int (*)(CPXDESERIALIZERptr,CPXLONG *)""'"); 
    }
  }
  if (arg1) (arg1)->getlong = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxdeserializer_getlong_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxdeserializer *arg1 = (cpxdeserializer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int (*result)(CPXDESERIALIZERptr,CPXLONG *) = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "cpxdeserializer_getlong_get", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxdeserializer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxdeserializer_getlong_get" "', argument " "1"" of type '" "cpxdeserializer *""'"); 
  }
  arg1 = reinterpret_cast< cpxdeserializer * >(argp1);
  result = (int (*)(CPXDESERIALIZERptr,CPXLONG *)) ((arg1)->getlong);
  resultobj = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_cpxdeserializer_p_long_long__int);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxdeserializer_getfloat_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxdeserializer *arg1 = (cpxdeserializer *) 0 ;
  int (*arg2)(CPXDESERIALIZERptr,float *) = (int (*)(CPXDESERIALIZERptr,float *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxdeserializer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxdeserializer_getfloat_set" "', argument " "1"" of type '" "cpxdeserializer *""'"); 
  }
  arg1 = reinterpret_cast< cpxdeserializer * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[0], (void**)(&arg2), SWIGTYPE_p_f_p_cpxdeserializer_p_float__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpxdeserializer_getfloat_set" "', argument " "2"" of type '" "int (*)(CPXDESERIALIZERptr,float *)""'"); 
    }
  }
  if (arg1) (arg1)->getfloat = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxdeserializer_getfloat_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxdeserializer *arg1 = (cpxdeserializer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int (*result)(CPXDESERIALIZERptr,float *) = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "cpxdeserializer_getfloat_get", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxdeserializer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxdeserializer_getfloat_get" "', argument " "1"" of type '" "cpxdeserializer *""'"); 
  }
  arg1 = reinterpret_cast< cpxdeserializer * >(argp1);
  result = (int (*)(CPXDESERIALIZERptr,float *)) ((arg1)->getfloat);
  resultobj = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_cpxdeserializer_p_float__int);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxdeserializer_getdouble_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxdeserializer *arg1 = (cpxdeserializer *) 0 ;
  int (*arg2)(CPXDESERIALIZERptr,double *) = (int (*)(CPXDESERIALIZERptr,double *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxdeserializer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxdeserializer_getdouble_set" "', argument " "1"" of type '" "cpxdeserializer *""'"); 
  }
  arg1 = reinterpret_cast< cpxdeserializer * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[0], (void**)(&arg2), SWIGTYPE_p_f_p_cpxdeserializer_p_double__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpxdeserializer_getdouble_set" "', argument " "2"" of type '" "int (*)(CPXDESERIALIZERptr,double *)""'"); 
    }
  }
  if (arg1) (arg1)->getdouble = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxdeserializer_getdouble_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxdeserializer *arg1 = (cpxdeserializer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int (*result)(CPXDESERIALIZERptr,double *) = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "cpxdeserializer_getdouble_get", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxdeserializer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxdeserializer_getdouble_get" "', argument " "1"" of type '" "cpxdeserializer *""'"); 
  }
  arg1 = reinterpret_cast< cpxdeserializer * >(argp1);
  result = (int (*)(CPXDESERIALIZERptr,double *)) ((arg1)->getdouble);
  resultobj = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_cpxdeserializer_p_double__int);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxdeserializer_getbytes_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxdeserializer *arg1 = (cpxdeserializer *) 0 ;
  int (*arg2)(CPXDESERIALIZERptr,CPXLONG,CPXBYTE *) = (int (*)(CPXDESERIALIZERptr,CPXLONG,CPXBYTE *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxdeserializer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxdeserializer_getbytes_set" "', argument " "1"" of type '" "cpxdeserializer *""'"); 
  }
  arg1 = reinterpret_cast< cpxdeserializer * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[0], (void**)(&arg2), SWIGTYPE_p_f_p_cpxdeserializer_long_long_p_signed_char__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpxdeserializer_getbytes_set" "', argument " "2"" of type '" "int (*)(CPXDESERIALIZERptr,CPXLONG,CPXBYTE *)""'"); 
    }
  }
  if (arg1) (arg1)->getbytes = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxdeserializer_getbytes_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxdeserializer *arg1 = (cpxdeserializer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int (*result)(CPXDESERIALIZERptr,CPXLONG,CPXBYTE *) = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "cpxdeserializer_getbytes_get", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxdeserializer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxdeserializer_getbytes_get" "', argument " "1"" of type '" "cpxdeserializer *""'"); 
  }
  arg1 = reinterpret_cast< cpxdeserializer * >(argp1);
  result = (int (*)(CPXDESERIALIZERptr,CPXLONG,CPXBYTE *)) ((arg1)->getbytes);
  resultobj = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_cpxdeserializer_long_long_p_signed_char__int);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxdeserializer_getshorts_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxdeserializer *arg1 = (cpxdeserializer *) 0 ;
  int (*arg2)(CPXDESERIALIZERptr,CPXLONG,CPXSHORT *) = (int (*)(CPXDESERIALIZERptr,CPXLONG,CPXSHORT *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxdeserializer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxdeserializer_getshorts_set" "', argument " "1"" of type '" "cpxdeserializer *""'"); 
  }
  arg1 = reinterpret_cast< cpxdeserializer * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[0], (void**)(&arg2), SWIGTYPE_p_f_p_cpxdeserializer_long_long_p_short__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpxdeserializer_getshorts_set" "', argument " "2"" of type '" "int (*)(CPXDESERIALIZERptr,CPXLONG,CPXSHORT *)""'"); 
    }
  }
  if (arg1) (arg1)->getshorts = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxdeserializer_getshorts_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxdeserializer *arg1 = (cpxdeserializer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int (*result)(CPXDESERIALIZERptr,CPXLONG,CPXSHORT *) = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "cpxdeserializer_getshorts_get", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxdeserializer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxdeserializer_getshorts_get" "', argument " "1"" of type '" "cpxdeserializer *""'"); 
  }
  arg1 = reinterpret_cast< cpxdeserializer * >(argp1);
  result = (int (*)(CPXDESERIALIZERptr,CPXLONG,CPXSHORT *)) ((arg1)->getshorts);
  resultobj = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_cpxdeserializer_long_long_p_short__int);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxdeserializer_getints_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxdeserializer *arg1 = (cpxdeserializer *) 0 ;
  int (*arg2)(CPXDESERIALIZERptr,CPXLONG,CPXINT *) = (int (*)(CPXDESERIALIZERptr,CPXLONG,CPXINT *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxdeserializer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxdeserializer_getints_set" "', argument " "1"" of type '" "cpxdeserializer *""'"); 
  }
  arg1 = reinterpret_cast< cpxdeserializer * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[0], (void**)(&arg2), SWIGTYPE_p_f_p_cpxdeserializer_long_long_p_int__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpxdeserializer_getints_set" "', argument " "2"" of type '" "int (*)(CPXDESERIALIZERptr,CPXLONG,CPXINT *)""'"); 
    }
  }
  if (arg1) (arg1)->getints = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxdeserializer_getints_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxdeserializer *arg1 = (cpxdeserializer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int (*result)(CPXDESERIALIZERptr,CPXLONG,CPXINT *) = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "cpxdeserializer_getints_get", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxdeserializer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxdeserializer_getints_get" "', argument " "1"" of type '" "cpxdeserializer *""'"); 
  }
  arg1 = reinterpret_cast< cpxdeserializer * >(argp1);
  result = (int (*)(CPXDESERIALIZERptr,CPXLONG,CPXINT *)) ((arg1)->getints);
  resultobj = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_cpxdeserializer_long_long_p_int__int);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxdeserializer_getlongs_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxdeserializer *arg1 = (cpxdeserializer *) 0 ;
  int (*arg2)(CPXDESERIALIZERptr,CPXLONG,CPXLONG *) = (int (*)(CPXDESERIALIZERptr,CPXLONG,CPXLONG *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxdeserializer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxdeserializer_getlongs_set" "', argument " "1"" of type '" "cpxdeserializer *""'"); 
  }
  arg1 = reinterpret_cast< cpxdeserializer * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[0], (void**)(&arg2), SWIGTYPE_p_f_p_cpxdeserializer_long_long_p_long_long__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpxdeserializer_getlongs_set" "', argument " "2"" of type '" "int (*)(CPXDESERIALIZERptr,CPXLONG,CPXLONG *)""'"); 
    }
  }
  if (arg1) (arg1)->getlongs = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxdeserializer_getlongs_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxdeserializer *arg1 = (cpxdeserializer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int (*result)(CPXDESERIALIZERptr,CPXLONG,CPXLONG *) = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "cpxdeserializer_getlongs_get", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxdeserializer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxdeserializer_getlongs_get" "', argument " "1"" of type '" "cpxdeserializer *""'"); 
  }
  arg1 = reinterpret_cast< cpxdeserializer * >(argp1);
  result = (int (*)(CPXDESERIALIZERptr,CPXLONG,CPXLONG *)) ((arg1)->getlongs);
  resultobj = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_cpxdeserializer_long_long_p_long_long__int);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxdeserializer_getfloats_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxdeserializer *arg1 = (cpxdeserializer *) 0 ;
  int (*arg2)(CPXDESERIALIZERptr,CPXLONG,float *) = (int (*)(CPXDESERIALIZERptr,CPXLONG,float *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxdeserializer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxdeserializer_getfloats_set" "', argument " "1"" of type '" "cpxdeserializer *""'"); 
  }
  arg1 = reinterpret_cast< cpxdeserializer * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[0], (void**)(&arg2), SWIGTYPE_p_f_p_cpxdeserializer_long_long_p_float__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpxdeserializer_getfloats_set" "', argument " "2"" of type '" "int (*)(CPXDESERIALIZERptr,CPXLONG,float *)""'"); 
    }
  }
  if (arg1) (arg1)->getfloats = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxdeserializer_getfloats_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxdeserializer *arg1 = (cpxdeserializer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int (*result)(CPXDESERIALIZERptr,CPXLONG,float *) = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "cpxdeserializer_getfloats_get", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxdeserializer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxdeserializer_getfloats_get" "', argument " "1"" of type '" "cpxdeserializer *""'"); 
  }
  arg1 = reinterpret_cast< cpxdeserializer * >(argp1);
  result = (int (*)(CPXDESERIALIZERptr,CPXLONG,float *)) ((arg1)->getfloats);
  resultobj = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_cpxdeserializer_long_long_p_float__int);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxdeserializer_getdoubles_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxdeserializer *arg1 = (cpxdeserializer *) 0 ;
  int (*arg2)(CPXDESERIALIZERptr,CPXLONG,double *) = (int (*)(CPXDESERIALIZERptr,CPXLONG,double *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxdeserializer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxdeserializer_getdoubles_set" "', argument " "1"" of type '" "cpxdeserializer *""'"); 
  }
  arg1 = reinterpret_cast< cpxdeserializer * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[0], (void**)(&arg2), SWIGTYPE_p_f_p_cpxdeserializer_long_long_p_double__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpxdeserializer_getdoubles_set" "', argument " "2"" of type '" "int (*)(CPXDESERIALIZERptr,CPXLONG,double *)""'"); 
    }
  }
  if (arg1) (arg1)->getdoubles = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxdeserializer_getdoubles_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxdeserializer *arg1 = (cpxdeserializer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int (*result)(CPXDESERIALIZERptr,CPXLONG,double *) = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "cpxdeserializer_getdoubles_get", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxdeserializer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxdeserializer_getdoubles_get" "', argument " "1"" of type '" "cpxdeserializer *""'"); 
  }
  arg1 = reinterpret_cast< cpxdeserializer * >(argp1);
  result = (int (*)(CPXDESERIALIZERptr,CPXLONG,double *)) ((arg1)->getdoubles);
  resultobj = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_cpxdeserializer_long_long_p_double__int);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_cpxdeserializer(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  cpxdeserializer *result = 0 ;
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_cpxdeserializer")) SWIG_fail;
  if (!SWIG_Python_UnpackTuple(args, "new_cpxdeserializer", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (cpxdeserializer *)new cpxdeserializer();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpxdeserializer, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_cpxdeserializer(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxdeserializer *arg1 = (cpxdeserializer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args, "delete_cpxdeserializer", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxdeserializer, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_cpxdeserializer" "', argument " "1"" of type '" "cpxdeserializer *""'"); 
  }
  arg1 = reinterpret_cast< cpxdeserializer * >(argp1);
  {
    try {
      delete arg1;
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_cpxdeserializer) /* defines _wrap_delete_cpxdeserializer_destructor_closure */

SWIGINTERN PyObject *_wrap_cpxserializer_addbyte_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxserializer *arg1 = (cpxserializer *) 0 ;
  int (*arg2)(CPXSERIALIZERptr,CPXBYTE) = (int (*)(CPXSERIALIZERptr,CPXBYTE)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxserializer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxserializer_addbyte_set" "', argument " "1"" of type '" "cpxserializer *""'"); 
  }
  arg1 = reinterpret_cast< cpxserializer * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[0], (void**)(&arg2), SWIGTYPE_p_f_p_cpxserializer_signed_char__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpxserializer_addbyte_set" "', argument " "2"" of type '" "int (*)(CPXSERIALIZERptr,CPXBYTE)""'"); 
    }
  }
  if (arg1) (arg1)->addbyte = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxserializer_addbyte_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxserializer *arg1 = (cpxserializer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int (*result)(CPXSERIALIZERptr,CPXBYTE) = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "cpxserializer_addbyte_get", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxserializer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxserializer_addbyte_get" "', argument " "1"" of type '" "cpxserializer *""'"); 
  }
  arg1 = reinterpret_cast< cpxserializer * >(argp1);
  result = (int (*)(CPXSERIALIZERptr,CPXBYTE)) ((arg1)->addbyte);
  resultobj = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_cpxserializer_signed_char__int);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxserializer_addshort_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxserializer *arg1 = (cpxserializer *) 0 ;
  int (*arg2)(CPXSERIALIZERptr,CPXSHORT) = (int (*)(CPXSERIALIZERptr,CPXSHORT)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxserializer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxserializer_addshort_set" "', argument " "1"" of type '" "cpxserializer *""'"); 
  }
  arg1 = reinterpret_cast< cpxserializer * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[0], (void**)(&arg2), SWIGTYPE_p_f_p_cpxserializer_short__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpxserializer_addshort_set" "', argument " "2"" of type '" "int (*)(CPXSERIALIZERptr,CPXSHORT)""'"); 
    }
  }
  if (arg1) (arg1)->addshort = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxserializer_addshort_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxserializer *arg1 = (cpxserializer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int (*result)(CPXSERIALIZERptr,CPXSHORT) = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "cpxserializer_addshort_get", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxserializer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxserializer_addshort_get" "', argument " "1"" of type '" "cpxserializer *""'"); 
  }
  arg1 = reinterpret_cast< cpxserializer * >(argp1);
  result = (int (*)(CPXSERIALIZERptr,CPXSHORT)) ((arg1)->addshort);
  resultobj = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_cpxserializer_short__int);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxserializer_addint_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxserializer *arg1 = (cpxserializer *) 0 ;
  int (*arg2)(CPXSERIALIZERptr,CPXINT) = (int (*)(CPXSERIALIZERptr,CPXINT)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxserializer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxserializer_addint_set" "', argument " "1"" of type '" "cpxserializer *""'"); 
  }
  arg1 = reinterpret_cast< cpxserializer * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[0], (void**)(&arg2), SWIGTYPE_p_f_p_cpxserializer_int__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpxserializer_addint_set" "', argument " "2"" of type '" "int (*)(CPXSERIALIZERptr,CPXINT)""'"); 
    }
  }
  if (arg1) (arg1)->addint = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxserializer_addint_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxserializer *arg1 = (cpxserializer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int (*result)(CPXSERIALIZERptr,CPXINT) = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "cpxserializer_addint_get", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxserializer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxserializer_addint_get" "', argument " "1"" of type '" "cpxserializer *""'"); 
  }
  arg1 = reinterpret_cast< cpxserializer * >(argp1);
  result = (int (*)(CPXSERIALIZERptr,CPXINT)) ((arg1)->addint);
  resultobj = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_cpxserializer_int__int);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxserializer_addlong_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxserializer *arg1 = (cpxserializer *) 0 ;
  int (*arg2)(CPXSERIALIZERptr,CPXLONG) = (int (*)(CPXSERIALIZERptr,CPXLONG)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxserializer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxserializer_addlong_set" "', argument " "1"" of type '" "cpxserializer *""'"); 
  }
  arg1 = reinterpret_cast< cpxserializer * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[0], (void**)(&arg2), SWIGTYPE_p_f_p_cpxserializer_long_long__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpxserializer_addlong_set" "', argument " "2"" of type '" "int (*)(CPXSERIALIZERptr,CPXLONG)""'"); 
    }
  }
  if (arg1) (arg1)->addlong = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxserializer_addlong_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxserializer *arg1 = (cpxserializer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int (*result)(CPXSERIALIZERptr,CPXLONG) = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "cpxserializer_addlong_get", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxserializer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxserializer_addlong_get" "', argument " "1"" of type '" "cpxserializer *""'"); 
  }
  arg1 = reinterpret_cast< cpxserializer * >(argp1);
  result = (int (*)(CPXSERIALIZERptr,CPXLONG)) ((arg1)->addlong);
  resultobj = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_cpxserializer_long_long__int);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxserializer_addfloat_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxserializer *arg1 = (cpxserializer *) 0 ;
  int (*arg2)(CPXSERIALIZERptr,float) = (int (*)(CPXSERIALIZERptr,float)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxserializer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxserializer_addfloat_set" "', argument " "1"" of type '" "cpxserializer *""'"); 
  }
  arg1 = reinterpret_cast< cpxserializer * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[0], (void**)(&arg2), SWIGTYPE_p_f_p_cpxserializer_float__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpxserializer_addfloat_set" "', argument " "2"" of type '" "int (*)(CPXSERIALIZERptr,float)""'"); 
    }
  }
  if (arg1) (arg1)->addfloat = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxserializer_addfloat_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxserializer *arg1 = (cpxserializer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int (*result)(CPXSERIALIZERptr,float) = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "cpxserializer_addfloat_get", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxserializer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxserializer_addfloat_get" "', argument " "1"" of type '" "cpxserializer *""'"); 
  }
  arg1 = reinterpret_cast< cpxserializer * >(argp1);
  result = (int (*)(CPXSERIALIZERptr,float)) ((arg1)->addfloat);
  resultobj = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_cpxserializer_float__int);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxserializer_adddouble_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxserializer *arg1 = (cpxserializer *) 0 ;
  int (*arg2)(CPXSERIALIZERptr,double) = (int (*)(CPXSERIALIZERptr,double)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxserializer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxserializer_adddouble_set" "', argument " "1"" of type '" "cpxserializer *""'"); 
  }
  arg1 = reinterpret_cast< cpxserializer * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[0], (void**)(&arg2), SWIGTYPE_p_f_p_cpxserializer_double__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpxserializer_adddouble_set" "', argument " "2"" of type '" "int (*)(CPXSERIALIZERptr,double)""'"); 
    }
  }
  if (arg1) (arg1)->adddouble = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxserializer_adddouble_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxserializer *arg1 = (cpxserializer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int (*result)(CPXSERIALIZERptr,double) = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "cpxserializer_adddouble_get", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxserializer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxserializer_adddouble_get" "', argument " "1"" of type '" "cpxserializer *""'"); 
  }
  arg1 = reinterpret_cast< cpxserializer * >(argp1);
  result = (int (*)(CPXSERIALIZERptr,double)) ((arg1)->adddouble);
  resultobj = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_cpxserializer_double__int);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxserializer_addbytes_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxserializer *arg1 = (cpxserializer *) 0 ;
  int (*arg2)(CPXSERIALIZERptr,CPXLONG,CPXBYTE const *) = (int (*)(CPXSERIALIZERptr,CPXLONG,CPXBYTE const *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxserializer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxserializer_addbytes_set" "', argument " "1"" of type '" "cpxserializer *""'"); 
  }
  arg1 = reinterpret_cast< cpxserializer * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[0], (void**)(&arg2), SWIGTYPE_p_f_p_cpxserializer_long_long_p_q_const__signed_char__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpxserializer_addbytes_set" "', argument " "2"" of type '" "int (*)(CPXSERIALIZERptr,CPXLONG,CPXBYTE const *)""'"); 
    }
  }
  if (arg1) (arg1)->addbytes = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxserializer_addbytes_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxserializer *arg1 = (cpxserializer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int (*result)(CPXSERIALIZERptr,CPXLONG,CPXBYTE const *) = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "cpxserializer_addbytes_get", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxserializer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxserializer_addbytes_get" "', argument " "1"" of type '" "cpxserializer *""'"); 
  }
  arg1 = reinterpret_cast< cpxserializer * >(argp1);
  result = (int (*)(CPXSERIALIZERptr,CPXLONG,CPXBYTE const *)) ((arg1)->addbytes);
  resultobj = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_cpxserializer_long_long_p_q_const__signed_char__int);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxserializer_addshorts_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxserializer *arg1 = (cpxserializer *) 0 ;
  int (*arg2)(CPXSERIALIZERptr,CPXLONG,CPXSHORT const *) = (int (*)(CPXSERIALIZERptr,CPXLONG,CPXSHORT const *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxserializer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxserializer_addshorts_set" "', argument " "1"" of type '" "cpxserializer *""'"); 
  }
  arg1 = reinterpret_cast< cpxserializer * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[0], (void**)(&arg2), SWIGTYPE_p_f_p_cpxserializer_long_long_p_q_const__short__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpxserializer_addshorts_set" "', argument " "2"" of type '" "int (*)(CPXSERIALIZERptr,CPXLONG,CPXSHORT const *)""'"); 
    }
  }
  if (arg1) (arg1)->addshorts = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxserializer_addshorts_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxserializer *arg1 = (cpxserializer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int (*result)(CPXSERIALIZERptr,CPXLONG,CPXSHORT const *) = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "cpxserializer_addshorts_get", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxserializer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxserializer_addshorts_get" "', argument " "1"" of type '" "cpxserializer *""'"); 
  }
  arg1 = reinterpret_cast< cpxserializer * >(argp1);
  result = (int (*)(CPXSERIALIZERptr,CPXLONG,CPXSHORT const *)) ((arg1)->addshorts);
  resultobj = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_cpxserializer_long_long_p_q_const__short__int);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxserializer_addints_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxserializer *arg1 = (cpxserializer *) 0 ;
  int (*arg2)(CPXSERIALIZERptr,CPXLONG,CPXINT const *) = (int (*)(CPXSERIALIZERptr,CPXLONG,CPXINT const *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxserializer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxserializer_addints_set" "', argument " "1"" of type '" "cpxserializer *""'"); 
  }
  arg1 = reinterpret_cast< cpxserializer * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[0], (void**)(&arg2), SWIGTYPE_p_f_p_cpxserializer_long_long_p_q_const__int__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpxserializer_addints_set" "', argument " "2"" of type '" "int (*)(CPXSERIALIZERptr,CPXLONG,CPXINT const *)""'"); 
    }
  }
  if (arg1) (arg1)->addints = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxserializer_addints_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxserializer *arg1 = (cpxserializer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int (*result)(CPXSERIALIZERptr,CPXLONG,CPXINT const *) = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "cpxserializer_addints_get", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxserializer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxserializer_addints_get" "', argument " "1"" of type '" "cpxserializer *""'"); 
  }
  arg1 = reinterpret_cast< cpxserializer * >(argp1);
  result = (int (*)(CPXSERIALIZERptr,CPXLONG,CPXINT const *)) ((arg1)->addints);
  resultobj = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_cpxserializer_long_long_p_q_const__int__int);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxserializer_addlongs_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxserializer *arg1 = (cpxserializer *) 0 ;
  int (*arg2)(CPXSERIALIZERptr,CPXLONG,CPXLONG const *) = (int (*)(CPXSERIALIZERptr,CPXLONG,CPXLONG const *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxserializer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxserializer_addlongs_set" "', argument " "1"" of type '" "cpxserializer *""'"); 
  }
  arg1 = reinterpret_cast< cpxserializer * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[0], (void**)(&arg2), SWIGTYPE_p_f_p_cpxserializer_long_long_p_q_const__long_long__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpxserializer_addlongs_set" "', argument " "2"" of type '" "int (*)(CPXSERIALIZERptr,CPXLONG,CPXLONG const *)""'"); 
    }
  }
  if (arg1) (arg1)->addlongs = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxserializer_addlongs_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxserializer *arg1 = (cpxserializer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int (*result)(CPXSERIALIZERptr,CPXLONG,CPXLONG const *) = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "cpxserializer_addlongs_get", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxserializer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxserializer_addlongs_get" "', argument " "1"" of type '" "cpxserializer *""'"); 
  }
  arg1 = reinterpret_cast< cpxserializer * >(argp1);
  result = (int (*)(CPXSERIALIZERptr,CPXLONG,CPXLONG const *)) ((arg1)->addlongs);
  resultobj = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_cpxserializer_long_long_p_q_const__long_long__int);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxserializer_addfloats_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxserializer *arg1 = (cpxserializer *) 0 ;
  int (*arg2)(CPXSERIALIZERptr,CPXLONG,float const *) = (int (*)(CPXSERIALIZERptr,CPXLONG,float const *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxserializer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxserializer_addfloats_set" "', argument " "1"" of type '" "cpxserializer *""'"); 
  }
  arg1 = reinterpret_cast< cpxserializer * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[0], (void**)(&arg2), SWIGTYPE_p_f_p_cpxserializer_long_long_p_q_const__float__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpxserializer_addfloats_set" "', argument " "2"" of type '" "int (*)(CPXSERIALIZERptr,CPXLONG,float const *)""'"); 
    }
  }
  if (arg1) (arg1)->addfloats = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxserializer_addfloats_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxserializer *arg1 = (cpxserializer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int (*result)(CPXSERIALIZERptr,CPXLONG,float const *) = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "cpxserializer_addfloats_get", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxserializer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxserializer_addfloats_get" "', argument " "1"" of type '" "cpxserializer *""'"); 
  }
  arg1 = reinterpret_cast< cpxserializer * >(argp1);
  result = (int (*)(CPXSERIALIZERptr,CPXLONG,float const *)) ((arg1)->addfloats);
  resultobj = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_cpxserializer_long_long_p_q_const__float__int);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxserializer_adddoubles_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxserializer *arg1 = (cpxserializer *) 0 ;
  int (*arg2)(CPXSERIALIZERptr,CPXLONG,double const *) = (int (*)(CPXSERIALIZERptr,CPXLONG,double const *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxserializer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxserializer_adddoubles_set" "', argument " "1"" of type '" "cpxserializer *""'"); 
  }
  arg1 = reinterpret_cast< cpxserializer * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[0], (void**)(&arg2), SWIGTYPE_p_f_p_cpxserializer_long_long_p_q_const__double__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpxserializer_adddoubles_set" "', argument " "2"" of type '" "int (*)(CPXSERIALIZERptr,CPXLONG,double const *)""'"); 
    }
  }
  if (arg1) (arg1)->adddoubles = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpxserializer_adddoubles_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxserializer *arg1 = (cpxserializer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int (*result)(CPXSERIALIZERptr,CPXLONG,double const *) = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "cpxserializer_adddoubles_get", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxserializer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpxserializer_adddoubles_get" "', argument " "1"" of type '" "cpxserializer *""'"); 
  }
  arg1 = reinterpret_cast< cpxserializer * >(argp1);
  result = (int (*)(CPXSERIALIZERptr,CPXLONG,double const *)) ((arg1)->adddoubles);
  resultobj = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_cpxserializer_long_long_p_q_const__double__int);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_cpxserializer(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  cpxserializer *result = 0 ;
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_cpxserializer")) SWIG_fail;
  if (!SWIG_Python_UnpackTuple(args, "new_cpxserializer", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (cpxserializer *)new cpxserializer();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpxserializer, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_cpxserializer(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  cpxserializer *arg1 = (cpxserializer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args, "delete_cpxserializer", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_cpxserializer, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_cpxserializer" "', argument " "1"" of type '" "cpxserializer *""'"); 
  }
  arg1 = reinterpret_cast< cpxserializer * >(argp1);
  {
    try {
      delete arg1;
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_cpxserializer) /* defines _wrap_delete_cpxserializer_destructor_closure */

SWIGINTERN PyObject *_wrap_CPXaddcols(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  int *arg6 = (int *) 0 ;
  int *arg7 = (int *) 0 ;
  double *arg8 = (double *) 0 ;
  double *arg9 = (double *) 0 ;
  double *arg10 = (double *) 0 ;
  char **arg11 = (char **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp11 = 0 ;
  int res11 = 0 ;
  PyObject *swig_obj[11] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXaddcols", 11, 11, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXaddcols" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXaddcols" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXaddcols" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXaddcols" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[4])) {
      int size = (int)PyList_Size(swig_obj[4]);
      int i = 0;
      arg5 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[4], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg5[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg5);
          return NULL;
        }
      }
    }
    else if (swig_obj[4] == Py_None) {
      arg5 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[5])) {
      int size = (int)PyList_Size(swig_obj[5]);
      int i = 0;
      arg6 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[5], i);
        if (PyInt_Check(o)) {
          arg6[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg6);
          return NULL;
        }
      }
    }
    else if (swig_obj[5] == Py_None) {
      arg6 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[6])) {
      int size = (int)PyList_Size(swig_obj[6]);
      int i = 0;
      arg7 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[6], i);
        if (PyInt_Check(o)) {
          arg7[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg7);
          return NULL;
        }
      }
    }
    else if (swig_obj[6] == Py_None) {
      arg7 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[7])) {
      int size = (int)PyList_Size(swig_obj[7]);
      int i = 0;
      arg8 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[7], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg8[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg8);
          return NULL;
        }
      }
    }
    else if (swig_obj[7] == Py_None) {
      arg8 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[8])) {
      int size = (int)PyList_Size(swig_obj[8]);
      int i = 0;
      arg9 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[8], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg9[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg9);
          return NULL;
        }
      }
    }
    else if (swig_obj[8] == Py_None) {
      arg9 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[9])) {
      int size = (int)PyList_Size(swig_obj[9]);
      int i = 0;
      arg10 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[9], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg10[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg10);
          return NULL;
        }
      }
    }
    else if (swig_obj[9] == Py_None) {
      arg10 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res11 = SWIG_ConvertPtr(swig_obj[10], &argp11,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res11)) {
    SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "CPXaddcols" "', argument " "11"" of type '" "char **""'"); 
  }
  arg11 = reinterpret_cast< char ** >(argp11);
  {
    try {
      result = (int)CPXaddcols((cpxenv const *)arg1,arg2,arg3,arg4,(double const *)arg5,(int const *)arg6,(int const *)arg7,(double const *)arg8,(double const *)arg9,(double const *)arg10,arg11);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg5);
  }
  {
    free(arg6);
  }
  {
    free(arg7);
  }
  {
    free(arg8);
  }
  {
    free(arg9);
  }
  {
    free(arg10);
  }
  return resultobj;
fail:
  {
    free(arg5);
  }
  {
    free(arg6);
  }
  {
    free(arg7);
  }
  {
    free(arg8);
  }
  {
    free(arg9);
  }
  {
    free(arg10);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXaddfuncdest(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCHANNELptr arg2 = (CPXCHANNELptr) 0 ;
  void *arg3 = (void *) 0 ;
  void (*arg4)(void *,char const *) = (void (*)(void *,char const *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXaddfuncdest", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXaddfuncdest" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxchannel, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXaddfuncdest" "', argument " "2"" of type '" "CPXCHANNELptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCHANNELptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2],SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXaddfuncdest" "', argument " "3"" of type '" "void *""'"); 
  }
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[3], (void**)(&arg4), SWIGTYPE_p_f_p_void_p_q_const__char__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "CPXaddfuncdest" "', argument " "4"" of type '" "void (*)(void *,char const *)""'"); 
    }
  }
  {
    try {
      result = (int)CPXaddfuncdest((cpxenv const *)arg1,arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXaddpwl(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  int arg7 ;
  double *arg8 = (double *) 0 ;
  double *arg9 = (double *) 0 ;
  char *arg10 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  int res10 ;
  char *buf10 = 0 ;
  int alloc10 = 0 ;
  PyObject *swig_obj[10] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXaddpwl", 10, 10, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXaddpwl" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXaddpwl" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXaddpwl" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXaddpwl" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXaddpwl" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CPXaddpwl" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_int(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "CPXaddpwl" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[7])) {
      int size = (int)PyList_Size(swig_obj[7]);
      int i = 0;
      arg8 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[7], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg8[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg8);
          return NULL;
        }
      }
    }
    else if (swig_obj[7] == Py_None) {
      arg8 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[8])) {
      int size = (int)PyList_Size(swig_obj[8]);
      int i = 0;
      arg9 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[8], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg9[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg9);
          return NULL;
        }
      }
    }
    else if (swig_obj[8] == Py_None) {
      arg9 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res10 = SWIG_AsCharPtrAndSize(swig_obj[9], &buf10, NULL, &alloc10);
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "CPXaddpwl" "', argument " "10"" of type '" "char const *""'");
  }
  arg10 = reinterpret_cast< char * >(buf10);
  {
    try {
      result = (int)CPXaddpwl((cpxenv const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7,(double const *)arg8,(double const *)arg9,(char const *)arg10);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg8);
  }
  {
    free(arg9);
  }
  if (alloc10 == SWIG_NEWOBJ) delete[] buf10;
  return resultobj;
fail:
  {
    free(arg8);
  }
  {
    free(arg9);
  }
  if (alloc10 == SWIG_NEWOBJ) delete[] buf10;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXaddrows(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  double *arg6 = (double *) 0 ;
  char *arg7 = (char *) 0 ;
  int *arg8 = (int *) 0 ;
  int *arg9 = (int *) 0 ;
  double *arg10 = (double *) 0 ;
  char **arg11 = (char **) 0 ;
  char **arg12 = (char **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  void *argp11 = 0 ;
  int res11 = 0 ;
  void *argp12 = 0 ;
  int res12 = 0 ;
  PyObject *swig_obj[12] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXaddrows", 12, 12, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXaddrows" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXaddrows" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXaddrows" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXaddrows" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXaddrows" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[5])) {
      int size = (int)PyList_Size(swig_obj[5]);
      int i = 0;
      arg6 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[5], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg6[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg6);
          return NULL;
        }
      }
    }
    else if (swig_obj[5] == Py_None) {
      arg6 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res7 = SWIG_AsCharPtrAndSize(swig_obj[6], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "CPXaddrows" "', argument " "7"" of type '" "char const *""'");
  }
  arg7 = reinterpret_cast< char * >(buf7);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[7])) {
      int size = (int)PyList_Size(swig_obj[7]);
      int i = 0;
      arg8 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[7], i);
        if (PyInt_Check(o)) {
          arg8[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg8);
          return NULL;
        }
      }
    }
    else if (swig_obj[7] == Py_None) {
      arg8 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[8])) {
      int size = (int)PyList_Size(swig_obj[8]);
      int i = 0;
      arg9 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[8], i);
        if (PyInt_Check(o)) {
          arg9[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg9);
          return NULL;
        }
      }
    }
    else if (swig_obj[8] == Py_None) {
      arg9 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[9])) {
      int size = (int)PyList_Size(swig_obj[9]);
      int i = 0;
      arg10 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[9], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg10[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg10);
          return NULL;
        }
      }
    }
    else if (swig_obj[9] == Py_None) {
      arg10 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res11 = SWIG_ConvertPtr(swig_obj[10], &argp11,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res11)) {
    SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "CPXaddrows" "', argument " "11"" of type '" "char **""'"); 
  }
  arg11 = reinterpret_cast< char ** >(argp11);
  res12 = SWIG_ConvertPtr(swig_obj[11], &argp12,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res12)) {
    SWIG_exception_fail(SWIG_ArgError(res12), "in method '" "CPXaddrows" "', argument " "12"" of type '" "char **""'"); 
  }
  arg12 = reinterpret_cast< char ** >(argp12);
  {
    try {
      result = (int)CPXaddrows((cpxenv const *)arg1,arg2,arg3,arg4,arg5,(double const *)arg6,(char const *)arg7,(int const *)arg8,(int const *)arg9,(double const *)arg10,arg11,arg12);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg6);
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  {
    free(arg8);
  }
  {
    free(arg9);
  }
  {
    free(arg10);
  }
  return resultobj;
fail:
  {
    free(arg6);
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  {
    free(arg8);
  }
  {
    free(arg9);
  }
  {
    free(arg10);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXbasicpresolve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  int *arg5 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXbasicpresolve", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXbasicpresolve" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXbasicpresolve" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXbasicpresolve" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXbasicpresolve" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXbasicpresolve" "', argument " "5"" of type '" "int *""'"); 
  }
  arg5 = reinterpret_cast< int * >(argp5);
  {
    try {
      result = (int)CPXbasicpresolve((cpxenv const *)arg1,arg2,arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXbinvacol(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXbinvacol", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXbinvacol" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXbinvacol" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXbinvacol" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXbinvacol" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  {
    try {
      result = (int)CPXbinvacol((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXbinvarow(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXbinvarow", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXbinvarow" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXbinvarow" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXbinvarow" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXbinvarow" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  {
    try {
      result = (int)CPXbinvarow((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXbinvcol(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXbinvcol", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXbinvcol" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXbinvcol" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXbinvcol" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXbinvcol" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  {
    try {
      result = (int)CPXbinvcol((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXbinvrow(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXbinvrow", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXbinvrow" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXbinvrow" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXbinvrow" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXbinvrow" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  {
    try {
      result = (int)CPXbinvrow((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXboundsa(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int arg3 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  PyObject *swig_obj[8] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXboundsa", 8, 8, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXboundsa" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXboundsa" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXboundsa" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXboundsa" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXboundsa" "', argument " "5"" of type '" "double *""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(swig_obj[5], &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CPXboundsa" "', argument " "6"" of type '" "double *""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  res7 = SWIG_ConvertPtr(swig_obj[6], &argp7,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "CPXboundsa" "', argument " "7"" of type '" "double *""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  res8 = SWIG_ConvertPtr(swig_obj[7], &argp8,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "CPXboundsa" "', argument " "8"" of type '" "double *""'"); 
  }
  arg8 = reinterpret_cast< double * >(argp8);
  {
    try {
      result = (int)CPXboundsa((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXbtran(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  double *arg3 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXbtran", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXbtran" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXbtran" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXbtran" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  {
    try {
      result = (int)CPXbtran((cpxenv const *)arg1,(cpxlp const *)arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXcallbackabort(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCALLBACKCONTEXTptr arg1 = (CPXCALLBACKCONTEXTptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxcallbackcontext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXcallbackabort" "', argument " "1"" of type '" "CPXCALLBACKCONTEXTptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCALLBACKCONTEXTptr >(argp1);
  {
    try {
      CPXcallbackabort(arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXcallbackaddusercuts(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCALLBACKCONTEXTptr arg1 = (CPXCALLBACKCONTEXTptr) 0 ;
  int arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  char *arg5 = (char *) 0 ;
  int *arg6 = (int *) 0 ;
  int *arg7 = (int *) 0 ;
  double *arg8 = (double *) 0 ;
  int *arg9 = (int *) 0 ;
  int *arg10 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  PyObject *swig_obj[10] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXcallbackaddusercuts", 10, 10, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxcallbackcontext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXcallbackaddusercuts" "', argument " "1"" of type '" "CPXCALLBACKCONTEXTptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCALLBACKCONTEXTptr >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPXcallbackaddusercuts" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXcallbackaddusercuts" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[3])) {
      int size = (int)PyList_Size(swig_obj[3]);
      int i = 0;
      arg4 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[3], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg4[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg4);
          return NULL;
        }
      }
    }
    else if (swig_obj[3] == Py_None) {
      arg4 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res5 = SWIG_AsCharPtrAndSize(swig_obj[4], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXcallbackaddusercuts" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = reinterpret_cast< char * >(buf5);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[5])) {
      int size = (int)PyList_Size(swig_obj[5]);
      int i = 0;
      arg6 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[5], i);
        if (PyInt_Check(o)) {
          arg6[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg6);
          return NULL;
        }
      }
    }
    else if (swig_obj[5] == Py_None) {
      arg6 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[6])) {
      int size = (int)PyList_Size(swig_obj[6]);
      int i = 0;
      arg7 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[6], i);
        if (PyInt_Check(o)) {
          arg7[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg7);
          return NULL;
        }
      }
    }
    else if (swig_obj[6] == Py_None) {
      arg7 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[7])) {
      int size = (int)PyList_Size(swig_obj[7]);
      int i = 0;
      arg8 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[7], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg8[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg8);
          return NULL;
        }
      }
    }
    else if (swig_obj[7] == Py_None) {
      arg8 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[8])) {
      int size = (int)PyList_Size(swig_obj[8]);
      int i = 0;
      arg9 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[8], i);
        if (PyInt_Check(o)) {
          arg9[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg9);
          return NULL;
        }
      }
    }
    else if (swig_obj[8] == Py_None) {
      arg9 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[9])) {
      int size = (int)PyList_Size(swig_obj[9]);
      int i = 0;
      arg10 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[9], i);
        if (PyInt_Check(o)) {
          arg10[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg10);
          return NULL;
        }
      }
    }
    else if (swig_obj[9] == Py_None) {
      arg10 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    try {
      result = (int)CPXcallbackaddusercuts(arg1,arg2,arg3,(double const *)arg4,(char const *)arg5,(int const *)arg6,(int const *)arg7,(double const *)arg8,(int const *)arg9,(int const *)arg10);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg4);
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  {
    free(arg6);
  }
  {
    free(arg7);
  }
  {
    free(arg8);
  }
  {
    free(arg9);
  }
  {
    free(arg10);
  }
  return resultobj;
fail:
  {
    free(arg4);
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  {
    free(arg6);
  }
  {
    free(arg7);
  }
  {
    free(arg8);
  }
  {
    free(arg9);
  }
  {
    free(arg10);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXcallbackcandidateispoint(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCALLBACKCONTEXTptr arg1 = (CPXCALLBACKCONTEXTptr) 0 ;
  int *arg2 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXcallbackcandidateispoint", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxcallbackcontext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXcallbackcandidateispoint" "', argument " "1"" of type '" "CPXCALLBACKCONTEXTptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCALLBACKCONTEXTptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXcallbackcandidateispoint" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  {
    try {
      result = (int)CPXcallbackcandidateispoint(arg1,arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXcallbackcandidateisray(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCALLBACKCONTEXTptr arg1 = (CPXCALLBACKCONTEXTptr) 0 ;
  int *arg2 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXcallbackcandidateisray", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxcallbackcontext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXcallbackcandidateisray" "', argument " "1"" of type '" "CPXCALLBACKCONTEXTptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCALLBACKCONTEXTptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXcallbackcandidateisray" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  {
    try {
      result = (int)CPXcallbackcandidateisray(arg1,arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXcallbackexitcutloop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCALLBACKCONTEXTptr arg1 = (CPXCALLBACKCONTEXTptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxcallbackcontext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXcallbackexitcutloop" "', argument " "1"" of type '" "CPXCALLBACKCONTEXTptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCALLBACKCONTEXTptr >(argp1);
  {
    try {
      result = (int)CPXcallbackexitcutloop(arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXcallbackgetcandidatepoint(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCALLBACKCONTEXTptr arg1 = (CPXCALLBACKCONTEXTptr) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXcallbackgetcandidatepoint", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxcallbackcontext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXcallbackgetcandidatepoint" "', argument " "1"" of type '" "CPXCALLBACKCONTEXTptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCALLBACKCONTEXTptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXcallbackgetcandidatepoint" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXcallbackgetcandidatepoint" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXcallbackgetcandidatepoint" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXcallbackgetcandidatepoint" "', argument " "5"" of type '" "double *""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  {
    try {
      result = (int)CPXcallbackgetcandidatepoint(arg1,arg2,arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXcallbackgetcandidateray(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCALLBACKCONTEXTptr arg1 = (CPXCALLBACKCONTEXTptr) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXcallbackgetcandidateray", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxcallbackcontext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXcallbackgetcandidateray" "', argument " "1"" of type '" "CPXCALLBACKCONTEXTptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCALLBACKCONTEXTptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXcallbackgetcandidateray" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXcallbackgetcandidateray" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXcallbackgetcandidateray" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (int)CPXcallbackgetcandidateray(arg1,arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXcallbackgetfunc(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  CPXLONG *arg3 = (CPXLONG *) 0 ;
  CPXCALLBACKFUNC **arg4 = (CPXCALLBACKFUNC **) 0 ;
  void **arg5 = (void **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXcallbackgetfunc", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXcallbackgetfunc" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXcallbackgetfunc" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_long_long, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXcallbackgetfunc" "', argument " "3"" of type '" "CPXLONG *""'"); 
  }
  arg3 = reinterpret_cast< CPXLONG * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_p_f_p_cpxcallbackcontext_long_long_p_void__int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXcallbackgetfunc" "', argument " "4"" of type '" "CPXCALLBACKFUNC **""'"); 
  }
  arg4 = reinterpret_cast< CPXCALLBACKFUNC ** >(argp4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXcallbackgetfunc" "', argument " "5"" of type '" "void **""'"); 
  }
  arg5 = reinterpret_cast< void ** >(argp5);
  {
    try {
      result = (int)CPXcallbackgetfunc((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXcallbackgetincumbent(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCALLBACKCONTEXTptr arg1 = (CPXCALLBACKCONTEXTptr) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXcallbackgetincumbent", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxcallbackcontext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXcallbackgetincumbent" "', argument " "1"" of type '" "CPXCALLBACKCONTEXTptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCALLBACKCONTEXTptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXcallbackgetincumbent" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXcallbackgetincumbent" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXcallbackgetincumbent" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXcallbackgetincumbent" "', argument " "5"" of type '" "double *""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  {
    try {
      result = (int)CPXcallbackgetincumbent(arg1,arg2,arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXcallbackgetinfodbl(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCALLBACKCONTEXTptr arg1 = (CPXCALLBACKCONTEXTptr) 0 ;
  CPXCALLBACKINFO arg2 ;
  double *arg3 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXcallbackgetinfodbl", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxcallbackcontext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXcallbackgetinfodbl" "', argument " "1"" of type '" "CPXCALLBACKCONTEXTptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCALLBACKCONTEXTptr >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPXcallbackgetinfodbl" "', argument " "2"" of type '" "CPXCALLBACKINFO""'");
  } 
  arg2 = static_cast< CPXCALLBACKINFO >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXcallbackgetinfodbl" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  {
    try {
      result = (int)CPXcallbackgetinfodbl(arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXcallbackgetinfoint(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCALLBACKCONTEXTptr arg1 = (CPXCALLBACKCONTEXTptr) 0 ;
  CPXCALLBACKINFO arg2 ;
  CPXINT *arg3 = (CPXINT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXcallbackgetinfoint", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxcallbackcontext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXcallbackgetinfoint" "', argument " "1"" of type '" "CPXCALLBACKCONTEXTptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCALLBACKCONTEXTptr >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPXcallbackgetinfoint" "', argument " "2"" of type '" "CPXCALLBACKINFO""'");
  } 
  arg2 = static_cast< CPXCALLBACKINFO >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXcallbackgetinfoint" "', argument " "3"" of type '" "CPXINT *""'"); 
  }
  arg3 = reinterpret_cast< CPXINT * >(argp3);
  {
    try {
      result = (int)CPXcallbackgetinfoint(arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXcallbackgetinfolong(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCALLBACKCONTEXTptr arg1 = (CPXCALLBACKCONTEXTptr) 0 ;
  CPXCALLBACKINFO arg2 ;
  CPXLONG *arg3 = (CPXLONG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXcallbackgetinfolong", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxcallbackcontext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXcallbackgetinfolong" "', argument " "1"" of type '" "CPXCALLBACKCONTEXTptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCALLBACKCONTEXTptr >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPXcallbackgetinfolong" "', argument " "2"" of type '" "CPXCALLBACKINFO""'");
  } 
  arg2 = static_cast< CPXCALLBACKINFO >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_long_long, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXcallbackgetinfolong" "', argument " "3"" of type '" "CPXLONG *""'"); 
  }
  arg3 = reinterpret_cast< CPXLONG * >(argp3);
  {
    try {
      result = (int)CPXcallbackgetinfolong(arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXcallbackgetrelaxationpoint(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCALLBACKCONTEXTptr arg1 = (CPXCALLBACKCONTEXTptr) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXcallbackgetrelaxationpoint", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxcallbackcontext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXcallbackgetrelaxationpoint" "', argument " "1"" of type '" "CPXCALLBACKCONTEXTptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCALLBACKCONTEXTptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXcallbackgetrelaxationpoint" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXcallbackgetrelaxationpoint" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXcallbackgetrelaxationpoint" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXcallbackgetrelaxationpoint" "', argument " "5"" of type '" "double *""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  {
    try {
      result = (int)CPXcallbackgetrelaxationpoint(arg1,arg2,arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXcallbackgetrelaxationstatus(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCALLBACKCONTEXTptr arg1 = (CPXCALLBACKCONTEXTptr) 0 ;
  int *arg2 = (int *) 0 ;
  CPXLONG arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  long long val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXcallbackgetrelaxationstatus", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxcallbackcontext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXcallbackgetrelaxationstatus" "', argument " "1"" of type '" "CPXCALLBACKCONTEXTptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCALLBACKCONTEXTptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXcallbackgetrelaxationstatus" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  ecode3 = SWIG_AsVal_long_SS_long(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXcallbackgetrelaxationstatus" "', argument " "3"" of type '" "CPXLONG""'");
  } 
  arg3 = static_cast< CPXLONG >(val3);
  {
    try {
      result = (int)CPXcallbackgetrelaxationstatus(arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXcallbackmakebranch(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCALLBACKCONTEXTptr arg1 = (CPXCALLBACKCONTEXTptr) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  char *arg4 = (char *) 0 ;
  double *arg5 = (double *) 0 ;
  int arg6 ;
  int arg7 ;
  double *arg8 = (double *) 0 ;
  char *arg9 = (char *) 0 ;
  int *arg10 = (int *) 0 ;
  int *arg11 = (int *) 0 ;
  double *arg12 = (double *) 0 ;
  double arg13 ;
  int *arg14 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  int res9 ;
  char *buf9 = 0 ;
  int alloc9 = 0 ;
  double val13 ;
  int ecode13 = 0 ;
  void *argp14 = 0 ;
  int res14 = 0 ;
  PyObject *swig_obj[14] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXcallbackmakebranch", 14, 14, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxcallbackcontext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXcallbackmakebranch" "', argument " "1"" of type '" "CPXCALLBACKCONTEXTptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCALLBACKCONTEXTptr >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPXcallbackmakebranch" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[2])) {
      int size = (int)PyList_Size(swig_obj[2]);
      int i = 0;
      arg3 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[2], i);
        if (PyInt_Check(o)) {
          arg3[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg3);
          return NULL;
        }
      }
    }
    else if (swig_obj[2] == Py_None) {
      arg3 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res4 = SWIG_AsCharPtrAndSize(swig_obj[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXcallbackmakebranch" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[4])) {
      int size = (int)PyList_Size(swig_obj[4]);
      int i = 0;
      arg5 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[4], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg5[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg5);
          return NULL;
        }
      }
    }
    else if (swig_obj[4] == Py_None) {
      arg5 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CPXcallbackmakebranch" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "CPXcallbackmakebranch" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[7])) {
      int size = (int)PyList_Size(swig_obj[7]);
      int i = 0;
      arg8 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[7], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg8[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg8);
          return NULL;
        }
      }
    }
    else if (swig_obj[7] == Py_None) {
      arg8 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res9 = SWIG_AsCharPtrAndSize(swig_obj[8], &buf9, NULL, &alloc9);
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "CPXcallbackmakebranch" "', argument " "9"" of type '" "char const *""'");
  }
  arg9 = reinterpret_cast< char * >(buf9);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[9])) {
      int size = (int)PyList_Size(swig_obj[9]);
      int i = 0;
      arg10 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[9], i);
        if (PyInt_Check(o)) {
          arg10[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg10);
          return NULL;
        }
      }
    }
    else if (swig_obj[9] == Py_None) {
      arg10 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[10])) {
      int size = (int)PyList_Size(swig_obj[10]);
      int i = 0;
      arg11 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[10], i);
        if (PyInt_Check(o)) {
          arg11[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg11);
          return NULL;
        }
      }
    }
    else if (swig_obj[10] == Py_None) {
      arg11 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[11])) {
      int size = (int)PyList_Size(swig_obj[11]);
      int i = 0;
      arg12 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[11], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg12[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg12);
          return NULL;
        }
      }
    }
    else if (swig_obj[11] == Py_None) {
      arg12 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  ecode13 = SWIG_AsVal_double(swig_obj[12], &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "CPXcallbackmakebranch" "', argument " "13"" of type '" "double""'");
  } 
  arg13 = static_cast< double >(val13);
  res14 = SWIG_ConvertPtr(swig_obj[13], &argp14,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res14)) {
    SWIG_exception_fail(SWIG_ArgError(res14), "in method '" "CPXcallbackmakebranch" "', argument " "14"" of type '" "int *""'"); 
  }
  arg14 = reinterpret_cast< int * >(argp14);
  {
    try {
      result = (int)CPXcallbackmakebranch(arg1,arg2,(int const *)arg3,(char const *)arg4,(double const *)arg5,arg6,arg7,(double const *)arg8,(char const *)arg9,(int const *)arg10,(int const *)arg11,(double const *)arg12,arg13,arg14);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg3);
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  {
    free(arg5);
  }
  {
    free(arg8);
  }
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  {
    free(arg10);
  }
  {
    free(arg11);
  }
  {
    free(arg12);
  }
  return resultobj;
fail:
  {
    free(arg3);
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  {
    free(arg5);
  }
  {
    free(arg8);
  }
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  {
    free(arg10);
  }
  {
    free(arg11);
  }
  {
    free(arg12);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXcallbackpostheursoln(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCALLBACKCONTEXTptr arg1 = (CPXCALLBACKCONTEXTptr) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  double *arg4 = (double *) 0 ;
  double arg5 ;
  CPXCALLBACKSOLUTIONSTRATEGY arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject *swig_obj[6] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXcallbackpostheursoln", 6, 6, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxcallbackcontext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXcallbackpostheursoln" "', argument " "1"" of type '" "CPXCALLBACKCONTEXTptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCALLBACKCONTEXTptr >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPXcallbackpostheursoln" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[2])) {
      int size = (int)PyList_Size(swig_obj[2]);
      int i = 0;
      arg3 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[2], i);
        if (PyInt_Check(o)) {
          arg3[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg3);
          return NULL;
        }
      }
    }
    else if (swig_obj[2] == Py_None) {
      arg3 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[3])) {
      int size = (int)PyList_Size(swig_obj[3]);
      int i = 0;
      arg4 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[3], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg4[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg4);
          return NULL;
        }
      }
    }
    else if (swig_obj[3] == Py_None) {
      arg4 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXcallbackpostheursoln" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CPXcallbackpostheursoln" "', argument " "6"" of type '" "CPXCALLBACKSOLUTIONSTRATEGY""'");
  } 
  arg6 = static_cast< CPXCALLBACKSOLUTIONSTRATEGY >(val6);
  {
    try {
      result = (int)CPXcallbackpostheursoln(arg1,arg2,(int const *)arg3,(double const *)arg4,arg5,arg6);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg3);
  }
  {
    free(arg4);
  }
  return resultobj;
fail:
  {
    free(arg3);
  }
  {
    free(arg4);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXcallbackprunenode(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCALLBACKCONTEXTptr arg1 = (CPXCALLBACKCONTEXTptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxcallbackcontext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXcallbackprunenode" "', argument " "1"" of type '" "CPXCALLBACKCONTEXTptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCALLBACKCONTEXTptr >(argp1);
  {
    try {
      result = (int)CPXcallbackprunenode(arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXcallbackrejectcandidate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCALLBACKCONTEXTptr arg1 = (CPXCALLBACKCONTEXTptr) 0 ;
  int arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  char *arg5 = (char *) 0 ;
  int *arg6 = (int *) 0 ;
  int *arg7 = (int *) 0 ;
  double *arg8 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  PyObject *swig_obj[8] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXcallbackrejectcandidate", 8, 8, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxcallbackcontext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXcallbackrejectcandidate" "', argument " "1"" of type '" "CPXCALLBACKCONTEXTptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCALLBACKCONTEXTptr >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPXcallbackrejectcandidate" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXcallbackrejectcandidate" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[3])) {
      int size = (int)PyList_Size(swig_obj[3]);
      int i = 0;
      arg4 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[3], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg4[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg4);
          return NULL;
        }
      }
    }
    else if (swig_obj[3] == Py_None) {
      arg4 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res5 = SWIG_AsCharPtrAndSize(swig_obj[4], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXcallbackrejectcandidate" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = reinterpret_cast< char * >(buf5);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[5])) {
      int size = (int)PyList_Size(swig_obj[5]);
      int i = 0;
      arg6 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[5], i);
        if (PyInt_Check(o)) {
          arg6[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg6);
          return NULL;
        }
      }
    }
    else if (swig_obj[5] == Py_None) {
      arg6 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[6])) {
      int size = (int)PyList_Size(swig_obj[6]);
      int i = 0;
      arg7 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[6], i);
        if (PyInt_Check(o)) {
          arg7[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg7);
          return NULL;
        }
      }
    }
    else if (swig_obj[6] == Py_None) {
      arg7 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[7])) {
      int size = (int)PyList_Size(swig_obj[7]);
      int i = 0;
      arg8 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[7], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg8[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg8);
          return NULL;
        }
      }
    }
    else if (swig_obj[7] == Py_None) {
      arg8 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    try {
      result = (int)CPXcallbackrejectcandidate(arg1,arg2,arg3,(double const *)arg4,(char const *)arg5,(int const *)arg6,(int const *)arg7,(double const *)arg8);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg4);
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  {
    free(arg6);
  }
  {
    free(arg7);
  }
  {
    free(arg8);
  }
  return resultobj;
fail:
  {
    free(arg4);
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  {
    free(arg6);
  }
  {
    free(arg7);
  }
  {
    free(arg8);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXcallbackrejectcandidatelocal(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCALLBACKCONTEXTptr arg1 = (CPXCALLBACKCONTEXTptr) 0 ;
  int arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  char *arg5 = (char *) 0 ;
  int *arg6 = (int *) 0 ;
  int *arg7 = (int *) 0 ;
  double *arg8 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  PyObject *swig_obj[8] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXcallbackrejectcandidatelocal", 8, 8, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxcallbackcontext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXcallbackrejectcandidatelocal" "', argument " "1"" of type '" "CPXCALLBACKCONTEXTptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCALLBACKCONTEXTptr >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPXcallbackrejectcandidatelocal" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXcallbackrejectcandidatelocal" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[3])) {
      int size = (int)PyList_Size(swig_obj[3]);
      int i = 0;
      arg4 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[3], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg4[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg4);
          return NULL;
        }
      }
    }
    else if (swig_obj[3] == Py_None) {
      arg4 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res5 = SWIG_AsCharPtrAndSize(swig_obj[4], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXcallbackrejectcandidatelocal" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = reinterpret_cast< char * >(buf5);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[5])) {
      int size = (int)PyList_Size(swig_obj[5]);
      int i = 0;
      arg6 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[5], i);
        if (PyInt_Check(o)) {
          arg6[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg6);
          return NULL;
        }
      }
    }
    else if (swig_obj[5] == Py_None) {
      arg6 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[6])) {
      int size = (int)PyList_Size(swig_obj[6]);
      int i = 0;
      arg7 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[6], i);
        if (PyInt_Check(o)) {
          arg7[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg7);
          return NULL;
        }
      }
    }
    else if (swig_obj[6] == Py_None) {
      arg7 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[7])) {
      int size = (int)PyList_Size(swig_obj[7]);
      int i = 0;
      arg8 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[7], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg8[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg8);
          return NULL;
        }
      }
    }
    else if (swig_obj[7] == Py_None) {
      arg8 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    try {
      result = (int)CPXcallbackrejectcandidatelocal(arg1,arg2,arg3,(double const *)arg4,(char const *)arg5,(int const *)arg6,(int const *)arg7,(double const *)arg8);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg4);
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  {
    free(arg6);
  }
  {
    free(arg7);
  }
  {
    free(arg8);
  }
  return resultobj;
fail:
  {
    free(arg4);
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  {
    free(arg6);
  }
  {
    free(arg7);
  }
  {
    free(arg8);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXcallbacksetfunc(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXENVptr arg1 = (CPXENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  CPXLONG arg3 ;
  CPXCALLBACKFUNC *arg4 = (CPXCALLBACKFUNC *) 0 ;
  void *arg5 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  long long val3 ;
  int ecode3 = 0 ;
  int res5 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXcallbacksetfunc", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXcallbacksetfunc" "', argument " "1"" of type '" "CPXENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXcallbacksetfunc" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_long_SS_long(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXcallbacksetfunc" "', argument " "3"" of type '" "CPXLONG""'");
  } 
  arg3 = static_cast< CPXLONG >(val3);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[3], (void**)(&arg4), SWIGTYPE_p_f_p_cpxcallbackcontext_long_long_p_void__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "CPXcallbacksetfunc" "', argument " "4"" of type '" "CPXCALLBACKFUNC *""'"); 
    }
  }
  res5 = SWIG_ConvertPtr(swig_obj[4],SWIG_as_voidptrptr(&arg5), 0, 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXcallbacksetfunc" "', argument " "5"" of type '" "void *""'"); 
  }
  {
    try {
      result = (int)CPXcallbacksetfunc(arg1,arg2,arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXcheckdfeas(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int *arg3 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXcheckdfeas", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXcheckdfeas" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXcheckdfeas" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXcheckdfeas" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  {
    try {
      result = (int)CPXcheckdfeas((cpxenv const *)arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXcheckpfeas(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int *arg3 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXcheckpfeas", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXcheckpfeas" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXcheckpfeas" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXcheckpfeas" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  {
    try {
      result = (int)CPXcheckpfeas((cpxenv const *)arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXchecksoln(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int *arg3 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXchecksoln", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXchecksoln" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXchecksoln" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXchecksoln" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  {
    try {
      result = (int)CPXchecksoln((cpxenv const *)arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXchgbds(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  char *arg5 = (char *) 0 ;
  double *arg6 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  PyObject *swig_obj[6] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXchgbds", 6, 6, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXchgbds" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXchgbds" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXchgbds" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[3])) {
      int size = (int)PyList_Size(swig_obj[3]);
      int i = 0;
      arg4 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[3], i);
        if (PyInt_Check(o)) {
          arg4[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg4);
          return NULL;
        }
      }
    }
    else if (swig_obj[3] == Py_None) {
      arg4 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res5 = SWIG_AsCharPtrAndSize(swig_obj[4], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXchgbds" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = reinterpret_cast< char * >(buf5);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[5])) {
      int size = (int)PyList_Size(swig_obj[5]);
      int i = 0;
      arg6 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[5], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg6[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg6);
          return NULL;
        }
      }
    }
    else if (swig_obj[5] == Py_None) {
      arg6 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    try {
      result = (int)CPXchgbds((cpxenv const *)arg1,arg2,arg3,(int const *)arg4,(char const *)arg5,(double const *)arg6);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg4);
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  {
    free(arg6);
  }
  return resultobj;
fail:
  {
    free(arg4);
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  {
    free(arg6);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXchgcoef(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  int arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXchgcoef", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXchgcoef" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXchgcoef" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXchgcoef" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXchgcoef" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXchgcoef" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      result = (int)CPXchgcoef((cpxenv const *)arg1,arg2,arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXchgcoeflist(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  double *arg6 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[6] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXchgcoeflist", 6, 6, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXchgcoeflist" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXchgcoeflist" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXchgcoeflist" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[3])) {
      int size = (int)PyList_Size(swig_obj[3]);
      int i = 0;
      arg4 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[3], i);
        if (PyInt_Check(o)) {
          arg4[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg4);
          return NULL;
        }
      }
    }
    else if (swig_obj[3] == Py_None) {
      arg4 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[4])) {
      int size = (int)PyList_Size(swig_obj[4]);
      int i = 0;
      arg5 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[4], i);
        if (PyInt_Check(o)) {
          arg5[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg5);
          return NULL;
        }
      }
    }
    else if (swig_obj[4] == Py_None) {
      arg5 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[5])) {
      int size = (int)PyList_Size(swig_obj[5]);
      int i = 0;
      arg6 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[5], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg6[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg6);
          return NULL;
        }
      }
    }
    else if (swig_obj[5] == Py_None) {
      arg6 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    try {
      result = (int)CPXchgcoeflist((cpxenv const *)arg1,arg2,arg3,(int const *)arg4,(int const *)arg5,(double const *)arg6);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg4);
  }
  {
    free(arg5);
  }
  {
    free(arg6);
  }
  return resultobj;
fail:
  {
    free(arg4);
  }
  {
    free(arg5);
  }
  {
    free(arg6);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXchgcolname(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  char **arg5 = (char **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXchgcolname", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXchgcolname" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXchgcolname" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXchgcolname" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[3])) {
      int size = (int)PyList_Size(swig_obj[3]);
      int i = 0;
      arg4 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[3], i);
        if (PyInt_Check(o)) {
          arg4[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg4);
          return NULL;
        }
      }
    }
    else if (swig_obj[3] == Py_None) {
      arg4 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXchgcolname" "', argument " "5"" of type '" "char **""'"); 
  }
  arg5 = reinterpret_cast< char ** >(argp5);
  {
    try {
      result = (int)CPXchgcolname((cpxenv const *)arg1,arg2,arg3,(int const *)arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg4);
  }
  return resultobj;
fail:
  {
    free(arg4);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXchgname(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXchgname", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXchgname" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXchgname" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXchgname" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXchgname" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_AsCharPtrAndSize(swig_obj[4], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXchgname" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = reinterpret_cast< char * >(buf5);
  {
    try {
      result = (int)CPXchgname((cpxenv const *)arg1,arg2,arg3,arg4,(char const *)arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return resultobj;
fail:
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXchgobj(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  double *arg5 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXchgobj", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXchgobj" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXchgobj" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXchgobj" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[3])) {
      int size = (int)PyList_Size(swig_obj[3]);
      int i = 0;
      arg4 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[3], i);
        if (PyInt_Check(o)) {
          arg4[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg4);
          return NULL;
        }
      }
    }
    else if (swig_obj[3] == Py_None) {
      arg4 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[4])) {
      int size = (int)PyList_Size(swig_obj[4]);
      int i = 0;
      arg5 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[4], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg5[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg5);
          return NULL;
        }
      }
    }
    else if (swig_obj[4] == Py_None) {
      arg5 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    try {
      result = (int)CPXchgobj((cpxenv const *)arg1,arg2,arg3,(int const *)arg4,(double const *)arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg4);
  }
  {
    free(arg5);
  }
  return resultobj;
fail:
  {
    free(arg4);
  }
  {
    free(arg5);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXchgobjoffset(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXchgobjoffset", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXchgobjoffset" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXchgobjoffset" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXchgobjoffset" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (int)CPXchgobjoffset((cpxenv const *)arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXchgobjsen(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXchgobjsen", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXchgobjsen" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXchgobjsen" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXchgobjsen" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (int)CPXchgobjsen((cpxenv const *)arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXchgprobname(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXchgprobname", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXchgprobname" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXchgprobname" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXchgprobname" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try {
      result = (int)CPXchgprobname((cpxenv const *)arg1,arg2,(char const *)arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXchgprobtype(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXchgprobtype", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXchgprobtype" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXchgprobtype" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXchgprobtype" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (int)CPXchgprobtype((cpxenv const *)arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXchgprobtypesolnpool(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXchgprobtypesolnpool", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXchgprobtypesolnpool" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXchgprobtypesolnpool" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXchgprobtypesolnpool" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXchgprobtypesolnpool" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (int)CPXchgprobtypesolnpool((cpxenv const *)arg1,arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXchgrhs(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  double *arg5 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXchgrhs", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXchgrhs" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXchgrhs" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXchgrhs" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[3])) {
      int size = (int)PyList_Size(swig_obj[3]);
      int i = 0;
      arg4 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[3], i);
        if (PyInt_Check(o)) {
          arg4[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg4);
          return NULL;
        }
      }
    }
    else if (swig_obj[3] == Py_None) {
      arg4 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[4])) {
      int size = (int)PyList_Size(swig_obj[4]);
      int i = 0;
      arg5 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[4], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg5[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg5);
          return NULL;
        }
      }
    }
    else if (swig_obj[4] == Py_None) {
      arg5 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    try {
      result = (int)CPXchgrhs((cpxenv const *)arg1,arg2,arg3,(int const *)arg4,(double const *)arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg4);
  }
  {
    free(arg5);
  }
  return resultobj;
fail:
  {
    free(arg4);
  }
  {
    free(arg5);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXchgrngval(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  double *arg5 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXchgrngval", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXchgrngval" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXchgrngval" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXchgrngval" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[3])) {
      int size = (int)PyList_Size(swig_obj[3]);
      int i = 0;
      arg4 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[3], i);
        if (PyInt_Check(o)) {
          arg4[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg4);
          return NULL;
        }
      }
    }
    else if (swig_obj[3] == Py_None) {
      arg4 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[4])) {
      int size = (int)PyList_Size(swig_obj[4]);
      int i = 0;
      arg5 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[4], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg5[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg5);
          return NULL;
        }
      }
    }
    else if (swig_obj[4] == Py_None) {
      arg5 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    try {
      result = (int)CPXchgrngval((cpxenv const *)arg1,arg2,arg3,(int const *)arg4,(double const *)arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg4);
  }
  {
    free(arg5);
  }
  return resultobj;
fail:
  {
    free(arg4);
  }
  {
    free(arg5);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXchgrowname(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  char **arg5 = (char **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXchgrowname", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXchgrowname" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXchgrowname" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXchgrowname" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[3])) {
      int size = (int)PyList_Size(swig_obj[3]);
      int i = 0;
      arg4 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[3], i);
        if (PyInt_Check(o)) {
          arg4[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg4);
          return NULL;
        }
      }
    }
    else if (swig_obj[3] == Py_None) {
      arg4 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXchgrowname" "', argument " "5"" of type '" "char **""'"); 
  }
  arg5 = reinterpret_cast< char ** >(argp5);
  {
    try {
      result = (int)CPXchgrowname((cpxenv const *)arg1,arg2,arg3,(int const *)arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg4);
  }
  return resultobj;
fail:
  {
    free(arg4);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXchgsense(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXchgsense", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXchgsense" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXchgsense" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXchgsense" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[3])) {
      int size = (int)PyList_Size(swig_obj[3]);
      int i = 0;
      arg4 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[3], i);
        if (PyInt_Check(o)) {
          arg4[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg4);
          return NULL;
        }
      }
    }
    else if (swig_obj[3] == Py_None) {
      arg4 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res5 = SWIG_AsCharPtrAndSize(swig_obj[4], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXchgsense" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = reinterpret_cast< char * >(buf5);
  {
    try {
      result = (int)CPXchgsense((cpxenv const *)arg1,arg2,arg3,(int const *)arg4,(char const *)arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg4);
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return resultobj;
fail:
  {
    free(arg4);
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXcleanup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXcleanup", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXcleanup" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXcleanup" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXcleanup" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (int)CPXcleanup((cpxenv const *)arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXcloneprob(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int *arg3 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  CPXLPptr result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXcloneprob", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXcloneprob" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXcloneprob" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXcloneprob" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  {
    try {
      result = (CPXLPptr)CPXcloneprob((cpxenv const *)arg1,(cpxlp const *)arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpxlp, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXcloseCPLEX(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXENVptr *arg1 = (CPXENVptr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXcloseCPLEX" "', argument " "1"" of type '" "CPXENVptr *""'"); 
  }
  arg1 = reinterpret_cast< CPXENVptr * >(argp1);
  {
    try {
      result = (int)CPXcloseCPLEX(arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXclpwrite(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXclpwrite", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXclpwrite" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXclpwrite" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXclpwrite" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try {
      result = (int)CPXclpwrite((cpxenv const *)arg1,(cpxlp const *)arg2,(char const *)arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXcompletelp(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXcompletelp", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXcompletelp" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXcompletelp" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  {
    try {
      result = (int)CPXcompletelp((cpxenv const *)arg1,arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXcopybase(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXcopybase", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXcopybase" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXcopybase" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[2])) {
      int size = (int)PyList_Size(swig_obj[2]);
      int i = 0;
      arg3 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[2], i);
        if (PyInt_Check(o)) {
          arg3[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg3);
          return NULL;
        }
      }
    }
    else if (swig_obj[2] == Py_None) {
      arg3 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[3])) {
      int size = (int)PyList_Size(swig_obj[3]);
      int i = 0;
      arg4 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[3], i);
        if (PyInt_Check(o)) {
          arg4[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg4);
          return NULL;
        }
      }
    }
    else if (swig_obj[3] == Py_None) {
      arg4 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    try {
      result = (int)CPXcopybase((cpxenv const *)arg1,arg2,(int const *)arg3,(int const *)arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg3);
  }
  {
    free(arg4);
  }
  return resultobj;
fail:
  {
    free(arg3);
  }
  {
    free(arg4);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXcopybasednorms(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  double *arg5 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXcopybasednorms", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXcopybasednorms" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXcopybasednorms" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[2])) {
      int size = (int)PyList_Size(swig_obj[2]);
      int i = 0;
      arg3 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[2], i);
        if (PyInt_Check(o)) {
          arg3[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg3);
          return NULL;
        }
      }
    }
    else if (swig_obj[2] == Py_None) {
      arg3 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[3])) {
      int size = (int)PyList_Size(swig_obj[3]);
      int i = 0;
      arg4 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[3], i);
        if (PyInt_Check(o)) {
          arg4[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg4);
          return NULL;
        }
      }
    }
    else if (swig_obj[3] == Py_None) {
      arg4 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[4])) {
      int size = (int)PyList_Size(swig_obj[4]);
      int i = 0;
      arg5 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[4], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg5[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg5);
          return NULL;
        }
      }
    }
    else if (swig_obj[4] == Py_None) {
      arg5 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    try {
      result = (int)CPXcopybasednorms((cpxenv const *)arg1,arg2,(int const *)arg3,(int const *)arg4,(double const *)arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg3);
  }
  {
    free(arg4);
  }
  {
    free(arg5);
  }
  return resultobj;
fail:
  {
    free(arg3);
  }
  {
    free(arg4);
  }
  {
    free(arg5);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXcopydnorms(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  double *arg3 = (double *) 0 ;
  int *arg4 = (int *) 0 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXcopydnorms", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXcopydnorms" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXcopydnorms" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[2])) {
      int size = (int)PyList_Size(swig_obj[2]);
      int i = 0;
      arg3 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[2], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg3[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg3);
          return NULL;
        }
      }
    }
    else if (swig_obj[2] == Py_None) {
      arg3 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[3])) {
      int size = (int)PyList_Size(swig_obj[3]);
      int i = 0;
      arg4 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[3], i);
        if (PyInt_Check(o)) {
          arg4[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg4);
          return NULL;
        }
      }
    }
    else if (swig_obj[3] == Py_None) {
      arg4 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXcopydnorms" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (int)CPXcopydnorms((cpxenv const *)arg1,arg2,(double const *)arg3,(int const *)arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg3);
  }
  {
    free(arg4);
  }
  return resultobj;
fail:
  {
    free(arg3);
  }
  {
    free(arg4);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXcopylp(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  char *arg8 = (char *) 0 ;
  int *arg9 = (int *) 0 ;
  int *arg10 = (int *) 0 ;
  int *arg11 = (int *) 0 ;
  double *arg12 = (double *) 0 ;
  double *arg13 = (double *) 0 ;
  double *arg14 = (double *) 0 ;
  double *arg15 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  PyObject *swig_obj[15] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXcopylp", 15, 15, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXcopylp" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXcopylp" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXcopylp" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXcopylp" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXcopylp" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[5])) {
      int size = (int)PyList_Size(swig_obj[5]);
      int i = 0;
      arg6 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[5], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg6[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg6);
          return NULL;
        }
      }
    }
    else if (swig_obj[5] == Py_None) {
      arg6 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[6])) {
      int size = (int)PyList_Size(swig_obj[6]);
      int i = 0;
      arg7 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[6], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg7[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg7);
          return NULL;
        }
      }
    }
    else if (swig_obj[6] == Py_None) {
      arg7 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res8 = SWIG_AsCharPtrAndSize(swig_obj[7], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "CPXcopylp" "', argument " "8"" of type '" "char const *""'");
  }
  arg8 = reinterpret_cast< char * >(buf8);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[8])) {
      int size = (int)PyList_Size(swig_obj[8]);
      int i = 0;
      arg9 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[8], i);
        if (PyInt_Check(o)) {
          arg9[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg9);
          return NULL;
        }
      }
    }
    else if (swig_obj[8] == Py_None) {
      arg9 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[9])) {
      int size = (int)PyList_Size(swig_obj[9]);
      int i = 0;
      arg10 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[9], i);
        if (PyInt_Check(o)) {
          arg10[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg10);
          return NULL;
        }
      }
    }
    else if (swig_obj[9] == Py_None) {
      arg10 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[10])) {
      int size = (int)PyList_Size(swig_obj[10]);
      int i = 0;
      arg11 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[10], i);
        if (PyInt_Check(o)) {
          arg11[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg11);
          return NULL;
        }
      }
    }
    else if (swig_obj[10] == Py_None) {
      arg11 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[11])) {
      int size = (int)PyList_Size(swig_obj[11]);
      int i = 0;
      arg12 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[11], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg12[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg12);
          return NULL;
        }
      }
    }
    else if (swig_obj[11] == Py_None) {
      arg12 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[12])) {
      int size = (int)PyList_Size(swig_obj[12]);
      int i = 0;
      arg13 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[12], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg13[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg13);
          return NULL;
        }
      }
    }
    else if (swig_obj[12] == Py_None) {
      arg13 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[13])) {
      int size = (int)PyList_Size(swig_obj[13]);
      int i = 0;
      arg14 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[13], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg14[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg14);
          return NULL;
        }
      }
    }
    else if (swig_obj[13] == Py_None) {
      arg14 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[14])) {
      int size = (int)PyList_Size(swig_obj[14]);
      int i = 0;
      arg15 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[14], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg15[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg15);
          return NULL;
        }
      }
    }
    else if (swig_obj[14] == Py_None) {
      arg15 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    try {
      result = (int)CPXcopylp((cpxenv const *)arg1,arg2,arg3,arg4,arg5,(double const *)arg6,(double const *)arg7,(char const *)arg8,(int const *)arg9,(int const *)arg10,(int const *)arg11,(double const *)arg12,(double const *)arg13,(double const *)arg14,(double const *)arg15);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg6);
  }
  {
    free(arg7);
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  {
    free(arg9);
  }
  {
    free(arg10);
  }
  {
    free(arg11);
  }
  {
    free(arg12);
  }
  {
    free(arg13);
  }
  {
    free(arg14);
  }
  {
    free(arg15);
  }
  return resultobj;
fail:
  {
    free(arg6);
  }
  {
    free(arg7);
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  {
    free(arg9);
  }
  {
    free(arg10);
  }
  {
    free(arg11);
  }
  {
    free(arg12);
  }
  {
    free(arg13);
  }
  {
    free(arg14);
  }
  {
    free(arg15);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXcopylpwnames(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  char *arg8 = (char *) 0 ;
  int *arg9 = (int *) 0 ;
  int *arg10 = (int *) 0 ;
  int *arg11 = (int *) 0 ;
  double *arg12 = (double *) 0 ;
  double *arg13 = (double *) 0 ;
  double *arg14 = (double *) 0 ;
  double *arg15 = (double *) 0 ;
  char **arg16 = (char **) 0 ;
  char **arg17 = (char **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  void *argp16 = 0 ;
  int res16 = 0 ;
  void *argp17 = 0 ;
  int res17 = 0 ;
  PyObject *swig_obj[17] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXcopylpwnames", 17, 17, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXcopylpwnames" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXcopylpwnames" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXcopylpwnames" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXcopylpwnames" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXcopylpwnames" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[5])) {
      int size = (int)PyList_Size(swig_obj[5]);
      int i = 0;
      arg6 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[5], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg6[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg6);
          return NULL;
        }
      }
    }
    else if (swig_obj[5] == Py_None) {
      arg6 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[6])) {
      int size = (int)PyList_Size(swig_obj[6]);
      int i = 0;
      arg7 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[6], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg7[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg7);
          return NULL;
        }
      }
    }
    else if (swig_obj[6] == Py_None) {
      arg7 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res8 = SWIG_AsCharPtrAndSize(swig_obj[7], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "CPXcopylpwnames" "', argument " "8"" of type '" "char const *""'");
  }
  arg8 = reinterpret_cast< char * >(buf8);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[8])) {
      int size = (int)PyList_Size(swig_obj[8]);
      int i = 0;
      arg9 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[8], i);
        if (PyInt_Check(o)) {
          arg9[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg9);
          return NULL;
        }
      }
    }
    else if (swig_obj[8] == Py_None) {
      arg9 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[9])) {
      int size = (int)PyList_Size(swig_obj[9]);
      int i = 0;
      arg10 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[9], i);
        if (PyInt_Check(o)) {
          arg10[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg10);
          return NULL;
        }
      }
    }
    else if (swig_obj[9] == Py_None) {
      arg10 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[10])) {
      int size = (int)PyList_Size(swig_obj[10]);
      int i = 0;
      arg11 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[10], i);
        if (PyInt_Check(o)) {
          arg11[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg11);
          return NULL;
        }
      }
    }
    else if (swig_obj[10] == Py_None) {
      arg11 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[11])) {
      int size = (int)PyList_Size(swig_obj[11]);
      int i = 0;
      arg12 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[11], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg12[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg12);
          return NULL;
        }
      }
    }
    else if (swig_obj[11] == Py_None) {
      arg12 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[12])) {
      int size = (int)PyList_Size(swig_obj[12]);
      int i = 0;
      arg13 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[12], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg13[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg13);
          return NULL;
        }
      }
    }
    else if (swig_obj[12] == Py_None) {
      arg13 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[13])) {
      int size = (int)PyList_Size(swig_obj[13]);
      int i = 0;
      arg14 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[13], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg14[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg14);
          return NULL;
        }
      }
    }
    else if (swig_obj[13] == Py_None) {
      arg14 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[14])) {
      int size = (int)PyList_Size(swig_obj[14]);
      int i = 0;
      arg15 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[14], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg15[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg15);
          return NULL;
        }
      }
    }
    else if (swig_obj[14] == Py_None) {
      arg15 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res16 = SWIG_ConvertPtr(swig_obj[15], &argp16,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res16)) {
    SWIG_exception_fail(SWIG_ArgError(res16), "in method '" "CPXcopylpwnames" "', argument " "16"" of type '" "char **""'"); 
  }
  arg16 = reinterpret_cast< char ** >(argp16);
  res17 = SWIG_ConvertPtr(swig_obj[16], &argp17,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res17)) {
    SWIG_exception_fail(SWIG_ArgError(res17), "in method '" "CPXcopylpwnames" "', argument " "17"" of type '" "char **""'"); 
  }
  arg17 = reinterpret_cast< char ** >(argp17);
  {
    try {
      result = (int)CPXcopylpwnames((cpxenv const *)arg1,arg2,arg3,arg4,arg5,(double const *)arg6,(double const *)arg7,(char const *)arg8,(int const *)arg9,(int const *)arg10,(int const *)arg11,(double const *)arg12,(double const *)arg13,(double const *)arg14,(double const *)arg15,arg16,arg17);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg6);
  }
  {
    free(arg7);
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  {
    free(arg9);
  }
  {
    free(arg10);
  }
  {
    free(arg11);
  }
  {
    free(arg12);
  }
  {
    free(arg13);
  }
  {
    free(arg14);
  }
  {
    free(arg15);
  }
  return resultobj;
fail:
  {
    free(arg6);
  }
  {
    free(arg7);
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  {
    free(arg9);
  }
  {
    free(arg10);
  }
  {
    free(arg11);
  }
  {
    free(arg12);
  }
  {
    free(arg13);
  }
  {
    free(arg14);
  }
  {
    free(arg15);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXcopynettolp(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  CPXCNETptr arg3 = (CPXCNETptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXcopynettolp", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXcopynettolp" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXcopynettolp" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_cpxnet, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXcopynettolp" "', argument " "3"" of type '" "CPXCNETptr""'"); 
  }
  arg3 = reinterpret_cast< CPXCNETptr >(argp3);
  {
    try {
      result = (int)CPXcopynettolp((cpxenv const *)arg1,arg2,(cpxnet const *)arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXcopyobjname(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXcopyobjname", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXcopyobjname" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXcopyobjname" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXcopyobjname" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try {
      result = (int)CPXcopyobjname((cpxenv const *)arg1,arg2,(char const *)arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXcopypnorms(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXcopypnorms", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXcopypnorms" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXcopypnorms" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[2])) {
      int size = (int)PyList_Size(swig_obj[2]);
      int i = 0;
      arg3 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[2], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg3[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg3);
          return NULL;
        }
      }
    }
    else if (swig_obj[2] == Py_None) {
      arg3 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[3])) {
      int size = (int)PyList_Size(swig_obj[3]);
      int i = 0;
      arg4 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[3], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg4[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg4);
          return NULL;
        }
      }
    }
    else if (swig_obj[3] == Py_None) {
      arg4 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXcopypnorms" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (int)CPXcopypnorms((cpxenv const *)arg1,arg2,(double const *)arg3,(double const *)arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg3);
  }
  {
    free(arg4);
  }
  return resultobj;
fail:
  {
    free(arg3);
  }
  {
    free(arg4);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXcopyprotected(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXcopyprotected", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXcopyprotected" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXcopyprotected" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXcopyprotected" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[3])) {
      int size = (int)PyList_Size(swig_obj[3]);
      int i = 0;
      arg4 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[3], i);
        if (PyInt_Check(o)) {
          arg4[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg4);
          return NULL;
        }
      }
    }
    else if (swig_obj[3] == Py_None) {
      arg4 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    try {
      result = (int)CPXcopyprotected((cpxenv const *)arg1,arg2,arg3,(int const *)arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg4);
  }
  return resultobj;
fail:
  {
    free(arg4);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXcopystart(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[8] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXcopystart", 8, 8, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXcopystart" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXcopystart" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[2])) {
      int size = (int)PyList_Size(swig_obj[2]);
      int i = 0;
      arg3 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[2], i);
        if (PyInt_Check(o)) {
          arg3[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg3);
          return NULL;
        }
      }
    }
    else if (swig_obj[2] == Py_None) {
      arg3 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[3])) {
      int size = (int)PyList_Size(swig_obj[3]);
      int i = 0;
      arg4 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[3], i);
        if (PyInt_Check(o)) {
          arg4[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg4);
          return NULL;
        }
      }
    }
    else if (swig_obj[3] == Py_None) {
      arg4 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[4])) {
      int size = (int)PyList_Size(swig_obj[4]);
      int i = 0;
      arg5 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[4], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg5[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg5);
          return NULL;
        }
      }
    }
    else if (swig_obj[4] == Py_None) {
      arg5 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[5])) {
      int size = (int)PyList_Size(swig_obj[5]);
      int i = 0;
      arg6 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[5], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg6[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg6);
          return NULL;
        }
      }
    }
    else if (swig_obj[5] == Py_None) {
      arg6 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[6])) {
      int size = (int)PyList_Size(swig_obj[6]);
      int i = 0;
      arg7 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[6], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg7[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg7);
          return NULL;
        }
      }
    }
    else if (swig_obj[6] == Py_None) {
      arg7 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[7])) {
      int size = (int)PyList_Size(swig_obj[7]);
      int i = 0;
      arg8 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[7], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg8[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg8);
          return NULL;
        }
      }
    }
    else if (swig_obj[7] == Py_None) {
      arg8 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    try {
      result = (int)CPXcopystart((cpxenv const *)arg1,arg2,(int const *)arg3,(int const *)arg4,(double const *)arg5,(double const *)arg6,(double const *)arg7,(double const *)arg8);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg3);
  }
  {
    free(arg4);
  }
  {
    free(arg5);
  }
  {
    free(arg6);
  }
  {
    free(arg7);
  }
  {
    free(arg8);
  }
  return resultobj;
fail:
  {
    free(arg3);
  }
  {
    free(arg4);
  }
  {
    free(arg5);
  }
  {
    free(arg6);
  }
  {
    free(arg7);
  }
  {
    free(arg8);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXcreateprob(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  int *arg2 = (int *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject *swig_obj[3] ;
  CPXLPptr result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXcreateprob", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXcreateprob" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXcreateprob" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXcreateprob" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try {
      result = (CPXLPptr)CPXcreateprob((cpxenv const *)arg1,arg2,(char const *)arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpxlp, 0 |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXcrushform(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  double *arg5 = (double *) 0 ;
  int *arg6 = (int *) 0 ;
  double *arg7 = (double *) 0 ;
  int *arg8 = (int *) 0 ;
  double *arg9 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  PyObject *swig_obj[9] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXcrushform", 9, 9, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXcrushform" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXcrushform" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXcrushform" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[3])) {
      int size = (int)PyList_Size(swig_obj[3]);
      int i = 0;
      arg4 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[3], i);
        if (PyInt_Check(o)) {
          arg4[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg4);
          return NULL;
        }
      }
    }
    else if (swig_obj[3] == Py_None) {
      arg4 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[4])) {
      int size = (int)PyList_Size(swig_obj[4]);
      int i = 0;
      arg5 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[4], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg5[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg5);
          return NULL;
        }
      }
    }
    else if (swig_obj[4] == Py_None) {
      arg5 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res6 = SWIG_ConvertPtr(swig_obj[5], &argp6,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CPXcrushform" "', argument " "6"" of type '" "int *""'"); 
  }
  arg6 = reinterpret_cast< int * >(argp6);
  res7 = SWIG_ConvertPtr(swig_obj[6], &argp7,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "CPXcrushform" "', argument " "7"" of type '" "double *""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  res8 = SWIG_ConvertPtr(swig_obj[7], &argp8,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "CPXcrushform" "', argument " "8"" of type '" "int *""'"); 
  }
  arg8 = reinterpret_cast< int * >(argp8);
  res9 = SWIG_ConvertPtr(swig_obj[8], &argp9,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "CPXcrushform" "', argument " "9"" of type '" "double *""'"); 
  }
  arg9 = reinterpret_cast< double * >(argp9);
  {
    try {
      result = (int)CPXcrushform((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,(int const *)arg4,(double const *)arg5,arg6,arg7,arg8,arg9);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg4);
  }
  {
    free(arg5);
  }
  return resultobj;
fail:
  {
    free(arg4);
  }
  {
    free(arg5);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXcrushpi(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXcrushpi", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXcrushpi" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXcrushpi" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[2])) {
      int size = (int)PyList_Size(swig_obj[2]);
      int i = 0;
      arg3 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[2], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg3[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg3);
          return NULL;
        }
      }
    }
    else if (swig_obj[2] == Py_None) {
      arg3 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXcrushpi" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  {
    try {
      result = (int)CPXcrushpi((cpxenv const *)arg1,(cpxlp const *)arg2,(double const *)arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg3);
  }
  return resultobj;
fail:
  {
    free(arg3);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXcrushx(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXcrushx", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXcrushx" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXcrushx" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[2])) {
      int size = (int)PyList_Size(swig_obj[2]);
      int i = 0;
      arg3 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[2], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg3[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg3);
          return NULL;
        }
      }
    }
    else if (swig_obj[2] == Py_None) {
      arg3 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXcrushx" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  {
    try {
      result = (int)CPXcrushx((cpxenv const *)arg1,(cpxlp const *)arg2,(double const *)arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg3);
  }
  return resultobj;
fail:
  {
    free(arg3);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXdelcols(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXdelcols", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXdelcols" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXdelcols" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXdelcols" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXdelcols" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (int)CPXdelcols((cpxenv const *)arg1,arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXdeldblannotation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXdeldblannotation", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXdeldblannotation" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXdeldblannotation" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXdeldblannotation" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (int)CPXdeldblannotation((cpxenv const *)arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXdeldblannotations(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXdeldblannotations", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXdeldblannotations" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXdeldblannotations" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXdeldblannotations" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXdeldblannotations" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (int)CPXdeldblannotations((cpxenv const *)arg1,arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXdelfuncdest(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCHANNELptr arg2 = (CPXCHANNELptr) 0 ;
  void *arg3 = (void *) 0 ;
  void (*arg4)(void *,char const *) = (void (*)(void *,char const *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXdelfuncdest", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXdelfuncdest" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxchannel, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXdelfuncdest" "', argument " "2"" of type '" "CPXCHANNELptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCHANNELptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2],SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXdelfuncdest" "', argument " "3"" of type '" "void *""'"); 
  }
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[3], (void**)(&arg4), SWIGTYPE_p_f_p_void_p_q_const__char__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "CPXdelfuncdest" "', argument " "4"" of type '" "void (*)(void *,char const *)""'"); 
    }
  }
  {
    try {
      result = (int)CPXdelfuncdest((cpxenv const *)arg1,arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXdellongannotation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXdellongannotation", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXdellongannotation" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXdellongannotation" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXdellongannotation" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (int)CPXdellongannotation((cpxenv const *)arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXdellongannotations(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXdellongannotations", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXdellongannotations" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXdellongannotations" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXdellongannotations" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXdellongannotations" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (int)CPXdellongannotations((cpxenv const *)arg1,arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXdelnames(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXdelnames", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXdelnames" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXdelnames" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  {
    try {
      result = (int)CPXdelnames((cpxenv const *)arg1,arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXdelpwl(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXdelpwl", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXdelpwl" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXdelpwl" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXdelpwl" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXdelpwl" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (int)CPXdelpwl((cpxenv const *)arg1,arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXdelrows(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXdelrows", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXdelrows" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXdelrows" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXdelrows" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXdelrows" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (int)CPXdelrows((cpxenv const *)arg1,arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXdelsetcols(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int *arg3 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXdelsetcols", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXdelsetcols" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXdelsetcols" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXdelsetcols" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  {
    try {
      result = (int)CPXdelsetcols((cpxenv const *)arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXdelsetpwl(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int *arg3 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXdelsetpwl", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXdelsetpwl" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXdelsetpwl" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXdelsetpwl" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  {
    try {
      result = (int)CPXdelsetpwl((cpxenv const *)arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXdelsetrows(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int *arg3 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXdelsetrows", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXdelsetrows" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXdelsetrows" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXdelsetrows" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  {
    try {
      result = (int)CPXdelsetrows((cpxenv const *)arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXdeserializercreate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXDESERIALIZERptr *arg1 = (CPXDESERIALIZERptr *) 0 ;
  CPXLONG arg2 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  int res3 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXdeserializercreate", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_p_cpxdeserializer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXdeserializercreate" "', argument " "1"" of type '" "CPXDESERIALIZERptr *""'"); 
  }
  arg1 = reinterpret_cast< CPXDESERIALIZERptr * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPXdeserializercreate" "', argument " "2"" of type '" "CPXLONG""'");
  } 
  arg2 = static_cast< CPXLONG >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2],SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXdeserializercreate" "', argument " "3"" of type '" "void const *""'"); 
  }
  {
    try {
      result = (int)CPXdeserializercreate(arg1,arg2,(void const *)arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXdeserializerdestroy(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXDESERIALIZERptr arg1 = (CPXDESERIALIZERptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxdeserializer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXdeserializerdestroy" "', argument " "1"" of type '" "CPXDESERIALIZERptr""'"); 
  }
  arg1 = reinterpret_cast< CPXDESERIALIZERptr >(argp1);
  {
    try {
      CPXdeserializerdestroy(arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXdeserializerleft(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCDESERIALIZERptr arg1 = (CPXCDESERIALIZERptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  CPXLONG result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxdeserializer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXdeserializerleft" "', argument " "1"" of type '" "CPXCDESERIALIZERptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCDESERIALIZERptr >(argp1);
  {
    try {
      result = (CPXLONG)CPXdeserializerleft((cpxdeserializer const *)arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXdisconnectchannel(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCHANNELptr arg2 = (CPXCHANNELptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXdisconnectchannel", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXdisconnectchannel" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxchannel, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXdisconnectchannel" "', argument " "2"" of type '" "CPXCHANNELptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCHANNELptr >(argp2);
  {
    try {
      result = (int)CPXdisconnectchannel((cpxenv const *)arg1,arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXdjfrompi(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXdjfrompi", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXdjfrompi" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXdjfrompi" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[2])) {
      int size = (int)PyList_Size(swig_obj[2]);
      int i = 0;
      arg3 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[2], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg3[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg3);
          return NULL;
        }
      }
    }
    else if (swig_obj[2] == Py_None) {
      arg3 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXdjfrompi" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  {
    try {
      result = (int)CPXdjfrompi((cpxenv const *)arg1,(cpxlp const *)arg2,(double const *)arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg3);
  }
  return resultobj;
fail:
  {
    free(arg3);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXdperwrite(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXdperwrite", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXdperwrite" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXdperwrite" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXdperwrite" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXdperwrite" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (int)CPXdperwrite((cpxenv const *)arg1,arg2,(char const *)arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXdratio(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  int *arg7 = (int *) 0 ;
  int *arg8 = (int *) 0 ;
  int *arg9 = (int *) 0 ;
  int *arg10 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  PyObject *swig_obj[10] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXdratio", 10, 10, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXdratio" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXdratio" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXdratio" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXdratio" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXdratio" "', argument " "5"" of type '" "double *""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(swig_obj[5], &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CPXdratio" "', argument " "6"" of type '" "double *""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  res7 = SWIG_ConvertPtr(swig_obj[6], &argp7,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "CPXdratio" "', argument " "7"" of type '" "int *""'"); 
  }
  arg7 = reinterpret_cast< int * >(argp7);
  res8 = SWIG_ConvertPtr(swig_obj[7], &argp8,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "CPXdratio" "', argument " "8"" of type '" "int *""'"); 
  }
  arg8 = reinterpret_cast< int * >(argp8);
  res9 = SWIG_ConvertPtr(swig_obj[8], &argp9,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "CPXdratio" "', argument " "9"" of type '" "int *""'"); 
  }
  arg9 = reinterpret_cast< int * >(argp9);
  res10 = SWIG_ConvertPtr(swig_obj[9], &argp10,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "CPXdratio" "', argument " "10"" of type '" "int *""'"); 
  }
  arg10 = reinterpret_cast< int * >(argp10);
  {
    try {
      result = (int)CPXdratio((cpxenv const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXdualfarkas(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXdualfarkas", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXdualfarkas" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXdualfarkas" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXdualfarkas" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXdualfarkas" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  {
    try {
      result = (int)CPXdualfarkas((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXdualopt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXdualopt", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXdualopt" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXdualopt" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  {
    try {
      result = (int)CPXdualopt((cpxenv const *)arg1,arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXdualwrite(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  char *arg3 = (char *) 0 ;
  double *arg4 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXdualwrite", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXdualwrite" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXdualwrite" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXdualwrite" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXdualwrite" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  {
    try {
      result = (int)CPXdualwrite((cpxenv const *)arg1,(cpxlp const *)arg2,(char const *)arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXembwrite(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXembwrite", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXembwrite" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXembwrite" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXembwrite" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try {
      result = (int)CPXembwrite((cpxenv const *)arg1,arg2,(char const *)arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXfeasopt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[6] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXfeasopt", 6, 6, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXfeasopt" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXfeasopt" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[2])) {
      int size = (int)PyList_Size(swig_obj[2]);
      int i = 0;
      arg3 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[2], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg3[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg3);
          return NULL;
        }
      }
    }
    else if (swig_obj[2] == Py_None) {
      arg3 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[3])) {
      int size = (int)PyList_Size(swig_obj[3]);
      int i = 0;
      arg4 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[3], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg4[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg4);
          return NULL;
        }
      }
    }
    else if (swig_obj[3] == Py_None) {
      arg4 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[4])) {
      int size = (int)PyList_Size(swig_obj[4]);
      int i = 0;
      arg5 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[4], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg5[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg5);
          return NULL;
        }
      }
    }
    else if (swig_obj[4] == Py_None) {
      arg5 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[5])) {
      int size = (int)PyList_Size(swig_obj[5]);
      int i = 0;
      arg6 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[5], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg6[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg6);
          return NULL;
        }
      }
    }
    else if (swig_obj[5] == Py_None) {
      arg6 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    try {
      result = (int)CPXfeasopt((cpxenv const *)arg1,arg2,(double const *)arg3,(double const *)arg4,(double const *)arg5,(double const *)arg6);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg3);
  }
  {
    free(arg4);
  }
  {
    free(arg5);
  }
  {
    free(arg6);
  }
  return resultobj;
fail:
  {
    free(arg3);
  }
  {
    free(arg4);
  }
  {
    free(arg5);
  }
  {
    free(arg6);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXfeasoptext(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  int *arg6 = (int *) 0 ;
  int *arg7 = (int *) 0 ;
  char *arg8 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  PyObject *swig_obj[8] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXfeasoptext", 8, 8, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXfeasoptext" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXfeasoptext" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXfeasoptext" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXfeasoptext" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[4])) {
      int size = (int)PyList_Size(swig_obj[4]);
      int i = 0;
      arg5 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[4], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg5[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg5);
          return NULL;
        }
      }
    }
    else if (swig_obj[4] == Py_None) {
      arg5 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[5])) {
      int size = (int)PyList_Size(swig_obj[5]);
      int i = 0;
      arg6 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[5], i);
        if (PyInt_Check(o)) {
          arg6[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg6);
          return NULL;
        }
      }
    }
    else if (swig_obj[5] == Py_None) {
      arg6 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[6])) {
      int size = (int)PyList_Size(swig_obj[6]);
      int i = 0;
      arg7 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[6], i);
        if (PyInt_Check(o)) {
          arg7[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg7);
          return NULL;
        }
      }
    }
    else if (swig_obj[6] == Py_None) {
      arg7 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res8 = SWIG_AsCharPtrAndSize(swig_obj[7], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "CPXfeasoptext" "', argument " "8"" of type '" "char const *""'");
  }
  arg8 = reinterpret_cast< char * >(buf8);
  {
    try {
      result = (int)CPXfeasoptext((cpxenv const *)arg1,arg2,arg3,arg4,(double const *)arg5,(int const *)arg6,(int const *)arg7,(char const *)arg8);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg5);
  }
  {
    free(arg6);
  }
  {
    free(arg7);
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return resultobj;
fail:
  {
    free(arg5);
  }
  {
    free(arg6);
  }
  {
    free(arg7);
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXfinalize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXfinalize", 0, 0, 0)) SWIG_fail;
  {
    try {
      CPXfinalize();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXflushchannel(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCHANNELptr arg2 = (CPXCHANNELptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXflushchannel", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXflushchannel" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxchannel, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXflushchannel" "', argument " "2"" of type '" "CPXCHANNELptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCHANNELptr >(argp2);
  {
    try {
      result = (int)CPXflushchannel((cpxenv const *)arg1,arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXflushstdchannels(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXflushstdchannels" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  {
    try {
      result = (int)CPXflushstdchannels((cpxenv const *)arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXfreepresolve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXfreepresolve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXfreepresolve" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXfreepresolve" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  {
    try {
      result = (int)CPXfreepresolve((cpxenv const *)arg1,arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXfreeprob(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr *arg2 = (CPXLPptr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXfreeprob", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXfreeprob" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXfreeprob" "', argument " "2"" of type '" "CPXLPptr *""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr * >(argp2);
  {
    try {
      result = (int)CPXfreeprob((cpxenv const *)arg1,arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXftran(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  double *arg3 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXftran", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXftran" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXftran" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXftran" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  {
    try {
      result = (int)CPXftran((cpxenv const *)arg1,(cpxlp const *)arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetax(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetax", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetax" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetax" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetax" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXgetax" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXgetax" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (int)CPXgetax((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetbaritcnt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetbaritcnt", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetbaritcnt" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetbaritcnt" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  {
    try {
      result = (int)CPXgetbaritcnt((cpxenv const *)arg1,(cpxlp const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetbase(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetbase", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetbase" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetbase" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetbase" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetbase" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  {
    try {
      result = (int)CPXgetbase((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetbasednorms(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  double *arg5 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetbasednorms", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetbasednorms" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetbasednorms" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetbasednorms" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetbasednorms" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXgetbasednorms" "', argument " "5"" of type '" "double *""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  {
    try {
      result = (int)CPXgetbasednorms((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetbhead(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int *arg3 = (int *) 0 ;
  double *arg4 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetbhead", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetbhead" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetbhead" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetbhead" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetbhead" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  {
    try {
      result = (int)CPXgetbhead((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetcallbackinfo(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int res5 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetcallbackinfo", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetcallbackinfo" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetcallbackinfo" "', argument " "2"" of type '" "void *""'"); 
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXgetcallbackinfo" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXgetcallbackinfo" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(swig_obj[4],SWIG_as_voidptrptr(&arg5), 0, 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXgetcallbackinfo" "', argument " "5"" of type '" "void *""'"); 
  }
  {
    try {
      result = (int)CPXgetcallbackinfo((cpxenv const *)arg1,arg2,arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetchannels(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCHANNELptr *arg2 = (CPXCHANNELptr *) 0 ;
  CPXCHANNELptr *arg3 = (CPXCHANNELptr *) 0 ;
  CPXCHANNELptr *arg4 = (CPXCHANNELptr *) 0 ;
  CPXCHANNELptr *arg5 = (CPXCHANNELptr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetchannels", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetchannels" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_p_cpxchannel, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetchannels" "', argument " "2"" of type '" "CPXCHANNELptr *""'"); 
  }
  arg2 = reinterpret_cast< CPXCHANNELptr * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_p_cpxchannel, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetchannels" "', argument " "3"" of type '" "CPXCHANNELptr *""'"); 
  }
  arg3 = reinterpret_cast< CPXCHANNELptr * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_p_cpxchannel, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetchannels" "', argument " "4"" of type '" "CPXCHANNELptr *""'"); 
  }
  arg4 = reinterpret_cast< CPXCHANNELptr * >(argp4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_p_cpxchannel, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXgetchannels" "', argument " "5"" of type '" "CPXCHANNELptr *""'"); 
  }
  arg5 = reinterpret_cast< CPXCHANNELptr * >(argp5);
  {
    try {
      result = (int)CPXgetchannels((cpxenv const *)arg1,arg2,arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetchgparam(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetchgparam", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetchgparam" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetchgparam" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetchgparam" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXgetchgparam" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXgetchgparam" "', argument " "5"" of type '" "int *""'"); 
  }
  arg5 = reinterpret_cast< int * >(argp5);
  {
    try {
      result = (int)CPXgetchgparam((cpxenv const *)arg1,arg2,arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetcoef(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int arg3 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetcoef", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetcoef" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetcoef" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXgetcoef" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXgetcoef" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXgetcoef" "', argument " "5"" of type '" "double *""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  {
    try {
      result = (int)CPXgetcoef((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetcolindex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  char *arg3 = (char *) 0 ;
  int *arg4 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetcolindex", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetcolindex" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetcolindex" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetcolindex" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetcolindex" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  {
    try {
      result = (int)CPXgetcolindex((cpxenv const *)arg1,(cpxlp const *)arg2,(char const *)arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetcolinfeas(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  int arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject *swig_obj[6] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetcolinfeas", 6, 6, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetcolinfeas" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetcolinfeas" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[2])) {
      int size = (int)PyList_Size(swig_obj[2]);
      int i = 0;
      arg3 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[2], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg3[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg3);
          return NULL;
        }
      }
    }
    else if (swig_obj[2] == Py_None) {
      arg3 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetcolinfeas" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXgetcolinfeas" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CPXgetcolinfeas" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    try {
      result = (int)CPXgetcolinfeas((cpxenv const *)arg1,(cpxlp const *)arg2,(double const *)arg3,arg4,arg5,arg6);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg3);
  }
  return resultobj;
fail:
  {
    free(arg3);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetcolname(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  char **arg3 = (char **) 0 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  int *arg6 = (int *) 0 ;
  int arg7 ;
  int arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  PyObject *swig_obj[8] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetcolname", 8, 8, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetcolname" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetcolname" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetcolname" "', argument " "3"" of type '" "char **""'"); 
  }
  arg3 = reinterpret_cast< char ** >(argp3);
  res4 = SWIG_AsCharPtrAndSize(swig_obj[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetcolname" "', argument " "4"" of type '" "char *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXgetcolname" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  res6 = SWIG_ConvertPtr(swig_obj[5], &argp6,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CPXgetcolname" "', argument " "6"" of type '" "int *""'"); 
  }
  arg6 = reinterpret_cast< int * >(argp6);
  ecode7 = SWIG_AsVal_int(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "CPXgetcolname" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  ecode8 = SWIG_AsVal_int(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "CPXgetcolname" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  {
    try {
      result = (int)CPXgetcolname((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetcols(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  double *arg6 = (double *) 0 ;
  int arg7 ;
  int *arg8 = (int *) 0 ;
  int arg9 ;
  int arg10 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  int val10 ;
  int ecode10 = 0 ;
  PyObject *swig_obj[10] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetcols", 10, 10, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetcols" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetcols" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetcols" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetcols" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXgetcols" "', argument " "5"" of type '" "int *""'"); 
  }
  arg5 = reinterpret_cast< int * >(argp5);
  res6 = SWIG_ConvertPtr(swig_obj[5], &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CPXgetcols" "', argument " "6"" of type '" "double *""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  ecode7 = SWIG_AsVal_int(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "CPXgetcols" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  res8 = SWIG_ConvertPtr(swig_obj[7], &argp8,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "CPXgetcols" "', argument " "8"" of type '" "int *""'"); 
  }
  arg8 = reinterpret_cast< int * >(argp8);
  ecode9 = SWIG_AsVal_int(swig_obj[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "CPXgetcols" "', argument " "9"" of type '" "int""'");
  } 
  arg9 = static_cast< int >(val9);
  ecode10 = SWIG_AsVal_int(swig_obj[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "CPXgetcols" "', argument " "10"" of type '" "int""'");
  } 
  arg10 = static_cast< int >(val10);
  {
    try {
      result = (int)CPXgetcols((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetconflict(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  int *arg6 = (int *) 0 ;
  int *arg7 = (int *) 0 ;
  int *arg8 = (int *) 0 ;
  int *arg9 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  PyObject *swig_obj[9] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetconflict", 9, 9, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetconflict" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetconflict" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetconflict" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetconflict" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXgetconflict" "', argument " "5"" of type '" "int *""'"); 
  }
  arg5 = reinterpret_cast< int * >(argp5);
  res6 = SWIG_ConvertPtr(swig_obj[5], &argp6,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CPXgetconflict" "', argument " "6"" of type '" "int *""'"); 
  }
  arg6 = reinterpret_cast< int * >(argp6);
  res7 = SWIG_ConvertPtr(swig_obj[6], &argp7,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "CPXgetconflict" "', argument " "7"" of type '" "int *""'"); 
  }
  arg7 = reinterpret_cast< int * >(argp7);
  res8 = SWIG_ConvertPtr(swig_obj[7], &argp8,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "CPXgetconflict" "', argument " "8"" of type '" "int *""'"); 
  }
  arg8 = reinterpret_cast< int * >(argp8);
  res9 = SWIG_ConvertPtr(swig_obj[8], &argp9,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "CPXgetconflict" "', argument " "9"" of type '" "int *""'"); 
  }
  arg9 = reinterpret_cast< int * >(argp9);
  {
    try {
      result = (int)CPXgetconflict((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetconflictext(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetconflictext", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetconflictext" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetconflictext" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetconflictext" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXgetconflictext" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXgetconflictext" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (int)CPXgetconflictext((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetconflictgroups(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int *arg3 = (int *) 0 ;
  double *arg4 = (double *) 0 ;
  int *arg5 = (int *) 0 ;
  int *arg6 = (int *) 0 ;
  char *arg7 = (char *) 0 ;
  int arg8 ;
  int *arg9 = (int *) 0 ;
  int arg10 ;
  int arg11 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  int val10 ;
  int ecode10 = 0 ;
  int val11 ;
  int ecode11 = 0 ;
  PyObject *swig_obj[11] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetconflictgroups", 11, 11, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetconflictgroups" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetconflictgroups" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetconflictgroups" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetconflictgroups" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXgetconflictgroups" "', argument " "5"" of type '" "int *""'"); 
  }
  arg5 = reinterpret_cast< int * >(argp5);
  res6 = SWIG_ConvertPtr(swig_obj[5], &argp6,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CPXgetconflictgroups" "', argument " "6"" of type '" "int *""'"); 
  }
  arg6 = reinterpret_cast< int * >(argp6);
  res7 = SWIG_AsCharPtrAndSize(swig_obj[6], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "CPXgetconflictgroups" "', argument " "7"" of type '" "char *""'");
  }
  arg7 = reinterpret_cast< char * >(buf7);
  ecode8 = SWIG_AsVal_int(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "CPXgetconflictgroups" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  res9 = SWIG_ConvertPtr(swig_obj[8], &argp9,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "CPXgetconflictgroups" "', argument " "9"" of type '" "int *""'"); 
  }
  arg9 = reinterpret_cast< int * >(argp9);
  ecode10 = SWIG_AsVal_int(swig_obj[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "CPXgetconflictgroups" "', argument " "10"" of type '" "int""'");
  } 
  arg10 = static_cast< int >(val10);
  ecode11 = SWIG_AsVal_int(swig_obj[10], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "CPXgetconflictgroups" "', argument " "11"" of type '" "int""'");
  } 
  arg11 = static_cast< int >(val11);
  {
    try {
      result = (int)CPXgetconflictgroups((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return resultobj;
fail:
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetconflictnumgroups(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetconflictnumgroups", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetconflictnumgroups" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetconflictnumgroups" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  {
    try {
      result = (int)CPXgetconflictnumgroups((cpxenv const *)arg1,(cpxlp const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetconflictnumpasses(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetconflictnumpasses", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetconflictnumpasses" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetconflictnumpasses" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  {
    try {
      result = (int)CPXgetconflictnumpasses((cpxenv const *)arg1,(cpxlp const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetcrossdexchcnt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetcrossdexchcnt", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetcrossdexchcnt" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetcrossdexchcnt" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  {
    try {
      result = (int)CPXgetcrossdexchcnt((cpxenv const *)arg1,(cpxlp const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetcrossdpushcnt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetcrossdpushcnt", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetcrossdpushcnt" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetcrossdpushcnt" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  {
    try {
      result = (int)CPXgetcrossdpushcnt((cpxenv const *)arg1,(cpxlp const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetcrosspexchcnt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetcrosspexchcnt", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetcrosspexchcnt" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetcrosspexchcnt" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  {
    try {
      result = (int)CPXgetcrosspexchcnt((cpxenv const *)arg1,(cpxlp const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetcrossppushcnt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetcrossppushcnt", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetcrossppushcnt" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetcrossppushcnt" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  {
    try {
      result = (int)CPXgetcrossppushcnt((cpxenv const *)arg1,(cpxlp const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetdblannotationdefval(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetdblannotationdefval", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetdblannotationdefval" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetdblannotationdefval" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXgetdblannotationdefval" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetdblannotationdefval" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  {
    try {
      result = (int)CPXgetdblannotationdefval((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetdblannotationindex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  char *arg3 = (char *) 0 ;
  int *arg4 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetdblannotationindex", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetdblannotationindex" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetdblannotationindex" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetdblannotationindex" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetdblannotationindex" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  {
    try {
      result = (int)CPXgetdblannotationindex((cpxenv const *)arg1,(cpxlp const *)arg2,(char const *)arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetdblannotationname(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  int *arg6 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject *swig_obj[6] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetdblannotationname", 6, 6, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetdblannotationname" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetdblannotationname" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXgetdblannotationname" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_AsCharPtrAndSize(swig_obj[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetdblannotationname" "', argument " "4"" of type '" "char *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXgetdblannotationname" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  res6 = SWIG_ConvertPtr(swig_obj[5], &argp6,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CPXgetdblannotationname" "', argument " "6"" of type '" "int *""'"); 
  }
  arg6 = reinterpret_cast< int * >(argp6);
  {
    try {
      result = (int)CPXgetdblannotationname((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5,arg6);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetdblannotations(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int arg3 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  int arg6 ;
  int arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  PyObject *swig_obj[7] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetdblannotations", 7, 7, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetdblannotations" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetdblannotations" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXgetdblannotations" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXgetdblannotations" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXgetdblannotations" "', argument " "5"" of type '" "double *""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CPXgetdblannotations" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "CPXgetdblannotations" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  {
    try {
      result = (int)CPXgetdblannotations((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5,arg6,arg7);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetdblparam(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetdblparam", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetdblparam" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPXgetdblparam" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetdblparam" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  {
    try {
      result = (int)CPXgetdblparam((cpxenv const *)arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetdblquality(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetdblquality", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetdblquality" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetdblquality" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetdblquality" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXgetdblquality" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (int)CPXgetdblquality((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetdettime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetdettime", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetdettime" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetdettime" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  {
    try {
      result = (int)CPXgetdettime((cpxenv const *)arg1,arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetdj(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetdj", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetdj" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetdj" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetdj" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXgetdj" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXgetdj" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (int)CPXgetdj((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetdnorms(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  double *arg3 = (double *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetdnorms", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetdnorms" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetdnorms" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetdnorms" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetdnorms" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXgetdnorms" "', argument " "5"" of type '" "int *""'"); 
  }
  arg5 = reinterpret_cast< int * >(argp5);
  {
    try {
      result = (int)CPXgetdnorms((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetdsbcnt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetdsbcnt", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetdsbcnt" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetdsbcnt" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  {
    try {
      result = (int)CPXgetdsbcnt((cpxenv const *)arg1,(cpxlp const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgeterrorstring(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject *swig_obj[3] ;
  CPXCCHARptr result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgeterrorstring", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgeterrorstring" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPXgeterrorstring" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgeterrorstring" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try {
      result = (CPXCCHARptr)CPXgeterrorstring((cpxenv const *)arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetgrad(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  double *arg5 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetgrad", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetgrad" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetgrad" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXgetgrad" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetgrad" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXgetgrad" "', argument " "5"" of type '" "double *""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  {
    try {
      result = (int)CPXgetgrad((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetijdiv(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetijdiv", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetijdiv" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetijdiv" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetijdiv" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetijdiv" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  {
    try {
      result = (int)CPXgetijdiv((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetijrow(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int arg3 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetijrow", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetijrow" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetijrow" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXgetijrow" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXgetijrow" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXgetijrow" "', argument " "5"" of type '" "int *""'"); 
  }
  arg5 = reinterpret_cast< int * >(argp5);
  {
    try {
      result = (int)CPXgetijrow((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetintparam(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  int arg2 ;
  CPXINT *arg3 = (CPXINT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetintparam", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetintparam" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPXgetintparam" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetintparam" "', argument " "3"" of type '" "CPXINT *""'"); 
  }
  arg3 = reinterpret_cast< CPXINT * >(argp3);
  {
    try {
      result = (int)CPXgetintparam((cpxenv const *)arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetintquality(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetintquality", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetintquality" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetintquality" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetintquality" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXgetintquality" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (int)CPXgetintquality((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetitcnt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetitcnt", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetitcnt" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetitcnt" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  {
    try {
      result = (int)CPXgetitcnt((cpxenv const *)arg1,(cpxlp const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetlb(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetlb", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetlb" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetlb" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetlb" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXgetlb" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXgetlb" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (int)CPXgetlb((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetlogfilename(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetlogfilename", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetlogfilename" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetlogfilename" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXgetlogfilename" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetlogfilename" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  {
    try {
      result = (int)CPXgetlogfilename((cpxenv const *)arg1,arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetlongannotationdefval(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int arg3 ;
  CPXLONG *arg4 = (CPXLONG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetlongannotationdefval", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetlongannotationdefval" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetlongannotationdefval" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXgetlongannotationdefval" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_long_long, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetlongannotationdefval" "', argument " "4"" of type '" "CPXLONG *""'"); 
  }
  arg4 = reinterpret_cast< CPXLONG * >(argp4);
  {
    try {
      result = (int)CPXgetlongannotationdefval((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetlongannotationindex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  char *arg3 = (char *) 0 ;
  int *arg4 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetlongannotationindex", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetlongannotationindex" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetlongannotationindex" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetlongannotationindex" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetlongannotationindex" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  {
    try {
      result = (int)CPXgetlongannotationindex((cpxenv const *)arg1,(cpxlp const *)arg2,(char const *)arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetlongannotationname(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  int *arg6 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject *swig_obj[6] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetlongannotationname", 6, 6, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetlongannotationname" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetlongannotationname" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXgetlongannotationname" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_AsCharPtrAndSize(swig_obj[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetlongannotationname" "', argument " "4"" of type '" "char *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXgetlongannotationname" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  res6 = SWIG_ConvertPtr(swig_obj[5], &argp6,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CPXgetlongannotationname" "', argument " "6"" of type '" "int *""'"); 
  }
  arg6 = reinterpret_cast< int * >(argp6);
  {
    try {
      result = (int)CPXgetlongannotationname((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5,arg6);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetlongannotations(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int arg3 ;
  int arg4 ;
  CPXLONG *arg5 = (CPXLONG *) 0 ;
  int arg6 ;
  int arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  PyObject *swig_obj[7] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetlongannotations", 7, 7, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetlongannotations" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetlongannotations" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXgetlongannotations" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXgetlongannotations" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_long_long, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXgetlongannotations" "', argument " "5"" of type '" "CPXLONG *""'"); 
  }
  arg5 = reinterpret_cast< CPXLONG * >(argp5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CPXgetlongannotations" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "CPXgetlongannotations" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  {
    try {
      result = (int)CPXgetlongannotations((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5,arg6,arg7);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetlongparam(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  int arg2 ;
  CPXLONG *arg3 = (CPXLONG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetlongparam", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetlongparam" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPXgetlongparam" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_long_long, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetlongparam" "', argument " "3"" of type '" "CPXLONG *""'"); 
  }
  arg3 = reinterpret_cast< CPXLONG * >(argp3);
  {
    try {
      result = (int)CPXgetlongparam((cpxenv const *)arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetlpcallbackfunc(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  int (**arg2)(CPXCENVptr,void *,int,void *) = (int (**)(CPXCENVptr,void *,int,void *)) 0 ;
  void **arg3 = (void **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetlpcallbackfunc", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetlpcallbackfunc" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_p_f_p_q_const__cpxenv_p_void_int_p_void__int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetlpcallbackfunc" "', argument " "2"" of type '" "int (**)(CPXCENVptr,void *,int,void *)""'"); 
  }
  arg2 = reinterpret_cast< int (**)(CPXCENVptr,void *,int,void *) >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetlpcallbackfunc" "', argument " "3"" of type '" "void **""'"); 
  }
  arg3 = reinterpret_cast< void ** >(argp3);
  {
    try {
      result = (int)CPXgetlpcallbackfunc((cpxenv const *)arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetmethod(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetmethod", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetmethod" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetmethod" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  {
    try {
      result = (int)CPXgetmethod((cpxenv const *)arg1,(cpxlp const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetnetcallbackfunc(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  int (**arg2)(CPXCENVptr,void *,int,void *) = (int (**)(CPXCENVptr,void *,int,void *)) 0 ;
  void **arg3 = (void **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetnetcallbackfunc", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetnetcallbackfunc" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_p_f_p_q_const__cpxenv_p_void_int_p_void__int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetnetcallbackfunc" "', argument " "2"" of type '" "int (**)(CPXCENVptr,void *,int,void *)""'"); 
  }
  arg2 = reinterpret_cast< int (**)(CPXCENVptr,void *,int,void *) >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetnetcallbackfunc" "', argument " "3"" of type '" "void **""'"); 
  }
  arg3 = reinterpret_cast< void ** >(argp3);
  {
    try {
      result = (int)CPXgetnetcallbackfunc((cpxenv const *)arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetnumcols(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetnumcols", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetnumcols" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetnumcols" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  {
    try {
      result = (int)CPXgetnumcols((cpxenv const *)arg1,(cpxlp const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetnumcores(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  int *arg2 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetnumcores", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetnumcores" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetnumcores" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  {
    try {
      result = (int)CPXgetnumcores((cpxenv const *)arg1,arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetnumdblannotations(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetnumdblannotations", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetnumdblannotations" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetnumdblannotations" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  {
    try {
      result = (int)CPXgetnumdblannotations((cpxenv const *)arg1,(cpxlp const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetnumlongannotations(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetnumlongannotations", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetnumlongannotations" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetnumlongannotations" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  {
    try {
      result = (int)CPXgetnumlongannotations((cpxenv const *)arg1,(cpxlp const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetnumnz(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetnumnz", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetnumnz" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetnumnz" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  {
    try {
      result = (int)CPXgetnumnz((cpxenv const *)arg1,(cpxlp const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetnumobjs(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetnumobjs", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetnumobjs" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetnumobjs" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  {
    try {
      result = (int)CPXgetnumobjs((cpxenv const *)arg1,(cpxlp const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetnumpwl(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetnumpwl", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetnumpwl" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetnumpwl" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  {
    try {
      result = (int)CPXgetnumpwl((cpxenv const *)arg1,(cpxlp const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetnumrows(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetnumrows", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetnumrows" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetnumrows" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  {
    try {
      result = (int)CPXgetnumrows((cpxenv const *)arg1,(cpxlp const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetobj(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetobj", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetobj" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetobj" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetobj" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXgetobj" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXgetobj" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (int)CPXgetobj((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetobjname(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetobjname", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetobjname" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetobjname" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetobjname" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXgetobjname" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXgetobjname" "', argument " "5"" of type '" "int *""'"); 
  }
  arg5 = reinterpret_cast< int * >(argp5);
  {
    try {
      result = (int)CPXgetobjname((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetobjoffset(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  double *arg3 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetobjoffset", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetobjoffset" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetobjoffset" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetobjoffset" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  {
    try {
      result = (int)CPXgetobjoffset((cpxenv const *)arg1,(cpxlp const *)arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetobjsen(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetobjsen", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetobjsen" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetobjsen" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  {
    try {
      result = (int)CPXgetobjsen((cpxenv const *)arg1,(cpxlp const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetobjval(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  double *arg3 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetobjval", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetobjval" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetobjval" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetobjval" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  {
    try {
      result = (int)CPXgetobjval((cpxenv const *)arg1,(cpxlp const *)arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetparamhiername(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetparamhiername", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetparamhiername" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPXgetparamhiername" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetparamhiername" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try {
      result = (int)CPXgetparamhiername((cpxenv const *)arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetparamname(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetparamname", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetparamname" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPXgetparamname" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetparamname" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try {
      result = (int)CPXgetparamname((cpxenv const *)arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetparamnum(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  char *arg2 = (char *) 0 ;
  int *arg3 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetparamnum", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetparamnum" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetparamnum" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetparamnum" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  {
    try {
      result = (int)CPXgetparamnum((cpxenv const *)arg1,(char const *)arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetparamtype(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetparamtype", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetparamtype" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPXgetparamtype" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetparamtype" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  {
    try {
      result = (int)CPXgetparamtype((cpxenv const *)arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetphase1cnt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetphase1cnt", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetphase1cnt" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetphase1cnt" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  {
    try {
      result = (int)CPXgetphase1cnt((cpxenv const *)arg1,(cpxlp const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetpi(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetpi", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetpi" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetpi" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetpi" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXgetpi" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXgetpi" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (int)CPXgetpi((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetpnorms(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  int *arg5 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetpnorms", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetpnorms" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetpnorms" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetpnorms" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetpnorms" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXgetpnorms" "', argument " "5"" of type '" "int *""'"); 
  }
  arg5 = reinterpret_cast< int * >(argp5);
  {
    try {
      result = (int)CPXgetpnorms((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetprestat(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  int *arg6 = (int *) 0 ;
  int *arg7 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  PyObject *swig_obj[7] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetprestat", 7, 7, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetprestat" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetprestat" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetprestat" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetprestat" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXgetprestat" "', argument " "5"" of type '" "int *""'"); 
  }
  arg5 = reinterpret_cast< int * >(argp5);
  res6 = SWIG_ConvertPtr(swig_obj[5], &argp6,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CPXgetprestat" "', argument " "6"" of type '" "int *""'"); 
  }
  arg6 = reinterpret_cast< int * >(argp6);
  res7 = SWIG_ConvertPtr(swig_obj[6], &argp7,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "CPXgetprestat" "', argument " "7"" of type '" "int *""'"); 
  }
  arg7 = reinterpret_cast< int * >(argp7);
  {
    try {
      result = (int)CPXgetprestat((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5,arg6,arg7);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetprobname(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetprobname", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetprobname" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetprobname" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetprobname" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXgetprobname" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXgetprobname" "', argument " "5"" of type '" "int *""'"); 
  }
  arg5 = reinterpret_cast< int * >(argp5);
  {
    try {
      result = (int)CPXgetprobname((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetprobtype(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetprobtype", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetprobtype" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetprobtype" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  {
    try {
      result = (int)CPXgetprobtype((cpxenv const *)arg1,(cpxlp const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetprotected(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int arg5 ;
  int *arg6 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject *swig_obj[6] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetprotected", 6, 6, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetprotected" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetprotected" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetprotected" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetprotected" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXgetprotected" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  res6 = SWIG_ConvertPtr(swig_obj[5], &argp6,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CPXgetprotected" "', argument " "6"" of type '" "int *""'"); 
  }
  arg6 = reinterpret_cast< int * >(argp6);
  {
    try {
      result = (int)CPXgetprotected((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5,arg6);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetpsbcnt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetpsbcnt", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetpsbcnt" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetpsbcnt" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  {
    try {
      result = (int)CPXgetpsbcnt((cpxenv const *)arg1,(cpxlp const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetpwl(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  int *arg8 = (int *) 0 ;
  double *arg9 = (double *) 0 ;
  double *arg10 = (double *) 0 ;
  int arg11 ;
  int *arg12 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  int val11 ;
  int ecode11 = 0 ;
  void *argp12 = 0 ;
  int res12 = 0 ;
  PyObject *swig_obj[12] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetpwl", 12, 12, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetpwl" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetpwl" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXgetpwl" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetpwl" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXgetpwl" "', argument " "5"" of type '" "int *""'"); 
  }
  arg5 = reinterpret_cast< int * >(argp5);
  res6 = SWIG_ConvertPtr(swig_obj[5], &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CPXgetpwl" "', argument " "6"" of type '" "double *""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  res7 = SWIG_ConvertPtr(swig_obj[6], &argp7,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "CPXgetpwl" "', argument " "7"" of type '" "double *""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  res8 = SWIG_ConvertPtr(swig_obj[7], &argp8,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "CPXgetpwl" "', argument " "8"" of type '" "int *""'"); 
  }
  arg8 = reinterpret_cast< int * >(argp8);
  res9 = SWIG_ConvertPtr(swig_obj[8], &argp9,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "CPXgetpwl" "', argument " "9"" of type '" "double *""'"); 
  }
  arg9 = reinterpret_cast< double * >(argp9);
  res10 = SWIG_ConvertPtr(swig_obj[9], &argp10,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "CPXgetpwl" "', argument " "10"" of type '" "double *""'"); 
  }
  arg10 = reinterpret_cast< double * >(argp10);
  ecode11 = SWIG_AsVal_int(swig_obj[10], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "CPXgetpwl" "', argument " "11"" of type '" "int""'");
  } 
  arg11 = static_cast< int >(val11);
  res12 = SWIG_ConvertPtr(swig_obj[11], &argp12,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res12)) {
    SWIG_exception_fail(SWIG_ArgError(res12), "in method '" "CPXgetpwl" "', argument " "12"" of type '" "int *""'"); 
  }
  arg12 = reinterpret_cast< int * >(argp12);
  {
    try {
      result = (int)CPXgetpwl((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetpwlindex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  char *arg3 = (char *) 0 ;
  int *arg4 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetpwlindex", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetpwlindex" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetpwlindex" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetpwlindex" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetpwlindex" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  {
    try {
      result = (int)CPXgetpwlindex((cpxenv const *)arg1,(cpxlp const *)arg2,(char const *)arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetpwlname(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject *swig_obj[6] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetpwlname", 6, 6, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetpwlname" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetpwlname" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetpwlname" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXgetpwlname" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXgetpwlname" "', argument " "5"" of type '" "int *""'"); 
  }
  arg5 = reinterpret_cast< int * >(argp5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CPXgetpwlname" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    try {
      result = (int)CPXgetpwlname((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5,arg6);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetray(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  double *arg3 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetray", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetray" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetray" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetray" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  {
    try {
      result = (int)CPXgetray((cpxenv const *)arg1,(cpxlp const *)arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetredlp(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  CPXCLPptr *arg3 = (CPXCLPptr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetredlp", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetredlp" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetredlp" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetredlp" "', argument " "3"" of type '" "CPXCLPptr *""'"); 
  }
  arg3 = reinterpret_cast< CPXCLPptr * >(argp3);
  {
    try {
      result = (int)CPXgetredlp((cpxenv const *)arg1,(cpxlp const *)arg2,(cpxlp const **)arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetrhs(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetrhs", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetrhs" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetrhs" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetrhs" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXgetrhs" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXgetrhs" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (int)CPXgetrhs((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetrngval(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetrngval", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetrngval" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetrngval" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetrngval" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXgetrngval" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXgetrngval" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (int)CPXgetrngval((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetrowindex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  char *arg3 = (char *) 0 ;
  int *arg4 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetrowindex", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetrowindex" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetrowindex" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetrowindex" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetrowindex" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  {
    try {
      result = (int)CPXgetrowindex((cpxenv const *)arg1,(cpxlp const *)arg2,(char const *)arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetrowinfeas(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  int arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject *swig_obj[6] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetrowinfeas", 6, 6, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetrowinfeas" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetrowinfeas" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[2])) {
      int size = (int)PyList_Size(swig_obj[2]);
      int i = 0;
      arg3 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[2], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg3[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg3);
          return NULL;
        }
      }
    }
    else if (swig_obj[2] == Py_None) {
      arg3 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetrowinfeas" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXgetrowinfeas" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CPXgetrowinfeas" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    try {
      result = (int)CPXgetrowinfeas((cpxenv const *)arg1,(cpxlp const *)arg2,(double const *)arg3,arg4,arg5,arg6);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg3);
  }
  return resultobj;
fail:
  {
    free(arg3);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetrowname(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  char **arg3 = (char **) 0 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  int *arg6 = (int *) 0 ;
  int arg7 ;
  int arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  PyObject *swig_obj[8] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetrowname", 8, 8, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetrowname" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetrowname" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetrowname" "', argument " "3"" of type '" "char **""'"); 
  }
  arg3 = reinterpret_cast< char ** >(argp3);
  res4 = SWIG_AsCharPtrAndSize(swig_obj[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetrowname" "', argument " "4"" of type '" "char *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXgetrowname" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  res6 = SWIG_ConvertPtr(swig_obj[5], &argp6,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CPXgetrowname" "', argument " "6"" of type '" "int *""'"); 
  }
  arg6 = reinterpret_cast< int * >(argp6);
  ecode7 = SWIG_AsVal_int(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "CPXgetrowname" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  ecode8 = SWIG_AsVal_int(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "CPXgetrowname" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  {
    try {
      result = (int)CPXgetrowname((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetrows(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  double *arg6 = (double *) 0 ;
  int arg7 ;
  int *arg8 = (int *) 0 ;
  int arg9 ;
  int arg10 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  int val10 ;
  int ecode10 = 0 ;
  PyObject *swig_obj[10] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetrows", 10, 10, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetrows" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetrows" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetrows" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetrows" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXgetrows" "', argument " "5"" of type '" "int *""'"); 
  }
  arg5 = reinterpret_cast< int * >(argp5);
  res6 = SWIG_ConvertPtr(swig_obj[5], &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CPXgetrows" "', argument " "6"" of type '" "double *""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  ecode7 = SWIG_AsVal_int(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "CPXgetrows" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  res8 = SWIG_ConvertPtr(swig_obj[7], &argp8,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "CPXgetrows" "', argument " "8"" of type '" "int *""'"); 
  }
  arg8 = reinterpret_cast< int * >(argp8);
  ecode9 = SWIG_AsVal_int(swig_obj[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "CPXgetrows" "', argument " "9"" of type '" "int""'");
  } 
  arg9 = static_cast< int >(val9);
  ecode10 = SWIG_AsVal_int(swig_obj[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "CPXgetrows" "', argument " "10"" of type '" "int""'");
  } 
  arg10 = static_cast< int >(val10);
  {
    try {
      result = (int)CPXgetrows((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetsense(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetsense", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetsense" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetsense" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetsense" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXgetsense" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXgetsense" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (int)CPXgetsense((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetsiftitcnt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetsiftitcnt", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetsiftitcnt" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetsiftitcnt" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  {
    try {
      result = (int)CPXgetsiftitcnt((cpxenv const *)arg1,(cpxlp const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetsiftphase1cnt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetsiftphase1cnt", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetsiftphase1cnt" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetsiftphase1cnt" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  {
    try {
      result = (int)CPXgetsiftphase1cnt((cpxenv const *)arg1,(cpxlp const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetslack(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetslack", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetslack" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetslack" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetslack" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXgetslack" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXgetslack" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (int)CPXgetslack((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetsolnpooldblquality(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetsolnpooldblquality", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetsolnpooldblquality" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetsolnpooldblquality" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXgetsolnpooldblquality" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetsolnpooldblquality" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXgetsolnpooldblquality" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (int)CPXgetsolnpooldblquality((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetsolnpoolintquality(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetsolnpoolintquality", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetsolnpoolintquality" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetsolnpoolintquality" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXgetsolnpoolintquality" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetsolnpoolintquality" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXgetsolnpoolintquality" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (int)CPXgetsolnpoolintquality((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetstat(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetstat", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetstat" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetstat" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  {
    try {
      result = (int)CPXgetstat((cpxenv const *)arg1,(cpxlp const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetstatstring(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject *swig_obj[3] ;
  CPXCHARptr result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetstatstring", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetstatstring" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPXgetstatstring" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetstatstring" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try {
      result = (CPXCHARptr)CPXgetstatstring((cpxenv const *)arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetstrparam(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetstrparam", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetstrparam" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPXgetstrparam" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetstrparam" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try {
      result = (int)CPXgetstrparam((cpxenv const *)arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgettime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgettime", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgettime" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgettime" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  {
    try {
      result = (int)CPXgettime((cpxenv const *)arg1,arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgettuningcallbackfunc(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  int (**arg2)(CPXCENVptr,void *,int,void *) = (int (**)(CPXCENVptr,void *,int,void *)) 0 ;
  void **arg3 = (void **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgettuningcallbackfunc", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgettuningcallbackfunc" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_p_f_p_q_const__cpxenv_p_void_int_p_void__int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgettuningcallbackfunc" "', argument " "2"" of type '" "int (**)(CPXCENVptr,void *,int,void *)""'"); 
  }
  arg2 = reinterpret_cast< int (**)(CPXCENVptr,void *,int,void *) >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgettuningcallbackfunc" "', argument " "3"" of type '" "void **""'"); 
  }
  arg3 = reinterpret_cast< void ** >(argp3);
  {
    try {
      result = (int)CPXgettuningcallbackfunc((cpxenv const *)arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetub(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetub", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetub" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetub" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetub" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXgetub" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXgetub" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (int)CPXgetub((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetweight(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  int arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  PyObject *swig_obj[8] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetweight", 8, 8, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetweight" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetweight" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXgetweight" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[3])) {
      int size = (int)PyList_Size(swig_obj[3]);
      int i = 0;
      arg4 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[3], i);
        if (PyInt_Check(o)) {
          arg4[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg4);
          return NULL;
        }
      }
    }
    else if (swig_obj[3] == Py_None) {
      arg4 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[4])) {
      int size = (int)PyList_Size(swig_obj[4]);
      int i = 0;
      arg5 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[4], i);
        if (PyInt_Check(o)) {
          arg5[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg5);
          return NULL;
        }
      }
    }
    else if (swig_obj[4] == Py_None) {
      arg5 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[5])) {
      int size = (int)PyList_Size(swig_obj[5]);
      int i = 0;
      arg6 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[5], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg6[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg6);
          return NULL;
        }
      }
    }
    else if (swig_obj[5] == Py_None) {
      arg6 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res7 = SWIG_ConvertPtr(swig_obj[6], &argp7,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "CPXgetweight" "', argument " "7"" of type '" "double *""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  ecode8 = SWIG_AsVal_int(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "CPXgetweight" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  {
    try {
      result = (int)CPXgetweight((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,(int const *)arg4,(int const *)arg5,(double const *)arg6,arg7,arg8);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg4);
  }
  {
    free(arg5);
  }
  {
    free(arg6);
  }
  return resultobj;
fail:
  {
    free(arg4);
  }
  {
    free(arg5);
  }
  {
    free(arg6);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetx(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetx", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetx" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetx" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetx" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXgetx" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXgetx" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (int)CPXgetx((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXhybnetopt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXhybnetopt", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXhybnetopt" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXhybnetopt" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXhybnetopt" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (int)CPXhybnetopt((cpxenv const *)arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXinfodblparam(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXinfodblparam", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXinfodblparam" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPXinfodblparam" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXinfodblparam" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXinfodblparam" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXinfodblparam" "', argument " "5"" of type '" "double *""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  {
    try {
      result = (int)CPXinfodblparam((cpxenv const *)arg1,arg2,arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXinfointparam(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  int arg2 ;
  CPXINT *arg3 = (CPXINT *) 0 ;
  CPXINT *arg4 = (CPXINT *) 0 ;
  CPXINT *arg5 = (CPXINT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXinfointparam", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXinfointparam" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPXinfointparam" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXinfointparam" "', argument " "3"" of type '" "CPXINT *""'"); 
  }
  arg3 = reinterpret_cast< CPXINT * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXinfointparam" "', argument " "4"" of type '" "CPXINT *""'"); 
  }
  arg4 = reinterpret_cast< CPXINT * >(argp4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXinfointparam" "', argument " "5"" of type '" "CPXINT *""'"); 
  }
  arg5 = reinterpret_cast< CPXINT * >(argp5);
  {
    try {
      result = (int)CPXinfointparam((cpxenv const *)arg1,arg2,arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXinfolongparam(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  int arg2 ;
  CPXLONG *arg3 = (CPXLONG *) 0 ;
  CPXLONG *arg4 = (CPXLONG *) 0 ;
  CPXLONG *arg5 = (CPXLONG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXinfolongparam", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXinfolongparam" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPXinfolongparam" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_long_long, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXinfolongparam" "', argument " "3"" of type '" "CPXLONG *""'"); 
  }
  arg3 = reinterpret_cast< CPXLONG * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_long_long, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXinfolongparam" "', argument " "4"" of type '" "CPXLONG *""'"); 
  }
  arg4 = reinterpret_cast< CPXLONG * >(argp4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_long_long, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXinfolongparam" "', argument " "5"" of type '" "CPXLONG *""'"); 
  }
  arg5 = reinterpret_cast< CPXLONG * >(argp5);
  {
    try {
      result = (int)CPXinfolongparam((cpxenv const *)arg1,arg2,arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXinfostrparam(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXinfostrparam", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXinfostrparam" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPXinfostrparam" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXinfostrparam" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try {
      result = (int)CPXinfostrparam((cpxenv const *)arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXinitialize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXinitialize", 0, 0, 0)) SWIG_fail;
  {
    try {
      CPXinitialize();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXkilldnorms(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXLPptr arg1 = (CPXLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXkilldnorms" "', argument " "1"" of type '" "CPXLPptr""'"); 
  }
  arg1 = reinterpret_cast< CPXLPptr >(argp1);
  {
    try {
      result = (int)CPXkilldnorms(arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXkillpnorms(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXLPptr arg1 = (CPXLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXkillpnorms" "', argument " "1"" of type '" "CPXLPptr""'"); 
  }
  arg1 = reinterpret_cast< CPXLPptr >(argp1);
  {
    try {
      result = (int)CPXkillpnorms(arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXlpopt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXlpopt", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXlpopt" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXlpopt" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  {
    try {
      result = (int)CPXlpopt((cpxenv const *)arg1,arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXmbasewrite(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXmbasewrite", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXmbasewrite" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXmbasewrite" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXmbasewrite" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try {
      result = (int)CPXmbasewrite((cpxenv const *)arg1,(cpxlp const *)arg2,(char const *)arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXmdleave(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject *swig_obj[6] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXmdleave", 6, 6, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXmdleave" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXmdleave" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[2])) {
      int size = (int)PyList_Size(swig_obj[2]);
      int i = 0;
      arg3 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[2], i);
        if (PyInt_Check(o)) {
          arg3[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg3);
          return NULL;
        }
      }
    }
    else if (swig_obj[2] == Py_None) {
      arg3 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXmdleave" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXmdleave" "', argument " "5"" of type '" "double *""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(swig_obj[5], &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CPXmdleave" "', argument " "6"" of type '" "double *""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  {
    try {
      result = (int)CPXmdleave((cpxenv const *)arg1,arg2,(int const *)arg3,arg4,arg5,arg6);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg3);
  }
  return resultobj;
fail:
  {
    free(arg3);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXmodelasstcallbackgetfunc(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  CPXMODELASSTCALLBACKFUNC **arg3 = (CPXMODELASSTCALLBACKFUNC **) 0 ;
  void **arg4 = (void **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXmodelasstcallbackgetfunc", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXmodelasstcallbackgetfunc" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXmodelasstcallbackgetfunc" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_p_f_int_p_q_const__char_p_void__int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXmodelasstcallbackgetfunc" "', argument " "3"" of type '" "CPXMODELASSTCALLBACKFUNC **""'"); 
  }
  arg3 = reinterpret_cast< CPXMODELASSTCALLBACKFUNC ** >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXmodelasstcallbackgetfunc" "', argument " "4"" of type '" "void **""'"); 
  }
  arg4 = reinterpret_cast< void ** >(argp4);
  {
    try {
      result = (int)CPXmodelasstcallbackgetfunc((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXmodelasstcallbacksetfunc(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXENVptr arg1 = (CPXENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  CPXMODELASSTCALLBACKFUNC *arg3 = (CPXMODELASSTCALLBACKFUNC *) 0 ;
  void *arg4 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res4 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXmodelasstcallbacksetfunc", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXmodelasstcallbacksetfunc" "', argument " "1"" of type '" "CPXENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXmodelasstcallbacksetfunc" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[2], (void**)(&arg3), SWIGTYPE_p_f_int_p_q_const__char_p_void__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "CPXmodelasstcallbacksetfunc" "', argument " "3"" of type '" "CPXMODELASSTCALLBACKFUNC *""'"); 
    }
  }
  res4 = SWIG_ConvertPtr(swig_obj[3],SWIG_as_voidptrptr(&arg4), 0, 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXmodelasstcallbacksetfunc" "', argument " "4"" of type '" "void *""'"); 
  }
  {
    try {
      result = (int)CPXmodelasstcallbacksetfunc(arg1,arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXmsgstr(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCHANNELptr arg1 = (CPXCHANNELptr) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXmsgstr", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxchannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXmsgstr" "', argument " "1"" of type '" "CPXCHANNELptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCHANNELptr >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXmsgstr" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      result = (int)CPXmsgstr(arg1,(char const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXmultiobjchgattribs(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  double arg4 ;
  double arg5 ;
  int arg6 ;
  double arg7 ;
  double arg8 ;
  char *arg9 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  int res9 ;
  char *buf9 = 0 ;
  int alloc9 = 0 ;
  PyObject *swig_obj[9] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXmultiobjchgattribs", 9, 9, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXmultiobjchgattribs" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXmultiobjchgattribs" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXmultiobjchgattribs" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXmultiobjchgattribs" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXmultiobjchgattribs" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CPXmultiobjchgattribs" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_double(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "CPXmultiobjchgattribs" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "CPXmultiobjchgattribs" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  res9 = SWIG_AsCharPtrAndSize(swig_obj[8], &buf9, NULL, &alloc9);
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "CPXmultiobjchgattribs" "', argument " "9"" of type '" "char const *""'");
  }
  arg9 = reinterpret_cast< char * >(buf9);
  {
    try {
      result = (int)CPXmultiobjchgattribs((cpxenv const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,(char const *)arg9);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  return resultobj;
fail:
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXmultiobjgetdblinfo(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXmultiobjgetdblinfo", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXmultiobjgetdblinfo" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXmultiobjgetdblinfo" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXmultiobjgetdblinfo" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXmultiobjgetdblinfo" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXmultiobjgetdblinfo" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (int)CPXmultiobjgetdblinfo((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXmultiobjgetindex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  char *arg3 = (char *) 0 ;
  int *arg4 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXmultiobjgetindex", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXmultiobjgetindex" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXmultiobjgetindex" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXmultiobjgetindex" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXmultiobjgetindex" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  {
    try {
      result = (int)CPXmultiobjgetindex((cpxenv const *)arg1,(cpxlp const *)arg2,(char const *)arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXmultiobjgetintinfo(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXmultiobjgetintinfo", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXmultiobjgetintinfo" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXmultiobjgetintinfo" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXmultiobjgetintinfo" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXmultiobjgetintinfo" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXmultiobjgetintinfo" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (int)CPXmultiobjgetintinfo((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXmultiobjgetlonginfo(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int arg3 ;
  CPXLONG *arg4 = (CPXLONG *) 0 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXmultiobjgetlonginfo", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXmultiobjgetlonginfo" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXmultiobjgetlonginfo" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXmultiobjgetlonginfo" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_long_long, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXmultiobjgetlonginfo" "', argument " "4"" of type '" "CPXLONG *""'"); 
  }
  arg4 = reinterpret_cast< CPXLONG * >(argp4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXmultiobjgetlonginfo" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (int)CPXmultiobjgetlonginfo((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXmultiobjgetname(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  int *arg6 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject *swig_obj[6] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXmultiobjgetname", 6, 6, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXmultiobjgetname" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXmultiobjgetname" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXmultiobjgetname" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_AsCharPtrAndSize(swig_obj[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXmultiobjgetname" "', argument " "4"" of type '" "char *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXmultiobjgetname" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  res6 = SWIG_ConvertPtr(swig_obj[5], &argp6,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CPXmultiobjgetname" "', argument " "6"" of type '" "int *""'"); 
  }
  arg6 = reinterpret_cast< int * >(argp6);
  {
    try {
      result = (int)CPXmultiobjgetname((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5,arg6);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXmultiobjgetnumsolves(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXmultiobjgetnumsolves", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXmultiobjgetnumsolves" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXmultiobjgetnumsolves" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  {
    try {
      result = (int)CPXmultiobjgetnumsolves((cpxenv const *)arg1,(cpxlp const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXmultiobjgetobj(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  int arg5 ;
  int arg6 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  int *arg9 = (int *) 0 ;
  double *arg10 = (double *) 0 ;
  double *arg11 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  void *argp11 = 0 ;
  int res11 = 0 ;
  PyObject *swig_obj[11] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXmultiobjgetobj", 11, 11, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXmultiobjgetobj" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXmultiobjgetobj" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXmultiobjgetobj" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXmultiobjgetobj" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXmultiobjgetobj" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CPXmultiobjgetobj" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  res7 = SWIG_ConvertPtr(swig_obj[6], &argp7,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "CPXmultiobjgetobj" "', argument " "7"" of type '" "double *""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  res8 = SWIG_ConvertPtr(swig_obj[7], &argp8,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "CPXmultiobjgetobj" "', argument " "8"" of type '" "double *""'"); 
  }
  arg8 = reinterpret_cast< double * >(argp8);
  res9 = SWIG_ConvertPtr(swig_obj[8], &argp9,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "CPXmultiobjgetobj" "', argument " "9"" of type '" "int *""'"); 
  }
  arg9 = reinterpret_cast< int * >(argp9);
  res10 = SWIG_ConvertPtr(swig_obj[9], &argp10,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "CPXmultiobjgetobj" "', argument " "10"" of type '" "double *""'"); 
  }
  arg10 = reinterpret_cast< double * >(argp10);
  res11 = SWIG_ConvertPtr(swig_obj[10], &argp11,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res11)) {
    SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "CPXmultiobjgetobj" "', argument " "11"" of type '" "double *""'"); 
  }
  arg11 = reinterpret_cast< double * >(argp11);
  {
    try {
      result = (int)CPXmultiobjgetobj((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXmultiobjgetobjval(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXmultiobjgetobjval", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXmultiobjgetobjval" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXmultiobjgetobjval" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXmultiobjgetobjval" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXmultiobjgetobjval" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  {
    try {
      result = (int)CPXmultiobjgetobjval((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXmultiobjgetobjvalbypriority(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXmultiobjgetobjvalbypriority", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXmultiobjgetobjvalbypriority" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXmultiobjgetobjvalbypriority" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXmultiobjgetobjvalbypriority" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXmultiobjgetobjvalbypriority" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  {
    try {
      result = (int)CPXmultiobjgetobjvalbypriority((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXmultiobjopt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  CPXCPARAMSETptr *arg3 = (CPXCPARAMSETptr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXmultiobjopt", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXmultiobjopt" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXmultiobjopt" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_p_paramset, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXmultiobjopt" "', argument " "3"" of type '" "CPXCPARAMSETptr const *""'"); 
  }
  arg3 = reinterpret_cast< CPXCPARAMSETptr * >(argp3);
  {
    try {
      result = (int)CPXmultiobjopt((cpxenv const *)arg1,arg2,(paramset const *const *)arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXmultiobjsetobj(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  double *arg6 = (double *) 0 ;
  double arg7 ;
  double arg8 ;
  int arg9 ;
  double arg10 ;
  double arg11 ;
  char *arg12 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  double val10 ;
  int ecode10 = 0 ;
  double val11 ;
  int ecode11 = 0 ;
  int res12 ;
  char *buf12 = 0 ;
  int alloc12 = 0 ;
  PyObject *swig_obj[12] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXmultiobjsetobj", 12, 12, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXmultiobjsetobj" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXmultiobjsetobj" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXmultiobjsetobj" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXmultiobjsetobj" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[4])) {
      int size = (int)PyList_Size(swig_obj[4]);
      int i = 0;
      arg5 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[4], i);
        if (PyInt_Check(o)) {
          arg5[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg5);
          return NULL;
        }
      }
    }
    else if (swig_obj[4] == Py_None) {
      arg5 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[5])) {
      int size = (int)PyList_Size(swig_obj[5]);
      int i = 0;
      arg6 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[5], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg6[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg6);
          return NULL;
        }
      }
    }
    else if (swig_obj[5] == Py_None) {
      arg6 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  ecode7 = SWIG_AsVal_double(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "CPXmultiobjsetobj" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "CPXmultiobjsetobj" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_int(swig_obj[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "CPXmultiobjsetobj" "', argument " "9"" of type '" "int""'");
  } 
  arg9 = static_cast< int >(val9);
  ecode10 = SWIG_AsVal_double(swig_obj[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "CPXmultiobjsetobj" "', argument " "10"" of type '" "double""'");
  } 
  arg10 = static_cast< double >(val10);
  ecode11 = SWIG_AsVal_double(swig_obj[10], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "CPXmultiobjsetobj" "', argument " "11"" of type '" "double""'");
  } 
  arg11 = static_cast< double >(val11);
  res12 = SWIG_AsCharPtrAndSize(swig_obj[11], &buf12, NULL, &alloc12);
  if (!SWIG_IsOK(res12)) {
    SWIG_exception_fail(SWIG_ArgError(res12), "in method '" "CPXmultiobjsetobj" "', argument " "12"" of type '" "char const *""'");
  }
  arg12 = reinterpret_cast< char * >(buf12);
  {
    try {
      result = (int)CPXmultiobjsetobj((cpxenv const *)arg1,arg2,arg3,arg4,(int const *)arg5,(double const *)arg6,arg7,arg8,arg9,arg10,arg11,(char const *)arg12);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg5);
  }
  {
    free(arg6);
  }
  if (alloc12 == SWIG_NEWOBJ) delete[] buf12;
  return resultobj;
fail:
  {
    free(arg5);
  }
  {
    free(arg6);
  }
  if (alloc12 == SWIG_NEWOBJ) delete[] buf12;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXNETextract(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXNETptr arg2 = (CPXNETptr) 0 ;
  CPXCLPptr arg3 = (CPXCLPptr) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXNETextract", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXNETextract" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxnet, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXNETextract" "', argument " "2"" of type '" "CPXNETptr""'"); 
  }
  arg2 = reinterpret_cast< CPXNETptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXNETextract" "', argument " "3"" of type '" "CPXCLPptr""'"); 
  }
  arg3 = reinterpret_cast< CPXCLPptr >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXNETextract" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXNETextract" "', argument " "5"" of type '" "int *""'"); 
  }
  arg5 = reinterpret_cast< int * >(argp5);
  {
    try {
      result = (int)CPXNETextract((cpxenv const *)arg1,arg2,(cpxlp const *)arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXnewcols(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  char *arg7 = (char *) 0 ;
  char **arg8 = (char **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  PyObject *swig_obj[8] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXnewcols", 8, 8, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXnewcols" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXnewcols" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXnewcols" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[3])) {
      int size = (int)PyList_Size(swig_obj[3]);
      int i = 0;
      arg4 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[3], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg4[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg4);
          return NULL;
        }
      }
    }
    else if (swig_obj[3] == Py_None) {
      arg4 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[4])) {
      int size = (int)PyList_Size(swig_obj[4]);
      int i = 0;
      arg5 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[4], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg5[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg5);
          return NULL;
        }
      }
    }
    else if (swig_obj[4] == Py_None) {
      arg5 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[5])) {
      int size = (int)PyList_Size(swig_obj[5]);
      int i = 0;
      arg6 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[5], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg6[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg6);
          return NULL;
        }
      }
    }
    else if (swig_obj[5] == Py_None) {
      arg6 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res7 = SWIG_AsCharPtrAndSize(swig_obj[6], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "CPXnewcols" "', argument " "7"" of type '" "char const *""'");
  }
  arg7 = reinterpret_cast< char * >(buf7);
  res8 = SWIG_ConvertPtr(swig_obj[7], &argp8,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "CPXnewcols" "', argument " "8"" of type '" "char **""'"); 
  }
  arg8 = reinterpret_cast< char ** >(argp8);
  {
    try {
      result = (int)CPXnewcols((cpxenv const *)arg1,arg2,arg3,(double const *)arg4,(double const *)arg5,(double const *)arg6,(char const *)arg7,arg8);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg4);
  }
  {
    free(arg5);
  }
  {
    free(arg6);
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return resultobj;
fail:
  {
    free(arg4);
  }
  {
    free(arg5);
  }
  {
    free(arg6);
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXnewdblannotation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXnewdblannotation", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXnewdblannotation" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXnewdblannotation" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXnewdblannotation" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXnewdblannotation" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (int)CPXnewdblannotation((cpxenv const *)arg1,arg2,(char const *)arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXnewlongannotation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  char *arg3 = (char *) 0 ;
  CPXLONG arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  long long val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXnewlongannotation", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXnewlongannotation" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXnewlongannotation" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXnewlongannotation" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_long_SS_long(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXnewlongannotation" "', argument " "4"" of type '" "CPXLONG""'");
  } 
  arg4 = static_cast< CPXLONG >(val4);
  {
    try {
      result = (int)CPXnewlongannotation((cpxenv const *)arg1,arg2,(char const *)arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXnewrows(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  char *arg5 = (char *) 0 ;
  double *arg6 = (double *) 0 ;
  char **arg7 = (char **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  PyObject *swig_obj[7] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXnewrows", 7, 7, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXnewrows" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXnewrows" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXnewrows" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[3])) {
      int size = (int)PyList_Size(swig_obj[3]);
      int i = 0;
      arg4 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[3], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg4[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg4);
          return NULL;
        }
      }
    }
    else if (swig_obj[3] == Py_None) {
      arg4 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res5 = SWIG_AsCharPtrAndSize(swig_obj[4], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXnewrows" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = reinterpret_cast< char * >(buf5);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[5])) {
      int size = (int)PyList_Size(swig_obj[5]);
      int i = 0;
      arg6 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[5], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg6[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg6);
          return NULL;
        }
      }
    }
    else if (swig_obj[5] == Py_None) {
      arg6 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res7 = SWIG_ConvertPtr(swig_obj[6], &argp7,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "CPXnewrows" "', argument " "7"" of type '" "char **""'"); 
  }
  arg7 = reinterpret_cast< char ** >(argp7);
  {
    try {
      result = (int)CPXnewrows((cpxenv const *)arg1,arg2,arg3,(double const *)arg4,(char const *)arg5,(double const *)arg6,arg7);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg4);
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  {
    free(arg6);
  }
  return resultobj;
fail:
  {
    free(arg4);
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  {
    free(arg6);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXobjsa(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int arg3 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject *swig_obj[6] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXobjsa", 6, 6, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXobjsa" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXobjsa" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXobjsa" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXobjsa" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXobjsa" "', argument " "5"" of type '" "double *""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(swig_obj[5], &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CPXobjsa" "', argument " "6"" of type '" "double *""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  {
    try {
      result = (int)CPXobjsa((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5,arg6);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXopenCPLEX(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  CPXENVptr result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXopenCPLEX" "', argument " "1"" of type '" "int *""'"); 
  }
  arg1 = reinterpret_cast< int * >(argp1);
  {
    try {
      result = (CPXENVptr)CPXopenCPLEX(arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpxenv, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXparamsetadddbl(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXPARAMSETptr arg2 = (CPXPARAMSETptr) 0 ;
  int arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXparamsetadddbl", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXparamsetadddbl" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_paramset, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXparamsetadddbl" "', argument " "2"" of type '" "CPXPARAMSETptr""'"); 
  }
  arg2 = reinterpret_cast< CPXPARAMSETptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXparamsetadddbl" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXparamsetadddbl" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (int)CPXparamsetadddbl((cpxenv const *)arg1,arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXparamsetaddint(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXPARAMSETptr arg2 = (CPXPARAMSETptr) 0 ;
  int arg3 ;
  CPXINT arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXparamsetaddint", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXparamsetaddint" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_paramset, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXparamsetaddint" "', argument " "2"" of type '" "CPXPARAMSETptr""'"); 
  }
  arg2 = reinterpret_cast< CPXPARAMSETptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXparamsetaddint" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXparamsetaddint" "', argument " "4"" of type '" "CPXINT""'");
  } 
  arg4 = static_cast< CPXINT >(val4);
  {
    try {
      result = (int)CPXparamsetaddint((cpxenv const *)arg1,arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXparamsetaddlong(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXPARAMSETptr arg2 = (CPXPARAMSETptr) 0 ;
  int arg3 ;
  CPXLONG arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  long long val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXparamsetaddlong", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXparamsetaddlong" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_paramset, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXparamsetaddlong" "', argument " "2"" of type '" "CPXPARAMSETptr""'"); 
  }
  arg2 = reinterpret_cast< CPXPARAMSETptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXparamsetaddlong" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_long_SS_long(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXparamsetaddlong" "', argument " "4"" of type '" "CPXLONG""'");
  } 
  arg4 = static_cast< CPXLONG >(val4);
  {
    try {
      result = (int)CPXparamsetaddlong((cpxenv const *)arg1,arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXparamsetaddstr(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXPARAMSETptr arg2 = (CPXPARAMSETptr) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXparamsetaddstr", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXparamsetaddstr" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_paramset, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXparamsetaddstr" "', argument " "2"" of type '" "CPXPARAMSETptr""'"); 
  }
  arg2 = reinterpret_cast< CPXPARAMSETptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXparamsetaddstr" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_AsCharPtrAndSize(swig_obj[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXparamsetaddstr" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  {
    try {
      result = (int)CPXparamsetaddstr((cpxenv const *)arg1,arg2,arg3,(char const *)arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXparamsetapply(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXENVptr arg1 = (CPXENVptr) 0 ;
  CPXCPARAMSETptr arg2 = (CPXCPARAMSETptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXparamsetapply", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXparamsetapply" "', argument " "1"" of type '" "CPXENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_paramset, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXparamsetapply" "', argument " "2"" of type '" "CPXCPARAMSETptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCPARAMSETptr >(argp2);
  {
    try {
      result = (int)CPXparamsetapply(arg1,(paramset const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXparamsetcopy(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXPARAMSETptr arg2 = (CPXPARAMSETptr) 0 ;
  CPXCPARAMSETptr arg3 = (CPXCPARAMSETptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXparamsetcopy", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXparamsetcopy" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_paramset, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXparamsetcopy" "', argument " "2"" of type '" "CPXPARAMSETptr""'"); 
  }
  arg2 = reinterpret_cast< CPXPARAMSETptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_paramset, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXparamsetcopy" "', argument " "3"" of type '" "CPXCPARAMSETptr""'"); 
  }
  arg3 = reinterpret_cast< CPXCPARAMSETptr >(argp3);
  {
    try {
      result = (int)CPXparamsetcopy((cpxenv const *)arg1,arg2,(paramset const *)arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXparamsetcreate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  int *arg2 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  CPXPARAMSETptr result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXparamsetcreate", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXparamsetcreate" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXparamsetcreate" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  {
    try {
      result = (CPXPARAMSETptr)CPXparamsetcreate((cpxenv const *)arg1,arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_paramset, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXparamsetdel(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXPARAMSETptr arg2 = (CPXPARAMSETptr) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXparamsetdel", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXparamsetdel" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_paramset, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXparamsetdel" "', argument " "2"" of type '" "CPXPARAMSETptr""'"); 
  }
  arg2 = reinterpret_cast< CPXPARAMSETptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXparamsetdel" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (int)CPXparamsetdel((cpxenv const *)arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXparamsetfree(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXPARAMSETptr *arg2 = (CPXPARAMSETptr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXparamsetfree", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXparamsetfree" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_p_paramset, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXparamsetfree" "', argument " "2"" of type '" "CPXPARAMSETptr *""'"); 
  }
  arg2 = reinterpret_cast< CPXPARAMSETptr * >(argp2);
  {
    try {
      result = (int)CPXparamsetfree((cpxenv const *)arg1,arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXparamsetgetdbl(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCPARAMSETptr arg2 = (CPXCPARAMSETptr) 0 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXparamsetgetdbl", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXparamsetgetdbl" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_paramset, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXparamsetgetdbl" "', argument " "2"" of type '" "CPXCPARAMSETptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCPARAMSETptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXparamsetgetdbl" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXparamsetgetdbl" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  {
    try {
      result = (int)CPXparamsetgetdbl((cpxenv const *)arg1,(paramset const *)arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXparamsetgetids(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCPARAMSETptr arg2 = (CPXCPARAMSETptr) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int arg5 ;
  int *arg6 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject *swig_obj[6] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXparamsetgetids", 6, 6, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXparamsetgetids" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_paramset, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXparamsetgetids" "', argument " "2"" of type '" "CPXCPARAMSETptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCPARAMSETptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXparamsetgetids" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXparamsetgetids" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXparamsetgetids" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  res6 = SWIG_ConvertPtr(swig_obj[5], &argp6,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CPXparamsetgetids" "', argument " "6"" of type '" "int *""'"); 
  }
  arg6 = reinterpret_cast< int * >(argp6);
  {
    try {
      result = (int)CPXparamsetgetids((cpxenv const *)arg1,(paramset const *)arg2,arg3,arg4,arg5,arg6);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXparamsetgetint(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCPARAMSETptr arg2 = (CPXCPARAMSETptr) 0 ;
  int arg3 ;
  CPXINT *arg4 = (CPXINT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXparamsetgetint", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXparamsetgetint" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_paramset, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXparamsetgetint" "', argument " "2"" of type '" "CPXCPARAMSETptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCPARAMSETptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXparamsetgetint" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXparamsetgetint" "', argument " "4"" of type '" "CPXINT *""'"); 
  }
  arg4 = reinterpret_cast< CPXINT * >(argp4);
  {
    try {
      result = (int)CPXparamsetgetint((cpxenv const *)arg1,(paramset const *)arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXparamsetgetlong(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCPARAMSETptr arg2 = (CPXCPARAMSETptr) 0 ;
  int arg3 ;
  CPXLONG *arg4 = (CPXLONG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXparamsetgetlong", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXparamsetgetlong" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_paramset, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXparamsetgetlong" "', argument " "2"" of type '" "CPXCPARAMSETptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCPARAMSETptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXparamsetgetlong" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_long_long, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXparamsetgetlong" "', argument " "4"" of type '" "CPXLONG *""'"); 
  }
  arg4 = reinterpret_cast< CPXLONG * >(argp4);
  {
    try {
      result = (int)CPXparamsetgetlong((cpxenv const *)arg1,(paramset const *)arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXparamsetgetstr(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCPARAMSETptr arg2 = (CPXCPARAMSETptr) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXparamsetgetstr", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXparamsetgetstr" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_paramset, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXparamsetgetstr" "', argument " "2"" of type '" "CPXCPARAMSETptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCPARAMSETptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXparamsetgetstr" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_AsCharPtrAndSize(swig_obj[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXparamsetgetstr" "', argument " "4"" of type '" "char *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  {
    try {
      result = (int)CPXparamsetgetstr((cpxenv const *)arg1,(paramset const *)arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXparamsetreadcopy(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXENVptr arg1 = (CPXENVptr) 0 ;
  CPXPARAMSETptr arg2 = (CPXPARAMSETptr) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXparamsetreadcopy", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXparamsetreadcopy" "', argument " "1"" of type '" "CPXENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_paramset, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXparamsetreadcopy" "', argument " "2"" of type '" "CPXPARAMSETptr""'"); 
  }
  arg2 = reinterpret_cast< CPXPARAMSETptr >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXparamsetreadcopy" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try {
      result = (int)CPXparamsetreadcopy(arg1,arg2,(char const *)arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXparamsetwrite(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCPARAMSETptr arg2 = (CPXCPARAMSETptr) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXparamsetwrite", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXparamsetwrite" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_paramset, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXparamsetwrite" "', argument " "2"" of type '" "CPXCPARAMSETptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCPARAMSETptr >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXparamsetwrite" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try {
      result = (int)CPXparamsetwrite((cpxenv const *)arg1,(paramset const *)arg2,(char const *)arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXpivot(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXpivot", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXpivot" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXpivot" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXpivot" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXpivot" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXpivot" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (int)CPXpivot((cpxenv const *)arg1,arg2,arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXpivotin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXpivotin", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXpivotin" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXpivotin" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[2])) {
      int size = (int)PyList_Size(swig_obj[2]);
      int i = 0;
      arg3 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[2], i);
        if (PyInt_Check(o)) {
          arg3[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg3);
          return NULL;
        }
      }
    }
    else if (swig_obj[2] == Py_None) {
      arg3 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXpivotin" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (int)CPXpivotin((cpxenv const *)arg1,arg2,(int const *)arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg3);
  }
  return resultobj;
fail:
  {
    free(arg3);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXpivotout(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXpivotout", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXpivotout" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXpivotout" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[2])) {
      int size = (int)PyList_Size(swig_obj[2]);
      int i = 0;
      arg3 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[2], i);
        if (PyInt_Check(o)) {
          arg3[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg3);
          return NULL;
        }
      }
    }
    else if (swig_obj[2] == Py_None) {
      arg3 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXpivotout" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (int)CPXpivotout((cpxenv const *)arg1,arg2,(int const *)arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg3);
  }
  return resultobj;
fail:
  {
    free(arg3);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXpperwrite(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXpperwrite", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXpperwrite" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXpperwrite" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXpperwrite" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXpperwrite" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (int)CPXpperwrite((cpxenv const *)arg1,arg2,(char const *)arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXpratio(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  int *arg7 = (int *) 0 ;
  int *arg8 = (int *) 0 ;
  int *arg9 = (int *) 0 ;
  int *arg10 = (int *) 0 ;
  int *arg11 = (int *) 0 ;
  int *arg12 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  void *argp11 = 0 ;
  int res11 = 0 ;
  void *argp12 = 0 ;
  int res12 = 0 ;
  PyObject *swig_obj[12] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXpratio", 12, 12, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXpratio" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXpratio" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXpratio" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXpratio" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXpratio" "', argument " "5"" of type '" "double *""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(swig_obj[5], &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CPXpratio" "', argument " "6"" of type '" "double *""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  res7 = SWIG_ConvertPtr(swig_obj[6], &argp7,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "CPXpratio" "', argument " "7"" of type '" "int *""'"); 
  }
  arg7 = reinterpret_cast< int * >(argp7);
  res8 = SWIG_ConvertPtr(swig_obj[7], &argp8,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "CPXpratio" "', argument " "8"" of type '" "int *""'"); 
  }
  arg8 = reinterpret_cast< int * >(argp8);
  res9 = SWIG_ConvertPtr(swig_obj[8], &argp9,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "CPXpratio" "', argument " "9"" of type '" "int *""'"); 
  }
  arg9 = reinterpret_cast< int * >(argp9);
  res10 = SWIG_ConvertPtr(swig_obj[9], &argp10,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "CPXpratio" "', argument " "10"" of type '" "int *""'"); 
  }
  arg10 = reinterpret_cast< int * >(argp10);
  res11 = SWIG_ConvertPtr(swig_obj[10], &argp11,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res11)) {
    SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "CPXpratio" "', argument " "11"" of type '" "int *""'"); 
  }
  arg11 = reinterpret_cast< int * >(argp11);
  res12 = SWIG_ConvertPtr(swig_obj[11], &argp12,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res12)) {
    SWIG_exception_fail(SWIG_ArgError(res12), "in method '" "CPXpratio" "', argument " "12"" of type '" "int *""'"); 
  }
  arg12 = reinterpret_cast< int * >(argp12);
  {
    try {
      result = (int)CPXpratio((cpxenv const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXpreaddrows(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  char *arg6 = (char *) 0 ;
  int *arg7 = (int *) 0 ;
  int *arg8 = (int *) 0 ;
  double *arg9 = (double *) 0 ;
  char **arg10 = (char **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  PyObject *swig_obj[10] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXpreaddrows", 10, 10, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXpreaddrows" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXpreaddrows" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXpreaddrows" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXpreaddrows" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[4])) {
      int size = (int)PyList_Size(swig_obj[4]);
      int i = 0;
      arg5 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[4], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg5[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg5);
          return NULL;
        }
      }
    }
    else if (swig_obj[4] == Py_None) {
      arg5 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res6 = SWIG_AsCharPtrAndSize(swig_obj[5], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CPXpreaddrows" "', argument " "6"" of type '" "char const *""'");
  }
  arg6 = reinterpret_cast< char * >(buf6);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[6])) {
      int size = (int)PyList_Size(swig_obj[6]);
      int i = 0;
      arg7 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[6], i);
        if (PyInt_Check(o)) {
          arg7[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg7);
          return NULL;
        }
      }
    }
    else if (swig_obj[6] == Py_None) {
      arg7 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[7])) {
      int size = (int)PyList_Size(swig_obj[7]);
      int i = 0;
      arg8 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[7], i);
        if (PyInt_Check(o)) {
          arg8[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg8);
          return NULL;
        }
      }
    }
    else if (swig_obj[7] == Py_None) {
      arg8 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[8])) {
      int size = (int)PyList_Size(swig_obj[8]);
      int i = 0;
      arg9 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[8], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg9[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg9);
          return NULL;
        }
      }
    }
    else if (swig_obj[8] == Py_None) {
      arg9 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res10 = SWIG_ConvertPtr(swig_obj[9], &argp10,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "CPXpreaddrows" "', argument " "10"" of type '" "char **""'"); 
  }
  arg10 = reinterpret_cast< char ** >(argp10);
  {
    try {
      result = (int)CPXpreaddrows((cpxenv const *)arg1,arg2,arg3,arg4,(double const *)arg5,(char const *)arg6,(int const *)arg7,(int const *)arg8,(double const *)arg9,arg10);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg5);
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  {
    free(arg7);
  }
  {
    free(arg8);
  }
  {
    free(arg9);
  }
  return resultobj;
fail:
  {
    free(arg5);
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  {
    free(arg7);
  }
  {
    free(arg8);
  }
  {
    free(arg9);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXprechgobj(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  double *arg5 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXprechgobj", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXprechgobj" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXprechgobj" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXprechgobj" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[3])) {
      int size = (int)PyList_Size(swig_obj[3]);
      int i = 0;
      arg4 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[3], i);
        if (PyInt_Check(o)) {
          arg4[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg4);
          return NULL;
        }
      }
    }
    else if (swig_obj[3] == Py_None) {
      arg4 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[4])) {
      int size = (int)PyList_Size(swig_obj[4]);
      int i = 0;
      arg5 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[4], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg5[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg5);
          return NULL;
        }
      }
    }
    else if (swig_obj[4] == Py_None) {
      arg5 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    try {
      result = (int)CPXprechgobj((cpxenv const *)arg1,arg2,arg3,(int const *)arg4,(double const *)arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg4);
  }
  {
    free(arg5);
  }
  return resultobj;
fail:
  {
    free(arg4);
  }
  {
    free(arg5);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXpreslvwrite(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  char *arg3 = (char *) 0 ;
  double *arg4 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXpreslvwrite", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXpreslvwrite" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXpreslvwrite" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXpreslvwrite" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXpreslvwrite" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  {
    try {
      result = (int)CPXpreslvwrite((cpxenv const *)arg1,arg2,(char const *)arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXpresolve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXpresolve", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXpresolve" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXpresolve" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXpresolve" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (int)CPXpresolve((cpxenv const *)arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXprimopt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXprimopt", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXprimopt" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXprimopt" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  {
    try {
      result = (int)CPXprimopt((cpxenv const *)arg1,arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXqpdjfrompi(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXqpdjfrompi", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXqpdjfrompi" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXqpdjfrompi" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[2])) {
      int size = (int)PyList_Size(swig_obj[2]);
      int i = 0;
      arg3 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[2], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg3[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg3);
          return NULL;
        }
      }
    }
    else if (swig_obj[2] == Py_None) {
      arg3 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[3])) {
      int size = (int)PyList_Size(swig_obj[3]);
      int i = 0;
      arg4 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[3], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg4[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg4);
          return NULL;
        }
      }
    }
    else if (swig_obj[3] == Py_None) {
      arg4 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXqpdjfrompi" "', argument " "5"" of type '" "double *""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  {
    try {
      result = (int)CPXqpdjfrompi((cpxenv const *)arg1,(cpxlp const *)arg2,(double const *)arg3,(double const *)arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg3);
  }
  {
    free(arg4);
  }
  return resultobj;
fail:
  {
    free(arg3);
  }
  {
    free(arg4);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXqpuncrushpi(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXqpuncrushpi", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXqpuncrushpi" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXqpuncrushpi" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXqpuncrushpi" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[3])) {
      int size = (int)PyList_Size(swig_obj[3]);
      int i = 0;
      arg4 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[3], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg4[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg4);
          return NULL;
        }
      }
    }
    else if (swig_obj[3] == Py_None) {
      arg4 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[4])) {
      int size = (int)PyList_Size(swig_obj[4]);
      int i = 0;
      arg5 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[4], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg5[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg5);
          return NULL;
        }
      }
    }
    else if (swig_obj[4] == Py_None) {
      arg5 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    try {
      result = (int)CPXqpuncrushpi((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,(double const *)arg4,(double const *)arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg4);
  }
  {
    free(arg5);
  }
  return resultobj;
fail:
  {
    free(arg4);
  }
  {
    free(arg5);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXreadcopyannotations(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXreadcopyannotations", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXreadcopyannotations" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXreadcopyannotations" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXreadcopyannotations" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try {
      result = (int)CPXreadcopyannotations((cpxenv const *)arg1,arg2,(char const *)arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXreadcopybase(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXreadcopybase", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXreadcopybase" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXreadcopybase" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXreadcopybase" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try {
      result = (int)CPXreadcopybase((cpxenv const *)arg1,arg2,(char const *)arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXreadcopyparam(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXENVptr arg1 = (CPXENVptr) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXreadcopyparam", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXreadcopyparam" "', argument " "1"" of type '" "CPXENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXENVptr >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXreadcopyparam" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      result = (int)CPXreadcopyparam(arg1,(char const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXreadcopyprob(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXreadcopyprob", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXreadcopyprob" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXreadcopyprob" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXreadcopyprob" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(swig_obj[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXreadcopyprob" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  {
    try {
      result = (int)CPXreadcopyprob((cpxenv const *)arg1,arg2,(char const *)arg3,(char const *)arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXreadcopysol(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXreadcopysol", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXreadcopysol" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXreadcopysol" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXreadcopysol" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try {
      result = (int)CPXreadcopysol((cpxenv const *)arg1,arg2,(char const *)arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXreadcopystartinfo(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXreadcopystartinfo", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXreadcopystartinfo" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXreadcopystartinfo" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXreadcopystartinfo" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try {
      result = (int)CPXreadcopystartinfo((cpxenv const *)arg1,arg2,(char const *)arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXrefineconflict(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXrefineconflict", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXrefineconflict" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXrefineconflict" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXrefineconflict" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXrefineconflict" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  {
    try {
      result = (int)CPXrefineconflict((cpxenv const *)arg1,arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXrefineconflictext(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  int *arg6 = (int *) 0 ;
  int *arg7 = (int *) 0 ;
  char *arg8 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  PyObject *swig_obj[8] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXrefineconflictext", 8, 8, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXrefineconflictext" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXrefineconflictext" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXrefineconflictext" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXrefineconflictext" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[4])) {
      int size = (int)PyList_Size(swig_obj[4]);
      int i = 0;
      arg5 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[4], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg5[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg5);
          return NULL;
        }
      }
    }
    else if (swig_obj[4] == Py_None) {
      arg5 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[5])) {
      int size = (int)PyList_Size(swig_obj[5]);
      int i = 0;
      arg6 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[5], i);
        if (PyInt_Check(o)) {
          arg6[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg6);
          return NULL;
        }
      }
    }
    else if (swig_obj[5] == Py_None) {
      arg6 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[6])) {
      int size = (int)PyList_Size(swig_obj[6]);
      int i = 0;
      arg7 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[6], i);
        if (PyInt_Check(o)) {
          arg7[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg7);
          return NULL;
        }
      }
    }
    else if (swig_obj[6] == Py_None) {
      arg7 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res8 = SWIG_AsCharPtrAndSize(swig_obj[7], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "CPXrefineconflictext" "', argument " "8"" of type '" "char const *""'");
  }
  arg8 = reinterpret_cast< char * >(buf8);
  {
    try {
      result = (int)CPXrefineconflictext((cpxenv const *)arg1,arg2,arg3,arg4,(double const *)arg5,(int const *)arg6,(int const *)arg7,(char const *)arg8);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg5);
  }
  {
    free(arg6);
  }
  {
    free(arg7);
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return resultobj;
fail:
  {
    free(arg5);
  }
  {
    free(arg6);
  }
  {
    free(arg7);
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXrhssa(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int arg3 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject *swig_obj[6] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXrhssa", 6, 6, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXrhssa" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXrhssa" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXrhssa" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXrhssa" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXrhssa" "', argument " "5"" of type '" "double *""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(swig_obj[5], &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CPXrhssa" "', argument " "6"" of type '" "double *""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  {
    try {
      result = (int)CPXrhssa((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5,arg6);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXrobustopt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  CPXLPptr arg3 = (CPXLPptr) 0 ;
  CPXLPptr arg4 = (CPXLPptr) 0 ;
  double arg5 ;
  double *arg6 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[6] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXrobustopt", 6, 6, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXrobustopt" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXrobustopt" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXrobustopt" "', argument " "3"" of type '" "CPXLPptr""'"); 
  }
  arg3 = reinterpret_cast< CPXLPptr >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXrobustopt" "', argument " "4"" of type '" "CPXLPptr""'"); 
  }
  arg4 = reinterpret_cast< CPXLPptr >(argp4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXrobustopt" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[5])) {
      int size = (int)PyList_Size(swig_obj[5]);
      int i = 0;
      arg6 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[5], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg6[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg6);
          return NULL;
        }
      }
    }
    else if (swig_obj[5] == Py_None) {
      arg6 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    try {
      result = (int)CPXrobustopt((cpxenv const *)arg1,arg2,arg3,arg4,arg5,(double const *)arg6);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg6);
  }
  return resultobj;
fail:
  {
    free(arg6);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXserializercreate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXSERIALIZERptr *arg1 = (CPXSERIALIZERptr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_p_cpxserializer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXserializercreate" "', argument " "1"" of type '" "CPXSERIALIZERptr *""'"); 
  }
  arg1 = reinterpret_cast< CPXSERIALIZERptr * >(argp1);
  {
    try {
      result = (int)CPXserializercreate(arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXserializerdestroy(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXSERIALIZERptr arg1 = (CPXSERIALIZERptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxserializer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXserializerdestroy" "', argument " "1"" of type '" "CPXSERIALIZERptr""'"); 
  }
  arg1 = reinterpret_cast< CPXSERIALIZERptr >(argp1);
  {
    try {
      CPXserializerdestroy(arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXserializerlength(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCSERIALIZERptr arg1 = (CPXCSERIALIZERptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  CPXLONG result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxserializer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXserializerlength" "', argument " "1"" of type '" "CPXCSERIALIZERptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCSERIALIZERptr >(argp1);
  {
    try {
      result = (CPXLONG)CPXserializerlength((cpxserializer const *)arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXserializerpayload(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCSERIALIZERptr arg1 = (CPXCSERIALIZERptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  void *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxserializer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXserializerpayload" "', argument " "1"" of type '" "CPXCSERIALIZERptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCSERIALIZERptr >(argp1);
  {
    try {
      result = (void *)CPXserializerpayload((cpxserializer const *)arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXsetdblannotations(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int *arg6 = (int *) 0 ;
  double *arg7 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[7] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXsetdblannotations", 7, 7, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXsetdblannotations" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXsetdblannotations" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXsetdblannotations" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXsetdblannotations" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXsetdblannotations" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[5])) {
      int size = (int)PyList_Size(swig_obj[5]);
      int i = 0;
      arg6 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[5], i);
        if (PyInt_Check(o)) {
          arg6[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg6);
          return NULL;
        }
      }
    }
    else if (swig_obj[5] == Py_None) {
      arg6 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[6])) {
      int size = (int)PyList_Size(swig_obj[6]);
      int i = 0;
      arg7 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[6], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg7[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg7);
          return NULL;
        }
      }
    }
    else if (swig_obj[6] == Py_None) {
      arg7 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    try {
      result = (int)CPXsetdblannotations((cpxenv const *)arg1,arg2,arg3,arg4,arg5,(int const *)arg6,(double const *)arg7);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg6);
  }
  {
    free(arg7);
  }
  return resultobj;
fail:
  {
    free(arg6);
  }
  {
    free(arg7);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXsetdblparam(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXENVptr arg1 = (CPXENVptr) 0 ;
  int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXsetdblparam", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXsetdblparam" "', argument " "1"" of type '" "CPXENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXENVptr >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPXsetdblparam" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXsetdblparam" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (int)CPXsetdblparam(arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXsetdefaults(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXENVptr arg1 = (CPXENVptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXsetdefaults" "', argument " "1"" of type '" "CPXENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXENVptr >(argp1);
  {
    try {
      result = (int)CPXsetdefaults(arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXsetintparam(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXENVptr arg1 = (CPXENVptr) 0 ;
  int arg2 ;
  CPXINT arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXsetintparam", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXsetintparam" "', argument " "1"" of type '" "CPXENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXENVptr >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPXsetintparam" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXsetintparam" "', argument " "3"" of type '" "CPXINT""'");
  } 
  arg3 = static_cast< CPXINT >(val3);
  {
    try {
      result = (int)CPXsetintparam(arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXsetlogfilename(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXsetlogfilename", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXsetlogfilename" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXsetlogfilename" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXsetlogfilename" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try {
      result = (int)CPXsetlogfilename((cpxenv const *)arg1,(char const *)arg2,(char const *)arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXsetlongannotations(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int *arg6 = (int *) 0 ;
  CPXLONG *arg7 = (CPXLONG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  PyObject *swig_obj[7] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXsetlongannotations", 7, 7, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXsetlongannotations" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXsetlongannotations" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXsetlongannotations" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXsetlongannotations" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXsetlongannotations" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[5])) {
      int size = (int)PyList_Size(swig_obj[5]);
      int i = 0;
      arg6 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[5], i);
        if (PyInt_Check(o)) {
          arg6[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg6);
          return NULL;
        }
      }
    }
    else if (swig_obj[5] == Py_None) {
      arg6 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res7 = SWIG_ConvertPtr(swig_obj[6], &argp7,SWIGTYPE_p_long_long, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "CPXsetlongannotations" "', argument " "7"" of type '" "CPXLONG const *""'"); 
  }
  arg7 = reinterpret_cast< CPXLONG * >(argp7);
  {
    try {
      result = (int)CPXsetlongannotations((cpxenv const *)arg1,arg2,arg3,arg4,arg5,(int const *)arg6,(long long const *)arg7);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg6);
  }
  return resultobj;
fail:
  {
    free(arg6);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXsetlongparam(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXENVptr arg1 = (CPXENVptr) 0 ;
  int arg2 ;
  CPXLONG arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long long val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXsetlongparam", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXsetlongparam" "', argument " "1"" of type '" "CPXENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXENVptr >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPXsetlongparam" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long_SS_long(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXsetlongparam" "', argument " "3"" of type '" "CPXLONG""'");
  } 
  arg3 = static_cast< CPXLONG >(val3);
  {
    try {
      result = (int)CPXsetlongparam(arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXsetlpcallbackfunc(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXENVptr arg1 = (CPXENVptr) 0 ;
  int (*arg2)(CPXCENVptr,void *,int,void *) = (int (*)(CPXCENVptr,void *,int,void *)) 0 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXsetlpcallbackfunc", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXsetlpcallbackfunc" "', argument " "1"" of type '" "CPXENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXENVptr >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_f_p_q_const__cpxenv_p_void_int_p_void__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "CPXsetlpcallbackfunc" "', argument " "2"" of type '" "int (*)(CPXCENVptr,void *,int,void *)""'"); 
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2],SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXsetlpcallbackfunc" "', argument " "3"" of type '" "void *""'"); 
  }
  {
    try {
      result = (int)CPXsetlpcallbackfunc(arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXsetnetcallbackfunc(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXENVptr arg1 = (CPXENVptr) 0 ;
  int (*arg2)(CPXCENVptr,void *,int,void *) = (int (*)(CPXCENVptr,void *,int,void *)) 0 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXsetnetcallbackfunc", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXsetnetcallbackfunc" "', argument " "1"" of type '" "CPXENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXENVptr >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_f_p_q_const__cpxenv_p_void_int_p_void__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "CPXsetnetcallbackfunc" "', argument " "2"" of type '" "int (*)(CPXCENVptr,void *,int,void *)""'"); 
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2],SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXsetnetcallbackfunc" "', argument " "3"" of type '" "void *""'"); 
  }
  {
    try {
      result = (int)CPXsetnetcallbackfunc(arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXsetnumobjs(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXsetnumobjs", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXsetnumobjs" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXsetnumobjs" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXsetnumobjs" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (int)CPXsetnumobjs((cpxenv const *)arg1,(cpxlp const *)arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXsetphase2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXsetphase2", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXsetphase2" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXsetphase2" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  {
    try {
      result = (int)CPXsetphase2((cpxenv const *)arg1,arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXsetprofcallbackfunc(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXENVptr arg1 = (CPXENVptr) 0 ;
  int (*arg2)(CPXCENVptr,int,void *) = (int (*)(CPXCENVptr,int,void *)) 0 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXsetprofcallbackfunc", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXsetprofcallbackfunc" "', argument " "1"" of type '" "CPXENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXENVptr >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_f_p_q_const__cpxenv_int_p_void__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "CPXsetprofcallbackfunc" "', argument " "2"" of type '" "int (*)(CPXCENVptr,int,void *)""'"); 
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2],SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXsetprofcallbackfunc" "', argument " "3"" of type '" "void *""'"); 
  }
  {
    try {
      result = (int)CPXsetprofcallbackfunc(arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXsetstrparam(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXENVptr arg1 = (CPXENVptr) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXsetstrparam", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXsetstrparam" "', argument " "1"" of type '" "CPXENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXENVptr >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPXsetstrparam" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXsetstrparam" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try {
      result = (int)CPXsetstrparam(arg1,arg2,(char const *)arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXsetterminate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXENVptr arg1 = (CPXENVptr) 0 ;
  int *arg2 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXsetterminate", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXsetterminate" "', argument " "1"" of type '" "CPXENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXsetterminate" "', argument " "2"" of type '" "int volatile *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  {
    try {
      result = (int)CPXsetterminate(arg1,(int volatile *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXsettuningcallbackfunc(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXENVptr arg1 = (CPXENVptr) 0 ;
  int (*arg2)(CPXCENVptr,void *,int,void *) = (int (*)(CPXCENVptr,void *,int,void *)) 0 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXsettuningcallbackfunc", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXsettuningcallbackfunc" "', argument " "1"" of type '" "CPXENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXENVptr >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_f_p_q_const__cpxenv_p_void_int_p_void__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "CPXsettuningcallbackfunc" "', argument " "2"" of type '" "int (*)(CPXCENVptr,void *,int,void *)""'"); 
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2],SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXsettuningcallbackfunc" "', argument " "3"" of type '" "void *""'"); 
  }
  {
    try {
      result = (int)CPXsettuningcallbackfunc(arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXsiftopt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXsiftopt", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXsiftopt" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXsiftopt" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  {
    try {
      result = (int)CPXsiftopt((cpxenv const *)arg1,arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXslackfromx(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXslackfromx", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXslackfromx" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXslackfromx" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[2])) {
      int size = (int)PyList_Size(swig_obj[2]);
      int i = 0;
      arg3 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[2], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg3[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg3);
          return NULL;
        }
      }
    }
    else if (swig_obj[2] == Py_None) {
      arg3 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXslackfromx" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  {
    try {
      result = (int)CPXslackfromx((cpxenv const *)arg1,(cpxlp const *)arg2,(double const *)arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg3);
  }
  return resultobj;
fail:
  {
    free(arg3);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXsolninfo(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  int *arg6 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject *swig_obj[6] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXsolninfo", 6, 6, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXsolninfo" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXsolninfo" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXsolninfo" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXsolninfo" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXsolninfo" "', argument " "5"" of type '" "int *""'"); 
  }
  arg5 = reinterpret_cast< int * >(argp5);
  res6 = SWIG_ConvertPtr(swig_obj[5], &argp6,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CPXsolninfo" "', argument " "6"" of type '" "int *""'"); 
  }
  arg6 = reinterpret_cast< int * >(argp6);
  {
    try {
      result = (int)CPXsolninfo((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5,arg6);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXsolution(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int *arg3 = (int *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  PyObject *swig_obj[8] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXsolution", 8, 8, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXsolution" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXsolution" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXsolution" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXsolution" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXsolution" "', argument " "5"" of type '" "double *""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(swig_obj[5], &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CPXsolution" "', argument " "6"" of type '" "double *""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  res7 = SWIG_ConvertPtr(swig_obj[6], &argp7,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "CPXsolution" "', argument " "7"" of type '" "double *""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  res8 = SWIG_ConvertPtr(swig_obj[7], &argp8,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "CPXsolution" "', argument " "8"" of type '" "double *""'"); 
  }
  arg8 = reinterpret_cast< double * >(argp8);
  {
    try {
      result = (int)CPXsolution((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXsolwrite(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXsolwrite", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXsolwrite" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXsolwrite" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXsolwrite" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try {
      result = (int)CPXsolwrite((cpxenv const *)arg1,(cpxlp const *)arg2,(char const *)arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXsolwritesolnpool(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXsolwritesolnpool", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXsolwritesolnpool" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXsolwritesolnpool" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXsolwritesolnpool" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_AsCharPtrAndSize(swig_obj[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXsolwritesolnpool" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  {
    try {
      result = (int)CPXsolwritesolnpool((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,(char const *)arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXsolwritesolnpoolall(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXsolwritesolnpoolall", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXsolwritesolnpoolall" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXsolwritesolnpoolall" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXsolwritesolnpoolall" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try {
      result = (int)CPXsolwritesolnpoolall((cpxenv const *)arg1,(cpxlp const *)arg2,(char const *)arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXstrongbranch(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  int arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  PyObject *swig_obj[7] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXstrongbranch", 7, 7, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXstrongbranch" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXstrongbranch" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[2])) {
      int size = (int)PyList_Size(swig_obj[2]);
      int i = 0;
      arg3 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[2], i);
        if (PyInt_Check(o)) {
          arg3[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg3);
          return NULL;
        }
      }
    }
    else if (swig_obj[2] == Py_None) {
      arg3 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXstrongbranch" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXstrongbranch" "', argument " "5"" of type '" "double *""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(swig_obj[5], &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CPXstrongbranch" "', argument " "6"" of type '" "double *""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  ecode7 = SWIG_AsVal_int(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "CPXstrongbranch" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  {
    try {
      result = (int)CPXstrongbranch((cpxenv const *)arg1,arg2,(int const *)arg3,arg4,arg5,arg6,arg7);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg3);
  }
  return resultobj;
fail:
  {
    free(arg3);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXtightenbds(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  char *arg5 = (char *) 0 ;
  double *arg6 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  PyObject *swig_obj[6] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXtightenbds", 6, 6, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXtightenbds" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXtightenbds" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXtightenbds" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[3])) {
      int size = (int)PyList_Size(swig_obj[3]);
      int i = 0;
      arg4 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[3], i);
        if (PyInt_Check(o)) {
          arg4[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg4);
          return NULL;
        }
      }
    }
    else if (swig_obj[3] == Py_None) {
      arg4 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res5 = SWIG_AsCharPtrAndSize(swig_obj[4], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXtightenbds" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = reinterpret_cast< char * >(buf5);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[5])) {
      int size = (int)PyList_Size(swig_obj[5]);
      int i = 0;
      arg6 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[5], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg6[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg6);
          return NULL;
        }
      }
    }
    else if (swig_obj[5] == Py_None) {
      arg6 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    try {
      result = (int)CPXtightenbds((cpxenv const *)arg1,arg2,arg3,(int const *)arg4,(char const *)arg5,(double const *)arg6);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg4);
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  {
    free(arg6);
  }
  return resultobj;
fail:
  {
    free(arg4);
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  {
    free(arg6);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXtuneparam(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXENVptr arg1 = (CPXENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  int arg6 ;
  int *arg7 = (int *) 0 ;
  double *arg8 = (double *) 0 ;
  int arg9 ;
  int *arg10 = (int *) 0 ;
  char **arg11 = (char **) 0 ;
  int *arg12 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  void *argp11 = 0 ;
  int res11 = 0 ;
  void *argp12 = 0 ;
  int res12 = 0 ;
  PyObject *swig_obj[12] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXtuneparam", 12, 12, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXtuneparam" "', argument " "1"" of type '" "CPXENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXtuneparam" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXtuneparam" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[3])) {
      int size = (int)PyList_Size(swig_obj[3]);
      int i = 0;
      arg4 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[3], i);
        if (PyInt_Check(o)) {
          arg4[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg4);
          return NULL;
        }
      }
    }
    else if (swig_obj[3] == Py_None) {
      arg4 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[4])) {
      int size = (int)PyList_Size(swig_obj[4]);
      int i = 0;
      arg5 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[4], i);
        if (PyInt_Check(o)) {
          arg5[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg5);
          return NULL;
        }
      }
    }
    else if (swig_obj[4] == Py_None) {
      arg5 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CPXtuneparam" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[6])) {
      int size = (int)PyList_Size(swig_obj[6]);
      int i = 0;
      arg7 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[6], i);
        if (PyInt_Check(o)) {
          arg7[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg7);
          return NULL;
        }
      }
    }
    else if (swig_obj[6] == Py_None) {
      arg7 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[7])) {
      int size = (int)PyList_Size(swig_obj[7]);
      int i = 0;
      arg8 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[7], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg8[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg8);
          return NULL;
        }
      }
    }
    else if (swig_obj[7] == Py_None) {
      arg8 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  ecode9 = SWIG_AsVal_int(swig_obj[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "CPXtuneparam" "', argument " "9"" of type '" "int""'");
  } 
  arg9 = static_cast< int >(val9);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[9])) {
      int size = (int)PyList_Size(swig_obj[9]);
      int i = 0;
      arg10 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[9], i);
        if (PyInt_Check(o)) {
          arg10[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg10);
          return NULL;
        }
      }
    }
    else if (swig_obj[9] == Py_None) {
      arg10 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res11 = SWIG_ConvertPtr(swig_obj[10], &argp11,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res11)) {
    SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "CPXtuneparam" "', argument " "11"" of type '" "char **""'"); 
  }
  arg11 = reinterpret_cast< char ** >(argp11);
  res12 = SWIG_ConvertPtr(swig_obj[11], &argp12,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res12)) {
    SWIG_exception_fail(SWIG_ArgError(res12), "in method '" "CPXtuneparam" "', argument " "12"" of type '" "int *""'"); 
  }
  arg12 = reinterpret_cast< int * >(argp12);
  {
    try {
      result = (int)CPXtuneparam(arg1,arg2,arg3,(int const *)arg4,(int const *)arg5,arg6,(int const *)arg7,(double const *)arg8,arg9,(int const *)arg10,arg11,arg12);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg4);
  }
  {
    free(arg5);
  }
  {
    free(arg7);
  }
  {
    free(arg8);
  }
  {
    free(arg10);
  }
  return resultobj;
fail:
  {
    free(arg4);
  }
  {
    free(arg5);
  }
  {
    free(arg7);
  }
  {
    free(arg8);
  }
  {
    free(arg10);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXtuneparamprobset(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXENVptr arg1 = (CPXENVptr) 0 ;
  int arg2 ;
  char **arg3 = (char **) 0 ;
  char **arg4 = (char **) 0 ;
  int arg5 ;
  int *arg6 = (int *) 0 ;
  int *arg7 = (int *) 0 ;
  int arg8 ;
  int *arg9 = (int *) 0 ;
  double *arg10 = (double *) 0 ;
  int arg11 ;
  int *arg12 = (int *) 0 ;
  char **arg13 = (char **) 0 ;
  int *arg14 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  int val11 ;
  int ecode11 = 0 ;
  void *argp13 = 0 ;
  int res13 = 0 ;
  void *argp14 = 0 ;
  int res14 = 0 ;
  PyObject *swig_obj[14] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXtuneparamprobset", 14, 14, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXtuneparamprobset" "', argument " "1"" of type '" "CPXENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXENVptr >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPXtuneparamprobset" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXtuneparamprobset" "', argument " "3"" of type '" "char **""'"); 
  }
  arg3 = reinterpret_cast< char ** >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXtuneparamprobset" "', argument " "4"" of type '" "char **""'"); 
  }
  arg4 = reinterpret_cast< char ** >(argp4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXtuneparamprobset" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[5])) {
      int size = (int)PyList_Size(swig_obj[5]);
      int i = 0;
      arg6 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[5], i);
        if (PyInt_Check(o)) {
          arg6[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg6);
          return NULL;
        }
      }
    }
    else if (swig_obj[5] == Py_None) {
      arg6 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[6])) {
      int size = (int)PyList_Size(swig_obj[6]);
      int i = 0;
      arg7 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[6], i);
        if (PyInt_Check(o)) {
          arg7[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg7);
          return NULL;
        }
      }
    }
    else if (swig_obj[6] == Py_None) {
      arg7 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  ecode8 = SWIG_AsVal_int(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "CPXtuneparamprobset" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[8])) {
      int size = (int)PyList_Size(swig_obj[8]);
      int i = 0;
      arg9 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[8], i);
        if (PyInt_Check(o)) {
          arg9[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg9);
          return NULL;
        }
      }
    }
    else if (swig_obj[8] == Py_None) {
      arg9 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[9])) {
      int size = (int)PyList_Size(swig_obj[9]);
      int i = 0;
      arg10 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[9], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg10[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg10);
          return NULL;
        }
      }
    }
    else if (swig_obj[9] == Py_None) {
      arg10 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  ecode11 = SWIG_AsVal_int(swig_obj[10], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "CPXtuneparamprobset" "', argument " "11"" of type '" "int""'");
  } 
  arg11 = static_cast< int >(val11);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[11])) {
      int size = (int)PyList_Size(swig_obj[11]);
      int i = 0;
      arg12 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[11], i);
        if (PyInt_Check(o)) {
          arg12[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg12);
          return NULL;
        }
      }
    }
    else if (swig_obj[11] == Py_None) {
      arg12 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res13 = SWIG_ConvertPtr(swig_obj[12], &argp13,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res13)) {
    SWIG_exception_fail(SWIG_ArgError(res13), "in method '" "CPXtuneparamprobset" "', argument " "13"" of type '" "char **""'"); 
  }
  arg13 = reinterpret_cast< char ** >(argp13);
  res14 = SWIG_ConvertPtr(swig_obj[13], &argp14,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res14)) {
    SWIG_exception_fail(SWIG_ArgError(res14), "in method '" "CPXtuneparamprobset" "', argument " "14"" of type '" "int *""'"); 
  }
  arg14 = reinterpret_cast< int * >(argp14);
  {
    try {
      result = (int)CPXtuneparamprobset(arg1,arg2,arg3,arg4,arg5,(int const *)arg6,(int const *)arg7,arg8,(int const *)arg9,(double const *)arg10,arg11,(int const *)arg12,arg13,arg14);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg6);
  }
  {
    free(arg7);
  }
  {
    free(arg9);
  }
  {
    free(arg10);
  }
  {
    free(arg12);
  }
  return resultobj;
fail:
  {
    free(arg6);
  }
  {
    free(arg7);
  }
  {
    free(arg9);
  }
  {
    free(arg10);
  }
  {
    free(arg12);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXuncrushform(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  double *arg5 = (double *) 0 ;
  int *arg6 = (int *) 0 ;
  double *arg7 = (double *) 0 ;
  int *arg8 = (int *) 0 ;
  double *arg9 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  PyObject *swig_obj[9] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXuncrushform", 9, 9, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXuncrushform" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXuncrushform" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXuncrushform" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[3])) {
      int size = (int)PyList_Size(swig_obj[3]);
      int i = 0;
      arg4 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[3], i);
        if (PyInt_Check(o)) {
          arg4[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg4);
          return NULL;
        }
      }
    }
    else if (swig_obj[3] == Py_None) {
      arg4 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[4])) {
      int size = (int)PyList_Size(swig_obj[4]);
      int i = 0;
      arg5 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[4], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg5[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg5);
          return NULL;
        }
      }
    }
    else if (swig_obj[4] == Py_None) {
      arg5 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res6 = SWIG_ConvertPtr(swig_obj[5], &argp6,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CPXuncrushform" "', argument " "6"" of type '" "int *""'"); 
  }
  arg6 = reinterpret_cast< int * >(argp6);
  res7 = SWIG_ConvertPtr(swig_obj[6], &argp7,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "CPXuncrushform" "', argument " "7"" of type '" "double *""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  res8 = SWIG_ConvertPtr(swig_obj[7], &argp8,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "CPXuncrushform" "', argument " "8"" of type '" "int *""'"); 
  }
  arg8 = reinterpret_cast< int * >(argp8);
  res9 = SWIG_ConvertPtr(swig_obj[8], &argp9,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "CPXuncrushform" "', argument " "9"" of type '" "double *""'"); 
  }
  arg9 = reinterpret_cast< double * >(argp9);
  {
    try {
      result = (int)CPXuncrushform((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,(int const *)arg4,(double const *)arg5,arg6,arg7,arg8,arg9);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg4);
  }
  {
    free(arg5);
  }
  return resultobj;
fail:
  {
    free(arg4);
  }
  {
    free(arg5);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXuncrushpi(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXuncrushpi", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXuncrushpi" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXuncrushpi" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXuncrushpi" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[3])) {
      int size = (int)PyList_Size(swig_obj[3]);
      int i = 0;
      arg4 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[3], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg4[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg4);
          return NULL;
        }
      }
    }
    else if (swig_obj[3] == Py_None) {
      arg4 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    try {
      result = (int)CPXuncrushpi((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,(double const *)arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg4);
  }
  return resultobj;
fail:
  {
    free(arg4);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXuncrushx(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXuncrushx", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXuncrushx" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXuncrushx" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXuncrushx" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[3])) {
      int size = (int)PyList_Size(swig_obj[3]);
      int i = 0;
      arg4 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[3], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg4[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg4);
          return NULL;
        }
      }
    }
    else if (swig_obj[3] == Py_None) {
      arg4 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    try {
      result = (int)CPXuncrushx((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,(double const *)arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg4);
  }
  return resultobj;
fail:
  {
    free(arg4);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXunscaleprob(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXunscaleprob", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXunscaleprob" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXunscaleprob" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  {
    try {
      result = (int)CPXunscaleprob((cpxenv const *)arg1,arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXversion(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  CPXCCHARptr result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXversion" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  {
    try {
      result = (CPXCCHARptr)CPXversion((cpxenv const *)arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXversionnumber(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  int *arg2 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXversionnumber", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXversionnumber" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXversionnumber" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  {
    try {
      result = (int)CPXversionnumber((cpxenv const *)arg1,arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXwriteannotations(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXwriteannotations", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXwriteannotations" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXwriteannotations" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXwriteannotations" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try {
      result = (int)CPXwriteannotations((cpxenv const *)arg1,(cpxlp const *)arg2,(char const *)arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXwritebendersannotation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXwritebendersannotation", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXwritebendersannotation" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXwritebendersannotation" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXwritebendersannotation" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try {
      result = (int)CPXwritebendersannotation((cpxenv const *)arg1,(cpxlp const *)arg2,(char const *)arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXwriteparam(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXwriteparam", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXwriteparam" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXwriteparam" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      result = (int)CPXwriteparam((cpxenv const *)arg1,(char const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXwriteprob(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXwriteprob", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXwriteprob" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXwriteprob" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXwriteprob" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(swig_obj[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXwriteprob" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  {
    try {
      result = (int)CPXwriteprob((cpxenv const *)arg1,(cpxlp const *)arg2,(char const *)arg3,(char const *)arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXbaropt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXbaropt", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXbaropt" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXbaropt" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  {
    try {
      result = (int)CPXbaropt((cpxenv const *)arg1,arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXhybbaropt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXhybbaropt", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXhybbaropt" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXhybbaropt" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXhybbaropt" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (int)CPXhybbaropt((cpxenv const *)arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXaddindconstraints(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  int *arg6 = (int *) 0 ;
  int arg7 ;
  double *arg8 = (double *) 0 ;
  char *arg9 = (char *) 0 ;
  int *arg10 = (int *) 0 ;
  int *arg11 = (int *) 0 ;
  double *arg12 = (double *) 0 ;
  char **arg13 = (char **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  int res9 ;
  char *buf9 = 0 ;
  int alloc9 = 0 ;
  void *argp13 = 0 ;
  int res13 = 0 ;
  PyObject *swig_obj[13] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXaddindconstraints", 13, 13, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXaddindconstraints" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXaddindconstraints" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXaddindconstraints" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[3])) {
      int size = (int)PyList_Size(swig_obj[3]);
      int i = 0;
      arg4 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[3], i);
        if (PyInt_Check(o)) {
          arg4[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg4);
          return NULL;
        }
      }
    }
    else if (swig_obj[3] == Py_None) {
      arg4 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[4])) {
      int size = (int)PyList_Size(swig_obj[4]);
      int i = 0;
      arg5 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[4], i);
        if (PyInt_Check(o)) {
          arg5[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg5);
          return NULL;
        }
      }
    }
    else if (swig_obj[4] == Py_None) {
      arg5 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[5])) {
      int size = (int)PyList_Size(swig_obj[5]);
      int i = 0;
      arg6 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[5], i);
        if (PyInt_Check(o)) {
          arg6[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg6);
          return NULL;
        }
      }
    }
    else if (swig_obj[5] == Py_None) {
      arg6 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  ecode7 = SWIG_AsVal_int(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "CPXaddindconstraints" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[7])) {
      int size = (int)PyList_Size(swig_obj[7]);
      int i = 0;
      arg8 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[7], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg8[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg8);
          return NULL;
        }
      }
    }
    else if (swig_obj[7] == Py_None) {
      arg8 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res9 = SWIG_AsCharPtrAndSize(swig_obj[8], &buf9, NULL, &alloc9);
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "CPXaddindconstraints" "', argument " "9"" of type '" "char const *""'");
  }
  arg9 = reinterpret_cast< char * >(buf9);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[9])) {
      int size = (int)PyList_Size(swig_obj[9]);
      int i = 0;
      arg10 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[9], i);
        if (PyInt_Check(o)) {
          arg10[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg10);
          return NULL;
        }
      }
    }
    else if (swig_obj[9] == Py_None) {
      arg10 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[10])) {
      int size = (int)PyList_Size(swig_obj[10]);
      int i = 0;
      arg11 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[10], i);
        if (PyInt_Check(o)) {
          arg11[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg11);
          return NULL;
        }
      }
    }
    else if (swig_obj[10] == Py_None) {
      arg11 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[11])) {
      int size = (int)PyList_Size(swig_obj[11]);
      int i = 0;
      arg12 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[11], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg12[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg12);
          return NULL;
        }
      }
    }
    else if (swig_obj[11] == Py_None) {
      arg12 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res13 = SWIG_ConvertPtr(swig_obj[12], &argp13,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res13)) {
    SWIG_exception_fail(SWIG_ArgError(res13), "in method '" "CPXaddindconstraints" "', argument " "13"" of type '" "char **""'"); 
  }
  arg13 = reinterpret_cast< char ** >(argp13);
  {
    try {
      result = (int)CPXaddindconstraints((cpxenv const *)arg1,arg2,arg3,(int const *)arg4,(int const *)arg5,(int const *)arg6,arg7,(double const *)arg8,(char const *)arg9,(int const *)arg10,(int const *)arg11,(double const *)arg12,arg13);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg4);
  }
  {
    free(arg5);
  }
  {
    free(arg6);
  }
  {
    free(arg8);
  }
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  {
    free(arg10);
  }
  {
    free(arg11);
  }
  {
    free(arg12);
  }
  return resultobj;
fail:
  {
    free(arg4);
  }
  {
    free(arg5);
  }
  {
    free(arg6);
  }
  {
    free(arg8);
  }
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  {
    free(arg10);
  }
  {
    free(arg11);
  }
  {
    free(arg12);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXaddlazyconstraints(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  char *arg6 = (char *) 0 ;
  int *arg7 = (int *) 0 ;
  int *arg8 = (int *) 0 ;
  double *arg9 = (double *) 0 ;
  char **arg10 = (char **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  PyObject *swig_obj[10] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXaddlazyconstraints", 10, 10, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXaddlazyconstraints" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXaddlazyconstraints" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXaddlazyconstraints" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXaddlazyconstraints" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[4])) {
      int size = (int)PyList_Size(swig_obj[4]);
      int i = 0;
      arg5 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[4], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg5[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg5);
          return NULL;
        }
      }
    }
    else if (swig_obj[4] == Py_None) {
      arg5 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res6 = SWIG_AsCharPtrAndSize(swig_obj[5], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CPXaddlazyconstraints" "', argument " "6"" of type '" "char const *""'");
  }
  arg6 = reinterpret_cast< char * >(buf6);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[6])) {
      int size = (int)PyList_Size(swig_obj[6]);
      int i = 0;
      arg7 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[6], i);
        if (PyInt_Check(o)) {
          arg7[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg7);
          return NULL;
        }
      }
    }
    else if (swig_obj[6] == Py_None) {
      arg7 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[7])) {
      int size = (int)PyList_Size(swig_obj[7]);
      int i = 0;
      arg8 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[7], i);
        if (PyInt_Check(o)) {
          arg8[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg8);
          return NULL;
        }
      }
    }
    else if (swig_obj[7] == Py_None) {
      arg8 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[8])) {
      int size = (int)PyList_Size(swig_obj[8]);
      int i = 0;
      arg9 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[8], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg9[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg9);
          return NULL;
        }
      }
    }
    else if (swig_obj[8] == Py_None) {
      arg9 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res10 = SWIG_ConvertPtr(swig_obj[9], &argp10,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "CPXaddlazyconstraints" "', argument " "10"" of type '" "char **""'"); 
  }
  arg10 = reinterpret_cast< char ** >(argp10);
  {
    try {
      result = (int)CPXaddlazyconstraints((cpxenv const *)arg1,arg2,arg3,arg4,(double const *)arg5,(char const *)arg6,(int const *)arg7,(int const *)arg8,(double const *)arg9,arg10);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg5);
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  {
    free(arg7);
  }
  {
    free(arg8);
  }
  {
    free(arg9);
  }
  return resultobj;
fail:
  {
    free(arg5);
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  {
    free(arg7);
  }
  {
    free(arg8);
  }
  {
    free(arg9);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXaddmipstarts(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  int *arg6 = (int *) 0 ;
  double *arg7 = (double *) 0 ;
  int *arg8 = (int *) 0 ;
  char **arg9 = (char **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  PyObject *swig_obj[9] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXaddmipstarts", 9, 9, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXaddmipstarts" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXaddmipstarts" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXaddmipstarts" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXaddmipstarts" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[4])) {
      int size = (int)PyList_Size(swig_obj[4]);
      int i = 0;
      arg5 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[4], i);
        if (PyInt_Check(o)) {
          arg5[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg5);
          return NULL;
        }
      }
    }
    else if (swig_obj[4] == Py_None) {
      arg5 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[5])) {
      int size = (int)PyList_Size(swig_obj[5]);
      int i = 0;
      arg6 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[5], i);
        if (PyInt_Check(o)) {
          arg6[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg6);
          return NULL;
        }
      }
    }
    else if (swig_obj[5] == Py_None) {
      arg6 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[6])) {
      int size = (int)PyList_Size(swig_obj[6]);
      int i = 0;
      arg7 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[6], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg7[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg7);
          return NULL;
        }
      }
    }
    else if (swig_obj[6] == Py_None) {
      arg7 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[7])) {
      int size = (int)PyList_Size(swig_obj[7]);
      int i = 0;
      arg8 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[7], i);
        if (PyInt_Check(o)) {
          arg8[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg8);
          return NULL;
        }
      }
    }
    else if (swig_obj[7] == Py_None) {
      arg8 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res9 = SWIG_ConvertPtr(swig_obj[8], &argp9,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "CPXaddmipstarts" "', argument " "9"" of type '" "char **""'"); 
  }
  arg9 = reinterpret_cast< char ** >(argp9);
  {
    try {
      result = (int)CPXaddmipstarts((cpxenv const *)arg1,arg2,arg3,arg4,(int const *)arg5,(int const *)arg6,(double const *)arg7,(int const *)arg8,arg9);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg5);
  }
  {
    free(arg6);
  }
  {
    free(arg7);
  }
  {
    free(arg8);
  }
  return resultobj;
fail:
  {
    free(arg5);
  }
  {
    free(arg6);
  }
  {
    free(arg7);
  }
  {
    free(arg8);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXaddsolnpooldivfilter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  double arg3 ;
  double arg4 ;
  int arg5 ;
  int *arg6 = (int *) 0 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  char *arg9 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int res9 ;
  char *buf9 = 0 ;
  int alloc9 = 0 ;
  PyObject *swig_obj[9] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXaddsolnpooldivfilter", 9, 9, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXaddsolnpooldivfilter" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXaddsolnpooldivfilter" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXaddsolnpooldivfilter" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXaddsolnpooldivfilter" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXaddsolnpooldivfilter" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[5])) {
      int size = (int)PyList_Size(swig_obj[5]);
      int i = 0;
      arg6 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[5], i);
        if (PyInt_Check(o)) {
          arg6[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg6);
          return NULL;
        }
      }
    }
    else if (swig_obj[5] == Py_None) {
      arg6 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[6])) {
      int size = (int)PyList_Size(swig_obj[6]);
      int i = 0;
      arg7 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[6], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg7[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg7);
          return NULL;
        }
      }
    }
    else if (swig_obj[6] == Py_None) {
      arg7 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[7])) {
      int size = (int)PyList_Size(swig_obj[7]);
      int i = 0;
      arg8 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[7], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg8[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg8);
          return NULL;
        }
      }
    }
    else if (swig_obj[7] == Py_None) {
      arg8 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res9 = SWIG_AsCharPtrAndSize(swig_obj[8], &buf9, NULL, &alloc9);
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "CPXaddsolnpooldivfilter" "', argument " "9"" of type '" "char const *""'");
  }
  arg9 = reinterpret_cast< char * >(buf9);
  {
    try {
      result = (int)CPXaddsolnpooldivfilter((cpxenv const *)arg1,arg2,arg3,arg4,arg5,(int const *)arg6,(double const *)arg7,(double const *)arg8,(char const *)arg9);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg6);
  }
  {
    free(arg7);
  }
  {
    free(arg8);
  }
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  return resultobj;
fail:
  {
    free(arg6);
  }
  {
    free(arg7);
  }
  {
    free(arg8);
  }
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXaddsolnpoolrngfilter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  double arg3 ;
  double arg4 ;
  int arg5 ;
  int *arg6 = (int *) 0 ;
  double *arg7 = (double *) 0 ;
  char *arg8 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  PyObject *swig_obj[8] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXaddsolnpoolrngfilter", 8, 8, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXaddsolnpoolrngfilter" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXaddsolnpoolrngfilter" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXaddsolnpoolrngfilter" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXaddsolnpoolrngfilter" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXaddsolnpoolrngfilter" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[5])) {
      int size = (int)PyList_Size(swig_obj[5]);
      int i = 0;
      arg6 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[5], i);
        if (PyInt_Check(o)) {
          arg6[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg6);
          return NULL;
        }
      }
    }
    else if (swig_obj[5] == Py_None) {
      arg6 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[6])) {
      int size = (int)PyList_Size(swig_obj[6]);
      int i = 0;
      arg7 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[6], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg7[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg7);
          return NULL;
        }
      }
    }
    else if (swig_obj[6] == Py_None) {
      arg7 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res8 = SWIG_AsCharPtrAndSize(swig_obj[7], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "CPXaddsolnpoolrngfilter" "', argument " "8"" of type '" "char const *""'");
  }
  arg8 = reinterpret_cast< char * >(buf8);
  {
    try {
      result = (int)CPXaddsolnpoolrngfilter((cpxenv const *)arg1,arg2,arg3,arg4,arg5,(int const *)arg6,(double const *)arg7,(char const *)arg8);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg6);
  }
  {
    free(arg7);
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return resultobj;
fail:
  {
    free(arg6);
  }
  {
    free(arg7);
  }
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXaddsos(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  int *arg6 = (int *) 0 ;
  int *arg7 = (int *) 0 ;
  double *arg8 = (double *) 0 ;
  char **arg9 = (char **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  PyObject *swig_obj[9] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXaddsos", 9, 9, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXaddsos" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXaddsos" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXaddsos" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXaddsos" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_AsCharPtrAndSize(swig_obj[4], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXaddsos" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = reinterpret_cast< char * >(buf5);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[5])) {
      int size = (int)PyList_Size(swig_obj[5]);
      int i = 0;
      arg6 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[5], i);
        if (PyInt_Check(o)) {
          arg6[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg6);
          return NULL;
        }
      }
    }
    else if (swig_obj[5] == Py_None) {
      arg6 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[6])) {
      int size = (int)PyList_Size(swig_obj[6]);
      int i = 0;
      arg7 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[6], i);
        if (PyInt_Check(o)) {
          arg7[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg7);
          return NULL;
        }
      }
    }
    else if (swig_obj[6] == Py_None) {
      arg7 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[7])) {
      int size = (int)PyList_Size(swig_obj[7]);
      int i = 0;
      arg8 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[7], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg8[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg8);
          return NULL;
        }
      }
    }
    else if (swig_obj[7] == Py_None) {
      arg8 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res9 = SWIG_ConvertPtr(swig_obj[8], &argp9,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "CPXaddsos" "', argument " "9"" of type '" "char **""'"); 
  }
  arg9 = reinterpret_cast< char ** >(argp9);
  {
    try {
      result = (int)CPXaddsos((cpxenv const *)arg1,arg2,arg3,arg4,(char const *)arg5,(int const *)arg6,(int const *)arg7,(double const *)arg8,arg9);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  {
    free(arg6);
  }
  {
    free(arg7);
  }
  {
    free(arg8);
  }
  return resultobj;
fail:
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  {
    free(arg6);
  }
  {
    free(arg7);
  }
  {
    free(arg8);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXaddusercuts(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  char *arg6 = (char *) 0 ;
  int *arg7 = (int *) 0 ;
  int *arg8 = (int *) 0 ;
  double *arg9 = (double *) 0 ;
  char **arg10 = (char **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  PyObject *swig_obj[10] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXaddusercuts", 10, 10, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXaddusercuts" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXaddusercuts" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXaddusercuts" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXaddusercuts" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[4])) {
      int size = (int)PyList_Size(swig_obj[4]);
      int i = 0;
      arg5 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[4], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg5[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg5);
          return NULL;
        }
      }
    }
    else if (swig_obj[4] == Py_None) {
      arg5 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res6 = SWIG_AsCharPtrAndSize(swig_obj[5], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CPXaddusercuts" "', argument " "6"" of type '" "char const *""'");
  }
  arg6 = reinterpret_cast< char * >(buf6);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[6])) {
      int size = (int)PyList_Size(swig_obj[6]);
      int i = 0;
      arg7 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[6], i);
        if (PyInt_Check(o)) {
          arg7[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg7);
          return NULL;
        }
      }
    }
    else if (swig_obj[6] == Py_None) {
      arg7 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[7])) {
      int size = (int)PyList_Size(swig_obj[7]);
      int i = 0;
      arg8 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[7], i);
        if (PyInt_Check(o)) {
          arg8[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg8);
          return NULL;
        }
      }
    }
    else if (swig_obj[7] == Py_None) {
      arg8 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[8])) {
      int size = (int)PyList_Size(swig_obj[8]);
      int i = 0;
      arg9 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[8], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg9[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg9);
          return NULL;
        }
      }
    }
    else if (swig_obj[8] == Py_None) {
      arg9 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res10 = SWIG_ConvertPtr(swig_obj[9], &argp10,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "CPXaddusercuts" "', argument " "10"" of type '" "char **""'"); 
  }
  arg10 = reinterpret_cast< char ** >(argp10);
  {
    try {
      result = (int)CPXaddusercuts((cpxenv const *)arg1,arg2,arg3,arg4,(double const *)arg5,(char const *)arg6,(int const *)arg7,(int const *)arg8,(double const *)arg9,arg10);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg5);
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  {
    free(arg7);
  }
  {
    free(arg8);
  }
  {
    free(arg9);
  }
  return resultobj;
fail:
  {
    free(arg5);
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  {
    free(arg7);
  }
  {
    free(arg8);
  }
  {
    free(arg9);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXbendersopt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXbendersopt", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXbendersopt" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXbendersopt" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  {
    try {
      result = (int)CPXbendersopt((cpxenv const *)arg1,arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXbranchcallbackbranchasCPLEX(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  int *arg6 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int res5 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject *swig_obj[6] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXbranchcallbackbranchasCPLEX", 6, 6, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXbranchcallbackbranchasCPLEX" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXbranchcallbackbranchasCPLEX" "', argument " "2"" of type '" "void *""'"); 
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXbranchcallbackbranchasCPLEX" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXbranchcallbackbranchasCPLEX" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(swig_obj[4],SWIG_as_voidptrptr(&arg5), 0, 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXbranchcallbackbranchasCPLEX" "', argument " "5"" of type '" "void *""'"); 
  }
  res6 = SWIG_ConvertPtr(swig_obj[5], &argp6,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CPXbranchcallbackbranchasCPLEX" "', argument " "6"" of type '" "int *""'"); 
  }
  arg6 = reinterpret_cast< int * >(argp6);
  {
    try {
      result = (int)CPXbranchcallbackbranchasCPLEX((cpxenv const *)arg1,arg2,arg3,arg4,arg5,arg6);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXbranchcallbackbranchbds(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  char *arg6 = (char *) 0 ;
  double *arg7 = (double *) 0 ;
  double arg8 ;
  void *arg9 = (void *) 0 ;
  int *arg10 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  int res9 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  PyObject *swig_obj[10] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXbranchcallbackbranchbds", 10, 10, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXbranchcallbackbranchbds" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXbranchcallbackbranchbds" "', argument " "2"" of type '" "void *""'"); 
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXbranchcallbackbranchbds" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXbranchcallbackbranchbds" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[4])) {
      int size = (int)PyList_Size(swig_obj[4]);
      int i = 0;
      arg5 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[4], i);
        if (PyInt_Check(o)) {
          arg5[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg5);
          return NULL;
        }
      }
    }
    else if (swig_obj[4] == Py_None) {
      arg5 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res6 = SWIG_AsCharPtrAndSize(swig_obj[5], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CPXbranchcallbackbranchbds" "', argument " "6"" of type '" "char const *""'");
  }
  arg6 = reinterpret_cast< char * >(buf6);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[6])) {
      int size = (int)PyList_Size(swig_obj[6]);
      int i = 0;
      arg7 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[6], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg7[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg7);
          return NULL;
        }
      }
    }
    else if (swig_obj[6] == Py_None) {
      arg7 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  ecode8 = SWIG_AsVal_double(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "CPXbranchcallbackbranchbds" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  res9 = SWIG_ConvertPtr(swig_obj[8],SWIG_as_voidptrptr(&arg9), 0, 0);
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "CPXbranchcallbackbranchbds" "', argument " "9"" of type '" "void *""'"); 
  }
  res10 = SWIG_ConvertPtr(swig_obj[9], &argp10,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "CPXbranchcallbackbranchbds" "', argument " "10"" of type '" "int *""'"); 
  }
  arg10 = reinterpret_cast< int * >(argp10);
  {
    try {
      result = (int)CPXbranchcallbackbranchbds((cpxenv const *)arg1,arg2,arg3,arg4,(int const *)arg5,(char const *)arg6,(double const *)arg7,arg8,arg9,arg10);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg5);
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  {
    free(arg7);
  }
  return resultobj;
fail:
  {
    free(arg5);
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  {
    free(arg7);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXbranchcallbackbranchconstraints(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  double *arg6 = (double *) 0 ;
  char *arg7 = (char *) 0 ;
  int *arg8 = (int *) 0 ;
  int *arg9 = (int *) 0 ;
  double *arg10 = (double *) 0 ;
  double arg11 ;
  void *arg12 = (void *) 0 ;
  int *arg13 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  double val11 ;
  int ecode11 = 0 ;
  int res12 ;
  void *argp13 = 0 ;
  int res13 = 0 ;
  PyObject *swig_obj[13] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXbranchcallbackbranchconstraints", 13, 13, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXbranchcallbackbranchconstraints" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXbranchcallbackbranchconstraints" "', argument " "2"" of type '" "void *""'"); 
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXbranchcallbackbranchconstraints" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXbranchcallbackbranchconstraints" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXbranchcallbackbranchconstraints" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[5])) {
      int size = (int)PyList_Size(swig_obj[5]);
      int i = 0;
      arg6 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[5], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg6[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg6);
          return NULL;
        }
      }
    }
    else if (swig_obj[5] == Py_None) {
      arg6 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res7 = SWIG_AsCharPtrAndSize(swig_obj[6], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "CPXbranchcallbackbranchconstraints" "', argument " "7"" of type '" "char const *""'");
  }
  arg7 = reinterpret_cast< char * >(buf7);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[7])) {
      int size = (int)PyList_Size(swig_obj[7]);
      int i = 0;
      arg8 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[7], i);
        if (PyInt_Check(o)) {
          arg8[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg8);
          return NULL;
        }
      }
    }
    else if (swig_obj[7] == Py_None) {
      arg8 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[8])) {
      int size = (int)PyList_Size(swig_obj[8]);
      int i = 0;
      arg9 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[8], i);
        if (PyInt_Check(o)) {
          arg9[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg9);
          return NULL;
        }
      }
    }
    else if (swig_obj[8] == Py_None) {
      arg9 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[9])) {
      int size = (int)PyList_Size(swig_obj[9]);
      int i = 0;
      arg10 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[9], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg10[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg10);
          return NULL;
        }
      }
    }
    else if (swig_obj[9] == Py_None) {
      arg10 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  ecode11 = SWIG_AsVal_double(swig_obj[10], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "CPXbranchcallbackbranchconstraints" "', argument " "11"" of type '" "double""'");
  } 
  arg11 = static_cast< double >(val11);
  res12 = SWIG_ConvertPtr(swig_obj[11],SWIG_as_voidptrptr(&arg12), 0, 0);
  if (!SWIG_IsOK(res12)) {
    SWIG_exception_fail(SWIG_ArgError(res12), "in method '" "CPXbranchcallbackbranchconstraints" "', argument " "12"" of type '" "void *""'"); 
  }
  res13 = SWIG_ConvertPtr(swig_obj[12], &argp13,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res13)) {
    SWIG_exception_fail(SWIG_ArgError(res13), "in method '" "CPXbranchcallbackbranchconstraints" "', argument " "13"" of type '" "int *""'"); 
  }
  arg13 = reinterpret_cast< int * >(argp13);
  {
    try {
      result = (int)CPXbranchcallbackbranchconstraints((cpxenv const *)arg1,arg2,arg3,arg4,arg5,(double const *)arg6,(char const *)arg7,(int const *)arg8,(int const *)arg9,(double const *)arg10,arg11,arg12,arg13);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg6);
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  {
    free(arg8);
  }
  {
    free(arg9);
  }
  {
    free(arg10);
  }
  return resultobj;
fail:
  {
    free(arg6);
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  {
    free(arg8);
  }
  {
    free(arg9);
  }
  {
    free(arg10);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXbranchcallbackbranchgeneral(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  char *arg6 = (char *) 0 ;
  double *arg7 = (double *) 0 ;
  int arg8 ;
  int arg9 ;
  double *arg10 = (double *) 0 ;
  char *arg11 = (char *) 0 ;
  int *arg12 = (int *) 0 ;
  int *arg13 = (int *) 0 ;
  double *arg14 = (double *) 0 ;
  double arg15 ;
  void *arg16 = (void *) 0 ;
  int *arg17 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  int res11 ;
  char *buf11 = 0 ;
  int alloc11 = 0 ;
  double val15 ;
  int ecode15 = 0 ;
  int res16 ;
  void *argp17 = 0 ;
  int res17 = 0 ;
  PyObject *swig_obj[17] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXbranchcallbackbranchgeneral", 17, 17, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXbranchcallbackbranchgeneral" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXbranchcallbackbranchgeneral" "', argument " "2"" of type '" "void *""'"); 
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXbranchcallbackbranchgeneral" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXbranchcallbackbranchgeneral" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[4])) {
      int size = (int)PyList_Size(swig_obj[4]);
      int i = 0;
      arg5 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[4], i);
        if (PyInt_Check(o)) {
          arg5[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg5);
          return NULL;
        }
      }
    }
    else if (swig_obj[4] == Py_None) {
      arg5 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res6 = SWIG_AsCharPtrAndSize(swig_obj[5], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CPXbranchcallbackbranchgeneral" "', argument " "6"" of type '" "char const *""'");
  }
  arg6 = reinterpret_cast< char * >(buf6);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[6])) {
      int size = (int)PyList_Size(swig_obj[6]);
      int i = 0;
      arg7 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[6], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg7[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg7);
          return NULL;
        }
      }
    }
    else if (swig_obj[6] == Py_None) {
      arg7 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  ecode8 = SWIG_AsVal_int(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "CPXbranchcallbackbranchgeneral" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  ecode9 = SWIG_AsVal_int(swig_obj[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "CPXbranchcallbackbranchgeneral" "', argument " "9"" of type '" "int""'");
  } 
  arg9 = static_cast< int >(val9);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[9])) {
      int size = (int)PyList_Size(swig_obj[9]);
      int i = 0;
      arg10 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[9], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg10[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg10);
          return NULL;
        }
      }
    }
    else if (swig_obj[9] == Py_None) {
      arg10 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res11 = SWIG_AsCharPtrAndSize(swig_obj[10], &buf11, NULL, &alloc11);
  if (!SWIG_IsOK(res11)) {
    SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "CPXbranchcallbackbranchgeneral" "', argument " "11"" of type '" "char const *""'");
  }
  arg11 = reinterpret_cast< char * >(buf11);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[11])) {
      int size = (int)PyList_Size(swig_obj[11]);
      int i = 0;
      arg12 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[11], i);
        if (PyInt_Check(o)) {
          arg12[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg12);
          return NULL;
        }
      }
    }
    else if (swig_obj[11] == Py_None) {
      arg12 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[12])) {
      int size = (int)PyList_Size(swig_obj[12]);
      int i = 0;
      arg13 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[12], i);
        if (PyInt_Check(o)) {
          arg13[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg13);
          return NULL;
        }
      }
    }
    else if (swig_obj[12] == Py_None) {
      arg13 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[13])) {
      int size = (int)PyList_Size(swig_obj[13]);
      int i = 0;
      arg14 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[13], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg14[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg14);
          return NULL;
        }
      }
    }
    else if (swig_obj[13] == Py_None) {
      arg14 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  ecode15 = SWIG_AsVal_double(swig_obj[14], &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "CPXbranchcallbackbranchgeneral" "', argument " "15"" of type '" "double""'");
  } 
  arg15 = static_cast< double >(val15);
  res16 = SWIG_ConvertPtr(swig_obj[15],SWIG_as_voidptrptr(&arg16), 0, 0);
  if (!SWIG_IsOK(res16)) {
    SWIG_exception_fail(SWIG_ArgError(res16), "in method '" "CPXbranchcallbackbranchgeneral" "', argument " "16"" of type '" "void *""'"); 
  }
  res17 = SWIG_ConvertPtr(swig_obj[16], &argp17,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res17)) {
    SWIG_exception_fail(SWIG_ArgError(res17), "in method '" "CPXbranchcallbackbranchgeneral" "', argument " "17"" of type '" "int *""'"); 
  }
  arg17 = reinterpret_cast< int * >(argp17);
  {
    try {
      result = (int)CPXbranchcallbackbranchgeneral((cpxenv const *)arg1,arg2,arg3,arg4,(int const *)arg5,(char const *)arg6,(double const *)arg7,arg8,arg9,(double const *)arg10,(char const *)arg11,(int const *)arg12,(int const *)arg13,(double const *)arg14,arg15,arg16,arg17);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg5);
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  {
    free(arg7);
  }
  {
    free(arg10);
  }
  if (alloc11 == SWIG_NEWOBJ) delete[] buf11;
  {
    free(arg12);
  }
  {
    free(arg13);
  }
  {
    free(arg14);
  }
  return resultobj;
fail:
  {
    free(arg5);
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  {
    free(arg7);
  }
  {
    free(arg10);
  }
  if (alloc11 == SWIG_NEWOBJ) delete[] buf11;
  {
    free(arg12);
  }
  {
    free(arg13);
  }
  {
    free(arg14);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXcallbackgetgloballb(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCALLBACKCONTEXTptr arg1 = (CPXCALLBACKCONTEXTptr) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXcallbackgetgloballb", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxcallbackcontext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXcallbackgetgloballb" "', argument " "1"" of type '" "CPXCALLBACKCONTEXTptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCALLBACKCONTEXTptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXcallbackgetgloballb" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXcallbackgetgloballb" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXcallbackgetgloballb" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (int)CPXcallbackgetgloballb(arg1,arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXcallbackgetglobalub(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCALLBACKCONTEXTptr arg1 = (CPXCALLBACKCONTEXTptr) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXcallbackgetglobalub", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxcallbackcontext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXcallbackgetglobalub" "', argument " "1"" of type '" "CPXCALLBACKCONTEXTptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCALLBACKCONTEXTptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXcallbackgetglobalub" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXcallbackgetglobalub" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXcallbackgetglobalub" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (int)CPXcallbackgetglobalub(arg1,arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXcallbackgetlocallb(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCALLBACKCONTEXTptr arg1 = (CPXCALLBACKCONTEXTptr) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXcallbackgetlocallb", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxcallbackcontext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXcallbackgetlocallb" "', argument " "1"" of type '" "CPXCALLBACKCONTEXTptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCALLBACKCONTEXTptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXcallbackgetlocallb" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXcallbackgetlocallb" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXcallbackgetlocallb" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (int)CPXcallbackgetlocallb(arg1,arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXcallbackgetlocalub(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCALLBACKCONTEXTptr arg1 = (CPXCALLBACKCONTEXTptr) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXcallbackgetlocalub", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxcallbackcontext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXcallbackgetlocalub" "', argument " "1"" of type '" "CPXCALLBACKCONTEXTptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCALLBACKCONTEXTptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXcallbackgetlocalub" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXcallbackgetlocalub" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXcallbackgetlocalub" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (int)CPXcallbackgetlocalub(arg1,arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXcallbacksetnodeuserhandle(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  void **arg6 = (void **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int res5 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject *swig_obj[6] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXcallbacksetnodeuserhandle", 6, 6, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXcallbacksetnodeuserhandle" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXcallbacksetnodeuserhandle" "', argument " "2"" of type '" "void *""'"); 
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXcallbacksetnodeuserhandle" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXcallbacksetnodeuserhandle" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(swig_obj[4],SWIG_as_voidptrptr(&arg5), 0, 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXcallbacksetnodeuserhandle" "', argument " "5"" of type '" "void *""'"); 
  }
  res6 = SWIG_ConvertPtr(swig_obj[5], &argp6,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CPXcallbacksetnodeuserhandle" "', argument " "6"" of type '" "void **""'"); 
  }
  arg6 = reinterpret_cast< void ** >(argp6);
  {
    try {
      result = (int)CPXcallbacksetnodeuserhandle((cpxenv const *)arg1,arg2,arg3,arg4,arg5,arg6);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXcallbacksetuserhandle(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  void *arg4 = (void *) 0 ;
  void **arg5 = (void **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXcallbacksetuserhandle", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXcallbacksetuserhandle" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXcallbacksetuserhandle" "', argument " "2"" of type '" "void *""'"); 
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXcallbacksetuserhandle" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3],SWIG_as_voidptrptr(&arg4), 0, 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXcallbacksetuserhandle" "', argument " "4"" of type '" "void *""'"); 
  }
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXcallbacksetuserhandle" "', argument " "5"" of type '" "void **""'"); 
  }
  arg5 = reinterpret_cast< void ** >(argp5);
  {
    try {
      result = (int)CPXcallbacksetuserhandle((cpxenv const *)arg1,arg2,arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXchgctype(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXchgctype", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXchgctype" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXchgctype" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXchgctype" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[3])) {
      int size = (int)PyList_Size(swig_obj[3]);
      int i = 0;
      arg4 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[3], i);
        if (PyInt_Check(o)) {
          arg4[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg4);
          return NULL;
        }
      }
    }
    else if (swig_obj[3] == Py_None) {
      arg4 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res5 = SWIG_AsCharPtrAndSize(swig_obj[4], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXchgctype" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = reinterpret_cast< char * >(buf5);
  {
    try {
      result = (int)CPXchgctype((cpxenv const *)arg1,arg2,arg3,(int const *)arg4,(char const *)arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg4);
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return resultobj;
fail:
  {
    free(arg4);
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXchgmipstarts(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  int arg5 ;
  int *arg6 = (int *) 0 ;
  int *arg7 = (int *) 0 ;
  double *arg8 = (double *) 0 ;
  int *arg9 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[9] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXchgmipstarts", 9, 9, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXchgmipstarts" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXchgmipstarts" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXchgmipstarts" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[3])) {
      int size = (int)PyList_Size(swig_obj[3]);
      int i = 0;
      arg4 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[3], i);
        if (PyInt_Check(o)) {
          arg4[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg4);
          return NULL;
        }
      }
    }
    else if (swig_obj[3] == Py_None) {
      arg4 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXchgmipstarts" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[5])) {
      int size = (int)PyList_Size(swig_obj[5]);
      int i = 0;
      arg6 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[5], i);
        if (PyInt_Check(o)) {
          arg6[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg6);
          return NULL;
        }
      }
    }
    else if (swig_obj[5] == Py_None) {
      arg6 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[6])) {
      int size = (int)PyList_Size(swig_obj[6]);
      int i = 0;
      arg7 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[6], i);
        if (PyInt_Check(o)) {
          arg7[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg7);
          return NULL;
        }
      }
    }
    else if (swig_obj[6] == Py_None) {
      arg7 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[7])) {
      int size = (int)PyList_Size(swig_obj[7]);
      int i = 0;
      arg8 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[7], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg8[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg8);
          return NULL;
        }
      }
    }
    else if (swig_obj[7] == Py_None) {
      arg8 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[8])) {
      int size = (int)PyList_Size(swig_obj[8]);
      int i = 0;
      arg9 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[8], i);
        if (PyInt_Check(o)) {
          arg9[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg9);
          return NULL;
        }
      }
    }
    else if (swig_obj[8] == Py_None) {
      arg9 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    try {
      result = (int)CPXchgmipstarts((cpxenv const *)arg1,arg2,arg3,(int const *)arg4,arg5,(int const *)arg6,(int const *)arg7,(double const *)arg8,(int const *)arg9);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg4);
  }
  {
    free(arg6);
  }
  {
    free(arg7);
  }
  {
    free(arg8);
  }
  {
    free(arg9);
  }
  return resultobj;
fail:
  {
    free(arg4);
  }
  {
    free(arg6);
  }
  {
    free(arg7);
  }
  {
    free(arg8);
  }
  {
    free(arg9);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXcopyctype(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXcopyctype", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXcopyctype" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXcopyctype" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXcopyctype" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try {
      result = (int)CPXcopyctype((cpxenv const *)arg1,arg2,(char const *)arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXcopyorder(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  int *arg6 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[6] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXcopyorder", 6, 6, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXcopyorder" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXcopyorder" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXcopyorder" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[3])) {
      int size = (int)PyList_Size(swig_obj[3]);
      int i = 0;
      arg4 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[3], i);
        if (PyInt_Check(o)) {
          arg4[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg4);
          return NULL;
        }
      }
    }
    else if (swig_obj[3] == Py_None) {
      arg4 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[4])) {
      int size = (int)PyList_Size(swig_obj[4]);
      int i = 0;
      arg5 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[4], i);
        if (PyInt_Check(o)) {
          arg5[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg5);
          return NULL;
        }
      }
    }
    else if (swig_obj[4] == Py_None) {
      arg5 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[5])) {
      int size = (int)PyList_Size(swig_obj[5]);
      int i = 0;
      arg6 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[5], i);
        if (PyInt_Check(o)) {
          arg6[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg6);
          return NULL;
        }
      }
    }
    else if (swig_obj[5] == Py_None) {
      arg6 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    try {
      result = (int)CPXcopyorder((cpxenv const *)arg1,arg2,arg3,(int const *)arg4,(int const *)arg5,(int const *)arg6);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg4);
  }
  {
    free(arg5);
  }
  {
    free(arg6);
  }
  return resultobj;
fail:
  {
    free(arg4);
  }
  {
    free(arg5);
  }
  {
    free(arg6);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXcopysos(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  int *arg6 = (int *) 0 ;
  int *arg7 = (int *) 0 ;
  double *arg8 = (double *) 0 ;
  char **arg9 = (char **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  PyObject *swig_obj[9] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXcopysos", 9, 9, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXcopysos" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXcopysos" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXcopysos" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXcopysos" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_AsCharPtrAndSize(swig_obj[4], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXcopysos" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = reinterpret_cast< char * >(buf5);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[5])) {
      int size = (int)PyList_Size(swig_obj[5]);
      int i = 0;
      arg6 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[5], i);
        if (PyInt_Check(o)) {
          arg6[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg6);
          return NULL;
        }
      }
    }
    else if (swig_obj[5] == Py_None) {
      arg6 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[6])) {
      int size = (int)PyList_Size(swig_obj[6]);
      int i = 0;
      arg7 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[6], i);
        if (PyInt_Check(o)) {
          arg7[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg7);
          return NULL;
        }
      }
    }
    else if (swig_obj[6] == Py_None) {
      arg7 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[7])) {
      int size = (int)PyList_Size(swig_obj[7]);
      int i = 0;
      arg8 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[7], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg8[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg8);
          return NULL;
        }
      }
    }
    else if (swig_obj[7] == Py_None) {
      arg8 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res9 = SWIG_ConvertPtr(swig_obj[8], &argp9,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "CPXcopysos" "', argument " "9"" of type '" "char **""'"); 
  }
  arg9 = reinterpret_cast< char ** >(argp9);
  {
    try {
      result = (int)CPXcopysos((cpxenv const *)arg1,arg2,arg3,arg4,(char const *)arg5,(int const *)arg6,(int const *)arg7,(double const *)arg8,arg9);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  {
    free(arg6);
  }
  {
    free(arg7);
  }
  {
    free(arg8);
  }
  return resultobj;
fail:
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  {
    free(arg6);
  }
  {
    free(arg7);
  }
  {
    free(arg8);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXcutcallbackadd(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int arg4 ;
  double arg5 ;
  int arg6 ;
  int *arg7 = (int *) 0 ;
  double *arg8 = (double *) 0 ;
  int arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  PyObject *swig_obj[9] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXcutcallbackadd", 9, 9, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXcutcallbackadd" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXcutcallbackadd" "', argument " "2"" of type '" "void *""'"); 
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXcutcallbackadd" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXcutcallbackadd" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXcutcallbackadd" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CPXcutcallbackadd" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[6])) {
      int size = (int)PyList_Size(swig_obj[6]);
      int i = 0;
      arg7 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[6], i);
        if (PyInt_Check(o)) {
          arg7[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg7);
          return NULL;
        }
      }
    }
    else if (swig_obj[6] == Py_None) {
      arg7 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[7])) {
      int size = (int)PyList_Size(swig_obj[7]);
      int i = 0;
      arg8 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[7], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg8[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg8);
          return NULL;
        }
      }
    }
    else if (swig_obj[7] == Py_None) {
      arg8 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  ecode9 = SWIG_AsVal_int(swig_obj[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "CPXcutcallbackadd" "', argument " "9"" of type '" "int""'");
  } 
  arg9 = static_cast< int >(val9);
  {
    try {
      result = (int)CPXcutcallbackadd((cpxenv const *)arg1,arg2,arg3,arg4,arg5,arg6,(int const *)arg7,(double const *)arg8,arg9);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg7);
  }
  {
    free(arg8);
  }
  return resultobj;
fail:
  {
    free(arg7);
  }
  {
    free(arg8);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXcutcallbackaddlocal(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int arg4 ;
  double arg5 ;
  int arg6 ;
  int *arg7 = (int *) 0 ;
  double *arg8 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject *swig_obj[8] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXcutcallbackaddlocal", 8, 8, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXcutcallbackaddlocal" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXcutcallbackaddlocal" "', argument " "2"" of type '" "void *""'"); 
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXcutcallbackaddlocal" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXcutcallbackaddlocal" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXcutcallbackaddlocal" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CPXcutcallbackaddlocal" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[6])) {
      int size = (int)PyList_Size(swig_obj[6]);
      int i = 0;
      arg7 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[6], i);
        if (PyInt_Check(o)) {
          arg7[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg7);
          return NULL;
        }
      }
    }
    else if (swig_obj[6] == Py_None) {
      arg7 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[7])) {
      int size = (int)PyList_Size(swig_obj[7]);
      int i = 0;
      arg8 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[7], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg8[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg8);
          return NULL;
        }
      }
    }
    else if (swig_obj[7] == Py_None) {
      arg8 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    try {
      result = (int)CPXcutcallbackaddlocal((cpxenv const *)arg1,arg2,arg3,arg4,arg5,arg6,(int const *)arg7,(double const *)arg8);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg7);
  }
  {
    free(arg8);
  }
  return resultobj;
fail:
  {
    free(arg7);
  }
  {
    free(arg8);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXdelindconstrs(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXdelindconstrs", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXdelindconstrs" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXdelindconstrs" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXdelindconstrs" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXdelindconstrs" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (int)CPXdelindconstrs((cpxenv const *)arg1,arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXdelmipstarts(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXdelmipstarts", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXdelmipstarts" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXdelmipstarts" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXdelmipstarts" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXdelmipstarts" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (int)CPXdelmipstarts((cpxenv const *)arg1,arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXdelsetmipstarts(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int *arg3 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXdelsetmipstarts", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXdelsetmipstarts" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXdelsetmipstarts" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXdelsetmipstarts" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  {
    try {
      result = (int)CPXdelsetmipstarts((cpxenv const *)arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXdelsetsolnpoolfilters(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int *arg3 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXdelsetsolnpoolfilters", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXdelsetsolnpoolfilters" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXdelsetsolnpoolfilters" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXdelsetsolnpoolfilters" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  {
    try {
      result = (int)CPXdelsetsolnpoolfilters((cpxenv const *)arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXdelsetsolnpoolsolns(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int *arg3 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXdelsetsolnpoolsolns", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXdelsetsolnpoolsolns" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXdelsetsolnpoolsolns" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXdelsetsolnpoolsolns" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  {
    try {
      result = (int)CPXdelsetsolnpoolsolns((cpxenv const *)arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXdelsetsos(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int *arg3 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXdelsetsos", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXdelsetsos" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXdelsetsos" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXdelsetsos" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  {
    try {
      result = (int)CPXdelsetsos((cpxenv const *)arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXdelsolnpoolfilters(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXdelsolnpoolfilters", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXdelsolnpoolfilters" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXdelsolnpoolfilters" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXdelsolnpoolfilters" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXdelsolnpoolfilters" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (int)CPXdelsolnpoolfilters((cpxenv const *)arg1,arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXdelsolnpoolsolns(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXdelsolnpoolsolns", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXdelsolnpoolsolns" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXdelsolnpoolsolns" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXdelsolnpoolsolns" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXdelsolnpoolsolns" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (int)CPXdelsolnpoolsolns((cpxenv const *)arg1,arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXdelsos(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXdelsos", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXdelsos" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXdelsos" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXdelsos" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXdelsos" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (int)CPXdelsos((cpxenv const *)arg1,arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXfltwrite(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXfltwrite", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXfltwrite" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXfltwrite" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXfltwrite" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try {
      result = (int)CPXfltwrite((cpxenv const *)arg1,(cpxlp const *)arg2,(char const *)arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXfreelazyconstraints(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXfreelazyconstraints", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXfreelazyconstraints" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXfreelazyconstraints" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  {
    try {
      result = (int)CPXfreelazyconstraints((cpxenv const *)arg1,arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXfreeusercuts(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXfreeusercuts", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXfreeusercuts" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXfreeusercuts" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  {
    try {
      result = (int)CPXfreeusercuts((cpxenv const *)arg1,arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetbestobjval(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  double *arg3 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetbestobjval", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetbestobjval" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetbestobjval" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetbestobjval" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  {
    try {
      result = (int)CPXgetbestobjval((cpxenv const *)arg1,(cpxlp const *)arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetbranchcallbackfunc(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  int (**arg2)(CPXCENVptr,void *,int,void *,int,int,int,int,int const *,int const *,char const *,double const *,double const *,int *) = (int (**)(CPXCENVptr,void *,int,void *,int,int,int,int,int const *,int const *,char const *,double const *,double const *,int *)) 0 ;
  void **arg3 = (void **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetbranchcallbackfunc", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetbranchcallbackfunc" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_p_f_p_q_const__cpxenv_p_void_int_p_void_int_int_int_int_p_q_const__int_p_q_const__int_p_q_const__char_p_q_const__double_p_q_const__double_p_int__int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetbranchcallbackfunc" "', argument " "2"" of type '" "int (**)(CPXCENVptr,void *,int,void *,int,int,int,int,int const *,int const *,char const *,double const *,double const *,int *)""'"); 
  }
  arg2 = reinterpret_cast< int (**)(CPXCENVptr,void *,int,void *,int,int,int,int,int const *,int const *,char const *,double const *,double const *,int *) >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetbranchcallbackfunc" "', argument " "3"" of type '" "void **""'"); 
  }
  arg3 = reinterpret_cast< void ** >(argp3);
  {
    try {
      result = (int)CPXgetbranchcallbackfunc((cpxenv const *)arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetbranchnosolncallbackfunc(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  int (**arg2)(CPXCENVptr,void *,int,void *,int,int,int,int,int const *,int const *,char const *,double const *,double const *,int *) = (int (**)(CPXCENVptr,void *,int,void *,int,int,int,int,int const *,int const *,char const *,double const *,double const *,int *)) 0 ;
  void **arg3 = (void **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetbranchnosolncallbackfunc", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetbranchnosolncallbackfunc" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_p_f_p_q_const__cpxenv_p_void_int_p_void_int_int_int_int_p_q_const__int_p_q_const__int_p_q_const__char_p_q_const__double_p_q_const__double_p_int__int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetbranchnosolncallbackfunc" "', argument " "2"" of type '" "int (**)(CPXCENVptr,void *,int,void *,int,int,int,int,int const *,int const *,char const *,double const *,double const *,int *)""'"); 
  }
  arg2 = reinterpret_cast< int (**)(CPXCENVptr,void *,int,void *,int,int,int,int,int const *,int const *,char const *,double const *,double const *,int *) >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetbranchnosolncallbackfunc" "', argument " "3"" of type '" "void **""'"); 
  }
  arg3 = reinterpret_cast< void ** >(argp3);
  {
    try {
      result = (int)CPXgetbranchnosolncallbackfunc((cpxenv const *)arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetcallbackbranchconstraints(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  int *arg6 = (int *) 0 ;
  double *arg7 = (double *) 0 ;
  char *arg8 = (char *) 0 ;
  int *arg9 = (int *) 0 ;
  int *arg10 = (int *) 0 ;
  double *arg11 = (double *) 0 ;
  int arg12 ;
  int *arg13 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  void *argp11 = 0 ;
  int res11 = 0 ;
  int val12 ;
  int ecode12 = 0 ;
  void *argp13 = 0 ;
  int res13 = 0 ;
  PyObject *swig_obj[13] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetcallbackbranchconstraints", 13, 13, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetcallbackbranchconstraints" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetcallbackbranchconstraints" "', argument " "2"" of type '" "void *""'"); 
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXgetcallbackbranchconstraints" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXgetcallbackbranchconstraints" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXgetcallbackbranchconstraints" "', argument " "5"" of type '" "int *""'"); 
  }
  arg5 = reinterpret_cast< int * >(argp5);
  res6 = SWIG_ConvertPtr(swig_obj[5], &argp6,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CPXgetcallbackbranchconstraints" "', argument " "6"" of type '" "int *""'"); 
  }
  arg6 = reinterpret_cast< int * >(argp6);
  res7 = SWIG_ConvertPtr(swig_obj[6], &argp7,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "CPXgetcallbackbranchconstraints" "', argument " "7"" of type '" "double *""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  res8 = SWIG_AsCharPtrAndSize(swig_obj[7], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "CPXgetcallbackbranchconstraints" "', argument " "8"" of type '" "char *""'");
  }
  arg8 = reinterpret_cast< char * >(buf8);
  res9 = SWIG_ConvertPtr(swig_obj[8], &argp9,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "CPXgetcallbackbranchconstraints" "', argument " "9"" of type '" "int *""'"); 
  }
  arg9 = reinterpret_cast< int * >(argp9);
  res10 = SWIG_ConvertPtr(swig_obj[9], &argp10,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "CPXgetcallbackbranchconstraints" "', argument " "10"" of type '" "int *""'"); 
  }
  arg10 = reinterpret_cast< int * >(argp10);
  res11 = SWIG_ConvertPtr(swig_obj[10], &argp11,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res11)) {
    SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "CPXgetcallbackbranchconstraints" "', argument " "11"" of type '" "double *""'"); 
  }
  arg11 = reinterpret_cast< double * >(argp11);
  ecode12 = SWIG_AsVal_int(swig_obj[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "CPXgetcallbackbranchconstraints" "', argument " "12"" of type '" "int""'");
  } 
  arg12 = static_cast< int >(val12);
  res13 = SWIG_ConvertPtr(swig_obj[12], &argp13,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res13)) {
    SWIG_exception_fail(SWIG_ArgError(res13), "in method '" "CPXgetcallbackbranchconstraints" "', argument " "13"" of type '" "int *""'"); 
  }
  arg13 = reinterpret_cast< int * >(argp13);
  {
    try {
      result = (int)CPXgetcallbackbranchconstraints((cpxenv const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return resultobj;
fail:
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetcallbackctype(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject *swig_obj[6] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetcallbackctype", 6, 6, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetcallbackctype" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetcallbackctype" "', argument " "2"" of type '" "void *""'"); 
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXgetcallbackctype" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_AsCharPtrAndSize(swig_obj[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetcallbackctype" "', argument " "4"" of type '" "char *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXgetcallbackctype" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CPXgetcallbackctype" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    try {
      result = (int)CPXgetcallbackctype((cpxenv const *)arg1,arg2,arg3,arg4,arg5,arg6);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetcallbackgloballb(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  int arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject *swig_obj[6] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetcallbackgloballb", 6, 6, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetcallbackgloballb" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetcallbackgloballb" "', argument " "2"" of type '" "void *""'"); 
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXgetcallbackgloballb" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetcallbackgloballb" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXgetcallbackgloballb" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CPXgetcallbackgloballb" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    try {
      result = (int)CPXgetcallbackgloballb((cpxenv const *)arg1,arg2,arg3,arg4,arg5,arg6);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetcallbackglobalub(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  int arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject *swig_obj[6] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetcallbackglobalub", 6, 6, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetcallbackglobalub" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetcallbackglobalub" "', argument " "2"" of type '" "void *""'"); 
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXgetcallbackglobalub" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetcallbackglobalub" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXgetcallbackglobalub" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CPXgetcallbackglobalub" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    try {
      result = (int)CPXgetcallbackglobalub((cpxenv const *)arg1,arg2,arg3,arg4,arg5,arg6);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetcallbackincumbent(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  int arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject *swig_obj[6] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetcallbackincumbent", 6, 6, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetcallbackincumbent" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetcallbackincumbent" "', argument " "2"" of type '" "void *""'"); 
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXgetcallbackincumbent" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetcallbackincumbent" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXgetcallbackincumbent" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CPXgetcallbackincumbent" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    try {
      result = (int)CPXgetcallbackincumbent((cpxenv const *)arg1,arg2,arg3,arg4,arg5,arg6);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetcallbackindicatorinfo(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *arg6 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int res6 ;
  PyObject *swig_obj[6] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetcallbackindicatorinfo", 6, 6, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetcallbackindicatorinfo" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetcallbackindicatorinfo" "', argument " "2"" of type '" "void *""'"); 
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXgetcallbackindicatorinfo" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXgetcallbackindicatorinfo" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXgetcallbackindicatorinfo" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  res6 = SWIG_ConvertPtr(swig_obj[5],SWIG_as_voidptrptr(&arg6), 0, 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CPXgetcallbackindicatorinfo" "', argument " "6"" of type '" "void *""'"); 
  }
  {
    try {
      result = (int)CPXgetcallbackindicatorinfo((cpxenv const *)arg1,arg2,arg3,arg4,arg5,arg6);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetcallbacklp(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  CPXCLPptr *arg4 = (CPXCLPptr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetcallbacklp", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetcallbacklp" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetcallbacklp" "', argument " "2"" of type '" "void *""'"); 
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXgetcallbacklp" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetcallbacklp" "', argument " "4"" of type '" "CPXCLPptr *""'"); 
  }
  arg4 = reinterpret_cast< CPXCLPptr * >(argp4);
  {
    try {
      result = (int)CPXgetcallbacklp((cpxenv const *)arg1,arg2,arg3,(cpxlp const **)arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetcallbacknodeinfo(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *arg6 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int res6 ;
  PyObject *swig_obj[6] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetcallbacknodeinfo", 6, 6, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetcallbacknodeinfo" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetcallbacknodeinfo" "', argument " "2"" of type '" "void *""'"); 
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXgetcallbacknodeinfo" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXgetcallbacknodeinfo" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXgetcallbacknodeinfo" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  res6 = SWIG_ConvertPtr(swig_obj[5],SWIG_as_voidptrptr(&arg6), 0, 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CPXgetcallbacknodeinfo" "', argument " "6"" of type '" "void *""'"); 
  }
  {
    try {
      result = (int)CPXgetcallbacknodeinfo((cpxenv const *)arg1,arg2,arg3,arg4,arg5,arg6);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetcallbacknodeintfeas(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  int arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject *swig_obj[6] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetcallbacknodeintfeas", 6, 6, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetcallbacknodeintfeas" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetcallbacknodeintfeas" "', argument " "2"" of type '" "void *""'"); 
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXgetcallbacknodeintfeas" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetcallbacknodeintfeas" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXgetcallbacknodeintfeas" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CPXgetcallbacknodeintfeas" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    try {
      result = (int)CPXgetcallbacknodeintfeas((cpxenv const *)arg1,arg2,arg3,arg4,arg5,arg6);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetcallbacknodelb(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  int arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject *swig_obj[6] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetcallbacknodelb", 6, 6, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetcallbacknodelb" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetcallbacknodelb" "', argument " "2"" of type '" "void *""'"); 
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXgetcallbacknodelb" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetcallbacknodelb" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXgetcallbacknodelb" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CPXgetcallbacknodelb" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    try {
      result = (int)CPXgetcallbacknodelb((cpxenv const *)arg1,arg2,arg3,arg4,arg5,arg6);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetcallbacknodelp(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  CPXLPptr *arg4 = (CPXLPptr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetcallbacknodelp", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetcallbacknodelp" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetcallbacknodelp" "', argument " "2"" of type '" "void *""'"); 
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXgetcallbacknodelp" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetcallbacknodelp" "', argument " "4"" of type '" "CPXLPptr *""'"); 
  }
  arg4 = reinterpret_cast< CPXLPptr * >(argp4);
  {
    try {
      result = (int)CPXgetcallbacknodelp((cpxenv const *)arg1,arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetcallbacknodeobjval(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetcallbacknodeobjval", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetcallbacknodeobjval" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetcallbacknodeobjval" "', argument " "2"" of type '" "void *""'"); 
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXgetcallbacknodeobjval" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetcallbacknodeobjval" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  {
    try {
      result = (int)CPXgetcallbacknodeobjval((cpxenv const *)arg1,arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetcallbacknodestat(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetcallbacknodestat", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetcallbacknodestat" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetcallbacknodestat" "', argument " "2"" of type '" "void *""'"); 
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXgetcallbacknodestat" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetcallbacknodestat" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  {
    try {
      result = (int)CPXgetcallbacknodestat((cpxenv const *)arg1,arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetcallbacknodeub(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  int arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject *swig_obj[6] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetcallbacknodeub", 6, 6, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetcallbacknodeub" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetcallbacknodeub" "', argument " "2"" of type '" "void *""'"); 
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXgetcallbacknodeub" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetcallbacknodeub" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXgetcallbacknodeub" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CPXgetcallbacknodeub" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    try {
      result = (int)CPXgetcallbacknodeub((cpxenv const *)arg1,arg2,arg3,arg4,arg5,arg6);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetcallbacknodex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  int arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject *swig_obj[6] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetcallbacknodex", 6, 6, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetcallbacknodex" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetcallbacknodex" "', argument " "2"" of type '" "void *""'"); 
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXgetcallbacknodex" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetcallbacknodex" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXgetcallbacknodex" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CPXgetcallbacknodex" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    try {
      result = (int)CPXgetcallbacknodex((cpxenv const *)arg1,arg2,arg3,arg4,arg5,arg6);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetcallbackorder(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  int arg6 ;
  int arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  PyObject *swig_obj[7] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetcallbackorder", 7, 7, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetcallbackorder" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetcallbackorder" "', argument " "2"" of type '" "void *""'"); 
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXgetcallbackorder" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetcallbackorder" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXgetcallbackorder" "', argument " "5"" of type '" "int *""'"); 
  }
  arg5 = reinterpret_cast< int * >(argp5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CPXgetcallbackorder" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "CPXgetcallbackorder" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  {
    try {
      result = (int)CPXgetcallbackorder((cpxenv const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetcallbackpseudocosts(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  int arg6 ;
  int arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  PyObject *swig_obj[7] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetcallbackpseudocosts", 7, 7, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetcallbackpseudocosts" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetcallbackpseudocosts" "', argument " "2"" of type '" "void *""'"); 
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXgetcallbackpseudocosts" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetcallbackpseudocosts" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXgetcallbackpseudocosts" "', argument " "5"" of type '" "double *""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CPXgetcallbackpseudocosts" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "CPXgetcallbackpseudocosts" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  {
    try {
      result = (int)CPXgetcallbackpseudocosts((cpxenv const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetcallbackseqinfo(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *arg6 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int res6 ;
  PyObject *swig_obj[6] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetcallbackseqinfo", 6, 6, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetcallbackseqinfo" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetcallbackseqinfo" "', argument " "2"" of type '" "void *""'"); 
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXgetcallbackseqinfo" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXgetcallbackseqinfo" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXgetcallbackseqinfo" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  res6 = SWIG_ConvertPtr(swig_obj[5],SWIG_as_voidptrptr(&arg6), 0, 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CPXgetcallbackseqinfo" "', argument " "6"" of type '" "void *""'"); 
  }
  {
    try {
      result = (int)CPXgetcallbackseqinfo((cpxenv const *)arg1,arg2,arg3,arg4,arg5,arg6);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetcallbacksosinfo(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  void *arg7 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int res7 ;
  PyObject *swig_obj[7] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetcallbacksosinfo", 7, 7, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetcallbacksosinfo" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetcallbacksosinfo" "', argument " "2"" of type '" "void *""'"); 
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXgetcallbacksosinfo" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXgetcallbacksosinfo" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXgetcallbacksosinfo" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CPXgetcallbacksosinfo" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  res7 = SWIG_ConvertPtr(swig_obj[6],SWIG_as_voidptrptr(&arg7), 0, 0);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "CPXgetcallbacksosinfo" "', argument " "7"" of type '" "void *""'"); 
  }
  {
    try {
      result = (int)CPXgetcallbacksosinfo((cpxenv const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetctype(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetctype", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetctype" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetctype" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetctype" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXgetctype" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXgetctype" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (int)CPXgetctype((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetcutoff(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  double *arg3 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetcutoff", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetcutoff" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetcutoff" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetcutoff" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  {
    try {
      result = (int)CPXgetcutoff((cpxenv const *)arg1,(cpxlp const *)arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetdeletenodecallbackfunc(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  void (**arg2)(CPXCENVptr,int,void *,int,void *) = (void (**)(CPXCENVptr,int,void *,int,void *)) 0 ;
  void **arg3 = (void **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetdeletenodecallbackfunc", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetdeletenodecallbackfunc" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_p_f_p_q_const__cpxenv_int_p_void_int_p_void__void, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetdeletenodecallbackfunc" "', argument " "2"" of type '" "void (**)(CPXCENVptr,int,void *,int,void *)""'"); 
  }
  arg2 = reinterpret_cast< void (**)(CPXCENVptr,int,void *,int,void *) >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetdeletenodecallbackfunc" "', argument " "3"" of type '" "void **""'"); 
  }
  arg3 = reinterpret_cast< void ** >(argp3);
  {
    try {
      result = (int)CPXgetdeletenodecallbackfunc((cpxenv const *)arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetheuristiccallbackfunc(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  int (**arg2)(CPXCENVptr,void *,int,void *,double *,double *,int *,int *) = (int (**)(CPXCENVptr,void *,int,void *,double *,double *,int *,int *)) 0 ;
  void **arg3 = (void **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetheuristiccallbackfunc", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetheuristiccallbackfunc" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_double_p_double_p_int_p_int__int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetheuristiccallbackfunc" "', argument " "2"" of type '" "int (**)(CPXCENVptr,void *,int,void *,double *,double *,int *,int *)""'"); 
  }
  arg2 = reinterpret_cast< int (**)(CPXCENVptr,void *,int,void *,double *,double *,int *,int *) >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetheuristiccallbackfunc" "', argument " "3"" of type '" "void **""'"); 
  }
  arg3 = reinterpret_cast< void ** >(argp3);
  {
    try {
      result = (int)CPXgetheuristiccallbackfunc((cpxenv const *)arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetincumbentcallbackfunc(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  int (**arg2)(CPXCENVptr,void *,int,void *,double,double *,int *,int *) = (int (**)(CPXCENVptr,void *,int,void *,double,double *,int *,int *)) 0 ;
  void **arg3 = (void **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetincumbentcallbackfunc", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetincumbentcallbackfunc" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_p_f_p_q_const__cpxenv_p_void_int_p_void_double_p_double_p_int_p_int__int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetincumbentcallbackfunc" "', argument " "2"" of type '" "int (**)(CPXCENVptr,void *,int,void *,double,double *,int *,int *)""'"); 
  }
  arg2 = reinterpret_cast< int (**)(CPXCENVptr,void *,int,void *,double,double *,int *,int *) >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetincumbentcallbackfunc" "', argument " "3"" of type '" "void **""'"); 
  }
  arg3 = reinterpret_cast< void ** >(argp3);
  {
    try {
      result = (int)CPXgetincumbentcallbackfunc((cpxenv const *)arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetindconstr(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  double *arg6 = (double *) 0 ;
  char *arg7 = (char *) 0 ;
  int *arg8 = (int *) 0 ;
  double *arg9 = (double *) 0 ;
  int arg10 ;
  int *arg11 = (int *) 0 ;
  int arg12 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  int val10 ;
  int ecode10 = 0 ;
  void *argp11 = 0 ;
  int res11 = 0 ;
  int val12 ;
  int ecode12 = 0 ;
  PyObject *swig_obj[12] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetindconstr", 12, 12, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetindconstr" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetindconstr" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetindconstr" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetindconstr" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXgetindconstr" "', argument " "5"" of type '" "int *""'"); 
  }
  arg5 = reinterpret_cast< int * >(argp5);
  res6 = SWIG_ConvertPtr(swig_obj[5], &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CPXgetindconstr" "', argument " "6"" of type '" "double *""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  res7 = SWIG_AsCharPtrAndSize(swig_obj[6], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "CPXgetindconstr" "', argument " "7"" of type '" "char *""'");
  }
  arg7 = reinterpret_cast< char * >(buf7);
  res8 = SWIG_ConvertPtr(swig_obj[7], &argp8,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "CPXgetindconstr" "', argument " "8"" of type '" "int *""'"); 
  }
  arg8 = reinterpret_cast< int * >(argp8);
  res9 = SWIG_ConvertPtr(swig_obj[8], &argp9,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "CPXgetindconstr" "', argument " "9"" of type '" "double *""'"); 
  }
  arg9 = reinterpret_cast< double * >(argp9);
  ecode10 = SWIG_AsVal_int(swig_obj[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "CPXgetindconstr" "', argument " "10"" of type '" "int""'");
  } 
  arg10 = static_cast< int >(val10);
  res11 = SWIG_ConvertPtr(swig_obj[10], &argp11,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res11)) {
    SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "CPXgetindconstr" "', argument " "11"" of type '" "int *""'"); 
  }
  arg11 = reinterpret_cast< int * >(argp11);
  ecode12 = SWIG_AsVal_int(swig_obj[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "CPXgetindconstr" "', argument " "12"" of type '" "int""'");
  } 
  arg12 = static_cast< int >(val12);
  {
    try {
      result = (int)CPXgetindconstr((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return resultobj;
fail:
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetindconstraints(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  int *arg6 = (int *) 0 ;
  double *arg7 = (double *) 0 ;
  char *arg8 = (char *) 0 ;
  int *arg9 = (int *) 0 ;
  int *arg10 = (int *) 0 ;
  double *arg11 = (double *) 0 ;
  int arg12 ;
  int *arg13 = (int *) 0 ;
  int arg14 ;
  int arg15 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  void *argp11 = 0 ;
  int res11 = 0 ;
  int val12 ;
  int ecode12 = 0 ;
  void *argp13 = 0 ;
  int res13 = 0 ;
  int val14 ;
  int ecode14 = 0 ;
  int val15 ;
  int ecode15 = 0 ;
  PyObject *swig_obj[15] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetindconstraints", 15, 15, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetindconstraints" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetindconstraints" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetindconstraints" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetindconstraints" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXgetindconstraints" "', argument " "5"" of type '" "int *""'"); 
  }
  arg5 = reinterpret_cast< int * >(argp5);
  res6 = SWIG_ConvertPtr(swig_obj[5], &argp6,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CPXgetindconstraints" "', argument " "6"" of type '" "int *""'"); 
  }
  arg6 = reinterpret_cast< int * >(argp6);
  res7 = SWIG_ConvertPtr(swig_obj[6], &argp7,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "CPXgetindconstraints" "', argument " "7"" of type '" "double *""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  res8 = SWIG_AsCharPtrAndSize(swig_obj[7], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "CPXgetindconstraints" "', argument " "8"" of type '" "char *""'");
  }
  arg8 = reinterpret_cast< char * >(buf8);
  res9 = SWIG_ConvertPtr(swig_obj[8], &argp9,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "CPXgetindconstraints" "', argument " "9"" of type '" "int *""'"); 
  }
  arg9 = reinterpret_cast< int * >(argp9);
  res10 = SWIG_ConvertPtr(swig_obj[9], &argp10,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "CPXgetindconstraints" "', argument " "10"" of type '" "int *""'"); 
  }
  arg10 = reinterpret_cast< int * >(argp10);
  res11 = SWIG_ConvertPtr(swig_obj[10], &argp11,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res11)) {
    SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "CPXgetindconstraints" "', argument " "11"" of type '" "double *""'"); 
  }
  arg11 = reinterpret_cast< double * >(argp11);
  ecode12 = SWIG_AsVal_int(swig_obj[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "CPXgetindconstraints" "', argument " "12"" of type '" "int""'");
  } 
  arg12 = static_cast< int >(val12);
  res13 = SWIG_ConvertPtr(swig_obj[12], &argp13,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res13)) {
    SWIG_exception_fail(SWIG_ArgError(res13), "in method '" "CPXgetindconstraints" "', argument " "13"" of type '" "int *""'"); 
  }
  arg13 = reinterpret_cast< int * >(argp13);
  ecode14 = SWIG_AsVal_int(swig_obj[13], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "CPXgetindconstraints" "', argument " "14"" of type '" "int""'");
  } 
  arg14 = static_cast< int >(val14);
  ecode15 = SWIG_AsVal_int(swig_obj[14], &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "CPXgetindconstraints" "', argument " "15"" of type '" "int""'");
  } 
  arg15 = static_cast< int >(val15);
  {
    try {
      result = (int)CPXgetindconstraints((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return resultobj;
fail:
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetindconstrindex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  char *arg3 = (char *) 0 ;
  int *arg4 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetindconstrindex", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetindconstrindex" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetindconstrindex" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetindconstrindex" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetindconstrindex" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  {
    try {
      result = (int)CPXgetindconstrindex((cpxenv const *)arg1,(cpxlp const *)arg2,(char const *)arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetindconstrinfeas(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  int arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject *swig_obj[6] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetindconstrinfeas", 6, 6, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetindconstrinfeas" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetindconstrinfeas" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[2])) {
      int size = (int)PyList_Size(swig_obj[2]);
      int i = 0;
      arg3 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[2], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg3[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg3);
          return NULL;
        }
      }
    }
    else if (swig_obj[2] == Py_None) {
      arg3 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetindconstrinfeas" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXgetindconstrinfeas" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CPXgetindconstrinfeas" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    try {
      result = (int)CPXgetindconstrinfeas((cpxenv const *)arg1,(cpxlp const *)arg2,(double const *)arg3,arg4,arg5,arg6);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg3);
  }
  return resultobj;
fail:
  {
    free(arg3);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetindconstrname(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject *swig_obj[6] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetindconstrname", 6, 6, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetindconstrname" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetindconstrname" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetindconstrname" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXgetindconstrname" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXgetindconstrname" "', argument " "5"" of type '" "int *""'"); 
  }
  arg5 = reinterpret_cast< int * >(argp5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CPXgetindconstrname" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    try {
      result = (int)CPXgetindconstrname((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5,arg6);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetindconstrslack(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetindconstrslack", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetindconstrslack" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetindconstrslack" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetindconstrslack" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXgetindconstrslack" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXgetindconstrslack" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (int)CPXgetindconstrslack((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetinfocallbackfunc(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  int (**arg2)(CPXCENVptr,void *,int,void *) = (int (**)(CPXCENVptr,void *,int,void *)) 0 ;
  void **arg3 = (void **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetinfocallbackfunc", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetinfocallbackfunc" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_p_f_p_q_const__cpxenv_p_void_int_p_void__int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetinfocallbackfunc" "', argument " "2"" of type '" "int (**)(CPXCENVptr,void *,int,void *)""'"); 
  }
  arg2 = reinterpret_cast< int (**)(CPXCENVptr,void *,int,void *) >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetinfocallbackfunc" "', argument " "3"" of type '" "void **""'"); 
  }
  arg3 = reinterpret_cast< void ** >(argp3);
  {
    try {
      result = (int)CPXgetinfocallbackfunc((cpxenv const *)arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetlazyconstraintcallbackfunc(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  int (**arg2)(CPXCENVptr,void *,int,void *,int *) = (int (**)(CPXCENVptr,void *,int,void *,int *)) 0 ;
  void **arg3 = (void **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetlazyconstraintcallbackfunc", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetlazyconstraintcallbackfunc" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_int__int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetlazyconstraintcallbackfunc" "', argument " "2"" of type '" "int (**)(CPXCENVptr,void *,int,void *,int *)""'"); 
  }
  arg2 = reinterpret_cast< int (**)(CPXCENVptr,void *,int,void *,int *) >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetlazyconstraintcallbackfunc" "', argument " "3"" of type '" "void **""'"); 
  }
  arg3 = reinterpret_cast< void ** >(argp3);
  {
    try {
      result = (int)CPXgetlazyconstraintcallbackfunc((cpxenv const *)arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetmipcallbackfunc(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  int (**arg2)(CPXCENVptr,void *,int,void *) = (int (**)(CPXCENVptr,void *,int,void *)) 0 ;
  void **arg3 = (void **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetmipcallbackfunc", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetmipcallbackfunc" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_p_f_p_q_const__cpxenv_p_void_int_p_void__int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetmipcallbackfunc" "', argument " "2"" of type '" "int (**)(CPXCENVptr,void *,int,void *)""'"); 
  }
  arg2 = reinterpret_cast< int (**)(CPXCENVptr,void *,int,void *) >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetmipcallbackfunc" "', argument " "3"" of type '" "void **""'"); 
  }
  arg3 = reinterpret_cast< void ** >(argp3);
  {
    try {
      result = (int)CPXgetmipcallbackfunc((cpxenv const *)arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetmipitcnt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetmipitcnt", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetmipitcnt" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetmipitcnt" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  {
    try {
      result = (int)CPXgetmipitcnt((cpxenv const *)arg1,(cpxlp const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetmiprelgap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  double *arg3 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetmiprelgap", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetmiprelgap" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetmiprelgap" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetmiprelgap" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  {
    try {
      result = (int)CPXgetmiprelgap((cpxenv const *)arg1,(cpxlp const *)arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetmipstartindex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  char *arg3 = (char *) 0 ;
  int *arg4 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetmipstartindex", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetmipstartindex" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetmipstartindex" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetmipstartindex" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetmipstartindex" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  {
    try {
      result = (int)CPXgetmipstartindex((cpxenv const *)arg1,(cpxlp const *)arg2,(char const *)arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetmipstartname(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  char **arg3 = (char **) 0 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  int *arg6 = (int *) 0 ;
  int arg7 ;
  int arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  PyObject *swig_obj[8] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetmipstartname", 8, 8, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetmipstartname" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetmipstartname" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetmipstartname" "', argument " "3"" of type '" "char **""'"); 
  }
  arg3 = reinterpret_cast< char ** >(argp3);
  res4 = SWIG_AsCharPtrAndSize(swig_obj[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetmipstartname" "', argument " "4"" of type '" "char *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXgetmipstartname" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  res6 = SWIG_ConvertPtr(swig_obj[5], &argp6,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CPXgetmipstartname" "', argument " "6"" of type '" "int *""'"); 
  }
  arg6 = reinterpret_cast< int * >(argp6);
  ecode7 = SWIG_AsVal_int(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "CPXgetmipstartname" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  ecode8 = SWIG_AsVal_int(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "CPXgetmipstartname" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  {
    try {
      result = (int)CPXgetmipstartname((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetmipstarts(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  double *arg6 = (double *) 0 ;
  int *arg7 = (int *) 0 ;
  int arg8 ;
  int *arg9 = (int *) 0 ;
  int arg10 ;
  int arg11 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  int val10 ;
  int ecode10 = 0 ;
  int val11 ;
  int ecode11 = 0 ;
  PyObject *swig_obj[11] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetmipstarts", 11, 11, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetmipstarts" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetmipstarts" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetmipstarts" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetmipstarts" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXgetmipstarts" "', argument " "5"" of type '" "int *""'"); 
  }
  arg5 = reinterpret_cast< int * >(argp5);
  res6 = SWIG_ConvertPtr(swig_obj[5], &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CPXgetmipstarts" "', argument " "6"" of type '" "double *""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  res7 = SWIG_ConvertPtr(swig_obj[6], &argp7,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "CPXgetmipstarts" "', argument " "7"" of type '" "int *""'"); 
  }
  arg7 = reinterpret_cast< int * >(argp7);
  ecode8 = SWIG_AsVal_int(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "CPXgetmipstarts" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  res9 = SWIG_ConvertPtr(swig_obj[8], &argp9,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "CPXgetmipstarts" "', argument " "9"" of type '" "int *""'"); 
  }
  arg9 = reinterpret_cast< int * >(argp9);
  ecode10 = SWIG_AsVal_int(swig_obj[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "CPXgetmipstarts" "', argument " "10"" of type '" "int""'");
  } 
  arg10 = static_cast< int >(val10);
  ecode11 = SWIG_AsVal_int(swig_obj[10], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "CPXgetmipstarts" "', argument " "11"" of type '" "int""'");
  } 
  arg11 = static_cast< int >(val11);
  {
    try {
      result = (int)CPXgetmipstarts((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetnodecallbackfunc(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  int (**arg2)(CPXCENVptr,void *,int,void *,int *,int *) = (int (**)(CPXCENVptr,void *,int,void *,int *,int *)) 0 ;
  void **arg3 = (void **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetnodecallbackfunc", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetnodecallbackfunc" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_int_p_int__int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetnodecallbackfunc" "', argument " "2"" of type '" "int (**)(CPXCENVptr,void *,int,void *,int *,int *)""'"); 
  }
  arg2 = reinterpret_cast< int (**)(CPXCENVptr,void *,int,void *,int *,int *) >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetnodecallbackfunc" "', argument " "3"" of type '" "void **""'"); 
  }
  arg3 = reinterpret_cast< void ** >(argp3);
  {
    try {
      result = (int)CPXgetnodecallbackfunc((cpxenv const *)arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetnodecnt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetnodecnt", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetnodecnt" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetnodecnt" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  {
    try {
      result = (int)CPXgetnodecnt((cpxenv const *)arg1,(cpxlp const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetnodeint(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetnodeint", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetnodeint" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetnodeint" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  {
    try {
      result = (int)CPXgetnodeint((cpxenv const *)arg1,(cpxlp const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetnodeleftcnt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetnodeleftcnt", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetnodeleftcnt" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetnodeleftcnt" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  {
    try {
      result = (int)CPXgetnodeleftcnt((cpxenv const *)arg1,(cpxlp const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetnumbin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetnumbin", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetnumbin" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetnumbin" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  {
    try {
      result = (int)CPXgetnumbin((cpxenv const *)arg1,(cpxlp const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetnumcuts(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetnumcuts", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetnumcuts" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetnumcuts" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXgetnumcuts" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetnumcuts" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  {
    try {
      result = (int)CPXgetnumcuts((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetnumindconstrs(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetnumindconstrs", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetnumindconstrs" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetnumindconstrs" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  {
    try {
      result = (int)CPXgetnumindconstrs((cpxenv const *)arg1,(cpxlp const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetnumint(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetnumint", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetnumint" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetnumint" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  {
    try {
      result = (int)CPXgetnumint((cpxenv const *)arg1,(cpxlp const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetnumlazyconstraints(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetnumlazyconstraints", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetnumlazyconstraints" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetnumlazyconstraints" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  {
    try {
      result = (int)CPXgetnumlazyconstraints((cpxenv const *)arg1,(cpxlp const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetnummipstarts(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetnummipstarts", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetnummipstarts" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetnummipstarts" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  {
    try {
      result = (int)CPXgetnummipstarts((cpxenv const *)arg1,(cpxlp const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetnumsemicont(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetnumsemicont", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetnumsemicont" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetnumsemicont" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  {
    try {
      result = (int)CPXgetnumsemicont((cpxenv const *)arg1,(cpxlp const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetnumsemiint(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetnumsemiint", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetnumsemiint" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetnumsemiint" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  {
    try {
      result = (int)CPXgetnumsemiint((cpxenv const *)arg1,(cpxlp const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetnumsos(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetnumsos", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetnumsos" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetnumsos" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  {
    try {
      result = (int)CPXgetnumsos((cpxenv const *)arg1,(cpxlp const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetnumusercuts(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetnumusercuts", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetnumusercuts" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetnumusercuts" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  {
    try {
      result = (int)CPXgetnumusercuts((cpxenv const *)arg1,(cpxlp const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetorder(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  int *arg6 = (int *) 0 ;
  int arg7 ;
  int *arg8 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  PyObject *swig_obj[8] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetorder", 8, 8, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetorder" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetorder" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetorder" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetorder" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXgetorder" "', argument " "5"" of type '" "int *""'"); 
  }
  arg5 = reinterpret_cast< int * >(argp5);
  res6 = SWIG_ConvertPtr(swig_obj[5], &argp6,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CPXgetorder" "', argument " "6"" of type '" "int *""'"); 
  }
  arg6 = reinterpret_cast< int * >(argp6);
  ecode7 = SWIG_AsVal_int(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "CPXgetorder" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  res8 = SWIG_ConvertPtr(swig_obj[7], &argp8,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "CPXgetorder" "', argument " "8"" of type '" "int *""'"); 
  }
  arg8 = reinterpret_cast< int * >(argp8);
  {
    try {
      result = (int)CPXgetorder((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetsolnpooldivfilter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  int *arg5 = (int *) 0 ;
  int *arg6 = (int *) 0 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  int arg9 ;
  int *arg10 = (int *) 0 ;
  int arg11 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  int val11 ;
  int ecode11 = 0 ;
  PyObject *swig_obj[11] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetsolnpooldivfilter", 11, 11, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetsolnpooldivfilter" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetsolnpooldivfilter" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetsolnpooldivfilter" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetsolnpooldivfilter" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXgetsolnpooldivfilter" "', argument " "5"" of type '" "int *""'"); 
  }
  arg5 = reinterpret_cast< int * >(argp5);
  res6 = SWIG_ConvertPtr(swig_obj[5], &argp6,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CPXgetsolnpooldivfilter" "', argument " "6"" of type '" "int *""'"); 
  }
  arg6 = reinterpret_cast< int * >(argp6);
  res7 = SWIG_ConvertPtr(swig_obj[6], &argp7,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "CPXgetsolnpooldivfilter" "', argument " "7"" of type '" "double *""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  res8 = SWIG_ConvertPtr(swig_obj[7], &argp8,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "CPXgetsolnpooldivfilter" "', argument " "8"" of type '" "double *""'"); 
  }
  arg8 = reinterpret_cast< double * >(argp8);
  ecode9 = SWIG_AsVal_int(swig_obj[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "CPXgetsolnpooldivfilter" "', argument " "9"" of type '" "int""'");
  } 
  arg9 = static_cast< int >(val9);
  res10 = SWIG_ConvertPtr(swig_obj[9], &argp10,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "CPXgetsolnpooldivfilter" "', argument " "10"" of type '" "int *""'"); 
  }
  arg10 = reinterpret_cast< int * >(argp10);
  ecode11 = SWIG_AsVal_int(swig_obj[10], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "CPXgetsolnpooldivfilter" "', argument " "11"" of type '" "int""'");
  } 
  arg11 = static_cast< int >(val11);
  {
    try {
      result = (int)CPXgetsolnpooldivfilter((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetsolnpoolfilterindex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  char *arg3 = (char *) 0 ;
  int *arg4 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetsolnpoolfilterindex", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetsolnpoolfilterindex" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetsolnpoolfilterindex" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetsolnpoolfilterindex" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetsolnpoolfilterindex" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  {
    try {
      result = (int)CPXgetsolnpoolfilterindex((cpxenv const *)arg1,(cpxlp const *)arg2,(char const *)arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetsolnpoolfiltername(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject *swig_obj[6] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetsolnpoolfiltername", 6, 6, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetsolnpoolfiltername" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetsolnpoolfiltername" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetsolnpoolfiltername" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXgetsolnpoolfiltername" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXgetsolnpoolfiltername" "', argument " "5"" of type '" "int *""'"); 
  }
  arg5 = reinterpret_cast< int * >(argp5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CPXgetsolnpoolfiltername" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    try {
      result = (int)CPXgetsolnpoolfiltername((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5,arg6);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetsolnpoolfiltertype(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetsolnpoolfiltertype", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetsolnpoolfiltertype" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetsolnpoolfiltertype" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetsolnpoolfiltertype" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXgetsolnpoolfiltertype" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (int)CPXgetsolnpoolfiltertype((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetsolnpoolmeanobjval(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  double *arg3 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetsolnpoolmeanobjval", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetsolnpoolmeanobjval" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetsolnpoolmeanobjval" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetsolnpoolmeanobjval" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  {
    try {
      result = (int)CPXgetsolnpoolmeanobjval((cpxenv const *)arg1,(cpxlp const *)arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetsolnpoolnumfilters(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetsolnpoolnumfilters", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetsolnpoolnumfilters" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetsolnpoolnumfilters" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  {
    try {
      result = (int)CPXgetsolnpoolnumfilters((cpxenv const *)arg1,(cpxlp const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetsolnpoolnumreplaced(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetsolnpoolnumreplaced", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetsolnpoolnumreplaced" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetsolnpoolnumreplaced" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  {
    try {
      result = (int)CPXgetsolnpoolnumreplaced((cpxenv const *)arg1,(cpxlp const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetsolnpoolnumsolns(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetsolnpoolnumsolns", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetsolnpoolnumsolns" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetsolnpoolnumsolns" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  {
    try {
      result = (int)CPXgetsolnpoolnumsolns((cpxenv const *)arg1,(cpxlp const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetsolnpoolobjval(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetsolnpoolobjval", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetsolnpoolobjval" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetsolnpoolobjval" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXgetsolnpoolobjval" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetsolnpoolobjval" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  {
    try {
      result = (int)CPXgetsolnpoolobjval((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetsolnpoolqconstrslack(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  int arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject *swig_obj[6] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetsolnpoolqconstrslack", 6, 6, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetsolnpoolqconstrslack" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetsolnpoolqconstrslack" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXgetsolnpoolqconstrslack" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetsolnpoolqconstrslack" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXgetsolnpoolqconstrslack" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CPXgetsolnpoolqconstrslack" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    try {
      result = (int)CPXgetsolnpoolqconstrslack((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5,arg6);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetsolnpoolrngfilter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  int *arg5 = (int *) 0 ;
  int *arg6 = (int *) 0 ;
  double *arg7 = (double *) 0 ;
  int arg8 ;
  int *arg9 = (int *) 0 ;
  int arg10 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  int val10 ;
  int ecode10 = 0 ;
  PyObject *swig_obj[10] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetsolnpoolrngfilter", 10, 10, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetsolnpoolrngfilter" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetsolnpoolrngfilter" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetsolnpoolrngfilter" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetsolnpoolrngfilter" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXgetsolnpoolrngfilter" "', argument " "5"" of type '" "int *""'"); 
  }
  arg5 = reinterpret_cast< int * >(argp5);
  res6 = SWIG_ConvertPtr(swig_obj[5], &argp6,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CPXgetsolnpoolrngfilter" "', argument " "6"" of type '" "int *""'"); 
  }
  arg6 = reinterpret_cast< int * >(argp6);
  res7 = SWIG_ConvertPtr(swig_obj[6], &argp7,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "CPXgetsolnpoolrngfilter" "', argument " "7"" of type '" "double *""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  ecode8 = SWIG_AsVal_int(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "CPXgetsolnpoolrngfilter" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  res9 = SWIG_ConvertPtr(swig_obj[8], &argp9,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "CPXgetsolnpoolrngfilter" "', argument " "9"" of type '" "int *""'"); 
  }
  arg9 = reinterpret_cast< int * >(argp9);
  ecode10 = SWIG_AsVal_int(swig_obj[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "CPXgetsolnpoolrngfilter" "', argument " "10"" of type '" "int""'");
  } 
  arg10 = static_cast< int >(val10);
  {
    try {
      result = (int)CPXgetsolnpoolrngfilter((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetsolnpoolslack(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  int arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject *swig_obj[6] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetsolnpoolslack", 6, 6, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetsolnpoolslack" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetsolnpoolslack" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXgetsolnpoolslack" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetsolnpoolslack" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXgetsolnpoolslack" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CPXgetsolnpoolslack" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    try {
      result = (int)CPXgetsolnpoolslack((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5,arg6);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetsolnpoolsolnindex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  char *arg3 = (char *) 0 ;
  int *arg4 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetsolnpoolsolnindex", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetsolnpoolsolnindex" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetsolnpoolsolnindex" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetsolnpoolsolnindex" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetsolnpoolsolnindex" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  {
    try {
      result = (int)CPXgetsolnpoolsolnindex((cpxenv const *)arg1,(cpxlp const *)arg2,(char const *)arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetsolnpoolsolnname(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject *swig_obj[6] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetsolnpoolsolnname", 6, 6, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetsolnpoolsolnname" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetsolnpoolsolnname" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetsolnpoolsolnname" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXgetsolnpoolsolnname" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXgetsolnpoolsolnname" "', argument " "5"" of type '" "int *""'"); 
  }
  arg5 = reinterpret_cast< int * >(argp5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CPXgetsolnpoolsolnname" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    try {
      result = (int)CPXgetsolnpoolsolnname((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5,arg6);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetsolnpoolx(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  int arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject *swig_obj[6] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetsolnpoolx", 6, 6, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetsolnpoolx" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetsolnpoolx" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXgetsolnpoolx" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetsolnpoolx" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXgetsolnpoolx" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CPXgetsolnpoolx" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    try {
      result = (int)CPXgetsolnpoolx((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5,arg6);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetsolvecallbackfunc(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  int (**arg2)(CPXCENVptr,void *,int,void *,int *) = (int (**)(CPXCENVptr,void *,int,void *,int *)) 0 ;
  void **arg3 = (void **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetsolvecallbackfunc", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetsolvecallbackfunc" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_int__int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetsolvecallbackfunc" "', argument " "2"" of type '" "int (**)(CPXCENVptr,void *,int,void *,int *)""'"); 
  }
  arg2 = reinterpret_cast< int (**)(CPXCENVptr,void *,int,void *,int *) >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetsolvecallbackfunc" "', argument " "3"" of type '" "void **""'"); 
  }
  arg3 = reinterpret_cast< void ** >(argp3);
  {
    try {
      result = (int)CPXgetsolvecallbackfunc((cpxenv const *)arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetsos(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int *arg3 = (int *) 0 ;
  char *arg4 = (char *) 0 ;
  int *arg5 = (int *) 0 ;
  int *arg6 = (int *) 0 ;
  double *arg7 = (double *) 0 ;
  int arg8 ;
  int *arg9 = (int *) 0 ;
  int arg10 ;
  int arg11 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  int val10 ;
  int ecode10 = 0 ;
  int val11 ;
  int ecode11 = 0 ;
  PyObject *swig_obj[11] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetsos", 11, 11, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetsos" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetsos" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetsos" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  res4 = SWIG_AsCharPtrAndSize(swig_obj[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetsos" "', argument " "4"" of type '" "char *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXgetsos" "', argument " "5"" of type '" "int *""'"); 
  }
  arg5 = reinterpret_cast< int * >(argp5);
  res6 = SWIG_ConvertPtr(swig_obj[5], &argp6,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CPXgetsos" "', argument " "6"" of type '" "int *""'"); 
  }
  arg6 = reinterpret_cast< int * >(argp6);
  res7 = SWIG_ConvertPtr(swig_obj[6], &argp7,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "CPXgetsos" "', argument " "7"" of type '" "double *""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  ecode8 = SWIG_AsVal_int(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "CPXgetsos" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  res9 = SWIG_ConvertPtr(swig_obj[8], &argp9,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "CPXgetsos" "', argument " "9"" of type '" "int *""'"); 
  }
  arg9 = reinterpret_cast< int * >(argp9);
  ecode10 = SWIG_AsVal_int(swig_obj[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "CPXgetsos" "', argument " "10"" of type '" "int""'");
  } 
  arg10 = static_cast< int >(val10);
  ecode11 = SWIG_AsVal_int(swig_obj[10], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "CPXgetsos" "', argument " "11"" of type '" "int""'");
  } 
  arg11 = static_cast< int >(val11);
  {
    try {
      result = (int)CPXgetsos((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetsosindex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  char *arg3 = (char *) 0 ;
  int *arg4 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetsosindex", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetsosindex" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetsosindex" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetsosindex" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetsosindex" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  {
    try {
      result = (int)CPXgetsosindex((cpxenv const *)arg1,(cpxlp const *)arg2,(char const *)arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetsosinfeas(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  int arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject *swig_obj[6] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetsosinfeas", 6, 6, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetsosinfeas" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetsosinfeas" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[2])) {
      int size = (int)PyList_Size(swig_obj[2]);
      int i = 0;
      arg3 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[2], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg3[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg3);
          return NULL;
        }
      }
    }
    else if (swig_obj[2] == Py_None) {
      arg3 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetsosinfeas" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXgetsosinfeas" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CPXgetsosinfeas" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    try {
      result = (int)CPXgetsosinfeas((cpxenv const *)arg1,(cpxlp const *)arg2,(double const *)arg3,arg4,arg5,arg6);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg3);
  }
  return resultobj;
fail:
  {
    free(arg3);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetsosname(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  char **arg3 = (char **) 0 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  int *arg6 = (int *) 0 ;
  int arg7 ;
  int arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  PyObject *swig_obj[8] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetsosname", 8, 8, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetsosname" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetsosname" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetsosname" "', argument " "3"" of type '" "char **""'"); 
  }
  arg3 = reinterpret_cast< char ** >(argp3);
  res4 = SWIG_AsCharPtrAndSize(swig_obj[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetsosname" "', argument " "4"" of type '" "char *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXgetsosname" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  res6 = SWIG_ConvertPtr(swig_obj[5], &argp6,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CPXgetsosname" "', argument " "6"" of type '" "int *""'"); 
  }
  arg6 = reinterpret_cast< int * >(argp6);
  ecode7 = SWIG_AsVal_int(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "CPXgetsosname" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  ecode8 = SWIG_AsVal_int(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "CPXgetsosname" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  {
    try {
      result = (int)CPXgetsosname((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetsubmethod(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetsubmethod", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetsubmethod" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetsubmethod" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  {
    try {
      result = (int)CPXgetsubmethod((cpxenv const *)arg1,(cpxlp const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetsubstat(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetsubstat", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetsubstat" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetsubstat" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  {
    try {
      result = (int)CPXgetsubstat((cpxenv const *)arg1,(cpxlp const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetusercutcallbackfunc(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  int (**arg2)(CPXCENVptr,void *,int,void *,int *) = (int (**)(CPXCENVptr,void *,int,void *,int *)) 0 ;
  void **arg3 = (void **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetusercutcallbackfunc", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetusercutcallbackfunc" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_int__int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetusercutcallbackfunc" "', argument " "2"" of type '" "int (**)(CPXCENVptr,void *,int,void *,int *)""'"); 
  }
  arg2 = reinterpret_cast< int (**)(CPXCENVptr,void *,int,void *,int *) >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetusercutcallbackfunc" "', argument " "3"" of type '" "void **""'"); 
  }
  arg3 = reinterpret_cast< void ** >(argp3);
  {
    try {
      result = (int)CPXgetusercutcallbackfunc((cpxenv const *)arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXindconstrslackfromx(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXindconstrslackfromx", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXindconstrslackfromx" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXindconstrslackfromx" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[2])) {
      int size = (int)PyList_Size(swig_obj[2]);
      int i = 0;
      arg3 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[2], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg3[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg3);
          return NULL;
        }
      }
    }
    else if (swig_obj[2] == Py_None) {
      arg3 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXindconstrslackfromx" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  {
    try {
      result = (int)CPXindconstrslackfromx((cpxenv const *)arg1,(cpxlp const *)arg2,(double const *)arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg3);
  }
  return resultobj;
fail:
  {
    free(arg3);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXmipopt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXmipopt", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXmipopt" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXmipopt" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  {
    try {
      result = (int)CPXmipopt((cpxenv const *)arg1,arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXordread(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char **arg4 = (char **) 0 ;
  int *arg5 = (int *) 0 ;
  int *arg6 = (int *) 0 ;
  int *arg7 = (int *) 0 ;
  int *arg8 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  PyObject *swig_obj[8] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXordread", 8, 8, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXordread" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXordread" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXordread" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXordread" "', argument " "4"" of type '" "char **""'"); 
  }
  arg4 = reinterpret_cast< char ** >(argp4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXordread" "', argument " "5"" of type '" "int *""'"); 
  }
  arg5 = reinterpret_cast< int * >(argp5);
  res6 = SWIG_ConvertPtr(swig_obj[5], &argp6,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CPXordread" "', argument " "6"" of type '" "int *""'"); 
  }
  arg6 = reinterpret_cast< int * >(argp6);
  res7 = SWIG_ConvertPtr(swig_obj[6], &argp7,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "CPXordread" "', argument " "7"" of type '" "int *""'"); 
  }
  arg7 = reinterpret_cast< int * >(argp7);
  res8 = SWIG_ConvertPtr(swig_obj[7], &argp8,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "CPXordread" "', argument " "8"" of type '" "int *""'"); 
  }
  arg8 = reinterpret_cast< int * >(argp8);
  {
    try {
      result = (int)CPXordread((cpxenv const *)arg1,(char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXordwrite(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXordwrite", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXordwrite" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXordwrite" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXordwrite" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try {
      result = (int)CPXordwrite((cpxenv const *)arg1,(cpxlp const *)arg2,(char const *)arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXpopulate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXpopulate", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXpopulate" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXpopulate" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  {
    try {
      result = (int)CPXpopulate((cpxenv const *)arg1,arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXreadcopymipstarts(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXreadcopymipstarts", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXreadcopymipstarts" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXreadcopymipstarts" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXreadcopymipstarts" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try {
      result = (int)CPXreadcopymipstarts((cpxenv const *)arg1,arg2,(char const *)arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXreadcopyorder(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXreadcopyorder", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXreadcopyorder" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXreadcopyorder" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXreadcopyorder" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try {
      result = (int)CPXreadcopyorder((cpxenv const *)arg1,arg2,(char const *)arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXreadcopysolnpoolfilters(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXreadcopysolnpoolfilters", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXreadcopysolnpoolfilters" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXreadcopysolnpoolfilters" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXreadcopysolnpoolfilters" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try {
      result = (int)CPXreadcopysolnpoolfilters((cpxenv const *)arg1,arg2,(char const *)arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXrefinemipstartconflict(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXrefinemipstartconflict", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXrefinemipstartconflict" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXrefinemipstartconflict" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXrefinemipstartconflict" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXrefinemipstartconflict" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXrefinemipstartconflict" "', argument " "5"" of type '" "int *""'"); 
  }
  arg5 = reinterpret_cast< int * >(argp5);
  {
    try {
      result = (int)CPXrefinemipstartconflict((cpxenv const *)arg1,arg2,arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXrefinemipstartconflictext(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  double *arg6 = (double *) 0 ;
  int *arg7 = (int *) 0 ;
  int *arg8 = (int *) 0 ;
  char *arg9 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int res9 ;
  char *buf9 = 0 ;
  int alloc9 = 0 ;
  PyObject *swig_obj[9] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXrefinemipstartconflictext", 9, 9, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXrefinemipstartconflictext" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXrefinemipstartconflictext" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXrefinemipstartconflictext" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXrefinemipstartconflictext" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXrefinemipstartconflictext" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[5])) {
      int size = (int)PyList_Size(swig_obj[5]);
      int i = 0;
      arg6 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[5], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg6[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg6);
          return NULL;
        }
      }
    }
    else if (swig_obj[5] == Py_None) {
      arg6 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[6])) {
      int size = (int)PyList_Size(swig_obj[6]);
      int i = 0;
      arg7 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[6], i);
        if (PyInt_Check(o)) {
          arg7[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg7);
          return NULL;
        }
      }
    }
    else if (swig_obj[6] == Py_None) {
      arg7 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[7])) {
      int size = (int)PyList_Size(swig_obj[7]);
      int i = 0;
      arg8 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[7], i);
        if (PyInt_Check(o)) {
          arg8[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg8);
          return NULL;
        }
      }
    }
    else if (swig_obj[7] == Py_None) {
      arg8 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res9 = SWIG_AsCharPtrAndSize(swig_obj[8], &buf9, NULL, &alloc9);
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "CPXrefinemipstartconflictext" "', argument " "9"" of type '" "char const *""'");
  }
  arg9 = reinterpret_cast< char * >(buf9);
  {
    try {
      result = (int)CPXrefinemipstartconflictext((cpxenv const *)arg1,arg2,arg3,arg4,arg5,(double const *)arg6,(int const *)arg7,(int const *)arg8,(char const *)arg9);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg6);
  }
  {
    free(arg7);
  }
  {
    free(arg8);
  }
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  return resultobj;
fail:
  {
    free(arg6);
  }
  {
    free(arg7);
  }
  {
    free(arg8);
  }
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXsetbranchcallbackfunc(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXENVptr arg1 = (CPXENVptr) 0 ;
  int (*arg2)(CPXCENVptr,void *,int,void *,int,int,int,int,int const *,int const *,char const *,double const *,double const *,int *) = (int (*)(CPXCENVptr,void *,int,void *,int,int,int,int,int const *,int const *,char const *,double const *,double const *,int *)) 0 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXsetbranchcallbackfunc", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXsetbranchcallbackfunc" "', argument " "1"" of type '" "CPXENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXENVptr >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_f_p_q_const__cpxenv_p_void_int_p_void_int_int_int_int_p_q_const__int_p_q_const__int_p_q_const__char_p_q_const__double_p_q_const__double_p_int__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "CPXsetbranchcallbackfunc" "', argument " "2"" of type '" "int (*)(CPXCENVptr,void *,int,void *,int,int,int,int,int const *,int const *,char const *,double const *,double const *,int *)""'"); 
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2],SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXsetbranchcallbackfunc" "', argument " "3"" of type '" "void *""'"); 
  }
  {
    try {
      result = (int)CPXsetbranchcallbackfunc(arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXsetbranchnosolncallbackfunc(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXENVptr arg1 = (CPXENVptr) 0 ;
  int (*arg2)(CPXCENVptr,void *,int,void *,int,int,int,int,int const *,int const *,char const *,double const *,double const *,int *) = (int (*)(CPXCENVptr,void *,int,void *,int,int,int,int,int const *,int const *,char const *,double const *,double const *,int *)) 0 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXsetbranchnosolncallbackfunc", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXsetbranchnosolncallbackfunc" "', argument " "1"" of type '" "CPXENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXENVptr >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_f_p_q_const__cpxenv_p_void_int_p_void_int_int_int_int_p_q_const__int_p_q_const__int_p_q_const__char_p_q_const__double_p_q_const__double_p_int__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "CPXsetbranchnosolncallbackfunc" "', argument " "2"" of type '" "int (*)(CPXCENVptr,void *,int,void *,int,int,int,int,int const *,int const *,char const *,double const *,double const *,int *)""'"); 
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2],SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXsetbranchnosolncallbackfunc" "', argument " "3"" of type '" "void *""'"); 
  }
  {
    try {
      result = (int)CPXsetbranchnosolncallbackfunc(arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXsetdeletenodecallbackfunc(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXENVptr arg1 = (CPXENVptr) 0 ;
  void (*arg2)(CPXCENVptr,int,void *,int,void *) = (void (*)(CPXCENVptr,int,void *,int,void *)) 0 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXsetdeletenodecallbackfunc", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXsetdeletenodecallbackfunc" "', argument " "1"" of type '" "CPXENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXENVptr >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_f_p_q_const__cpxenv_int_p_void_int_p_void__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "CPXsetdeletenodecallbackfunc" "', argument " "2"" of type '" "void (*)(CPXCENVptr,int,void *,int,void *)""'"); 
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2],SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXsetdeletenodecallbackfunc" "', argument " "3"" of type '" "void *""'"); 
  }
  {
    try {
      result = (int)CPXsetdeletenodecallbackfunc(arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXsetheuristiccallbackfunc(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXENVptr arg1 = (CPXENVptr) 0 ;
  int (*arg2)(CPXCENVptr,void *,int,void *,double *,double *,int *,int *) = (int (*)(CPXCENVptr,void *,int,void *,double *,double *,int *,int *)) 0 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXsetheuristiccallbackfunc", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXsetheuristiccallbackfunc" "', argument " "1"" of type '" "CPXENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXENVptr >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_f_p_q_const__cpxenv_p_void_int_p_void_p_double_p_double_p_int_p_int__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "CPXsetheuristiccallbackfunc" "', argument " "2"" of type '" "int (*)(CPXCENVptr,void *,int,void *,double *,double *,int *,int *)""'"); 
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2],SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXsetheuristiccallbackfunc" "', argument " "3"" of type '" "void *""'"); 
  }
  {
    try {
      result = (int)CPXsetheuristiccallbackfunc(arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXsetincumbentcallbackfunc(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXENVptr arg1 = (CPXENVptr) 0 ;
  int (*arg2)(CPXCENVptr,void *,int,void *,double,double *,int *,int *) = (int (*)(CPXCENVptr,void *,int,void *,double,double *,int *,int *)) 0 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXsetincumbentcallbackfunc", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXsetincumbentcallbackfunc" "', argument " "1"" of type '" "CPXENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXENVptr >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_f_p_q_const__cpxenv_p_void_int_p_void_double_p_double_p_int_p_int__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "CPXsetincumbentcallbackfunc" "', argument " "2"" of type '" "int (*)(CPXCENVptr,void *,int,void *,double,double *,int *,int *)""'"); 
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2],SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXsetincumbentcallbackfunc" "', argument " "3"" of type '" "void *""'"); 
  }
  {
    try {
      result = (int)CPXsetincumbentcallbackfunc(arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXsetinfocallbackfunc(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXENVptr arg1 = (CPXENVptr) 0 ;
  int (*arg2)(CPXCENVptr,void *,int,void *) = (int (*)(CPXCENVptr,void *,int,void *)) 0 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXsetinfocallbackfunc", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXsetinfocallbackfunc" "', argument " "1"" of type '" "CPXENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXENVptr >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_f_p_q_const__cpxenv_p_void_int_p_void__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "CPXsetinfocallbackfunc" "', argument " "2"" of type '" "int (*)(CPXCENVptr,void *,int,void *)""'"); 
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2],SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXsetinfocallbackfunc" "', argument " "3"" of type '" "void *""'"); 
  }
  {
    try {
      result = (int)CPXsetinfocallbackfunc(arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXsetlazyconstraintcallbackfunc(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXENVptr arg1 = (CPXENVptr) 0 ;
  int (*arg2)(CPXCENVptr,void *,int,void *,int *) = (int (*)(CPXCENVptr,void *,int,void *,int *)) 0 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXsetlazyconstraintcallbackfunc", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXsetlazyconstraintcallbackfunc" "', argument " "1"" of type '" "CPXENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXENVptr >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_f_p_q_const__cpxenv_p_void_int_p_void_p_int__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "CPXsetlazyconstraintcallbackfunc" "', argument " "2"" of type '" "int (*)(CPXCENVptr,void *,int,void *,int *)""'"); 
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2],SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXsetlazyconstraintcallbackfunc" "', argument " "3"" of type '" "void *""'"); 
  }
  {
    try {
      result = (int)CPXsetlazyconstraintcallbackfunc(arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXsetmipcallbackfunc(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXENVptr arg1 = (CPXENVptr) 0 ;
  int (*arg2)(CPXCENVptr,void *,int,void *) = (int (*)(CPXCENVptr,void *,int,void *)) 0 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXsetmipcallbackfunc", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXsetmipcallbackfunc" "', argument " "1"" of type '" "CPXENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXENVptr >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_f_p_q_const__cpxenv_p_void_int_p_void__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "CPXsetmipcallbackfunc" "', argument " "2"" of type '" "int (*)(CPXCENVptr,void *,int,void *)""'"); 
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2],SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXsetmipcallbackfunc" "', argument " "3"" of type '" "void *""'"); 
  }
  {
    try {
      result = (int)CPXsetmipcallbackfunc(arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXsetnodecallbackfunc(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXENVptr arg1 = (CPXENVptr) 0 ;
  int (*arg2)(CPXCENVptr,void *,int,void *,int *,int *) = (int (*)(CPXCENVptr,void *,int,void *,int *,int *)) 0 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXsetnodecallbackfunc", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXsetnodecallbackfunc" "', argument " "1"" of type '" "CPXENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXENVptr >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_f_p_q_const__cpxenv_p_void_int_p_void_p_int_p_int__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "CPXsetnodecallbackfunc" "', argument " "2"" of type '" "int (*)(CPXCENVptr,void *,int,void *,int *,int *)""'"); 
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2],SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXsetnodecallbackfunc" "', argument " "3"" of type '" "void *""'"); 
  }
  {
    try {
      result = (int)CPXsetnodecallbackfunc(arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXsetsolvecallbackfunc(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXENVptr arg1 = (CPXENVptr) 0 ;
  int (*arg2)(CPXCENVptr,void *,int,void *,int *) = (int (*)(CPXCENVptr,void *,int,void *,int *)) 0 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXsetsolvecallbackfunc", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXsetsolvecallbackfunc" "', argument " "1"" of type '" "CPXENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXENVptr >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_f_p_q_const__cpxenv_p_void_int_p_void_p_int__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "CPXsetsolvecallbackfunc" "', argument " "2"" of type '" "int (*)(CPXCENVptr,void *,int,void *,int *)""'"); 
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2],SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXsetsolvecallbackfunc" "', argument " "3"" of type '" "void *""'"); 
  }
  {
    try {
      result = (int)CPXsetsolvecallbackfunc(arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXsetusercutcallbackfunc(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXENVptr arg1 = (CPXENVptr) 0 ;
  int (*arg2)(CPXCENVptr,void *,int,void *,int *) = (int (*)(CPXCENVptr,void *,int,void *,int *)) 0 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXsetusercutcallbackfunc", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXsetusercutcallbackfunc" "', argument " "1"" of type '" "CPXENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXENVptr >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_f_p_q_const__cpxenv_p_void_int_p_void_p_int__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "CPXsetusercutcallbackfunc" "', argument " "2"" of type '" "int (*)(CPXCENVptr,void *,int,void *,int *)""'"); 
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2],SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXsetusercutcallbackfunc" "', argument " "3"" of type '" "void *""'"); 
  }
  {
    try {
      result = (int)CPXsetusercutcallbackfunc(arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXwritemipstarts(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXwritemipstarts", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXwritemipstarts" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXwritemipstarts" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXwritemipstarts" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXwritemipstarts" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXwritemipstarts" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (int)CPXwritemipstarts((cpxenv const *)arg1,(cpxlp const *)arg2,(char const *)arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXaddindconstr(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  double arg6 ;
  int arg7 ;
  int *arg8 = (int *) 0 ;
  double *arg9 = (double *) 0 ;
  char *arg10 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  int res10 ;
  char *buf10 = 0 ;
  int alloc10 = 0 ;
  PyObject *swig_obj[10] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXaddindconstr", 10, 10, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXaddindconstr" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXaddindconstr" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXaddindconstr" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXaddindconstr" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXaddindconstr" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_double(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CPXaddindconstr" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_int(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "CPXaddindconstr" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[7])) {
      int size = (int)PyList_Size(swig_obj[7]);
      int i = 0;
      arg8 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[7], i);
        if (PyInt_Check(o)) {
          arg8[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg8);
          return NULL;
        }
      }
    }
    else if (swig_obj[7] == Py_None) {
      arg8 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[8])) {
      int size = (int)PyList_Size(swig_obj[8]);
      int i = 0;
      arg9 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[8], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg9[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg9);
          return NULL;
        }
      }
    }
    else if (swig_obj[8] == Py_None) {
      arg9 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res10 = SWIG_AsCharPtrAndSize(swig_obj[9], &buf10, NULL, &alloc10);
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "CPXaddindconstr" "', argument " "10"" of type '" "char const *""'");
  }
  arg10 = reinterpret_cast< char * >(buf10);
  {
    try {
      result = (int)CPXaddindconstr((cpxenv const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7,(int const *)arg8,(double const *)arg9,(char const *)arg10);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg8);
  }
  {
    free(arg9);
  }
  if (alloc10 == SWIG_NEWOBJ) delete[] buf10;
  return resultobj;
fail:
  {
    free(arg8);
  }
  {
    free(arg9);
  }
  if (alloc10 == SWIG_NEWOBJ) delete[] buf10;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXNETaddarcs(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXNETptr arg2 = (CPXNETptr) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  char **arg9 = (char **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  PyObject *swig_obj[9] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXNETaddarcs", 9, 9, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXNETaddarcs" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxnet, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXNETaddarcs" "', argument " "2"" of type '" "CPXNETptr""'"); 
  }
  arg2 = reinterpret_cast< CPXNETptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXNETaddarcs" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[3])) {
      int size = (int)PyList_Size(swig_obj[3]);
      int i = 0;
      arg4 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[3], i);
        if (PyInt_Check(o)) {
          arg4[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg4);
          return NULL;
        }
      }
    }
    else if (swig_obj[3] == Py_None) {
      arg4 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[4])) {
      int size = (int)PyList_Size(swig_obj[4]);
      int i = 0;
      arg5 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[4], i);
        if (PyInt_Check(o)) {
          arg5[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg5);
          return NULL;
        }
      }
    }
    else if (swig_obj[4] == Py_None) {
      arg5 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[5])) {
      int size = (int)PyList_Size(swig_obj[5]);
      int i = 0;
      arg6 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[5], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg6[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg6);
          return NULL;
        }
      }
    }
    else if (swig_obj[5] == Py_None) {
      arg6 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[6])) {
      int size = (int)PyList_Size(swig_obj[6]);
      int i = 0;
      arg7 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[6], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg7[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg7);
          return NULL;
        }
      }
    }
    else if (swig_obj[6] == Py_None) {
      arg7 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[7])) {
      int size = (int)PyList_Size(swig_obj[7]);
      int i = 0;
      arg8 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[7], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg8[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg8);
          return NULL;
        }
      }
    }
    else if (swig_obj[7] == Py_None) {
      arg8 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res9 = SWIG_ConvertPtr(swig_obj[8], &argp9,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "CPXNETaddarcs" "', argument " "9"" of type '" "char **""'"); 
  }
  arg9 = reinterpret_cast< char ** >(argp9);
  {
    try {
      result = (int)CPXNETaddarcs((cpxenv const *)arg1,arg2,arg3,(int const *)arg4,(int const *)arg5,(double const *)arg6,(double const *)arg7,(double const *)arg8,arg9);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg4);
  }
  {
    free(arg5);
  }
  {
    free(arg6);
  }
  {
    free(arg7);
  }
  {
    free(arg8);
  }
  return resultobj;
fail:
  {
    free(arg4);
  }
  {
    free(arg5);
  }
  {
    free(arg6);
  }
  {
    free(arg7);
  }
  {
    free(arg8);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXNETaddnodes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXNETptr arg2 = (CPXNETptr) 0 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  char **arg5 = (char **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXNETaddnodes", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXNETaddnodes" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxnet, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXNETaddnodes" "', argument " "2"" of type '" "CPXNETptr""'"); 
  }
  arg2 = reinterpret_cast< CPXNETptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXNETaddnodes" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[3])) {
      int size = (int)PyList_Size(swig_obj[3]);
      int i = 0;
      arg4 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[3], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg4[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg4);
          return NULL;
        }
      }
    }
    else if (swig_obj[3] == Py_None) {
      arg4 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXNETaddnodes" "', argument " "5"" of type '" "char **""'"); 
  }
  arg5 = reinterpret_cast< char ** >(argp5);
  {
    try {
      result = (int)CPXNETaddnodes((cpxenv const *)arg1,arg2,arg3,(double const *)arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg4);
  }
  return resultobj;
fail:
  {
    free(arg4);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXNETbasewrite(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCNETptr arg2 = (CPXCNETptr) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXNETbasewrite", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXNETbasewrite" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxnet, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXNETbasewrite" "', argument " "2"" of type '" "CPXCNETptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCNETptr >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXNETbasewrite" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try {
      result = (int)CPXNETbasewrite((cpxenv const *)arg1,(cpxnet const *)arg2,(char const *)arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXNETchgarcname(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXNETptr arg2 = (CPXNETptr) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  char **arg5 = (char **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXNETchgarcname", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXNETchgarcname" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxnet, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXNETchgarcname" "', argument " "2"" of type '" "CPXNETptr""'"); 
  }
  arg2 = reinterpret_cast< CPXNETptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXNETchgarcname" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[3])) {
      int size = (int)PyList_Size(swig_obj[3]);
      int i = 0;
      arg4 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[3], i);
        if (PyInt_Check(o)) {
          arg4[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg4);
          return NULL;
        }
      }
    }
    else if (swig_obj[3] == Py_None) {
      arg4 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXNETchgarcname" "', argument " "5"" of type '" "char **""'"); 
  }
  arg5 = reinterpret_cast< char ** >(argp5);
  {
    try {
      result = (int)CPXNETchgarcname((cpxenv const *)arg1,arg2,arg3,(int const *)arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg4);
  }
  return resultobj;
fail:
  {
    free(arg4);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXNETchgarcnodes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXNETptr arg2 = (CPXNETptr) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  int *arg6 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[6] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXNETchgarcnodes", 6, 6, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXNETchgarcnodes" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxnet, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXNETchgarcnodes" "', argument " "2"" of type '" "CPXNETptr""'"); 
  }
  arg2 = reinterpret_cast< CPXNETptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXNETchgarcnodes" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[3])) {
      int size = (int)PyList_Size(swig_obj[3]);
      int i = 0;
      arg4 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[3], i);
        if (PyInt_Check(o)) {
          arg4[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg4);
          return NULL;
        }
      }
    }
    else if (swig_obj[3] == Py_None) {
      arg4 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[4])) {
      int size = (int)PyList_Size(swig_obj[4]);
      int i = 0;
      arg5 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[4], i);
        if (PyInt_Check(o)) {
          arg5[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg5);
          return NULL;
        }
      }
    }
    else if (swig_obj[4] == Py_None) {
      arg5 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[5])) {
      int size = (int)PyList_Size(swig_obj[5]);
      int i = 0;
      arg6 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[5], i);
        if (PyInt_Check(o)) {
          arg6[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg6);
          return NULL;
        }
      }
    }
    else if (swig_obj[5] == Py_None) {
      arg6 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    try {
      result = (int)CPXNETchgarcnodes((cpxenv const *)arg1,arg2,arg3,(int const *)arg4,(int const *)arg5,(int const *)arg6);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg4);
  }
  {
    free(arg5);
  }
  {
    free(arg6);
  }
  return resultobj;
fail:
  {
    free(arg4);
  }
  {
    free(arg5);
  }
  {
    free(arg6);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXNETchgbds(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXNETptr arg2 = (CPXNETptr) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  char *arg5 = (char *) 0 ;
  double *arg6 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  PyObject *swig_obj[6] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXNETchgbds", 6, 6, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXNETchgbds" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxnet, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXNETchgbds" "', argument " "2"" of type '" "CPXNETptr""'"); 
  }
  arg2 = reinterpret_cast< CPXNETptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXNETchgbds" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[3])) {
      int size = (int)PyList_Size(swig_obj[3]);
      int i = 0;
      arg4 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[3], i);
        if (PyInt_Check(o)) {
          arg4[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg4);
          return NULL;
        }
      }
    }
    else if (swig_obj[3] == Py_None) {
      arg4 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res5 = SWIG_AsCharPtrAndSize(swig_obj[4], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXNETchgbds" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = reinterpret_cast< char * >(buf5);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[5])) {
      int size = (int)PyList_Size(swig_obj[5]);
      int i = 0;
      arg6 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[5], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg6[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg6);
          return NULL;
        }
      }
    }
    else if (swig_obj[5] == Py_None) {
      arg6 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    try {
      result = (int)CPXNETchgbds((cpxenv const *)arg1,arg2,arg3,(int const *)arg4,(char const *)arg5,(double const *)arg6);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg4);
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  {
    free(arg6);
  }
  return resultobj;
fail:
  {
    free(arg4);
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  {
    free(arg6);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXNETchgname(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXNETptr arg2 = (CPXNETptr) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXNETchgname", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXNETchgname" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxnet, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXNETchgname" "', argument " "2"" of type '" "CPXNETptr""'"); 
  }
  arg2 = reinterpret_cast< CPXNETptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXNETchgname" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXNETchgname" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_AsCharPtrAndSize(swig_obj[4], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXNETchgname" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = reinterpret_cast< char * >(buf5);
  {
    try {
      result = (int)CPXNETchgname((cpxenv const *)arg1,arg2,arg3,arg4,(char const *)arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return resultobj;
fail:
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXNETchgnodename(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXNETptr arg2 = (CPXNETptr) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  char **arg5 = (char **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXNETchgnodename", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXNETchgnodename" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxnet, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXNETchgnodename" "', argument " "2"" of type '" "CPXNETptr""'"); 
  }
  arg2 = reinterpret_cast< CPXNETptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXNETchgnodename" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[3])) {
      int size = (int)PyList_Size(swig_obj[3]);
      int i = 0;
      arg4 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[3], i);
        if (PyInt_Check(o)) {
          arg4[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg4);
          return NULL;
        }
      }
    }
    else if (swig_obj[3] == Py_None) {
      arg4 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXNETchgnodename" "', argument " "5"" of type '" "char **""'"); 
  }
  arg5 = reinterpret_cast< char ** >(argp5);
  {
    try {
      result = (int)CPXNETchgnodename((cpxenv const *)arg1,arg2,arg3,(int const *)arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg4);
  }
  return resultobj;
fail:
  {
    free(arg4);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXNETchgobj(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXNETptr arg2 = (CPXNETptr) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  double *arg5 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXNETchgobj", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXNETchgobj" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxnet, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXNETchgobj" "', argument " "2"" of type '" "CPXNETptr""'"); 
  }
  arg2 = reinterpret_cast< CPXNETptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXNETchgobj" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[3])) {
      int size = (int)PyList_Size(swig_obj[3]);
      int i = 0;
      arg4 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[3], i);
        if (PyInt_Check(o)) {
          arg4[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg4);
          return NULL;
        }
      }
    }
    else if (swig_obj[3] == Py_None) {
      arg4 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[4])) {
      int size = (int)PyList_Size(swig_obj[4]);
      int i = 0;
      arg5 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[4], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg5[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg5);
          return NULL;
        }
      }
    }
    else if (swig_obj[4] == Py_None) {
      arg5 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    try {
      result = (int)CPXNETchgobj((cpxenv const *)arg1,arg2,arg3,(int const *)arg4,(double const *)arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg4);
  }
  {
    free(arg5);
  }
  return resultobj;
fail:
  {
    free(arg4);
  }
  {
    free(arg5);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXNETchgobjsen(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXNETptr arg2 = (CPXNETptr) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXNETchgobjsen", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXNETchgobjsen" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxnet, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXNETchgobjsen" "', argument " "2"" of type '" "CPXNETptr""'"); 
  }
  arg2 = reinterpret_cast< CPXNETptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXNETchgobjsen" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (int)CPXNETchgobjsen((cpxenv const *)arg1,arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXNETchgsupply(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXNETptr arg2 = (CPXNETptr) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  double *arg5 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXNETchgsupply", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXNETchgsupply" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxnet, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXNETchgsupply" "', argument " "2"" of type '" "CPXNETptr""'"); 
  }
  arg2 = reinterpret_cast< CPXNETptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXNETchgsupply" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[3])) {
      int size = (int)PyList_Size(swig_obj[3]);
      int i = 0;
      arg4 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[3], i);
        if (PyInt_Check(o)) {
          arg4[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg4);
          return NULL;
        }
      }
    }
    else if (swig_obj[3] == Py_None) {
      arg4 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[4])) {
      int size = (int)PyList_Size(swig_obj[4]);
      int i = 0;
      arg5 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[4], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg5[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg5);
          return NULL;
        }
      }
    }
    else if (swig_obj[4] == Py_None) {
      arg5 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    try {
      result = (int)CPXNETchgsupply((cpxenv const *)arg1,arg2,arg3,(int const *)arg4,(double const *)arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg4);
  }
  {
    free(arg5);
  }
  return resultobj;
fail:
  {
    free(arg4);
  }
  {
    free(arg5);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXNETcopybase(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXNETptr arg2 = (CPXNETptr) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXNETcopybase", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXNETcopybase" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxnet, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXNETcopybase" "', argument " "2"" of type '" "CPXNETptr""'"); 
  }
  arg2 = reinterpret_cast< CPXNETptr >(argp2);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[2])) {
      int size = (int)PyList_Size(swig_obj[2]);
      int i = 0;
      arg3 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[2], i);
        if (PyInt_Check(o)) {
          arg3[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg3);
          return NULL;
        }
      }
    }
    else if (swig_obj[2] == Py_None) {
      arg3 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[3])) {
      int size = (int)PyList_Size(swig_obj[3]);
      int i = 0;
      arg4 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[3], i);
        if (PyInt_Check(o)) {
          arg4[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg4);
          return NULL;
        }
      }
    }
    else if (swig_obj[3] == Py_None) {
      arg4 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    try {
      result = (int)CPXNETcopybase((cpxenv const *)arg1,arg2,(int const *)arg3,(int const *)arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg3);
  }
  {
    free(arg4);
  }
  return resultobj;
fail:
  {
    free(arg3);
  }
  {
    free(arg4);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXNETcopynet(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXNETptr arg2 = (CPXNETptr) 0 ;
  int arg3 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  char **arg6 = (char **) 0 ;
  int arg7 ;
  int *arg8 = (int *) 0 ;
  int *arg9 = (int *) 0 ;
  double *arg10 = (double *) 0 ;
  double *arg11 = (double *) 0 ;
  double *arg12 = (double *) 0 ;
  char **arg13 = (char **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  void *argp13 = 0 ;
  int res13 = 0 ;
  PyObject *swig_obj[13] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXNETcopynet", 13, 13, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXNETcopynet" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxnet, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXNETcopynet" "', argument " "2"" of type '" "CPXNETptr""'"); 
  }
  arg2 = reinterpret_cast< CPXNETptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXNETcopynet" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXNETcopynet" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[4])) {
      int size = (int)PyList_Size(swig_obj[4]);
      int i = 0;
      arg5 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[4], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg5[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg5);
          return NULL;
        }
      }
    }
    else if (swig_obj[4] == Py_None) {
      arg5 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res6 = SWIG_ConvertPtr(swig_obj[5], &argp6,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CPXNETcopynet" "', argument " "6"" of type '" "char **""'"); 
  }
  arg6 = reinterpret_cast< char ** >(argp6);
  ecode7 = SWIG_AsVal_int(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "CPXNETcopynet" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[7])) {
      int size = (int)PyList_Size(swig_obj[7]);
      int i = 0;
      arg8 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[7], i);
        if (PyInt_Check(o)) {
          arg8[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg8);
          return NULL;
        }
      }
    }
    else if (swig_obj[7] == Py_None) {
      arg8 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[8])) {
      int size = (int)PyList_Size(swig_obj[8]);
      int i = 0;
      arg9 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[8], i);
        if (PyInt_Check(o)) {
          arg9[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg9);
          return NULL;
        }
      }
    }
    else if (swig_obj[8] == Py_None) {
      arg9 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[9])) {
      int size = (int)PyList_Size(swig_obj[9]);
      int i = 0;
      arg10 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[9], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg10[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg10);
          return NULL;
        }
      }
    }
    else if (swig_obj[9] == Py_None) {
      arg10 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[10])) {
      int size = (int)PyList_Size(swig_obj[10]);
      int i = 0;
      arg11 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[10], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg11[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg11);
          return NULL;
        }
      }
    }
    else if (swig_obj[10] == Py_None) {
      arg11 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[11])) {
      int size = (int)PyList_Size(swig_obj[11]);
      int i = 0;
      arg12 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[11], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg12[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg12);
          return NULL;
        }
      }
    }
    else if (swig_obj[11] == Py_None) {
      arg12 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res13 = SWIG_ConvertPtr(swig_obj[12], &argp13,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res13)) {
    SWIG_exception_fail(SWIG_ArgError(res13), "in method '" "CPXNETcopynet" "', argument " "13"" of type '" "char **""'"); 
  }
  arg13 = reinterpret_cast< char ** >(argp13);
  {
    try {
      result = (int)CPXNETcopynet((cpxenv const *)arg1,arg2,arg3,arg4,(double const *)arg5,arg6,arg7,(int const *)arg8,(int const *)arg9,(double const *)arg10,(double const *)arg11,(double const *)arg12,arg13);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg5);
  }
  {
    free(arg8);
  }
  {
    free(arg9);
  }
  {
    free(arg10);
  }
  {
    free(arg11);
  }
  {
    free(arg12);
  }
  return resultobj;
fail:
  {
    free(arg5);
  }
  {
    free(arg8);
  }
  {
    free(arg9);
  }
  {
    free(arg10);
  }
  {
    free(arg11);
  }
  {
    free(arg12);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXNETcreateprob(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXENVptr arg1 = (CPXENVptr) 0 ;
  int *arg2 = (int *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject *swig_obj[3] ;
  CPXNETptr result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXNETcreateprob", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXNETcreateprob" "', argument " "1"" of type '" "CPXENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXNETcreateprob" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXNETcreateprob" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try {
      result = (CPXNETptr)CPXNETcreateprob(arg1,arg2,(char const *)arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpxnet, 0 |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXNETdelarcs(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXNETptr arg2 = (CPXNETptr) 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXNETdelarcs", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXNETdelarcs" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxnet, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXNETdelarcs" "', argument " "2"" of type '" "CPXNETptr""'"); 
  }
  arg2 = reinterpret_cast< CPXNETptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXNETdelarcs" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXNETdelarcs" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (int)CPXNETdelarcs((cpxenv const *)arg1,arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXNETdelnodes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXNETptr arg2 = (CPXNETptr) 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXNETdelnodes", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXNETdelnodes" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxnet, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXNETdelnodes" "', argument " "2"" of type '" "CPXNETptr""'"); 
  }
  arg2 = reinterpret_cast< CPXNETptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXNETdelnodes" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXNETdelnodes" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (int)CPXNETdelnodes((cpxenv const *)arg1,arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXNETdelset(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXNETptr arg2 = (CPXNETptr) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXNETdelset", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXNETdelset" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxnet, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXNETdelset" "', argument " "2"" of type '" "CPXNETptr""'"); 
  }
  arg2 = reinterpret_cast< CPXNETptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXNETdelset" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXNETdelset" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  {
    try {
      result = (int)CPXNETdelset((cpxenv const *)arg1,arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXNETfreeprob(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXENVptr arg1 = (CPXENVptr) 0 ;
  CPXNETptr *arg2 = (CPXNETptr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXNETfreeprob", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXNETfreeprob" "', argument " "1"" of type '" "CPXENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_p_cpxnet, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXNETfreeprob" "', argument " "2"" of type '" "CPXNETptr *""'"); 
  }
  arg2 = reinterpret_cast< CPXNETptr * >(argp2);
  {
    try {
      result = (int)CPXNETfreeprob(arg1,arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXNETgetarcindex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCNETptr arg2 = (CPXCNETptr) 0 ;
  char *arg3 = (char *) 0 ;
  int *arg4 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXNETgetarcindex", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXNETgetarcindex" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxnet, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXNETgetarcindex" "', argument " "2"" of type '" "CPXCNETptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCNETptr >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXNETgetarcindex" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXNETgetarcindex" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  {
    try {
      result = (int)CPXNETgetarcindex((cpxenv const *)arg1,(cpxnet const *)arg2,(char const *)arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXNETgetarcname(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCNETptr arg2 = (CPXCNETptr) 0 ;
  char **arg3 = (char **) 0 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  int *arg6 = (int *) 0 ;
  int arg7 ;
  int arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  PyObject *swig_obj[8] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXNETgetarcname", 8, 8, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXNETgetarcname" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxnet, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXNETgetarcname" "', argument " "2"" of type '" "CPXCNETptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCNETptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXNETgetarcname" "', argument " "3"" of type '" "char **""'"); 
  }
  arg3 = reinterpret_cast< char ** >(argp3);
  res4 = SWIG_AsCharPtrAndSize(swig_obj[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXNETgetarcname" "', argument " "4"" of type '" "char *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXNETgetarcname" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  res6 = SWIG_ConvertPtr(swig_obj[5], &argp6,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CPXNETgetarcname" "', argument " "6"" of type '" "int *""'"); 
  }
  arg6 = reinterpret_cast< int * >(argp6);
  ecode7 = SWIG_AsVal_int(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "CPXNETgetarcname" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  ecode8 = SWIG_AsVal_int(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "CPXNETgetarcname" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  {
    try {
      result = (int)CPXNETgetarcname((cpxenv const *)arg1,(cpxnet const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXNETgetarcnodes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCNETptr arg2 = (CPXCNETptr) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject *swig_obj[6] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXNETgetarcnodes", 6, 6, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXNETgetarcnodes" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxnet, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXNETgetarcnodes" "', argument " "2"" of type '" "CPXCNETptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCNETptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXNETgetarcnodes" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXNETgetarcnodes" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXNETgetarcnodes" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CPXNETgetarcnodes" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    try {
      result = (int)CPXNETgetarcnodes((cpxenv const *)arg1,(cpxnet const *)arg2,arg3,arg4,arg5,arg6);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXNETgetbase(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCNETptr arg2 = (CPXCNETptr) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXNETgetbase", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXNETgetbase" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxnet, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXNETgetbase" "', argument " "2"" of type '" "CPXCNETptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCNETptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXNETgetbase" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXNETgetbase" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  {
    try {
      result = (int)CPXNETgetbase((cpxenv const *)arg1,(cpxnet const *)arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXNETgetdj(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCNETptr arg2 = (CPXCNETptr) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXNETgetdj", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXNETgetdj" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxnet, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXNETgetdj" "', argument " "2"" of type '" "CPXCNETptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCNETptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXNETgetdj" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXNETgetdj" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXNETgetdj" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (int)CPXNETgetdj((cpxenv const *)arg1,(cpxnet const *)arg2,arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXNETgetitcnt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCNETptr arg2 = (CPXCNETptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXNETgetitcnt", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXNETgetitcnt" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxnet, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXNETgetitcnt" "', argument " "2"" of type '" "CPXCNETptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCNETptr >(argp2);
  {
    try {
      result = (int)CPXNETgetitcnt((cpxenv const *)arg1,(cpxnet const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXNETgetlb(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCNETptr arg2 = (CPXCNETptr) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXNETgetlb", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXNETgetlb" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxnet, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXNETgetlb" "', argument " "2"" of type '" "CPXCNETptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCNETptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXNETgetlb" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXNETgetlb" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXNETgetlb" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (int)CPXNETgetlb((cpxenv const *)arg1,(cpxnet const *)arg2,arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXNETgetnodearcs(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCNETptr arg2 = (CPXCNETptr) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  int arg6 ;
  int *arg7 = (int *) 0 ;
  int arg8 ;
  int arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  PyObject *swig_obj[9] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXNETgetnodearcs", 9, 9, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXNETgetnodearcs" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxnet, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXNETgetnodearcs" "', argument " "2"" of type '" "CPXCNETptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCNETptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXNETgetnodearcs" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXNETgetnodearcs" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXNETgetnodearcs" "', argument " "5"" of type '" "int *""'"); 
  }
  arg5 = reinterpret_cast< int * >(argp5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CPXNETgetnodearcs" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  res7 = SWIG_ConvertPtr(swig_obj[6], &argp7,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "CPXNETgetnodearcs" "', argument " "7"" of type '" "int *""'"); 
  }
  arg7 = reinterpret_cast< int * >(argp7);
  ecode8 = SWIG_AsVal_int(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "CPXNETgetnodearcs" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  ecode9 = SWIG_AsVal_int(swig_obj[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "CPXNETgetnodearcs" "', argument " "9"" of type '" "int""'");
  } 
  arg9 = static_cast< int >(val9);
  {
    try {
      result = (int)CPXNETgetnodearcs((cpxenv const *)arg1,(cpxnet const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXNETgetnodeindex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCNETptr arg2 = (CPXCNETptr) 0 ;
  char *arg3 = (char *) 0 ;
  int *arg4 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXNETgetnodeindex", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXNETgetnodeindex" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxnet, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXNETgetnodeindex" "', argument " "2"" of type '" "CPXCNETptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCNETptr >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXNETgetnodeindex" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXNETgetnodeindex" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  {
    try {
      result = (int)CPXNETgetnodeindex((cpxenv const *)arg1,(cpxnet const *)arg2,(char const *)arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXNETgetnodename(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCNETptr arg2 = (CPXCNETptr) 0 ;
  char **arg3 = (char **) 0 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  int *arg6 = (int *) 0 ;
  int arg7 ;
  int arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  PyObject *swig_obj[8] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXNETgetnodename", 8, 8, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXNETgetnodename" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxnet, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXNETgetnodename" "', argument " "2"" of type '" "CPXCNETptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCNETptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXNETgetnodename" "', argument " "3"" of type '" "char **""'"); 
  }
  arg3 = reinterpret_cast< char ** >(argp3);
  res4 = SWIG_AsCharPtrAndSize(swig_obj[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXNETgetnodename" "', argument " "4"" of type '" "char *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXNETgetnodename" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  res6 = SWIG_ConvertPtr(swig_obj[5], &argp6,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CPXNETgetnodename" "', argument " "6"" of type '" "int *""'"); 
  }
  arg6 = reinterpret_cast< int * >(argp6);
  ecode7 = SWIG_AsVal_int(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "CPXNETgetnodename" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  ecode8 = SWIG_AsVal_int(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "CPXNETgetnodename" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  {
    try {
      result = (int)CPXNETgetnodename((cpxenv const *)arg1,(cpxnet const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXNETgetnumarcs(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCNETptr arg2 = (CPXCNETptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXNETgetnumarcs", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXNETgetnumarcs" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxnet, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXNETgetnumarcs" "', argument " "2"" of type '" "CPXCNETptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCNETptr >(argp2);
  {
    try {
      result = (int)CPXNETgetnumarcs((cpxenv const *)arg1,(cpxnet const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXNETgetnumnodes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCNETptr arg2 = (CPXCNETptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXNETgetnumnodes", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXNETgetnumnodes" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxnet, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXNETgetnumnodes" "', argument " "2"" of type '" "CPXCNETptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCNETptr >(argp2);
  {
    try {
      result = (int)CPXNETgetnumnodes((cpxenv const *)arg1,(cpxnet const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXNETgetobj(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCNETptr arg2 = (CPXCNETptr) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXNETgetobj", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXNETgetobj" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxnet, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXNETgetobj" "', argument " "2"" of type '" "CPXCNETptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCNETptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXNETgetobj" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXNETgetobj" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXNETgetobj" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (int)CPXNETgetobj((cpxenv const *)arg1,(cpxnet const *)arg2,arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXNETgetobjsen(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCNETptr arg2 = (CPXCNETptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXNETgetobjsen", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXNETgetobjsen" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxnet, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXNETgetobjsen" "', argument " "2"" of type '" "CPXCNETptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCNETptr >(argp2);
  {
    try {
      result = (int)CPXNETgetobjsen((cpxenv const *)arg1,(cpxnet const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXNETgetobjval(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCNETptr arg2 = (CPXCNETptr) 0 ;
  double *arg3 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXNETgetobjval", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXNETgetobjval" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxnet, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXNETgetobjval" "', argument " "2"" of type '" "CPXCNETptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCNETptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXNETgetobjval" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  {
    try {
      result = (int)CPXNETgetobjval((cpxenv const *)arg1,(cpxnet const *)arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXNETgetphase1cnt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCNETptr arg2 = (CPXCNETptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXNETgetphase1cnt", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXNETgetphase1cnt" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxnet, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXNETgetphase1cnt" "', argument " "2"" of type '" "CPXCNETptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCNETptr >(argp2);
  {
    try {
      result = (int)CPXNETgetphase1cnt((cpxenv const *)arg1,(cpxnet const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXNETgetpi(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCNETptr arg2 = (CPXCNETptr) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXNETgetpi", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXNETgetpi" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxnet, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXNETgetpi" "', argument " "2"" of type '" "CPXCNETptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCNETptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXNETgetpi" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXNETgetpi" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXNETgetpi" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (int)CPXNETgetpi((cpxenv const *)arg1,(cpxnet const *)arg2,arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXNETgetprobname(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCNETptr arg2 = (CPXCNETptr) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXNETgetprobname", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXNETgetprobname" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxnet, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXNETgetprobname" "', argument " "2"" of type '" "CPXCNETptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCNETptr >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXNETgetprobname" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXNETgetprobname" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXNETgetprobname" "', argument " "5"" of type '" "int *""'"); 
  }
  arg5 = reinterpret_cast< int * >(argp5);
  {
    try {
      result = (int)CPXNETgetprobname((cpxenv const *)arg1,(cpxnet const *)arg2,arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXNETgetslack(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCNETptr arg2 = (CPXCNETptr) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXNETgetslack", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXNETgetslack" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxnet, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXNETgetslack" "', argument " "2"" of type '" "CPXCNETptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCNETptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXNETgetslack" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXNETgetslack" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXNETgetslack" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (int)CPXNETgetslack((cpxenv const *)arg1,(cpxnet const *)arg2,arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXNETgetstat(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCNETptr arg2 = (CPXCNETptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXNETgetstat", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXNETgetstat" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxnet, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXNETgetstat" "', argument " "2"" of type '" "CPXCNETptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCNETptr >(argp2);
  {
    try {
      result = (int)CPXNETgetstat((cpxenv const *)arg1,(cpxnet const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXNETgetsupply(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCNETptr arg2 = (CPXCNETptr) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXNETgetsupply", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXNETgetsupply" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxnet, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXNETgetsupply" "', argument " "2"" of type '" "CPXCNETptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCNETptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXNETgetsupply" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXNETgetsupply" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXNETgetsupply" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (int)CPXNETgetsupply((cpxenv const *)arg1,(cpxnet const *)arg2,arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXNETgetub(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCNETptr arg2 = (CPXCNETptr) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXNETgetub", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXNETgetub" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxnet, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXNETgetub" "', argument " "2"" of type '" "CPXCNETptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCNETptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXNETgetub" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXNETgetub" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXNETgetub" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (int)CPXNETgetub((cpxenv const *)arg1,(cpxnet const *)arg2,arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXNETgetx(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCNETptr arg2 = (CPXCNETptr) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXNETgetx", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXNETgetx" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxnet, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXNETgetx" "', argument " "2"" of type '" "CPXCNETptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCNETptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXNETgetx" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXNETgetx" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXNETgetx" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (int)CPXNETgetx((cpxenv const *)arg1,(cpxnet const *)arg2,arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXNETprimopt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXNETptr arg2 = (CPXNETptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXNETprimopt", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXNETprimopt" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxnet, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXNETprimopt" "', argument " "2"" of type '" "CPXNETptr""'"); 
  }
  arg2 = reinterpret_cast< CPXNETptr >(argp2);
  {
    try {
      result = (int)CPXNETprimopt((cpxenv const *)arg1,arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXNETreadcopybase(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXNETptr arg2 = (CPXNETptr) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXNETreadcopybase", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXNETreadcopybase" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxnet, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXNETreadcopybase" "', argument " "2"" of type '" "CPXNETptr""'"); 
  }
  arg2 = reinterpret_cast< CPXNETptr >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXNETreadcopybase" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try {
      result = (int)CPXNETreadcopybase((cpxenv const *)arg1,arg2,(char const *)arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXNETreadcopyprob(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXNETptr arg2 = (CPXNETptr) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXNETreadcopyprob", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXNETreadcopyprob" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxnet, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXNETreadcopyprob" "', argument " "2"" of type '" "CPXNETptr""'"); 
  }
  arg2 = reinterpret_cast< CPXNETptr >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXNETreadcopyprob" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try {
      result = (int)CPXNETreadcopyprob((cpxenv const *)arg1,arg2,(char const *)arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXNETsolninfo(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCNETptr arg2 = (CPXCNETptr) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXNETsolninfo", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXNETsolninfo" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxnet, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXNETsolninfo" "', argument " "2"" of type '" "CPXCNETptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCNETptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXNETsolninfo" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXNETsolninfo" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  {
    try {
      result = (int)CPXNETsolninfo((cpxenv const *)arg1,(cpxnet const *)arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXNETsolution(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCNETptr arg2 = (CPXCNETptr) 0 ;
  int *arg3 = (int *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  PyObject *swig_obj[8] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXNETsolution", 8, 8, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXNETsolution" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxnet, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXNETsolution" "', argument " "2"" of type '" "CPXCNETptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCNETptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXNETsolution" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXNETsolution" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXNETsolution" "', argument " "5"" of type '" "double *""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(swig_obj[5], &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CPXNETsolution" "', argument " "6"" of type '" "double *""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  res7 = SWIG_ConvertPtr(swig_obj[6], &argp7,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "CPXNETsolution" "', argument " "7"" of type '" "double *""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  res8 = SWIG_ConvertPtr(swig_obj[7], &argp8,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "CPXNETsolution" "', argument " "8"" of type '" "double *""'"); 
  }
  arg8 = reinterpret_cast< double * >(argp8);
  {
    try {
      result = (int)CPXNETsolution((cpxenv const *)arg1,(cpxnet const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXNETwriteprob(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCNETptr arg2 = (CPXCNETptr) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXNETwriteprob", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXNETwriteprob" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxnet, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXNETwriteprob" "', argument " "2"" of type '" "CPXCNETptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCNETptr >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXNETwriteprob" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(swig_obj[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXNETwriteprob" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  {
    try {
      result = (int)CPXNETwriteprob((cpxenv const *)arg1,(cpxnet const *)arg2,(char const *)arg3,(char const *)arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXchgqpcoef(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  int arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXchgqpcoef", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXchgqpcoef" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXchgqpcoef" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXchgqpcoef" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXchgqpcoef" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXchgqpcoef" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      result = (int)CPXchgqpcoef((cpxenv const *)arg1,arg2,arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXcopyqpsep(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  double *arg3 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXcopyqpsep", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXcopyqpsep" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXcopyqpsep" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[2])) {
      int size = (int)PyList_Size(swig_obj[2]);
      int i = 0;
      arg3 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[2], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg3[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg3);
          return NULL;
        }
      }
    }
    else if (swig_obj[2] == Py_None) {
      arg3 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    try {
      result = (int)CPXcopyqpsep((cpxenv const *)arg1,arg2,(double const *)arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg3);
  }
  return resultobj;
fail:
  {
    free(arg3);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXcopyquad(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  double *arg6 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[6] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXcopyquad", 6, 6, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXcopyquad" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXcopyquad" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[2])) {
      int size = (int)PyList_Size(swig_obj[2]);
      int i = 0;
      arg3 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[2], i);
        if (PyInt_Check(o)) {
          arg3[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg3);
          return NULL;
        }
      }
    }
    else if (swig_obj[2] == Py_None) {
      arg3 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[3])) {
      int size = (int)PyList_Size(swig_obj[3]);
      int i = 0;
      arg4 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[3], i);
        if (PyInt_Check(o)) {
          arg4[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg4);
          return NULL;
        }
      }
    }
    else if (swig_obj[3] == Py_None) {
      arg4 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[4])) {
      int size = (int)PyList_Size(swig_obj[4]);
      int i = 0;
      arg5 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[4], i);
        if (PyInt_Check(o)) {
          arg5[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg5);
          return NULL;
        }
      }
    }
    else if (swig_obj[4] == Py_None) {
      arg5 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[5])) {
      int size = (int)PyList_Size(swig_obj[5]);
      int i = 0;
      arg6 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[5], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg6[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg6);
          return NULL;
        }
      }
    }
    else if (swig_obj[5] == Py_None) {
      arg6 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    try {
      result = (int)CPXcopyquad((cpxenv const *)arg1,arg2,(int const *)arg3,(int const *)arg4,(int const *)arg5,(double const *)arg6);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg3);
  }
  {
    free(arg4);
  }
  {
    free(arg5);
  }
  {
    free(arg6);
  }
  return resultobj;
fail:
  {
    free(arg3);
  }
  {
    free(arg4);
  }
  {
    free(arg5);
  }
  {
    free(arg6);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetnumqpnz(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetnumqpnz", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetnumqpnz" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetnumqpnz" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  {
    try {
      result = (int)CPXgetnumqpnz((cpxenv const *)arg1,(cpxlp const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetnumquad(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetnumquad", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetnumquad" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetnumquad" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  {
    try {
      result = (int)CPXgetnumquad((cpxenv const *)arg1,(cpxlp const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetqpcoef(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int arg3 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetqpcoef", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetqpcoef" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetqpcoef" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXgetqpcoef" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXgetqpcoef" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXgetqpcoef" "', argument " "5"" of type '" "double *""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  {
    try {
      result = (int)CPXgetqpcoef((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetquad(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  double *arg6 = (double *) 0 ;
  int arg7 ;
  int *arg8 = (int *) 0 ;
  int arg9 ;
  int arg10 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  int val10 ;
  int ecode10 = 0 ;
  PyObject *swig_obj[10] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetquad", 10, 10, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetquad" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetquad" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetquad" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetquad" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXgetquad" "', argument " "5"" of type '" "int *""'"); 
  }
  arg5 = reinterpret_cast< int * >(argp5);
  res6 = SWIG_ConvertPtr(swig_obj[5], &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CPXgetquad" "', argument " "6"" of type '" "double *""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  ecode7 = SWIG_AsVal_int(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "CPXgetquad" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  res8 = SWIG_ConvertPtr(swig_obj[7], &argp8,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "CPXgetquad" "', argument " "8"" of type '" "int *""'"); 
  }
  arg8 = reinterpret_cast< int * >(argp8);
  ecode9 = SWIG_AsVal_int(swig_obj[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "CPXgetquad" "', argument " "9"" of type '" "int""'");
  } 
  arg9 = static_cast< int >(val9);
  ecode10 = SWIG_AsVal_int(swig_obj[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "CPXgetquad" "', argument " "10"" of type '" "int""'");
  } 
  arg10 = static_cast< int >(val10);
  {
    try {
      result = (int)CPXgetquad((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXqpindefcertificate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  double *arg3 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXqpindefcertificate", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXqpindefcertificate" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXqpindefcertificate" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXqpindefcertificate" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  {
    try {
      result = (int)CPXqpindefcertificate((cpxenv const *)arg1,(cpxlp const *)arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXqpopt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXqpopt", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXqpopt" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXqpopt" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  {
    try {
      result = (int)CPXqpopt((cpxenv const *)arg1,arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXaddqconstr(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  int arg4 ;
  double arg5 ;
  int arg6 ;
  int *arg7 = (int *) 0 ;
  double *arg8 = (double *) 0 ;
  int *arg9 = (int *) 0 ;
  int *arg10 = (int *) 0 ;
  double *arg11 = (double *) 0 ;
  char *arg12 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int res12 ;
  char *buf12 = 0 ;
  int alloc12 = 0 ;
  PyObject *swig_obj[12] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXaddqconstr", 12, 12, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXaddqconstr" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXaddqconstr" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXaddqconstr" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXaddqconstr" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXaddqconstr" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CPXaddqconstr" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[6])) {
      int size = (int)PyList_Size(swig_obj[6]);
      int i = 0;
      arg7 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[6], i);
        if (PyInt_Check(o)) {
          arg7[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg7);
          return NULL;
        }
      }
    }
    else if (swig_obj[6] == Py_None) {
      arg7 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[7])) {
      int size = (int)PyList_Size(swig_obj[7]);
      int i = 0;
      arg8 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[7], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg8[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg8);
          return NULL;
        }
      }
    }
    else if (swig_obj[7] == Py_None) {
      arg8 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[8])) {
      int size = (int)PyList_Size(swig_obj[8]);
      int i = 0;
      arg9 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[8], i);
        if (PyInt_Check(o)) {
          arg9[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg9);
          return NULL;
        }
      }
    }
    else if (swig_obj[8] == Py_None) {
      arg9 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[9])) {
      int size = (int)PyList_Size(swig_obj[9]);
      int i = 0;
      arg10 = (int*)malloc(size * sizeof(int));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[9], i);
        if (PyInt_Check(o)) {
          arg10[i] = PyInt_AsLong(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain integer numbers");
          free(arg10);
          return NULL;
        }
      }
    }
    else if (swig_obj[9] == Py_None) {
      arg10 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[10])) {
      int size = (int)PyList_Size(swig_obj[10]);
      int i = 0;
      arg11 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[10], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg11[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg11);
          return NULL;
        }
      }
    }
    else if (swig_obj[10] == Py_None) {
      arg11 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res12 = SWIG_AsCharPtrAndSize(swig_obj[11], &buf12, NULL, &alloc12);
  if (!SWIG_IsOK(res12)) {
    SWIG_exception_fail(SWIG_ArgError(res12), "in method '" "CPXaddqconstr" "', argument " "12"" of type '" "char const *""'");
  }
  arg12 = reinterpret_cast< char * >(buf12);
  {
    try {
      result = (int)CPXaddqconstr((cpxenv const *)arg1,arg2,arg3,arg4,arg5,arg6,(int const *)arg7,(double const *)arg8,(int const *)arg9,(int const *)arg10,(double const *)arg11,(char const *)arg12);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg7);
  }
  {
    free(arg8);
  }
  {
    free(arg9);
  }
  {
    free(arg10);
  }
  {
    free(arg11);
  }
  if (alloc12 == SWIG_NEWOBJ) delete[] buf12;
  return resultobj;
fail:
  {
    free(arg7);
  }
  {
    free(arg8);
  }
  {
    free(arg9);
  }
  {
    free(arg10);
  }
  {
    free(arg11);
  }
  if (alloc12 == SWIG_NEWOBJ) delete[] buf12;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXdelqconstrs(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXdelqconstrs", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXdelqconstrs" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXdelqconstrs" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXdelqconstrs" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXdelqconstrs" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (int)CPXdelqconstrs((cpxenv const *)arg1,arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetnumqconstrs(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetnumqconstrs", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetnumqconstrs" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetnumqconstrs" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  {
    try {
      result = (int)CPXgetnumqconstrs((cpxenv const *)arg1,(cpxlp const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetqconstr(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  double *arg5 = (double *) 0 ;
  char *arg6 = (char *) 0 ;
  int *arg7 = (int *) 0 ;
  double *arg8 = (double *) 0 ;
  int arg9 ;
  int *arg10 = (int *) 0 ;
  int *arg11 = (int *) 0 ;
  int *arg12 = (int *) 0 ;
  double *arg13 = (double *) 0 ;
  int arg14 ;
  int *arg15 = (int *) 0 ;
  int arg16 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  void *argp11 = 0 ;
  int res11 = 0 ;
  void *argp12 = 0 ;
  int res12 = 0 ;
  void *argp13 = 0 ;
  int res13 = 0 ;
  int val14 ;
  int ecode14 = 0 ;
  void *argp15 = 0 ;
  int res15 = 0 ;
  int val16 ;
  int ecode16 = 0 ;
  PyObject *swig_obj[16] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetqconstr", 16, 16, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetqconstr" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetqconstr" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetqconstr" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetqconstr" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXgetqconstr" "', argument " "5"" of type '" "double *""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_AsCharPtrAndSize(swig_obj[5], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CPXgetqconstr" "', argument " "6"" of type '" "char *""'");
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_ConvertPtr(swig_obj[6], &argp7,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "CPXgetqconstr" "', argument " "7"" of type '" "int *""'"); 
  }
  arg7 = reinterpret_cast< int * >(argp7);
  res8 = SWIG_ConvertPtr(swig_obj[7], &argp8,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "CPXgetqconstr" "', argument " "8"" of type '" "double *""'"); 
  }
  arg8 = reinterpret_cast< double * >(argp8);
  ecode9 = SWIG_AsVal_int(swig_obj[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "CPXgetqconstr" "', argument " "9"" of type '" "int""'");
  } 
  arg9 = static_cast< int >(val9);
  res10 = SWIG_ConvertPtr(swig_obj[9], &argp10,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "CPXgetqconstr" "', argument " "10"" of type '" "int *""'"); 
  }
  arg10 = reinterpret_cast< int * >(argp10);
  res11 = SWIG_ConvertPtr(swig_obj[10], &argp11,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res11)) {
    SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "CPXgetqconstr" "', argument " "11"" of type '" "int *""'"); 
  }
  arg11 = reinterpret_cast< int * >(argp11);
  res12 = SWIG_ConvertPtr(swig_obj[11], &argp12,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res12)) {
    SWIG_exception_fail(SWIG_ArgError(res12), "in method '" "CPXgetqconstr" "', argument " "12"" of type '" "int *""'"); 
  }
  arg12 = reinterpret_cast< int * >(argp12);
  res13 = SWIG_ConvertPtr(swig_obj[12], &argp13,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res13)) {
    SWIG_exception_fail(SWIG_ArgError(res13), "in method '" "CPXgetqconstr" "', argument " "13"" of type '" "double *""'"); 
  }
  arg13 = reinterpret_cast< double * >(argp13);
  ecode14 = SWIG_AsVal_int(swig_obj[13], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "CPXgetqconstr" "', argument " "14"" of type '" "int""'");
  } 
  arg14 = static_cast< int >(val14);
  res15 = SWIG_ConvertPtr(swig_obj[14], &argp15,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res15)) {
    SWIG_exception_fail(SWIG_ArgError(res15), "in method '" "CPXgetqconstr" "', argument " "15"" of type '" "int *""'"); 
  }
  arg15 = reinterpret_cast< int * >(argp15);
  ecode16 = SWIG_AsVal_int(swig_obj[15], &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "CPXgetqconstr" "', argument " "16"" of type '" "int""'");
  } 
  arg16 = static_cast< int >(val16);
  {
    try {
      result = (int)CPXgetqconstr((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return resultobj;
fail:
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetqconstrdslack(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  double *arg6 = (double *) 0 ;
  int arg7 ;
  int *arg8 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  PyObject *swig_obj[8] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetqconstrdslack", 8, 8, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetqconstrdslack" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetqconstrdslack" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPXgetqconstrdslack" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetqconstrdslack" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXgetqconstrdslack" "', argument " "5"" of type '" "int *""'"); 
  }
  arg5 = reinterpret_cast< int * >(argp5);
  res6 = SWIG_ConvertPtr(swig_obj[5], &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CPXgetqconstrdslack" "', argument " "6"" of type '" "double *""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  ecode7 = SWIG_AsVal_int(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "CPXgetqconstrdslack" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  res8 = SWIG_ConvertPtr(swig_obj[7], &argp8,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "CPXgetqconstrdslack" "', argument " "8"" of type '" "int *""'"); 
  }
  arg8 = reinterpret_cast< int * >(argp8);
  {
    try {
      result = (int)CPXgetqconstrdslack((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetqconstrindex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  char *arg3 = (char *) 0 ;
  int *arg4 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetqconstrindex", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetqconstrindex" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetqconstrindex" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetqconstrindex" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetqconstrindex" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  {
    try {
      result = (int)CPXgetqconstrindex((cpxenv const *)arg1,(cpxlp const *)arg2,(char const *)arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetqconstrinfeas(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  int arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject *swig_obj[6] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetqconstrinfeas", 6, 6, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetqconstrinfeas" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetqconstrinfeas" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[2])) {
      int size = (int)PyList_Size(swig_obj[2]);
      int i = 0;
      arg3 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[2], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg3[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg3);
          return NULL;
        }
      }
    }
    else if (swig_obj[2] == Py_None) {
      arg3 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXgetqconstrinfeas" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXgetqconstrinfeas" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CPXgetqconstrinfeas" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    try {
      result = (int)CPXgetqconstrinfeas((cpxenv const *)arg1,(cpxlp const *)arg2,(double const *)arg3,arg4,arg5,arg6);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg3);
  }
  return resultobj;
fail:
  {
    free(arg3);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetqconstrname(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject *swig_obj[6] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetqconstrname", 6, 6, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetqconstrname" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetqconstrname" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetqconstrname" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXgetqconstrname" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPXgetqconstrname" "', argument " "5"" of type '" "int *""'"); 
  }
  arg5 = reinterpret_cast< int * >(argp5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CPXgetqconstrname" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    try {
      result = (int)CPXgetqconstrname((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5,arg6);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetqconstrslack(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetqconstrslack", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetqconstrslack" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetqconstrslack" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetqconstrslack" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXgetqconstrslack" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXgetqconstrslack" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (int)CPXgetqconstrslack((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXgetxqxax(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXgetxqxax", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXgetxqxax" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXgetxqxax" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPXgetxqxax" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPXgetxqxax" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPXgetxqxax" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (int)CPXgetxqxax((cpxenv const *)arg1,(cpxlp const *)arg2,arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPXqconstrslackfromx(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  CPXCLPptr arg2 = (CPXCLPptr) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPXqconstrslackfromx", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPXqconstrslackfromx" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPXqconstrslackfromx" "', argument " "2"" of type '" "CPXCLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXCLPptr >(argp2);
  {
    /* Check if is a list  */
    if (PyList_Check(swig_obj[2])) {
      int size = (int)PyList_Size(swig_obj[2]);
      int i = 0;
      arg3 = (double*)malloc(size * sizeof(double));
      for (i = 0; i < size; i++) {
        PyObject* o = PyList_GetItem(swig_obj[2], i);
        if (PyFloat_Check(o) || PyInt_Check(o)) {
          arg3[i] = PyFloat_AsDouble(o);
        }
        else {
          PyErr_SetString(PyExc_TypeError, "list must contain floating-point numbers");
          free(arg3);
          return NULL;
        }
      }
    }
    else if (swig_obj[2] == Py_None) {
      arg3 = NULL;
    }
    else {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPXqconstrslackfromx" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  {
    try {
      result = (int)CPXqconstrslackfromx((cpxenv const *)arg1,(cpxlp const *)arg2,(double const *)arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    free(arg3);
  }
  return resultobj;
fail:
  {
    free(arg3);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_AMPLCPLEXloadmodel(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  char **arg2 = (char **) 0 ;
  CPXLPptr *arg3 = (CPXLPptr *) 0 ;
  ASL **arg4 = (ASL **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  ampls::cpx::impl::CPLEXDriverState *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "AMPLCPLEXloadmodel", 4, 4, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "AMPLCPLEXloadmodel" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AMPLCPLEXloadmodel" "', argument " "2"" of type '" "char **""'"); 
  }
  arg2 = reinterpret_cast< char ** >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AMPLCPLEXloadmodel" "', argument " "3"" of type '" "CPXLPptr *""'"); 
  }
  arg3 = reinterpret_cast< CPXLPptr * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_p_ASL, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AMPLCPLEXloadmodel" "', argument " "4"" of type '" "ASL **""'"); 
  }
  arg4 = reinterpret_cast< ASL ** >(argp4);
  {
    try {
      result = (ampls::cpx::impl::CPLEXDriverState *)ampls::cpx::impl::AMPLCPLEXloadmodel(arg1,arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ampls__cpx__impl__CPLEXDriverState, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AMPLCPLEXwritesol(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::cpx::impl::CPLEXDriverState *arg1 = (ampls::cpx::impl::CPLEXDriverState *) 0 ;
  CPXLPptr arg2 = (CPXLPptr) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  PyObject *swig_obj[4] ;
  
  if (!SWIG_Python_UnpackTuple(args, "AMPLCPLEXwritesol", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ampls__cpx__impl__CPLEXDriverState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AMPLCPLEXwritesol" "', argument " "1"" of type '" "ampls::cpx::impl::CPLEXDriverState *""'"); 
  }
  arg1 = reinterpret_cast< ampls::cpx::impl::CPLEXDriverState * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_cpxlp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AMPLCPLEXwritesol" "', argument " "2"" of type '" "CPXLPptr""'"); 
  }
  arg2 = reinterpret_cast< CPXLPptr >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AMPLCPLEXwritesol" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_AsCharPtrAndSize(swig_obj[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AMPLCPLEXwritesol" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  {
    try {
      ampls::cpx::impl::AMPLCPLEXwritesol(arg1,arg2,arg3,(char const *)arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AMPLCPLEXgetInternalEnv(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXENVptr result;
  
  if (!SWIG_Python_UnpackTuple(args, "AMPLCPLEXgetInternalEnv", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (CPXENVptr)ampls::cpx::impl::AMPLCPLEXgetInternalEnv();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpxenv, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AMPLCPLEXfreeASL(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ASL **arg1 = (ASL **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_p_ASL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AMPLCPLEXfreeASL" "', argument " "1"" of type '" "ASL **""'"); 
  }
  arg1 = reinterpret_cast< ASL ** >(argp1);
  {
    try {
      ampls::cpx::impl::AMPLCPLEXfreeASL(arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CBWrap_lp_callback_wrapper(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  void *arg4 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CBWrap_lp_callback_wrapper", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CBWrap_lp_callback_wrapper" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CBWrap_lp_callback_wrapper" "', argument " "2"" of type '" "void *""'"); 
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CBWrap_lp_callback_wrapper" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3],SWIG_as_voidptrptr(&arg4), 0, 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CBWrap_lp_callback_wrapper" "', argument " "4"" of type '" "void *""'"); 
  }
  {
    try {
      result = (int)ampls::cpx::impl::CBWrap::lp_callback_wrapper((cpxenv const *)arg1,arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CBWrap_cut_callback_wrapper(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  void *arg4 = (void *) 0 ;
  int *arg5 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CBWrap_cut_callback_wrapper", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CBWrap_cut_callback_wrapper" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CBWrap_cut_callback_wrapper" "', argument " "2"" of type '" "void *""'"); 
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CBWrap_cut_callback_wrapper" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3],SWIG_as_voidptrptr(&arg4), 0, 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CBWrap_cut_callback_wrapper" "', argument " "4"" of type '" "void *""'"); 
  }
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CBWrap_cut_callback_wrapper" "', argument " "5"" of type '" "int *""'"); 
  }
  arg5 = reinterpret_cast< int * >(argp5);
  {
    try {
      result = (int)ampls::cpx::impl::CBWrap::cut_callback_wrapper((cpxenv const *)arg1,arg2,arg3,arg4,arg5);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CBWrap_msg_callback_wrapper(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  void *arg1 = (void *) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "CBWrap_msg_callback_wrapper", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CBWrap_msg_callback_wrapper" "', argument " "1"" of type '" "void *""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CBWrap_msg_callback_wrapper" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      ampls::cpx::impl::CBWrap::msg_callback_wrapper(arg1,(char const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CBWrap_incumbent_callback_wrapper(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  void *arg4 = (void *) 0 ;
  double arg5 ;
  double *arg6 = (double *) 0 ;
  int *arg7 = (int *) 0 ;
  int *arg8 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 ;
  double val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  PyObject *swig_obj[8] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CBWrap_incumbent_callback_wrapper", 8, 8, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CBWrap_incumbent_callback_wrapper" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CBWrap_incumbent_callback_wrapper" "', argument " "2"" of type '" "void *""'"); 
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CBWrap_incumbent_callback_wrapper" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3],SWIG_as_voidptrptr(&arg4), 0, 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CBWrap_incumbent_callback_wrapper" "', argument " "4"" of type '" "void *""'"); 
  }
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CBWrap_incumbent_callback_wrapper" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  res6 = SWIG_ConvertPtr(swig_obj[5], &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CBWrap_incumbent_callback_wrapper" "', argument " "6"" of type '" "double *""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  res7 = SWIG_ConvertPtr(swig_obj[6], &argp7,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "CBWrap_incumbent_callback_wrapper" "', argument " "7"" of type '" "int *""'"); 
  }
  arg7 = reinterpret_cast< int * >(argp7);
  res8 = SWIG_ConvertPtr(swig_obj[7], &argp8,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "CBWrap_incumbent_callback_wrapper" "', argument " "8"" of type '" "int *""'"); 
  }
  arg8 = reinterpret_cast< int * >(argp8);
  {
    try {
      result = (int)ampls::cpx::impl::CBWrap::incumbent_callback_wrapper((cpxenv const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CBWrap_setDefaultCB(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CPXCENVptr arg1 = (CPXCENVptr) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  void *arg4 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 ;
  PyObject *swig_obj[4] ;
  ampls::CPLEXCallback *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "CBWrap_setDefaultCB", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_cpxenv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CBWrap_setDefaultCB" "', argument " "1"" of type '" "CPXCENVptr""'"); 
  }
  arg1 = reinterpret_cast< CPXCENVptr >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CBWrap_setDefaultCB" "', argument " "2"" of type '" "void *""'"); 
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CBWrap_setDefaultCB" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3],SWIG_as_voidptrptr(&arg4), 0, 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CBWrap_setDefaultCB" "', argument " "4"" of type '" "void *""'"); 
  }
  {
    try {
      result = (ampls::CPLEXCallback *)ampls::cpx::impl::CBWrap::setDefaultCB((cpxenv const *)arg1,arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ampls__CPLEXCallback, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_CBWrap(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  ampls::cpx::impl::CBWrap *result = 0 ;
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_CBWrap")) SWIG_fail;
  if (!SWIG_Python_UnpackTuple(args, "new_CBWrap", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (ampls::cpx::impl::CBWrap *)new ampls::cpx::impl::CBWrap();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ampls__cpx__impl__CBWrap, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_CBWrap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::cpx::impl::CBWrap *arg1 = (ampls::cpx::impl::CBWrap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args, "delete_CBWrap", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__cpx__impl__CBWrap, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CBWrap" "', argument " "1"" of type '" "ampls::cpx::impl::CBWrap *""'"); 
  }
  arg1 = reinterpret_cast< ampls::cpx::impl::CBWrap * >(argp1);
  {
    try {
      delete arg1;
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_CBWrap) /* defines _wrap_delete_CBWrap_destructor_closure */

SWIGINTERN PyObject *_wrap_CPLEXDrv_loadModel(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::CPLEXDrv *arg1 = (ampls::CPLEXDrv *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  SwigValueWrapper< ampls::CPLEXModel > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__CPLEXDrv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPLEXDrv_loadModel" "', argument " "1"" of type '" "ampls::CPLEXDrv *""'"); 
  }
  arg1 = reinterpret_cast< ampls::CPLEXDrv * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPLEXDrv_loadModel" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      result = (arg1)->loadModel((char const *)arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new ampls::CPLEXModel(static_cast< const ampls::CPLEXModel& >(result))), SWIGTYPE_p_ampls__CPLEXModel, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPLEXDrv_getEnv(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::CPLEXDrv *arg1 = (ampls::CPLEXDrv *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  CPXENVptr result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPLEXDrv_getEnv", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__CPLEXDrv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPLEXDrv_getEnv" "', argument " "1"" of type '" "ampls::CPLEXDrv *""'"); 
  }
  arg1 = reinterpret_cast< ampls::CPLEXDrv * >(argp1);
  {
    try {
      result = (CPXENVptr)(arg1)->getEnv();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpxenv, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CPLEXDrv(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::CPLEXDrv *arg1 = (ampls::CPLEXDrv *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args, "delete_CPLEXDrv", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__CPLEXDrv, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CPLEXDrv" "', argument " "1"" of type '" "ampls::CPLEXDrv *""'"); 
  }
  arg1 = reinterpret_cast< ampls::CPLEXDrv * >(argp1);
  {
    try {
      delete arg1;
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_CPLEXDrv(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  ampls::CPLEXDrv *result = 0 ;
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_CPLEXDrv")) SWIG_fail;
  if (!SWIG_Python_UnpackTuple(args, "new_CPLEXDrv", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (ampls::CPLEXDrv *)new ampls::CPLEXDrv();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ampls__CPLEXDrv, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_CPLEXDrv) /* defines _wrap_delete_CPLEXDrv_destructor_closure */

SWIGINTERN int _wrap_new_CPLEXModel(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  ampls::CPLEXModel *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ampls::CPLEXModel *result = 0 ;
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_CPLEXModel")) SWIG_fail;
  if (!SWIG_Python_UnpackTuple(args, "new_CPLEXModel", 1, 1, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ampls__CPLEXModel,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CPLEXModel" "', argument " "1"" of type '" "ampls::CPLEXModel const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CPLEXModel" "', argument " "1"" of type '" "ampls::CPLEXModel const &""'"); 
  }
  arg1 = reinterpret_cast< ampls::CPLEXModel * >(argp1);
  {
    try {
      result = (ampls::CPLEXModel *)new ampls::CPLEXModel((ampls::CPLEXModel const &)*arg1);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ampls__CPLEXModel, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_CPLEXModel_getStatus(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::CPLEXModel *arg1 = (ampls::CPLEXModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ampls::Status::SolStatus result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPLEXModel_getStatus", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__CPLEXModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPLEXModel_getStatus" "', argument " "1"" of type '" "ampls::CPLEXModel *""'"); 
  }
  arg1 = reinterpret_cast< ampls::CPLEXModel * >(argp1);
  {
    try {
      result = (ampls::Status::SolStatus)(arg1)->getStatus();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPLEXModel_optimize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::CPLEXModel *arg1 = (ampls::CPLEXModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPLEXModel_optimize", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__CPLEXModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPLEXModel_optimize" "', argument " "1"" of type '" "ampls::CPLEXModel *""'"); 
  }
  arg1 = reinterpret_cast< ampls::CPLEXModel * >(argp1);
  {
    try {
      result = (int)(arg1)->optimize();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPLEXModel_getNumVars(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::CPLEXModel *arg1 = (ampls::CPLEXModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPLEXModel_getNumVars", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__CPLEXModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPLEXModel_getNumVars" "', argument " "1"" of type '" "ampls::CPLEXModel *""'"); 
  }
  arg1 = reinterpret_cast< ampls::CPLEXModel * >(argp1);
  {
    try {
      result = (int)(arg1)->getNumVars();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPLEXModel_getNumCons(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::CPLEXModel *arg1 = (ampls::CPLEXModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPLEXModel_getNumCons", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__CPLEXModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPLEXModel_getNumCons" "', argument " "1"" of type '" "ampls::CPLEXModel *""'"); 
  }
  arg1 = reinterpret_cast< ampls::CPLEXModel * >(argp1);
  {
    try {
      result = (int)(arg1)->getNumCons();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPLEXModel_getObj(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::CPLEXModel *arg1 = (ampls::CPLEXModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPLEXModel_getObj", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__CPLEXModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPLEXModel_getObj" "', argument " "1"" of type '" "ampls::CPLEXModel *""'"); 
  }
  arg1 = reinterpret_cast< ampls::CPLEXModel * >(argp1);
  {
    try {
      result = (double)(arg1)->getObj();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPLEXModel_getSolution(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::CPLEXModel *arg1 = (ampls::CPLEXModel *) 0 ;
  int arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPLEXModel_getSolution", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__CPLEXModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPLEXModel_getSolution" "', argument " "1"" of type '" "ampls::CPLEXModel *""'"); 
  }
  arg1 = reinterpret_cast< ampls::CPLEXModel * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPLEXModel_getSolution" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPLEXModel_getSolution" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[2], &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPLEXModel_getSolution" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  {
    try {
      result = (int)(arg1)->getSolution(arg2,arg3,arg4);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPLEXModel_error(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::CPLEXModel *arg1 = (ampls::CPLEXModel *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__CPLEXModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPLEXModel_error" "', argument " "1"" of type '" "ampls::CPLEXModel *""'"); 
  }
  arg1 = reinterpret_cast< ampls::CPLEXModel * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPLEXModel_error" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (arg1)->error(arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPLEXModel_enableLazyConstraints(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::CPLEXModel *arg1 = (ampls::CPLEXModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args, "CPLEXModel_enableLazyConstraints", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__CPLEXModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPLEXModel_enableLazyConstraints" "', argument " "1"" of type '" "ampls::CPLEXModel *""'"); 
  }
  arg1 = reinterpret_cast< ampls::CPLEXModel * >(argp1);
  {
    try {
      (arg1)->enableLazyConstraints();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPLEXModel_getCPXLP(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::CPLEXModel *arg1 = (ampls::CPLEXModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  CPXLPptr result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPLEXModel_getCPXLP", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__CPLEXModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPLEXModel_getCPXLP" "', argument " "1"" of type '" "ampls::CPLEXModel *""'"); 
  }
  arg1 = reinterpret_cast< ampls::CPLEXModel * >(argp1);
  {
    try {
      result = (CPXLPptr)(arg1)->getCPXLP();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpxlp, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPLEXModel_getCPXENV(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::CPLEXModel *arg1 = (ampls::CPLEXModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  CPXENVptr result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPLEXModel_getCPXENV", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__CPLEXModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPLEXModel_getCPXENV" "', argument " "1"" of type '" "ampls::CPLEXModel *""'"); 
  }
  arg1 = reinterpret_cast< ampls::CPLEXModel * >(argp1);
  {
    try {
      result = (CPXENVptr)(arg1)->getCPXENV();
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpxenv, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPLEXModel_setParam__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ampls::CPLEXModel *arg1 = (ampls::CPLEXModel *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__CPLEXModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPLEXModel_setParam" "', argument " "1"" of type '" "ampls::CPLEXModel *""'"); 
  }
  arg1 = reinterpret_cast< ampls::CPLEXModel * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPLEXModel_setParam" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPLEXModel_setParam" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->setParam(arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPLEXModel_setParam__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ampls::CPLEXModel *arg1 = (ampls::CPLEXModel *) 0 ;
  int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__CPLEXModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPLEXModel_setParam" "', argument " "1"" of type '" "ampls::CPLEXModel *""'"); 
  }
  arg1 = reinterpret_cast< ampls::CPLEXModel * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPLEXModel_setParam" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPLEXModel_setParam" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      (arg1)->setParam(arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPLEXModel_setParam(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "CPLEXModel_setParam", 0, 3, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ampls__CPLEXModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_CPLEXModel_setParam__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ampls__CPLEXModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_CPLEXModel_setParam__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'CPLEXModel_setParam'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ampls::CPLEXModel::setParam(int,int)\n"
    "    ampls::CPLEXModel::setParam(int,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CPLEXModel_getIntParam(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::CPLEXModel *arg1 = (ampls::CPLEXModel *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__CPLEXModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPLEXModel_getIntParam" "', argument " "1"" of type '" "ampls::CPLEXModel *""'"); 
  }
  arg1 = reinterpret_cast< ampls::CPLEXModel * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPLEXModel_getIntParam" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(arg1)->getIntParam(arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPLEXModel_getDoubleParam(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::CPLEXModel *arg1 = (ampls::CPLEXModel *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__CPLEXModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPLEXModel_getDoubleParam" "', argument " "1"" of type '" "ampls::CPLEXModel *""'"); 
  }
  arg1 = reinterpret_cast< ampls::CPLEXModel * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPLEXModel_getDoubleParam" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)(arg1)->getDoubleParam(arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CPLEXModel(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::CPLEXModel *arg1 = (ampls::CPLEXModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args, "delete_CPLEXModel", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__CPLEXModel, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CPLEXModel" "', argument " "1"" of type '" "ampls::CPLEXModel *""'"); 
  }
  arg1 = reinterpret_cast< ampls::CPLEXModel * >(argp1);
  {
    try {
      delete arg1;
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPLEXModel_getAMPLsIntParameter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::CPLEXModel *arg1 = (ampls::CPLEXModel *) 0 ;
  ampls::SolverParams::SolverParameters arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__CPLEXModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPLEXModel_getAMPLsIntParameter" "', argument " "1"" of type '" "ampls::CPLEXModel *""'"); 
  }
  arg1 = reinterpret_cast< ampls::CPLEXModel * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPLEXModel_getAMPLsIntParameter" "', argument " "2"" of type '" "ampls::SolverParams::SolverParameters""'");
  } 
  arg2 = static_cast< ampls::SolverParams::SolverParameters >(val2);
  {
    try {
      result = (int)(arg1)->getAMPLsIntParameter(arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPLEXModel_getAMPLsDoubleParameter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::CPLEXModel *arg1 = (ampls::CPLEXModel *) 0 ;
  ampls::SolverParams::SolverParameters arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__CPLEXModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPLEXModel_getAMPLsDoubleParameter" "', argument " "1"" of type '" "ampls::CPLEXModel *""'"); 
  }
  arg1 = reinterpret_cast< ampls::CPLEXModel * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPLEXModel_getAMPLsDoubleParameter" "', argument " "2"" of type '" "ampls::SolverParams::SolverParameters""'");
  } 
  arg2 = static_cast< ampls::SolverParams::SolverParameters >(val2);
  {
    try {
      result = (double)(arg1)->getAMPLsDoubleParameter(arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPLEXModel_setAMPLsParameter__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ampls::CPLEXModel *arg1 = (ampls::CPLEXModel *) 0 ;
  ampls::SolverParams::SolverParameters arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__CPLEXModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPLEXModel_setAMPLsParameter" "', argument " "1"" of type '" "ampls::CPLEXModel *""'"); 
  }
  arg1 = reinterpret_cast< ampls::CPLEXModel * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPLEXModel_setAMPLsParameter" "', argument " "2"" of type '" "ampls::SolverParams::SolverParameters""'");
  } 
  arg2 = static_cast< ampls::SolverParams::SolverParameters >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPLEXModel_setAMPLsParameter" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->setAMPLsParameter(arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPLEXModel_setAMPLsParameter__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ampls::CPLEXModel *arg1 = (ampls::CPLEXModel *) 0 ;
  ampls::SolverParams::SolverParameters arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__CPLEXModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPLEXModel_setAMPLsParameter" "', argument " "1"" of type '" "ampls::CPLEXModel *""'"); 
  }
  arg1 = reinterpret_cast< ampls::CPLEXModel * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPLEXModel_setAMPLsParameter" "', argument " "2"" of type '" "ampls::SolverParams::SolverParameters""'");
  } 
  arg2 = static_cast< ampls::SolverParams::SolverParameters >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPLEXModel_setAMPLsParameter" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      (arg1)->setAMPLsParameter(arg2,arg3);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPLEXModel_setAMPLsParameter(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "CPLEXModel_setAMPLsParameter", 0, 3, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ampls__CPLEXModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_CPLEXModel_setAMPLsParameter__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ampls__CPLEXModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_CPLEXModel_setAMPLsParameter__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'CPLEXModel_setAMPLsParameter'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ampls::CPLEXModel::setAMPLsParameter(ampls::SolverParams::SolverParameters,int)\n"
    "    ampls::CPLEXModel::setAMPLsParameter(ampls::SolverParams::SolverParameters,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CPLEXModel_addConstraintImpl(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::CPLEXModel *arg1 = (ampls::CPLEXModel *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int *arg4 ;
  double *arg5 ;
  ampls::CutDirection::Direction arg6 ;
  double arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  PyObject *swig_obj[7] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPLEXModel_addConstraintImpl", 6, 6, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__CPLEXModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPLEXModel_addConstraintImpl" "', argument " "1"" of type '" "ampls::CPLEXModel *""'"); 
  }
  arg1 = reinterpret_cast< ampls::CPLEXModel * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPLEXModel_addConstraintImpl" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPLEXModel_addConstraintImpl" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[2], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPLEXModel_addConstraintImpl" "', argument " "4"" of type '" "int const []""'"); 
  } 
  arg4 = reinterpret_cast< int * >(argp4);
  res5 = SWIG_ConvertPtr(swig_obj[3], &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPLEXModel_addConstraintImpl" "', argument " "5"" of type '" "double const []""'"); 
  } 
  arg5 = reinterpret_cast< double * >(argp5);
  ecode6 = SWIG_AsVal_int(swig_obj[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CPLEXModel_addConstraintImpl" "', argument " "6"" of type '" "ampls::CutDirection::Direction""'");
  } 
  arg6 = static_cast< ampls::CutDirection::Direction >(val6);
  ecode7 = SWIG_AsVal_double(swig_obj[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "CPLEXModel_addConstraintImpl" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  {
    try {
      result = (int)(arg1)->addConstraintImpl((char const *)arg2,arg3,(int const (*))arg4,(double const (*))arg5,arg6,arg7);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPLEXModel_toCPLEXType_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::CPLEXModel *arg1 = (ampls::CPLEXModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "CPLEXModel_toCPLEXType_get", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__CPLEXModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPLEXModel_toCPLEXType_get" "', argument " "1"" of type '" "ampls::CPLEXModel *""'"); 
  }
  arg1 = reinterpret_cast< ampls::CPLEXModel * >(argp1);
  result = (char *)(char *) ((arg1)->toCPLEXType);
  {
    size_t size = SWIG_strnlen(result, 3);
    
    
    
    resultobj = SWIG_FromCharPtrAndSize(result, size);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPLEXModel_addVariableImpl(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::CPLEXModel *arg1 = (ampls::CPLEXModel *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int *arg4 ;
  double *arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  ampls::VarType::Type arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  PyObject *swig_obj[9] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPLEXModel_addVariableImpl", 8, 8, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__CPLEXModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPLEXModel_addVariableImpl" "', argument " "1"" of type '" "ampls::CPLEXModel *""'"); 
  }
  arg1 = reinterpret_cast< ampls::CPLEXModel * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPLEXModel_addVariableImpl" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPLEXModel_addVariableImpl" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[2], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPLEXModel_addVariableImpl" "', argument " "4"" of type '" "int const []""'"); 
  } 
  arg4 = reinterpret_cast< int * >(argp4);
  res5 = SWIG_ConvertPtr(swig_obj[3], &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPLEXModel_addVariableImpl" "', argument " "5"" of type '" "double const []""'"); 
  } 
  arg5 = reinterpret_cast< double * >(argp5);
  ecode6 = SWIG_AsVal_double(swig_obj[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CPLEXModel_addVariableImpl" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(swig_obj[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "CPLEXModel_addVariableImpl" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(swig_obj[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "CPLEXModel_addVariableImpl" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_int(swig_obj[7], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "CPLEXModel_addVariableImpl" "', argument " "9"" of type '" "ampls::VarType::Type""'");
  } 
  arg9 = static_cast< ampls::VarType::Type >(val9);
  {
    try {
      result = (int)(arg1)->addVariableImpl((char const *)arg2,arg3,(int const (*))arg4,(double const (*))arg5,arg6,arg7,arg8,arg9);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_CPLEXModel) /* defines _wrap_delete_CPLEXModel_destructor_closure */

SWIGINTERN PyObject *_wrap_CPLEXCallback_run(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::CPLEXCallback *arg1 = (ampls::CPLEXCallback *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPLEXCallback_run", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__CPLEXCallback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPLEXCallback_run" "', argument " "1"" of type '" "ampls::CPLEXCallback *""'"); 
  }
  arg1 = reinterpret_cast< ampls::CPLEXCallback * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==self));
  try {
    {
      try {
        if (upcall) {
          Swig::DirectorPureVirtualException::raise("ampls::CPLEXCallback::run");
        } else {
          result = (int)(arg1)->run();
        }
      } catch(const ampls::AMPLSolverException &e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      } 
      catch(...) {
        SWIG_exception(SWIG_RuntimeError, "Unknown exception");
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CPLEXCallback(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::CPLEXCallback *arg1 = (ampls::CPLEXCallback *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args, "delete_CPLEXCallback", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__CPLEXCallback, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CPLEXCallback" "', argument " "1"" of type '" "ampls::CPLEXCallback *""'"); 
  }
  arg1 = reinterpret_cast< ampls::CPLEXCallback * >(argp1);
  {
    try {
      delete arg1;
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPLEXCallback_getObj(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::CPLEXCallback *arg1 = (ampls::CPLEXCallback *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Swig::Director *director = 0;
  bool upcall = false;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPLEXCallback_getObj", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__CPLEXCallback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPLEXCallback_getObj" "', argument " "1"" of type '" "ampls::CPLEXCallback *""'"); 
  }
  arg1 = reinterpret_cast< ampls::CPLEXCallback * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==self));
  try {
    {
      try {
        if (upcall) {
          result = (double)(arg1)->ampls::CPLEXCallback::getObj();
        } else {
          result = (double)(arg1)->getObj();
        }
      } catch(const ampls::AMPLSolverException &e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      } 
      catch(...) {
        SWIG_exception(SWIG_RuntimeError, "Unknown exception");
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPLEXCallback_getWhereString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::CPLEXCallback *arg1 = (ampls::CPLEXCallback *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Swig::Director *director = 0;
  bool upcall = false;
  char *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "CPLEXCallback_getWhereString", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__CPLEXCallback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPLEXCallback_getWhereString" "', argument " "1"" of type '" "ampls::CPLEXCallback *""'"); 
  }
  arg1 = reinterpret_cast< ampls::CPLEXCallback * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==self));
  try {
    {
      try {
        if (upcall) {
          result = (char *)(arg1)->ampls::CPLEXCallback::getWhereString();
        } else {
          result = (char *)(arg1)->getWhereString();
        }
      } catch(const ampls::AMPLSolverException &e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      } 
      catch(...) {
        SWIG_exception(SWIG_RuntimeError, "Unknown exception");
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (director) {
    director->swig_release_ownership(SWIG_as_voidptr(result));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPLEXCallback_getMessage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::CPLEXCallback *arg1 = (ampls::CPLEXCallback *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Swig::Director *director = 0;
  bool upcall = false;
  char *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "CPLEXCallback_getMessage", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__CPLEXCallback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPLEXCallback_getMessage" "', argument " "1"" of type '" "ampls::CPLEXCallback *""'"); 
  }
  arg1 = reinterpret_cast< ampls::CPLEXCallback * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==self));
  try {
    {
      try {
        if (upcall) {
          result = (char *)(arg1)->ampls::CPLEXCallback::getMessage();
        } else {
          result = (char *)(arg1)->getMessage();
        }
      } catch(const ampls::AMPLSolverException &e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      } 
      catch(...) {
        SWIG_exception(SWIG_RuntimeError, "Unknown exception");
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (director) {
    director->swig_release_ownership(SWIG_as_voidptr(result));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPLEXCallback_getAMPLWhere(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::CPLEXCallback *arg1 = (ampls::CPLEXCallback *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Swig::Director *director = 0;
  bool upcall = false;
  ampls::Where::CBWhere result;
  
  if (!SWIG_Python_UnpackTuple(args, "CPLEXCallback_getAMPLWhere", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__CPLEXCallback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPLEXCallback_getAMPLWhere" "', argument " "1"" of type '" "ampls::CPLEXCallback *""'"); 
  }
  arg1 = reinterpret_cast< ampls::CPLEXCallback * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==self));
  try {
    {
      try {
        if (upcall) {
          result = (ampls::Where::CBWhere)(arg1)->ampls::CPLEXCallback::getAMPLWhere();
        } else {
          result = (ampls::Where::CBWhere)(arg1)->getAMPLWhere();
        }
      } catch(const ampls::AMPLSolverException &e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      } 
      catch(...) {
        SWIG_exception(SWIG_RuntimeError, "Unknown exception");
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPLEXCallback_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::CPLEXCallback *arg1 = (ampls::CPLEXCallback *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  ampls::Variant result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__CPLEXCallback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPLEXCallback_get" "', argument " "1"" of type '" "ampls::CPLEXCallback *""'"); 
  }
  arg1 = reinterpret_cast< ampls::CPLEXCallback * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPLEXCallback_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (arg1)->get(arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new ampls::Variant(static_cast< const ampls::Variant& >(result))), SWIGTYPE_p_ampls__Variant, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPLEXCallback_getInt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::CPLEXCallback *arg1 = (ampls::CPLEXCallback *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__CPLEXCallback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPLEXCallback_getInt" "', argument " "1"" of type '" "ampls::CPLEXCallback *""'"); 
  }
  arg1 = reinterpret_cast< ampls::CPLEXCallback * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPLEXCallback_getInt" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(arg1)->getInt(arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPLEXCallback_getDouble(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::CPLEXCallback *arg1 = (ampls::CPLEXCallback *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__CPLEXCallback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPLEXCallback_getDouble" "', argument " "1"" of type '" "ampls::CPLEXCallback *""'"); 
  }
  arg1 = reinterpret_cast< ampls::CPLEXCallback * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPLEXCallback_getDouble" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)(arg1)->getDouble(arg2);
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPLEXCallback_getValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::CPLEXCallback *arg1 = (ampls::CPLEXCallback *) 0 ;
  ampls::Value::CBValue arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  ampls::Variant result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ampls__CPLEXCallback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPLEXCallback_getValue" "', argument " "1"" of type '" "ampls::CPLEXCallback *""'"); 
  }
  arg1 = reinterpret_cast< ampls::CPLEXCallback * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPLEXCallback_getValue" "', argument " "2"" of type '" "ampls::Value::CBValue""'");
  } 
  arg2 = static_cast< ampls::Value::CBValue >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==self));
  try {
    {
      try {
        if (upcall) {
          result = (arg1)->ampls::CPLEXCallback::getValue(arg2);
        } else {
          result = (arg1)->getValue(arg2);
        }
      } catch(const ampls::AMPLSolverException &e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      } 
      catch(...) {
        SWIG_exception(SWIG_RuntimeError, "Unknown exception");
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_NewPointerObj((new ampls::Variant(static_cast< const ampls::Variant& >(result))), SWIGTYPE_p_ampls__Variant, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_CPLEXCallback(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject *swig_obj[1] ;
  ampls::CPLEXCallback *result = 0 ;
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_CPLEXCallback")) SWIG_fail;
  if (!SWIG_Python_UnpackTuple(args, "new_CPLEXCallback", 0, 0, 0)) SWIG_fail;
  arg1 = self;
  {
    try {
      if ( self->ob_type != ((SwigPyClientData *)(SWIGTYPE_p_ampls__CPLEXCallback)->clientdata)->pytype ) {
        /* subclassed */
        result = (ampls::CPLEXCallback *)new SwigDirector_CPLEXCallback(arg1); 
      } else {
        SWIG_SetErrorMsg(PyExc_RuntimeError,"accessing abstract class or protected constructor"); 
        SWIG_fail;
      }
      
    } catch(const ampls::AMPLSolverException &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } 
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ampls__CPLEXCallback, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_disown_CPLEXCallback(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ampls::CPLEXCallback *arg1 = (ampls::CPLEXCallback *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ampls__CPLEXCallback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_CPLEXCallback" "', argument " "1"" of type '" "ampls::CPLEXCallback *""'"); 
  }
  arg1 = reinterpret_cast< ampls::CPLEXCallback * >(argp1);
  {
    Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
    if (director) director->swig_disown();
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_CPLEXCallback) /* defines _wrap_delete_CPLEXCallback_destructor_closure */

static PyMethodDef SwigMethods[] = {
	 { "SWIG_PyInstanceMethod_New", SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { "dblArray_frompointer", _wrap_dblArray_frompointer, METH_O, NULL},
	 { "intArray_frompointer", _wrap_intArray_frompointer, METH_O, NULL},
	 { "AMPLSolverException_format", _wrap_AMPLSolverException_format, METH_VARARGS, NULL},
	 { "generateArguments", _wrap_generateArguments, METH_VARARGS, NULL},
	 { "deleteParams", _wrap_deleteParams, METH_O, NULL},
	 { "CutDirection_toString", _wrap_CutDirection_toString, METH_O, NULL},
	 { "disown_GenericCallback", _wrap_disown_GenericCallback, METH_O, NULL},
	 { "CPXaddcols", _wrap_CPXaddcols, METH_VARARGS, NULL},
	 { "CPXaddfuncdest", _wrap_CPXaddfuncdest, METH_VARARGS, NULL},
	 { "CPXaddpwl", _wrap_CPXaddpwl, METH_VARARGS, NULL},
	 { "CPXaddrows", _wrap_CPXaddrows, METH_VARARGS, NULL},
	 { "CPXbasicpresolve", _wrap_CPXbasicpresolve, METH_VARARGS, NULL},
	 { "CPXbinvacol", _wrap_CPXbinvacol, METH_VARARGS, NULL},
	 { "CPXbinvarow", _wrap_CPXbinvarow, METH_VARARGS, NULL},
	 { "CPXbinvcol", _wrap_CPXbinvcol, METH_VARARGS, NULL},
	 { "CPXbinvrow", _wrap_CPXbinvrow, METH_VARARGS, NULL},
	 { "CPXboundsa", _wrap_CPXboundsa, METH_VARARGS, NULL},
	 { "CPXbtran", _wrap_CPXbtran, METH_VARARGS, NULL},
	 { "CPXcallbackabort", _wrap_CPXcallbackabort, METH_O, NULL},
	 { "CPXcallbackaddusercuts", _wrap_CPXcallbackaddusercuts, METH_VARARGS, NULL},
	 { "CPXcallbackcandidateispoint", _wrap_CPXcallbackcandidateispoint, METH_VARARGS, NULL},
	 { "CPXcallbackcandidateisray", _wrap_CPXcallbackcandidateisray, METH_VARARGS, NULL},
	 { "CPXcallbackexitcutloop", _wrap_CPXcallbackexitcutloop, METH_O, NULL},
	 { "CPXcallbackgetcandidatepoint", _wrap_CPXcallbackgetcandidatepoint, METH_VARARGS, NULL},
	 { "CPXcallbackgetcandidateray", _wrap_CPXcallbackgetcandidateray, METH_VARARGS, NULL},
	 { "CPXcallbackgetfunc", _wrap_CPXcallbackgetfunc, METH_VARARGS, NULL},
	 { "CPXcallbackgetincumbent", _wrap_CPXcallbackgetincumbent, METH_VARARGS, NULL},
	 { "CPXcallbackgetinfodbl", _wrap_CPXcallbackgetinfodbl, METH_VARARGS, NULL},
	 { "CPXcallbackgetinfoint", _wrap_CPXcallbackgetinfoint, METH_VARARGS, NULL},
	 { "CPXcallbackgetinfolong", _wrap_CPXcallbackgetinfolong, METH_VARARGS, NULL},
	 { "CPXcallbackgetrelaxationpoint", _wrap_CPXcallbackgetrelaxationpoint, METH_VARARGS, NULL},
	 { "CPXcallbackgetrelaxationstatus", _wrap_CPXcallbackgetrelaxationstatus, METH_VARARGS, NULL},
	 { "CPXcallbackmakebranch", _wrap_CPXcallbackmakebranch, METH_VARARGS, NULL},
	 { "CPXcallbackpostheursoln", _wrap_CPXcallbackpostheursoln, METH_VARARGS, NULL},
	 { "CPXcallbackprunenode", _wrap_CPXcallbackprunenode, METH_O, NULL},
	 { "CPXcallbackrejectcandidate", _wrap_CPXcallbackrejectcandidate, METH_VARARGS, NULL},
	 { "CPXcallbackrejectcandidatelocal", _wrap_CPXcallbackrejectcandidatelocal, METH_VARARGS, NULL},
	 { "CPXcallbacksetfunc", _wrap_CPXcallbacksetfunc, METH_VARARGS, NULL},
	 { "CPXcheckdfeas", _wrap_CPXcheckdfeas, METH_VARARGS, NULL},
	 { "CPXcheckpfeas", _wrap_CPXcheckpfeas, METH_VARARGS, NULL},
	 { "CPXchecksoln", _wrap_CPXchecksoln, METH_VARARGS, NULL},
	 { "CPXchgbds", _wrap_CPXchgbds, METH_VARARGS, NULL},
	 { "CPXchgcoef", _wrap_CPXchgcoef, METH_VARARGS, NULL},
	 { "CPXchgcoeflist", _wrap_CPXchgcoeflist, METH_VARARGS, NULL},
	 { "CPXchgcolname", _wrap_CPXchgcolname, METH_VARARGS, NULL},
	 { "CPXchgname", _wrap_CPXchgname, METH_VARARGS, NULL},
	 { "CPXchgobj", _wrap_CPXchgobj, METH_VARARGS, NULL},
	 { "CPXchgobjoffset", _wrap_CPXchgobjoffset, METH_VARARGS, NULL},
	 { "CPXchgobjsen", _wrap_CPXchgobjsen, METH_VARARGS, NULL},
	 { "CPXchgprobname", _wrap_CPXchgprobname, METH_VARARGS, NULL},
	 { "CPXchgprobtype", _wrap_CPXchgprobtype, METH_VARARGS, NULL},
	 { "CPXchgprobtypesolnpool", _wrap_CPXchgprobtypesolnpool, METH_VARARGS, NULL},
	 { "CPXchgrhs", _wrap_CPXchgrhs, METH_VARARGS, NULL},
	 { "CPXchgrngval", _wrap_CPXchgrngval, METH_VARARGS, NULL},
	 { "CPXchgrowname", _wrap_CPXchgrowname, METH_VARARGS, NULL},
	 { "CPXchgsense", _wrap_CPXchgsense, METH_VARARGS, NULL},
	 { "CPXcleanup", _wrap_CPXcleanup, METH_VARARGS, NULL},
	 { "CPXcloneprob", _wrap_CPXcloneprob, METH_VARARGS, NULL},
	 { "CPXcloseCPLEX", _wrap_CPXcloseCPLEX, METH_O, NULL},
	 { "CPXclpwrite", _wrap_CPXclpwrite, METH_VARARGS, NULL},
	 { "CPXcompletelp", _wrap_CPXcompletelp, METH_VARARGS, NULL},
	 { "CPXcopybase", _wrap_CPXcopybase, METH_VARARGS, NULL},
	 { "CPXcopybasednorms", _wrap_CPXcopybasednorms, METH_VARARGS, NULL},
	 { "CPXcopydnorms", _wrap_CPXcopydnorms, METH_VARARGS, NULL},
	 { "CPXcopylp", _wrap_CPXcopylp, METH_VARARGS, NULL},
	 { "CPXcopylpwnames", _wrap_CPXcopylpwnames, METH_VARARGS, NULL},
	 { "CPXcopynettolp", _wrap_CPXcopynettolp, METH_VARARGS, NULL},
	 { "CPXcopyobjname", _wrap_CPXcopyobjname, METH_VARARGS, NULL},
	 { "CPXcopypnorms", _wrap_CPXcopypnorms, METH_VARARGS, NULL},
	 { "CPXcopyprotected", _wrap_CPXcopyprotected, METH_VARARGS, NULL},
	 { "CPXcopystart", _wrap_CPXcopystart, METH_VARARGS, NULL},
	 { "CPXcreateprob", _wrap_CPXcreateprob, METH_VARARGS, NULL},
	 { "CPXcrushform", _wrap_CPXcrushform, METH_VARARGS, NULL},
	 { "CPXcrushpi", _wrap_CPXcrushpi, METH_VARARGS, NULL},
	 { "CPXcrushx", _wrap_CPXcrushx, METH_VARARGS, NULL},
	 { "CPXdelcols", _wrap_CPXdelcols, METH_VARARGS, NULL},
	 { "CPXdeldblannotation", _wrap_CPXdeldblannotation, METH_VARARGS, NULL},
	 { "CPXdeldblannotations", _wrap_CPXdeldblannotations, METH_VARARGS, NULL},
	 { "CPXdelfuncdest", _wrap_CPXdelfuncdest, METH_VARARGS, NULL},
	 { "CPXdellongannotation", _wrap_CPXdellongannotation, METH_VARARGS, NULL},
	 { "CPXdellongannotations", _wrap_CPXdellongannotations, METH_VARARGS, NULL},
	 { "CPXdelnames", _wrap_CPXdelnames, METH_VARARGS, NULL},
	 { "CPXdelpwl", _wrap_CPXdelpwl, METH_VARARGS, NULL},
	 { "CPXdelrows", _wrap_CPXdelrows, METH_VARARGS, NULL},
	 { "CPXdelsetcols", _wrap_CPXdelsetcols, METH_VARARGS, NULL},
	 { "CPXdelsetpwl", _wrap_CPXdelsetpwl, METH_VARARGS, NULL},
	 { "CPXdelsetrows", _wrap_CPXdelsetrows, METH_VARARGS, NULL},
	 { "CPXdeserializercreate", _wrap_CPXdeserializercreate, METH_VARARGS, NULL},
	 { "CPXdeserializerdestroy", _wrap_CPXdeserializerdestroy, METH_O, NULL},
	 { "CPXdeserializerleft", _wrap_CPXdeserializerleft, METH_O, NULL},
	 { "CPXdisconnectchannel", _wrap_CPXdisconnectchannel, METH_VARARGS, NULL},
	 { "CPXdjfrompi", _wrap_CPXdjfrompi, METH_VARARGS, NULL},
	 { "CPXdperwrite", _wrap_CPXdperwrite, METH_VARARGS, NULL},
	 { "CPXdratio", _wrap_CPXdratio, METH_VARARGS, NULL},
	 { "CPXdualfarkas", _wrap_CPXdualfarkas, METH_VARARGS, NULL},
	 { "CPXdualopt", _wrap_CPXdualopt, METH_VARARGS, NULL},
	 { "CPXdualwrite", _wrap_CPXdualwrite, METH_VARARGS, NULL},
	 { "CPXembwrite", _wrap_CPXembwrite, METH_VARARGS, NULL},
	 { "CPXfeasopt", _wrap_CPXfeasopt, METH_VARARGS, NULL},
	 { "CPXfeasoptext", _wrap_CPXfeasoptext, METH_VARARGS, NULL},
	 { "CPXfinalize", _wrap_CPXfinalize, METH_NOARGS, NULL},
	 { "CPXflushchannel", _wrap_CPXflushchannel, METH_VARARGS, NULL},
	 { "CPXflushstdchannels", _wrap_CPXflushstdchannels, METH_O, NULL},
	 { "CPXfreepresolve", _wrap_CPXfreepresolve, METH_VARARGS, NULL},
	 { "CPXfreeprob", _wrap_CPXfreeprob, METH_VARARGS, NULL},
	 { "CPXftran", _wrap_CPXftran, METH_VARARGS, NULL},
	 { "CPXgetax", _wrap_CPXgetax, METH_VARARGS, NULL},
	 { "CPXgetbaritcnt", _wrap_CPXgetbaritcnt, METH_VARARGS, NULL},
	 { "CPXgetbase", _wrap_CPXgetbase, METH_VARARGS, NULL},
	 { "CPXgetbasednorms", _wrap_CPXgetbasednorms, METH_VARARGS, NULL},
	 { "CPXgetbhead", _wrap_CPXgetbhead, METH_VARARGS, NULL},
	 { "CPXgetcallbackinfo", _wrap_CPXgetcallbackinfo, METH_VARARGS, NULL},
	 { "CPXgetchannels", _wrap_CPXgetchannels, METH_VARARGS, NULL},
	 { "CPXgetchgparam", _wrap_CPXgetchgparam, METH_VARARGS, NULL},
	 { "CPXgetcoef", _wrap_CPXgetcoef, METH_VARARGS, NULL},
	 { "CPXgetcolindex", _wrap_CPXgetcolindex, METH_VARARGS, NULL},
	 { "CPXgetcolinfeas", _wrap_CPXgetcolinfeas, METH_VARARGS, NULL},
	 { "CPXgetcolname", _wrap_CPXgetcolname, METH_VARARGS, NULL},
	 { "CPXgetcols", _wrap_CPXgetcols, METH_VARARGS, NULL},
	 { "CPXgetconflict", _wrap_CPXgetconflict, METH_VARARGS, NULL},
	 { "CPXgetconflictext", _wrap_CPXgetconflictext, METH_VARARGS, NULL},
	 { "CPXgetconflictgroups", _wrap_CPXgetconflictgroups, METH_VARARGS, NULL},
	 { "CPXgetconflictnumgroups", _wrap_CPXgetconflictnumgroups, METH_VARARGS, NULL},
	 { "CPXgetconflictnumpasses", _wrap_CPXgetconflictnumpasses, METH_VARARGS, NULL},
	 { "CPXgetcrossdexchcnt", _wrap_CPXgetcrossdexchcnt, METH_VARARGS, NULL},
	 { "CPXgetcrossdpushcnt", _wrap_CPXgetcrossdpushcnt, METH_VARARGS, NULL},
	 { "CPXgetcrosspexchcnt", _wrap_CPXgetcrosspexchcnt, METH_VARARGS, NULL},
	 { "CPXgetcrossppushcnt", _wrap_CPXgetcrossppushcnt, METH_VARARGS, NULL},
	 { "CPXgetdblannotationdefval", _wrap_CPXgetdblannotationdefval, METH_VARARGS, NULL},
	 { "CPXgetdblannotationindex", _wrap_CPXgetdblannotationindex, METH_VARARGS, NULL},
	 { "CPXgetdblannotationname", _wrap_CPXgetdblannotationname, METH_VARARGS, NULL},
	 { "CPXgetdblannotations", _wrap_CPXgetdblannotations, METH_VARARGS, NULL},
	 { "CPXgetdblparam", _wrap_CPXgetdblparam, METH_VARARGS, NULL},
	 { "CPXgetdblquality", _wrap_CPXgetdblquality, METH_VARARGS, NULL},
	 { "CPXgetdettime", _wrap_CPXgetdettime, METH_VARARGS, NULL},
	 { "CPXgetdj", _wrap_CPXgetdj, METH_VARARGS, NULL},
	 { "CPXgetdnorms", _wrap_CPXgetdnorms, METH_VARARGS, NULL},
	 { "CPXgetdsbcnt", _wrap_CPXgetdsbcnt, METH_VARARGS, NULL},
	 { "CPXgeterrorstring", _wrap_CPXgeterrorstring, METH_VARARGS, NULL},
	 { "CPXgetgrad", _wrap_CPXgetgrad, METH_VARARGS, NULL},
	 { "CPXgetijdiv", _wrap_CPXgetijdiv, METH_VARARGS, NULL},
	 { "CPXgetijrow", _wrap_CPXgetijrow, METH_VARARGS, NULL},
	 { "CPXgetintparam", _wrap_CPXgetintparam, METH_VARARGS, NULL},
	 { "CPXgetintquality", _wrap_CPXgetintquality, METH_VARARGS, NULL},
	 { "CPXgetitcnt", _wrap_CPXgetitcnt, METH_VARARGS, NULL},
	 { "CPXgetlb", _wrap_CPXgetlb, METH_VARARGS, NULL},
	 { "CPXgetlogfilename", _wrap_CPXgetlogfilename, METH_VARARGS, NULL},
	 { "CPXgetlongannotationdefval", _wrap_CPXgetlongannotationdefval, METH_VARARGS, NULL},
	 { "CPXgetlongannotationindex", _wrap_CPXgetlongannotationindex, METH_VARARGS, NULL},
	 { "CPXgetlongannotationname", _wrap_CPXgetlongannotationname, METH_VARARGS, NULL},
	 { "CPXgetlongannotations", _wrap_CPXgetlongannotations, METH_VARARGS, NULL},
	 { "CPXgetlongparam", _wrap_CPXgetlongparam, METH_VARARGS, NULL},
	 { "CPXgetlpcallbackfunc", _wrap_CPXgetlpcallbackfunc, METH_VARARGS, NULL},
	 { "CPXgetmethod", _wrap_CPXgetmethod, METH_VARARGS, NULL},
	 { "CPXgetnetcallbackfunc", _wrap_CPXgetnetcallbackfunc, METH_VARARGS, NULL},
	 { "CPXgetnumcols", _wrap_CPXgetnumcols, METH_VARARGS, NULL},
	 { "CPXgetnumcores", _wrap_CPXgetnumcores, METH_VARARGS, NULL},
	 { "CPXgetnumdblannotations", _wrap_CPXgetnumdblannotations, METH_VARARGS, NULL},
	 { "CPXgetnumlongannotations", _wrap_CPXgetnumlongannotations, METH_VARARGS, NULL},
	 { "CPXgetnumnz", _wrap_CPXgetnumnz, METH_VARARGS, NULL},
	 { "CPXgetnumobjs", _wrap_CPXgetnumobjs, METH_VARARGS, NULL},
	 { "CPXgetnumpwl", _wrap_CPXgetnumpwl, METH_VARARGS, NULL},
	 { "CPXgetnumrows", _wrap_CPXgetnumrows, METH_VARARGS, NULL},
	 { "CPXgetobj", _wrap_CPXgetobj, METH_VARARGS, NULL},
	 { "CPXgetobjname", _wrap_CPXgetobjname, METH_VARARGS, NULL},
	 { "CPXgetobjoffset", _wrap_CPXgetobjoffset, METH_VARARGS, NULL},
	 { "CPXgetobjsen", _wrap_CPXgetobjsen, METH_VARARGS, NULL},
	 { "CPXgetobjval", _wrap_CPXgetobjval, METH_VARARGS, NULL},
	 { "CPXgetparamhiername", _wrap_CPXgetparamhiername, METH_VARARGS, NULL},
	 { "CPXgetparamname", _wrap_CPXgetparamname, METH_VARARGS, NULL},
	 { "CPXgetparamnum", _wrap_CPXgetparamnum, METH_VARARGS, NULL},
	 { "CPXgetparamtype", _wrap_CPXgetparamtype, METH_VARARGS, NULL},
	 { "CPXgetphase1cnt", _wrap_CPXgetphase1cnt, METH_VARARGS, NULL},
	 { "CPXgetpi", _wrap_CPXgetpi, METH_VARARGS, NULL},
	 { "CPXgetpnorms", _wrap_CPXgetpnorms, METH_VARARGS, NULL},
	 { "CPXgetprestat", _wrap_CPXgetprestat, METH_VARARGS, NULL},
	 { "CPXgetprobname", _wrap_CPXgetprobname, METH_VARARGS, NULL},
	 { "CPXgetprobtype", _wrap_CPXgetprobtype, METH_VARARGS, NULL},
	 { "CPXgetprotected", _wrap_CPXgetprotected, METH_VARARGS, NULL},
	 { "CPXgetpsbcnt", _wrap_CPXgetpsbcnt, METH_VARARGS, NULL},
	 { "CPXgetpwl", _wrap_CPXgetpwl, METH_VARARGS, NULL},
	 { "CPXgetpwlindex", _wrap_CPXgetpwlindex, METH_VARARGS, NULL},
	 { "CPXgetpwlname", _wrap_CPXgetpwlname, METH_VARARGS, NULL},
	 { "CPXgetray", _wrap_CPXgetray, METH_VARARGS, NULL},
	 { "CPXgetredlp", _wrap_CPXgetredlp, METH_VARARGS, NULL},
	 { "CPXgetrhs", _wrap_CPXgetrhs, METH_VARARGS, NULL},
	 { "CPXgetrngval", _wrap_CPXgetrngval, METH_VARARGS, NULL},
	 { "CPXgetrowindex", _wrap_CPXgetrowindex, METH_VARARGS, NULL},
	 { "CPXgetrowinfeas", _wrap_CPXgetrowinfeas, METH_VARARGS, NULL},
	 { "CPXgetrowname", _wrap_CPXgetrowname, METH_VARARGS, NULL},
	 { "CPXgetrows", _wrap_CPXgetrows, METH_VARARGS, NULL},
	 { "CPXgetsense", _wrap_CPXgetsense, METH_VARARGS, NULL},
	 { "CPXgetsiftitcnt", _wrap_CPXgetsiftitcnt, METH_VARARGS, NULL},
	 { "CPXgetsiftphase1cnt", _wrap_CPXgetsiftphase1cnt, METH_VARARGS, NULL},
	 { "CPXgetslack", _wrap_CPXgetslack, METH_VARARGS, NULL},
	 { "CPXgetsolnpooldblquality", _wrap_CPXgetsolnpooldblquality, METH_VARARGS, NULL},
	 { "CPXgetsolnpoolintquality", _wrap_CPXgetsolnpoolintquality, METH_VARARGS, NULL},
	 { "CPXgetstat", _wrap_CPXgetstat, METH_VARARGS, NULL},
	 { "CPXgetstatstring", _wrap_CPXgetstatstring, METH_VARARGS, NULL},
	 { "CPXgetstrparam", _wrap_CPXgetstrparam, METH_VARARGS, NULL},
	 { "CPXgettime", _wrap_CPXgettime, METH_VARARGS, NULL},
	 { "CPXgettuningcallbackfunc", _wrap_CPXgettuningcallbackfunc, METH_VARARGS, NULL},
	 { "CPXgetub", _wrap_CPXgetub, METH_VARARGS, NULL},
	 { "CPXgetweight", _wrap_CPXgetweight, METH_VARARGS, NULL},
	 { "CPXgetx", _wrap_CPXgetx, METH_VARARGS, NULL},
	 { "CPXhybnetopt", _wrap_CPXhybnetopt, METH_VARARGS, NULL},
	 { "CPXinfodblparam", _wrap_CPXinfodblparam, METH_VARARGS, NULL},
	 { "CPXinfointparam", _wrap_CPXinfointparam, METH_VARARGS, NULL},
	 { "CPXinfolongparam", _wrap_CPXinfolongparam, METH_VARARGS, NULL},
	 { "CPXinfostrparam", _wrap_CPXinfostrparam, METH_VARARGS, NULL},
	 { "CPXinitialize", _wrap_CPXinitialize, METH_NOARGS, NULL},
	 { "CPXkilldnorms", _wrap_CPXkilldnorms, METH_O, NULL},
	 { "CPXkillpnorms", _wrap_CPXkillpnorms, METH_O, NULL},
	 { "CPXlpopt", _wrap_CPXlpopt, METH_VARARGS, NULL},
	 { "CPXmbasewrite", _wrap_CPXmbasewrite, METH_VARARGS, NULL},
	 { "CPXmdleave", _wrap_CPXmdleave, METH_VARARGS, NULL},
	 { "CPXmodelasstcallbackgetfunc", _wrap_CPXmodelasstcallbackgetfunc, METH_VARARGS, NULL},
	 { "CPXmodelasstcallbacksetfunc", _wrap_CPXmodelasstcallbacksetfunc, METH_VARARGS, NULL},
	 { "CPXmsgstr", _wrap_CPXmsgstr, METH_VARARGS, NULL},
	 { "CPXmultiobjchgattribs", _wrap_CPXmultiobjchgattribs, METH_VARARGS, NULL},
	 { "CPXmultiobjgetdblinfo", _wrap_CPXmultiobjgetdblinfo, METH_VARARGS, NULL},
	 { "CPXmultiobjgetindex", _wrap_CPXmultiobjgetindex, METH_VARARGS, NULL},
	 { "CPXmultiobjgetintinfo", _wrap_CPXmultiobjgetintinfo, METH_VARARGS, NULL},
	 { "CPXmultiobjgetlonginfo", _wrap_CPXmultiobjgetlonginfo, METH_VARARGS, NULL},
	 { "CPXmultiobjgetname", _wrap_CPXmultiobjgetname, METH_VARARGS, NULL},
	 { "CPXmultiobjgetnumsolves", _wrap_CPXmultiobjgetnumsolves, METH_VARARGS, NULL},
	 { "CPXmultiobjgetobj", _wrap_CPXmultiobjgetobj, METH_VARARGS, NULL},
	 { "CPXmultiobjgetobjval", _wrap_CPXmultiobjgetobjval, METH_VARARGS, NULL},
	 { "CPXmultiobjgetobjvalbypriority", _wrap_CPXmultiobjgetobjvalbypriority, METH_VARARGS, NULL},
	 { "CPXmultiobjopt", _wrap_CPXmultiobjopt, METH_VARARGS, NULL},
	 { "CPXmultiobjsetobj", _wrap_CPXmultiobjsetobj, METH_VARARGS, NULL},
	 { "CPXNETextract", _wrap_CPXNETextract, METH_VARARGS, NULL},
	 { "CPXnewcols", _wrap_CPXnewcols, METH_VARARGS, NULL},
	 { "CPXnewdblannotation", _wrap_CPXnewdblannotation, METH_VARARGS, NULL},
	 { "CPXnewlongannotation", _wrap_CPXnewlongannotation, METH_VARARGS, NULL},
	 { "CPXnewrows", _wrap_CPXnewrows, METH_VARARGS, NULL},
	 { "CPXobjsa", _wrap_CPXobjsa, METH_VARARGS, NULL},
	 { "CPXopenCPLEX", _wrap_CPXopenCPLEX, METH_O, NULL},
	 { "CPXparamsetadddbl", _wrap_CPXparamsetadddbl, METH_VARARGS, NULL},
	 { "CPXparamsetaddint", _wrap_CPXparamsetaddint, METH_VARARGS, NULL},
	 { "CPXparamsetaddlong", _wrap_CPXparamsetaddlong, METH_VARARGS, NULL},
	 { "CPXparamsetaddstr", _wrap_CPXparamsetaddstr, METH_VARARGS, NULL},
	 { "CPXparamsetapply", _wrap_CPXparamsetapply, METH_VARARGS, NULL},
	 { "CPXparamsetcopy", _wrap_CPXparamsetcopy, METH_VARARGS, NULL},
	 { "CPXparamsetcreate", _wrap_CPXparamsetcreate, METH_VARARGS, NULL},
	 { "CPXparamsetdel", _wrap_CPXparamsetdel, METH_VARARGS, NULL},
	 { "CPXparamsetfree", _wrap_CPXparamsetfree, METH_VARARGS, NULL},
	 { "CPXparamsetgetdbl", _wrap_CPXparamsetgetdbl, METH_VARARGS, NULL},
	 { "CPXparamsetgetids", _wrap_CPXparamsetgetids, METH_VARARGS, NULL},
	 { "CPXparamsetgetint", _wrap_CPXparamsetgetint, METH_VARARGS, NULL},
	 { "CPXparamsetgetlong", _wrap_CPXparamsetgetlong, METH_VARARGS, NULL},
	 { "CPXparamsetgetstr", _wrap_CPXparamsetgetstr, METH_VARARGS, NULL},
	 { "CPXparamsetreadcopy", _wrap_CPXparamsetreadcopy, METH_VARARGS, NULL},
	 { "CPXparamsetwrite", _wrap_CPXparamsetwrite, METH_VARARGS, NULL},
	 { "CPXpivot", _wrap_CPXpivot, METH_VARARGS, NULL},
	 { "CPXpivotin", _wrap_CPXpivotin, METH_VARARGS, NULL},
	 { "CPXpivotout", _wrap_CPXpivotout, METH_VARARGS, NULL},
	 { "CPXpperwrite", _wrap_CPXpperwrite, METH_VARARGS, NULL},
	 { "CPXpratio", _wrap_CPXpratio, METH_VARARGS, NULL},
	 { "CPXpreaddrows", _wrap_CPXpreaddrows, METH_VARARGS, NULL},
	 { "CPXprechgobj", _wrap_CPXprechgobj, METH_VARARGS, NULL},
	 { "CPXpreslvwrite", _wrap_CPXpreslvwrite, METH_VARARGS, NULL},
	 { "CPXpresolve", _wrap_CPXpresolve, METH_VARARGS, NULL},
	 { "CPXprimopt", _wrap_CPXprimopt, METH_VARARGS, NULL},
	 { "CPXqpdjfrompi", _wrap_CPXqpdjfrompi, METH_VARARGS, NULL},
	 { "CPXqpuncrushpi", _wrap_CPXqpuncrushpi, METH_VARARGS, NULL},
	 { "CPXreadcopyannotations", _wrap_CPXreadcopyannotations, METH_VARARGS, NULL},
	 { "CPXreadcopybase", _wrap_CPXreadcopybase, METH_VARARGS, NULL},
	 { "CPXreadcopyparam", _wrap_CPXreadcopyparam, METH_VARARGS, NULL},
	 { "CPXreadcopyprob", _wrap_CPXreadcopyprob, METH_VARARGS, NULL},
	 { "CPXreadcopysol", _wrap_CPXreadcopysol, METH_VARARGS, NULL},
	 { "CPXreadcopystartinfo", _wrap_CPXreadcopystartinfo, METH_VARARGS, NULL},
	 { "CPXrefineconflict", _wrap_CPXrefineconflict, METH_VARARGS, NULL},
	 { "CPXrefineconflictext", _wrap_CPXrefineconflictext, METH_VARARGS, NULL},
	 { "CPXrhssa", _wrap_CPXrhssa, METH_VARARGS, NULL},
	 { "CPXrobustopt", _wrap_CPXrobustopt, METH_VARARGS, NULL},
	 { "CPXserializercreate", _wrap_CPXserializercreate, METH_O, NULL},
	 { "CPXserializerdestroy", _wrap_CPXserializerdestroy, METH_O, NULL},
	 { "CPXserializerlength", _wrap_CPXserializerlength, METH_O, NULL},
	 { "CPXserializerpayload", _wrap_CPXserializerpayload, METH_O, NULL},
	 { "CPXsetdblannotations", _wrap_CPXsetdblannotations, METH_VARARGS, NULL},
	 { "CPXsetdblparam", _wrap_CPXsetdblparam, METH_VARARGS, NULL},
	 { "CPXsetdefaults", _wrap_CPXsetdefaults, METH_O, NULL},
	 { "CPXsetintparam", _wrap_CPXsetintparam, METH_VARARGS, NULL},
	 { "CPXsetlogfilename", _wrap_CPXsetlogfilename, METH_VARARGS, NULL},
	 { "CPXsetlongannotations", _wrap_CPXsetlongannotations, METH_VARARGS, NULL},
	 { "CPXsetlongparam", _wrap_CPXsetlongparam, METH_VARARGS, NULL},
	 { "CPXsetlpcallbackfunc", _wrap_CPXsetlpcallbackfunc, METH_VARARGS, NULL},
	 { "CPXsetnetcallbackfunc", _wrap_CPXsetnetcallbackfunc, METH_VARARGS, NULL},
	 { "CPXsetnumobjs", _wrap_CPXsetnumobjs, METH_VARARGS, NULL},
	 { "CPXsetphase2", _wrap_CPXsetphase2, METH_VARARGS, NULL},
	 { "CPXsetprofcallbackfunc", _wrap_CPXsetprofcallbackfunc, METH_VARARGS, NULL},
	 { "CPXsetstrparam", _wrap_CPXsetstrparam, METH_VARARGS, NULL},
	 { "CPXsetterminate", _wrap_CPXsetterminate, METH_VARARGS, NULL},
	 { "CPXsettuningcallbackfunc", _wrap_CPXsettuningcallbackfunc, METH_VARARGS, NULL},
	 { "CPXsiftopt", _wrap_CPXsiftopt, METH_VARARGS, NULL},
	 { "CPXslackfromx", _wrap_CPXslackfromx, METH_VARARGS, NULL},
	 { "CPXsolninfo", _wrap_CPXsolninfo, METH_VARARGS, NULL},
	 { "CPXsolution", _wrap_CPXsolution, METH_VARARGS, NULL},
	 { "CPXsolwrite", _wrap_CPXsolwrite, METH_VARARGS, NULL},
	 { "CPXsolwritesolnpool", _wrap_CPXsolwritesolnpool, METH_VARARGS, NULL},
	 { "CPXsolwritesolnpoolall", _wrap_CPXsolwritesolnpoolall, METH_VARARGS, NULL},
	 { "CPXstrongbranch", _wrap_CPXstrongbranch, METH_VARARGS, NULL},
	 { "CPXtightenbds", _wrap_CPXtightenbds, METH_VARARGS, NULL},
	 { "CPXtuneparam", _wrap_CPXtuneparam, METH_VARARGS, NULL},
	 { "CPXtuneparamprobset", _wrap_CPXtuneparamprobset, METH_VARARGS, NULL},
	 { "CPXuncrushform", _wrap_CPXuncrushform, METH_VARARGS, NULL},
	 { "CPXuncrushpi", _wrap_CPXuncrushpi, METH_VARARGS, NULL},
	 { "CPXuncrushx", _wrap_CPXuncrushx, METH_VARARGS, NULL},
	 { "CPXunscaleprob", _wrap_CPXunscaleprob, METH_VARARGS, NULL},
	 { "CPXversion", _wrap_CPXversion, METH_O, NULL},
	 { "CPXversionnumber", _wrap_CPXversionnumber, METH_VARARGS, NULL},
	 { "CPXwriteannotations", _wrap_CPXwriteannotations, METH_VARARGS, NULL},
	 { "CPXwritebendersannotation", _wrap_CPXwritebendersannotation, METH_VARARGS, NULL},
	 { "CPXwriteparam", _wrap_CPXwriteparam, METH_VARARGS, NULL},
	 { "CPXwriteprob", _wrap_CPXwriteprob, METH_VARARGS, NULL},
	 { "CPXbaropt", _wrap_CPXbaropt, METH_VARARGS, NULL},
	 { "CPXhybbaropt", _wrap_CPXhybbaropt, METH_VARARGS, NULL},
	 { "CPXaddindconstraints", _wrap_CPXaddindconstraints, METH_VARARGS, NULL},
	 { "CPXaddlazyconstraints", _wrap_CPXaddlazyconstraints, METH_VARARGS, NULL},
	 { "CPXaddmipstarts", _wrap_CPXaddmipstarts, METH_VARARGS, NULL},
	 { "CPXaddsolnpooldivfilter", _wrap_CPXaddsolnpooldivfilter, METH_VARARGS, NULL},
	 { "CPXaddsolnpoolrngfilter", _wrap_CPXaddsolnpoolrngfilter, METH_VARARGS, NULL},
	 { "CPXaddsos", _wrap_CPXaddsos, METH_VARARGS, NULL},
	 { "CPXaddusercuts", _wrap_CPXaddusercuts, METH_VARARGS, NULL},
	 { "CPXbendersopt", _wrap_CPXbendersopt, METH_VARARGS, NULL},
	 { "CPXbranchcallbackbranchasCPLEX", _wrap_CPXbranchcallbackbranchasCPLEX, METH_VARARGS, NULL},
	 { "CPXbranchcallbackbranchbds", _wrap_CPXbranchcallbackbranchbds, METH_VARARGS, NULL},
	 { "CPXbranchcallbackbranchconstraints", _wrap_CPXbranchcallbackbranchconstraints, METH_VARARGS, NULL},
	 { "CPXbranchcallbackbranchgeneral", _wrap_CPXbranchcallbackbranchgeneral, METH_VARARGS, NULL},
	 { "CPXcallbackgetgloballb", _wrap_CPXcallbackgetgloballb, METH_VARARGS, NULL},
	 { "CPXcallbackgetglobalub", _wrap_CPXcallbackgetglobalub, METH_VARARGS, NULL},
	 { "CPXcallbackgetlocallb", _wrap_CPXcallbackgetlocallb, METH_VARARGS, NULL},
	 { "CPXcallbackgetlocalub", _wrap_CPXcallbackgetlocalub, METH_VARARGS, NULL},
	 { "CPXcallbacksetnodeuserhandle", _wrap_CPXcallbacksetnodeuserhandle, METH_VARARGS, NULL},
	 { "CPXcallbacksetuserhandle", _wrap_CPXcallbacksetuserhandle, METH_VARARGS, NULL},
	 { "CPXchgctype", _wrap_CPXchgctype, METH_VARARGS, NULL},
	 { "CPXchgmipstarts", _wrap_CPXchgmipstarts, METH_VARARGS, NULL},
	 { "CPXcopyctype", _wrap_CPXcopyctype, METH_VARARGS, NULL},
	 { "CPXcopyorder", _wrap_CPXcopyorder, METH_VARARGS, NULL},
	 { "CPXcopysos", _wrap_CPXcopysos, METH_VARARGS, NULL},
	 { "CPXcutcallbackadd", _wrap_CPXcutcallbackadd, METH_VARARGS, NULL},
	 { "CPXcutcallbackaddlocal", _wrap_CPXcutcallbackaddlocal, METH_VARARGS, NULL},
	 { "CPXdelindconstrs", _wrap_CPXdelindconstrs, METH_VARARGS, NULL},
	 { "CPXdelmipstarts", _wrap_CPXdelmipstarts, METH_VARARGS, NULL},
	 { "CPXdelsetmipstarts", _wrap_CPXdelsetmipstarts, METH_VARARGS, NULL},
	 { "CPXdelsetsolnpoolfilters", _wrap_CPXdelsetsolnpoolfilters, METH_VARARGS, NULL},
	 { "CPXdelsetsolnpoolsolns", _wrap_CPXdelsetsolnpoolsolns, METH_VARARGS, NULL},
	 { "CPXdelsetsos", _wrap_CPXdelsetsos, METH_VARARGS, NULL},
	 { "CPXdelsolnpoolfilters", _wrap_CPXdelsolnpoolfilters, METH_VARARGS, NULL},
	 { "CPXdelsolnpoolsolns", _wrap_CPXdelsolnpoolsolns, METH_VARARGS, NULL},
	 { "CPXdelsos", _wrap_CPXdelsos, METH_VARARGS, NULL},
	 { "CPXfltwrite", _wrap_CPXfltwrite, METH_VARARGS, NULL},
	 { "CPXfreelazyconstraints", _wrap_CPXfreelazyconstraints, METH_VARARGS, NULL},
	 { "CPXfreeusercuts", _wrap_CPXfreeusercuts, METH_VARARGS, NULL},
	 { "CPXgetbestobjval", _wrap_CPXgetbestobjval, METH_VARARGS, NULL},
	 { "CPXgetbranchcallbackfunc", _wrap_CPXgetbranchcallbackfunc, METH_VARARGS, NULL},
	 { "CPXgetbranchnosolncallbackfunc", _wrap_CPXgetbranchnosolncallbackfunc, METH_VARARGS, NULL},
	 { "CPXgetcallbackbranchconstraints", _wrap_CPXgetcallbackbranchconstraints, METH_VARARGS, NULL},
	 { "CPXgetcallbackctype", _wrap_CPXgetcallbackctype, METH_VARARGS, NULL},
	 { "CPXgetcallbackgloballb", _wrap_CPXgetcallbackgloballb, METH_VARARGS, NULL},
	 { "CPXgetcallbackglobalub", _wrap_CPXgetcallbackglobalub, METH_VARARGS, NULL},
	 { "CPXgetcallbackincumbent", _wrap_CPXgetcallbackincumbent, METH_VARARGS, NULL},
	 { "CPXgetcallbackindicatorinfo", _wrap_CPXgetcallbackindicatorinfo, METH_VARARGS, NULL},
	 { "CPXgetcallbacklp", _wrap_CPXgetcallbacklp, METH_VARARGS, NULL},
	 { "CPXgetcallbacknodeinfo", _wrap_CPXgetcallbacknodeinfo, METH_VARARGS, NULL},
	 { "CPXgetcallbacknodeintfeas", _wrap_CPXgetcallbacknodeintfeas, METH_VARARGS, NULL},
	 { "CPXgetcallbacknodelb", _wrap_CPXgetcallbacknodelb, METH_VARARGS, NULL},
	 { "CPXgetcallbacknodelp", _wrap_CPXgetcallbacknodelp, METH_VARARGS, NULL},
	 { "CPXgetcallbacknodeobjval", _wrap_CPXgetcallbacknodeobjval, METH_VARARGS, NULL},
	 { "CPXgetcallbacknodestat", _wrap_CPXgetcallbacknodestat, METH_VARARGS, NULL},
	 { "CPXgetcallbacknodeub", _wrap_CPXgetcallbacknodeub, METH_VARARGS, NULL},
	 { "CPXgetcallbacknodex", _wrap_CPXgetcallbacknodex, METH_VARARGS, NULL},
	 { "CPXgetcallbackorder", _wrap_CPXgetcallbackorder, METH_VARARGS, NULL},
	 { "CPXgetcallbackpseudocosts", _wrap_CPXgetcallbackpseudocosts, METH_VARARGS, NULL},
	 { "CPXgetcallbackseqinfo", _wrap_CPXgetcallbackseqinfo, METH_VARARGS, NULL},
	 { "CPXgetcallbacksosinfo", _wrap_CPXgetcallbacksosinfo, METH_VARARGS, NULL},
	 { "CPXgetctype", _wrap_CPXgetctype, METH_VARARGS, NULL},
	 { "CPXgetcutoff", _wrap_CPXgetcutoff, METH_VARARGS, NULL},
	 { "CPXgetdeletenodecallbackfunc", _wrap_CPXgetdeletenodecallbackfunc, METH_VARARGS, NULL},
	 { "CPXgetheuristiccallbackfunc", _wrap_CPXgetheuristiccallbackfunc, METH_VARARGS, NULL},
	 { "CPXgetincumbentcallbackfunc", _wrap_CPXgetincumbentcallbackfunc, METH_VARARGS, NULL},
	 { "CPXgetindconstr", _wrap_CPXgetindconstr, METH_VARARGS, NULL},
	 { "CPXgetindconstraints", _wrap_CPXgetindconstraints, METH_VARARGS, NULL},
	 { "CPXgetindconstrindex", _wrap_CPXgetindconstrindex, METH_VARARGS, NULL},
	 { "CPXgetindconstrinfeas", _wrap_CPXgetindconstrinfeas, METH_VARARGS, NULL},
	 { "CPXgetindconstrname", _wrap_CPXgetindconstrname, METH_VARARGS, NULL},
	 { "CPXgetindconstrslack", _wrap_CPXgetindconstrslack, METH_VARARGS, NULL},
	 { "CPXgetinfocallbackfunc", _wrap_CPXgetinfocallbackfunc, METH_VARARGS, NULL},
	 { "CPXgetlazyconstraintcallbackfunc", _wrap_CPXgetlazyconstraintcallbackfunc, METH_VARARGS, NULL},
	 { "CPXgetmipcallbackfunc", _wrap_CPXgetmipcallbackfunc, METH_VARARGS, NULL},
	 { "CPXgetmipitcnt", _wrap_CPXgetmipitcnt, METH_VARARGS, NULL},
	 { "CPXgetmiprelgap", _wrap_CPXgetmiprelgap, METH_VARARGS, NULL},
	 { "CPXgetmipstartindex", _wrap_CPXgetmipstartindex, METH_VARARGS, NULL},
	 { "CPXgetmipstartname", _wrap_CPXgetmipstartname, METH_VARARGS, NULL},
	 { "CPXgetmipstarts", _wrap_CPXgetmipstarts, METH_VARARGS, NULL},
	 { "CPXgetnodecallbackfunc", _wrap_CPXgetnodecallbackfunc, METH_VARARGS, NULL},
	 { "CPXgetnodecnt", _wrap_CPXgetnodecnt, METH_VARARGS, NULL},
	 { "CPXgetnodeint", _wrap_CPXgetnodeint, METH_VARARGS, NULL},
	 { "CPXgetnodeleftcnt", _wrap_CPXgetnodeleftcnt, METH_VARARGS, NULL},
	 { "CPXgetnumbin", _wrap_CPXgetnumbin, METH_VARARGS, NULL},
	 { "CPXgetnumcuts", _wrap_CPXgetnumcuts, METH_VARARGS, NULL},
	 { "CPXgetnumindconstrs", _wrap_CPXgetnumindconstrs, METH_VARARGS, NULL},
	 { "CPXgetnumint", _wrap_CPXgetnumint, METH_VARARGS, NULL},
	 { "CPXgetnumlazyconstraints", _wrap_CPXgetnumlazyconstraints, METH_VARARGS, NULL},
	 { "CPXgetnummipstarts", _wrap_CPXgetnummipstarts, METH_VARARGS, NULL},
	 { "CPXgetnumsemicont", _wrap_CPXgetnumsemicont, METH_VARARGS, NULL},
	 { "CPXgetnumsemiint", _wrap_CPXgetnumsemiint, METH_VARARGS, NULL},
	 { "CPXgetnumsos", _wrap_CPXgetnumsos, METH_VARARGS, NULL},
	 { "CPXgetnumusercuts", _wrap_CPXgetnumusercuts, METH_VARARGS, NULL},
	 { "CPXgetorder", _wrap_CPXgetorder, METH_VARARGS, NULL},
	 { "CPXgetsolnpooldivfilter", _wrap_CPXgetsolnpooldivfilter, METH_VARARGS, NULL},
	 { "CPXgetsolnpoolfilterindex", _wrap_CPXgetsolnpoolfilterindex, METH_VARARGS, NULL},
	 { "CPXgetsolnpoolfiltername", _wrap_CPXgetsolnpoolfiltername, METH_VARARGS, NULL},
	 { "CPXgetsolnpoolfiltertype", _wrap_CPXgetsolnpoolfiltertype, METH_VARARGS, NULL},
	 { "CPXgetsolnpoolmeanobjval", _wrap_CPXgetsolnpoolmeanobjval, METH_VARARGS, NULL},
	 { "CPXgetsolnpoolnumfilters", _wrap_CPXgetsolnpoolnumfilters, METH_VARARGS, NULL},
	 { "CPXgetsolnpoolnumreplaced", _wrap_CPXgetsolnpoolnumreplaced, METH_VARARGS, NULL},
	 { "CPXgetsolnpoolnumsolns", _wrap_CPXgetsolnpoolnumsolns, METH_VARARGS, NULL},
	 { "CPXgetsolnpoolobjval", _wrap_CPXgetsolnpoolobjval, METH_VARARGS, NULL},
	 { "CPXgetsolnpoolqconstrslack", _wrap_CPXgetsolnpoolqconstrslack, METH_VARARGS, NULL},
	 { "CPXgetsolnpoolrngfilter", _wrap_CPXgetsolnpoolrngfilter, METH_VARARGS, NULL},
	 { "CPXgetsolnpoolslack", _wrap_CPXgetsolnpoolslack, METH_VARARGS, NULL},
	 { "CPXgetsolnpoolsolnindex", _wrap_CPXgetsolnpoolsolnindex, METH_VARARGS, NULL},
	 { "CPXgetsolnpoolsolnname", _wrap_CPXgetsolnpoolsolnname, METH_VARARGS, NULL},
	 { "CPXgetsolnpoolx", _wrap_CPXgetsolnpoolx, METH_VARARGS, NULL},
	 { "CPXgetsolvecallbackfunc", _wrap_CPXgetsolvecallbackfunc, METH_VARARGS, NULL},
	 { "CPXgetsos", _wrap_CPXgetsos, METH_VARARGS, NULL},
	 { "CPXgetsosindex", _wrap_CPXgetsosindex, METH_VARARGS, NULL},
	 { "CPXgetsosinfeas", _wrap_CPXgetsosinfeas, METH_VARARGS, NULL},
	 { "CPXgetsosname", _wrap_CPXgetsosname, METH_VARARGS, NULL},
	 { "CPXgetsubmethod", _wrap_CPXgetsubmethod, METH_VARARGS, NULL},
	 { "CPXgetsubstat", _wrap_CPXgetsubstat, METH_VARARGS, NULL},
	 { "CPXgetusercutcallbackfunc", _wrap_CPXgetusercutcallbackfunc, METH_VARARGS, NULL},
	 { "CPXindconstrslackfromx", _wrap_CPXindconstrslackfromx, METH_VARARGS, NULL},
	 { "CPXmipopt", _wrap_CPXmipopt, METH_VARARGS, NULL},
	 { "CPXordread", _wrap_CPXordread, METH_VARARGS, NULL},
	 { "CPXordwrite", _wrap_CPXordwrite, METH_VARARGS, NULL},
	 { "CPXpopulate", _wrap_CPXpopulate, METH_VARARGS, NULL},
	 { "CPXreadcopymipstarts", _wrap_CPXreadcopymipstarts, METH_VARARGS, NULL},
	 { "CPXreadcopyorder", _wrap_CPXreadcopyorder, METH_VARARGS, NULL},
	 { "CPXreadcopysolnpoolfilters", _wrap_CPXreadcopysolnpoolfilters, METH_VARARGS, NULL},
	 { "CPXrefinemipstartconflict", _wrap_CPXrefinemipstartconflict, METH_VARARGS, NULL},
	 { "CPXrefinemipstartconflictext", _wrap_CPXrefinemipstartconflictext, METH_VARARGS, NULL},
	 { "CPXsetbranchcallbackfunc", _wrap_CPXsetbranchcallbackfunc, METH_VARARGS, NULL},
	 { "CPXsetbranchnosolncallbackfunc", _wrap_CPXsetbranchnosolncallbackfunc, METH_VARARGS, NULL},
	 { "CPXsetdeletenodecallbackfunc", _wrap_CPXsetdeletenodecallbackfunc, METH_VARARGS, NULL},
	 { "CPXsetheuristiccallbackfunc", _wrap_CPXsetheuristiccallbackfunc, METH_VARARGS, NULL},
	 { "CPXsetincumbentcallbackfunc", _wrap_CPXsetincumbentcallbackfunc, METH_VARARGS, NULL},
	 { "CPXsetinfocallbackfunc", _wrap_CPXsetinfocallbackfunc, METH_VARARGS, NULL},
	 { "CPXsetlazyconstraintcallbackfunc", _wrap_CPXsetlazyconstraintcallbackfunc, METH_VARARGS, NULL},
	 { "CPXsetmipcallbackfunc", _wrap_CPXsetmipcallbackfunc, METH_VARARGS, NULL},
	 { "CPXsetnodecallbackfunc", _wrap_CPXsetnodecallbackfunc, METH_VARARGS, NULL},
	 { "CPXsetsolvecallbackfunc", _wrap_CPXsetsolvecallbackfunc, METH_VARARGS, NULL},
	 { "CPXsetusercutcallbackfunc", _wrap_CPXsetusercutcallbackfunc, METH_VARARGS, NULL},
	 { "CPXwritemipstarts", _wrap_CPXwritemipstarts, METH_VARARGS, NULL},
	 { "CPXaddindconstr", _wrap_CPXaddindconstr, METH_VARARGS, NULL},
	 { "CPXNETaddarcs", _wrap_CPXNETaddarcs, METH_VARARGS, NULL},
	 { "CPXNETaddnodes", _wrap_CPXNETaddnodes, METH_VARARGS, NULL},
	 { "CPXNETbasewrite", _wrap_CPXNETbasewrite, METH_VARARGS, NULL},
	 { "CPXNETchgarcname", _wrap_CPXNETchgarcname, METH_VARARGS, NULL},
	 { "CPXNETchgarcnodes", _wrap_CPXNETchgarcnodes, METH_VARARGS, NULL},
	 { "CPXNETchgbds", _wrap_CPXNETchgbds, METH_VARARGS, NULL},
	 { "CPXNETchgname", _wrap_CPXNETchgname, METH_VARARGS, NULL},
	 { "CPXNETchgnodename", _wrap_CPXNETchgnodename, METH_VARARGS, NULL},
	 { "CPXNETchgobj", _wrap_CPXNETchgobj, METH_VARARGS, NULL},
	 { "CPXNETchgobjsen", _wrap_CPXNETchgobjsen, METH_VARARGS, NULL},
	 { "CPXNETchgsupply", _wrap_CPXNETchgsupply, METH_VARARGS, NULL},
	 { "CPXNETcopybase", _wrap_CPXNETcopybase, METH_VARARGS, NULL},
	 { "CPXNETcopynet", _wrap_CPXNETcopynet, METH_VARARGS, NULL},
	 { "CPXNETcreateprob", _wrap_CPXNETcreateprob, METH_VARARGS, NULL},
	 { "CPXNETdelarcs", _wrap_CPXNETdelarcs, METH_VARARGS, NULL},
	 { "CPXNETdelnodes", _wrap_CPXNETdelnodes, METH_VARARGS, NULL},
	 { "CPXNETdelset", _wrap_CPXNETdelset, METH_VARARGS, NULL},
	 { "CPXNETfreeprob", _wrap_CPXNETfreeprob, METH_VARARGS, NULL},
	 { "CPXNETgetarcindex", _wrap_CPXNETgetarcindex, METH_VARARGS, NULL},
	 { "CPXNETgetarcname", _wrap_CPXNETgetarcname, METH_VARARGS, NULL},
	 { "CPXNETgetarcnodes", _wrap_CPXNETgetarcnodes, METH_VARARGS, NULL},
	 { "CPXNETgetbase", _wrap_CPXNETgetbase, METH_VARARGS, NULL},
	 { "CPXNETgetdj", _wrap_CPXNETgetdj, METH_VARARGS, NULL},
	 { "CPXNETgetitcnt", _wrap_CPXNETgetitcnt, METH_VARARGS, NULL},
	 { "CPXNETgetlb", _wrap_CPXNETgetlb, METH_VARARGS, NULL},
	 { "CPXNETgetnodearcs", _wrap_CPXNETgetnodearcs, METH_VARARGS, NULL},
	 { "CPXNETgetnodeindex", _wrap_CPXNETgetnodeindex, METH_VARARGS, NULL},
	 { "CPXNETgetnodename", _wrap_CPXNETgetnodename, METH_VARARGS, NULL},
	 { "CPXNETgetnumarcs", _wrap_CPXNETgetnumarcs, METH_VARARGS, NULL},
	 { "CPXNETgetnumnodes", _wrap_CPXNETgetnumnodes, METH_VARARGS, NULL},
	 { "CPXNETgetobj", _wrap_CPXNETgetobj, METH_VARARGS, NULL},
	 { "CPXNETgetobjsen", _wrap_CPXNETgetobjsen, METH_VARARGS, NULL},
	 { "CPXNETgetobjval", _wrap_CPXNETgetobjval, METH_VARARGS, NULL},
	 { "CPXNETgetphase1cnt", _wrap_CPXNETgetphase1cnt, METH_VARARGS, NULL},
	 { "CPXNETgetpi", _wrap_CPXNETgetpi, METH_VARARGS, NULL},
	 { "CPXNETgetprobname", _wrap_CPXNETgetprobname, METH_VARARGS, NULL},
	 { "CPXNETgetslack", _wrap_CPXNETgetslack, METH_VARARGS, NULL},
	 { "CPXNETgetstat", _wrap_CPXNETgetstat, METH_VARARGS, NULL},
	 { "CPXNETgetsupply", _wrap_CPXNETgetsupply, METH_VARARGS, NULL},
	 { "CPXNETgetub", _wrap_CPXNETgetub, METH_VARARGS, NULL},
	 { "CPXNETgetx", _wrap_CPXNETgetx, METH_VARARGS, NULL},
	 { "CPXNETprimopt", _wrap_CPXNETprimopt, METH_VARARGS, NULL},
	 { "CPXNETreadcopybase", _wrap_CPXNETreadcopybase, METH_VARARGS, NULL},
	 { "CPXNETreadcopyprob", _wrap_CPXNETreadcopyprob, METH_VARARGS, NULL},
	 { "CPXNETsolninfo", _wrap_CPXNETsolninfo, METH_VARARGS, NULL},
	 { "CPXNETsolution", _wrap_CPXNETsolution, METH_VARARGS, NULL},
	 { "CPXNETwriteprob", _wrap_CPXNETwriteprob, METH_VARARGS, NULL},
	 { "CPXchgqpcoef", _wrap_CPXchgqpcoef, METH_VARARGS, NULL},
	 { "CPXcopyqpsep", _wrap_CPXcopyqpsep, METH_VARARGS, NULL},
	 { "CPXcopyquad", _wrap_CPXcopyquad, METH_VARARGS, NULL},
	 { "CPXgetnumqpnz", _wrap_CPXgetnumqpnz, METH_VARARGS, NULL},
	 { "CPXgetnumquad", _wrap_CPXgetnumquad, METH_VARARGS, NULL},
	 { "CPXgetqpcoef", _wrap_CPXgetqpcoef, METH_VARARGS, NULL},
	 { "CPXgetquad", _wrap_CPXgetquad, METH_VARARGS, NULL},
	 { "CPXqpindefcertificate", _wrap_CPXqpindefcertificate, METH_VARARGS, NULL},
	 { "CPXqpopt", _wrap_CPXqpopt, METH_VARARGS, NULL},
	 { "CPXaddqconstr", _wrap_CPXaddqconstr, METH_VARARGS, NULL},
	 { "CPXdelqconstrs", _wrap_CPXdelqconstrs, METH_VARARGS, NULL},
	 { "CPXgetnumqconstrs", _wrap_CPXgetnumqconstrs, METH_VARARGS, NULL},
	 { "CPXgetqconstr", _wrap_CPXgetqconstr, METH_VARARGS, NULL},
	 { "CPXgetqconstrdslack", _wrap_CPXgetqconstrdslack, METH_VARARGS, NULL},
	 { "CPXgetqconstrindex", _wrap_CPXgetqconstrindex, METH_VARARGS, NULL},
	 { "CPXgetqconstrinfeas", _wrap_CPXgetqconstrinfeas, METH_VARARGS, NULL},
	 { "CPXgetqconstrname", _wrap_CPXgetqconstrname, METH_VARARGS, NULL},
	 { "CPXgetqconstrslack", _wrap_CPXgetqconstrslack, METH_VARARGS, NULL},
	 { "CPXgetxqxax", _wrap_CPXgetxqxax, METH_VARARGS, NULL},
	 { "CPXqconstrslackfromx", _wrap_CPXqconstrslackfromx, METH_VARARGS, NULL},
	 { "AMPLCPLEXloadmodel", _wrap_AMPLCPLEXloadmodel, METH_VARARGS, NULL},
	 { "AMPLCPLEXwritesol", _wrap_AMPLCPLEXwritesol, METH_VARARGS, NULL},
	 { "AMPLCPLEXgetInternalEnv", _wrap_AMPLCPLEXgetInternalEnv, METH_NOARGS, NULL},
	 { "AMPLCPLEXfreeASL", _wrap_AMPLCPLEXfreeASL, METH_O, NULL},
	 { "CBWrap_lp_callback_wrapper", _wrap_CBWrap_lp_callback_wrapper, METH_VARARGS, NULL},
	 { "CBWrap_cut_callback_wrapper", _wrap_CBWrap_cut_callback_wrapper, METH_VARARGS, NULL},
	 { "CBWrap_msg_callback_wrapper", _wrap_CBWrap_msg_callback_wrapper, METH_VARARGS, NULL},
	 { "CBWrap_incumbent_callback_wrapper", _wrap_CBWrap_incumbent_callback_wrapper, METH_VARARGS, NULL},
	 { "CBWrap_setDefaultCB", _wrap_CBWrap_setDefaultCB, METH_VARARGS, NULL},
	 { "disown_CPLEXCallback", _wrap_disown_CPLEXCallback, METH_O, NULL},
	 { NULL, NULL, 0, NULL }
};

static PyMethodDef SwigMethods_proxydocs[] = {
	 { NULL, NULL, 0, NULL }
};

static SwigPyGetSet dblArray___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__dblArray_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"", &dblArray___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__dblArray_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__dblArray_methods[] = {
  { "__getitem__", _wrap_dblArray___getitem__, METH_O, "" },
  { "__setitem__", _wrap_dblArray___setitem__, METH_VARARGS, "" },
  { "cast", _wrap_dblArray_cast, METH_NOARGS, "" },
  { "frompointer", (PyCFunction)(void(*)(void))_wrap_dblArray_frompointer, METH_STATIC|METH_O, "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__dblArray_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "amplpy_cplex_swig.dblArray",             /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    _wrap_delete_dblArray_destructor_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__dblArray_type.as_number,  /* tp_as_number */
    &SwigPyBuiltin__dblArray_type.as_sequence,/* tp_as_sequence */
    &SwigPyBuiltin__dblArray_type.as_mapping, /* tp_as_mapping */
    SwigPyObject_hash,                        /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__dblArray_type.as_buffer,  /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "::dblArray",                             /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    SwigPyBuiltin__dblArray_richcompare,      /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__dblArray_methods,          /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__dblArray_getset,           /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    offsetof(SwigPyObject, dict),             /* tp_dictoffset */
    _wrap_new_dblArray,                       /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
    (int) 0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                       /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
    0,                                        /* tp_prev */
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
    (unaryfunc) 0,                            /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    _wrap_dblArray___getitem___ssizeargfunc_closure,              /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    _wrap_dblArray___setitem___ssizeobjargproc_closure,           /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__dblArray_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__dblArray_type};

static SwigPyGetSet intArray___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__intArray_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"", &intArray___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__intArray_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__intArray_methods[] = {
  { "__getitem__", _wrap_intArray___getitem__, METH_O, "" },
  { "__setitem__", _wrap_intArray___setitem__, METH_VARARGS, "" },
  { "cast", _wrap_intArray_cast, METH_NOARGS, "" },
  { "frompointer", (PyCFunction)(void(*)(void))_wrap_intArray_frompointer, METH_STATIC|METH_O, "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__intArray_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "amplpy_cplex_swig.intArray",             /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    _wrap_delete_intArray_destructor_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__intArray_type.as_number,  /* tp_as_number */
    &SwigPyBuiltin__intArray_type.as_sequence,/* tp_as_sequence */
    &SwigPyBuiltin__intArray_type.as_mapping, /* tp_as_mapping */
    SwigPyObject_hash,                        /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__intArray_type.as_buffer,  /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "::intArray",                             /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    SwigPyBuiltin__intArray_richcompare,      /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__intArray_methods,          /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__intArray_getset,           /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    offsetof(SwigPyObject, dict),             /* tp_dictoffset */
    _wrap_new_intArray,                       /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
    (int) 0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                       /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
    0,                                        /* tp_prev */
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
    (unaryfunc) 0,                            /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    _wrap_intArray___getitem___ssizeargfunc_closure,              /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    _wrap_intArray___setitem___ssizeobjargproc_closure,           /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__intArray_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__intArray_type};

static SwigPyGetSet SwigPyIterator___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__swig__SwigPyIterator_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"", &SwigPyIterator___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__swig__SwigPyIterator_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  switch (op) {
    case Py_EQ : result = _wrap_SwigPyIterator___eq__(self, other); break;
    case Py_NE : result = _wrap_SwigPyIterator___ne__(self, other); break;
    default : break;
  }
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__swig__SwigPyIterator_methods[] = {
  { "value", _wrap_SwigPyIterator_value, METH_NOARGS, "" },
  { "incr", _wrap_SwigPyIterator_incr, METH_VARARGS, "" },
  { "decr", _wrap_SwigPyIterator_decr, METH_VARARGS, "" },
  { "distance", _wrap_SwigPyIterator_distance, METH_O, "" },
  { "equal", _wrap_SwigPyIterator_equal, METH_O, "" },
  { "copy", _wrap_SwigPyIterator_copy, METH_NOARGS, "" },
  { "next", _wrap_SwigPyIterator_next, METH_NOARGS, "" },
  { "__next__", _wrap_SwigPyIterator___next__, METH_NOARGS, "" },
  { "previous", _wrap_SwigPyIterator_previous, METH_NOARGS, "" },
  { "advance", _wrap_SwigPyIterator_advance, METH_O, "" },
  { "__eq__", _wrap_SwigPyIterator___eq__, METH_O, "" },
  { "__ne__", _wrap_SwigPyIterator___ne__, METH_O, "" },
  { "__iadd__", _wrap_SwigPyIterator___iadd__, METH_O, "" },
  { "__isub__", _wrap_SwigPyIterator___isub__, METH_O, "" },
  { "__add__", _wrap_SwigPyIterator___add__, METH_O, "" },
  { "__sub__", _wrap_SwigPyIterator___sub__, METH_VARARGS, "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__swig__SwigPyIterator_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "amplpy_cplex_swig.SwigPyIterator",       /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    _wrap_delete_SwigPyIterator_destructor_closure,               /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__swig__SwigPyIterator_type.as_number,          /* tp_as_number */
    &SwigPyBuiltin__swig__SwigPyIterator_type.as_sequence,        /* tp_as_sequence */
    &SwigPyBuiltin__swig__SwigPyIterator_type.as_mapping,         /* tp_as_mapping */
    SwigPyObject_hash,                        /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__swig__SwigPyIterator_type.as_buffer,          /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "swig::SwigPyIterator",                   /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    SwigPyBuiltin__swig__SwigPyIterator_richcompare,              /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    &swig::make_output_iterator_builtin,      /* tp_iter */
    _wrap_SwigPyIterator___next___iternextfunc_closure,           /* tp_iternext */
    SwigPyBuiltin__swig__SwigPyIterator_methods,                  /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__swig__SwigPyIterator_getset,                   /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    offsetof(SwigPyObject, dict),             /* tp_dictoffset */
    SwigPyBuiltin_BadInit,                    /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
    (int) 0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                       /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
    0,                                        /* tp_prev */
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
  },
#endif
  {
    _wrap_SwigPyIterator___add__,             /* nb_add */
    _wrap_SwigPyIterator___sub___binaryfunc_closure,              /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    _wrap_SwigPyIterator___iadd__,            /* nb_inplace_add */
    _wrap_SwigPyIterator___isub__,            /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
    (unaryfunc) 0,                            /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__swig__SwigPyIterator_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__swig__SwigPyIterator_type};

static SwigPyGetSet map_string_int___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__std__mapT_std__string_int_t_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"", &map_string_int___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__std__mapT_std__string_int_t_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__std__mapT_std__string_int_t_methods[] = {
  { "iterator", _wrap_map_string_int_iterator, METH_NOARGS, "" },
  { "__nonzero__", _wrap_map_string_int___nonzero__, METH_NOARGS, "" },
  { "__bool__", _wrap_map_string_int___bool__, METH_NOARGS, "" },
  { "__len__", _wrap_map_string_int___len__, METH_NOARGS, "" },
  { "iterkeys", _wrap_map_string_int_iterkeys, METH_NOARGS, "" },
  { "itervalues", _wrap_map_string_int_itervalues, METH_NOARGS, "" },
  { "iteritems", _wrap_map_string_int_iteritems, METH_NOARGS, "" },
  { "__getitem__", _wrap_map_string_int___getitem__, METH_O, "" },
  { "__delitem__", _wrap_map_string_int___delitem__, METH_O, "" },
  { "has_key", _wrap_map_string_int_has_key, METH_O, "" },
  { "keys", _wrap_map_string_int_keys, METH_NOARGS, "" },
  { "values", _wrap_map_string_int_values, METH_NOARGS, "" },
  { "items", _wrap_map_string_int_items, METH_NOARGS, "" },
  { "__contains__", _wrap_map_string_int___contains__, METH_O, "" },
  { "key_iterator", _wrap_map_string_int_key_iterator, METH_NOARGS, "" },
  { "value_iterator", _wrap_map_string_int_value_iterator, METH_NOARGS, "" },
  { "__setitem__", _wrap_map_string_int___setitem__, METH_VARARGS, "" },
  { "asdict", _wrap_map_string_int_asdict, METH_NOARGS, "" },
  { "empty", _wrap_map_string_int_empty, METH_NOARGS, "" },
  { "size", _wrap_map_string_int_size, METH_NOARGS, "" },
  { "swap", _wrap_map_string_int_swap, METH_O, "" },
  { "begin", _wrap_map_string_int_begin, METH_NOARGS, "" },
  { "end", _wrap_map_string_int_end, METH_NOARGS, "" },
  { "rbegin", _wrap_map_string_int_rbegin, METH_NOARGS, "" },
  { "rend", _wrap_map_string_int_rend, METH_NOARGS, "" },
  { "clear", _wrap_map_string_int_clear, METH_NOARGS, "" },
  { "get_allocator", _wrap_map_string_int_get_allocator, METH_NOARGS, "" },
  { "erase", _wrap_map_string_int_erase, METH_VARARGS, "" },
  { "count", _wrap_map_string_int_count, METH_O, "" },
  { "find", _wrap_map_string_int_find, METH_O, "" },
  { "lower_bound", _wrap_map_string_int_lower_bound, METH_O, "" },
  { "upper_bound", _wrap_map_string_int_upper_bound, METH_O, "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__std__mapT_std__string_int_t_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "amplpy_cplex_swig.map_string_int",       /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    _wrap_delete_map_string_int_destructor_closure,               /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__std__mapT_std__string_int_t_type.as_number,   /* tp_as_number */
    &SwigPyBuiltin__std__mapT_std__string_int_t_type.as_sequence, /* tp_as_sequence */
    &SwigPyBuiltin__std__mapT_std__string_int_t_type.as_mapping,  /* tp_as_mapping */
    SwigPyObject_hash,                        /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__std__mapT_std__string_int_t_type.as_buffer,   /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "std::map< std::string,int >",            /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    SwigPyBuiltin__std__mapT_std__string_int_t_richcompare,       /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    _wrap_map_string_int_key_iterator_getiterfunc_closure,        /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__std__mapT_std__string_int_t_methods,           /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__std__mapT_std__string_int_t_getset,            /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    offsetof(SwigPyObject, dict),             /* tp_dictoffset */
    _wrap_new_map_string_int,                 /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
    (int) 0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                       /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
    0,                                        /* tp_prev */
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    _wrap_map_string_int___nonzero___inquiry_closure,             /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
    (unaryfunc) 0,                            /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    _wrap_map_string_int___len___lenfunc_closure,                 /* mp_length */
    _wrap_map_string_int___getitem__,         /* mp_subscript */
    _wrap_map_string_int___setitem___objobjargproc_closure,       /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    _wrap_map_string_int___contains___objobjproc_closure,         /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__std__mapT_std__string_int_t_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__std__mapT_std__string_int_t_type};

static SwigPyGetSet map_int_string___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__std__mapT_int_std__string_t_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"", &map_int_string___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__std__mapT_int_std__string_t_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__std__mapT_int_std__string_t_methods[] = {
  { "iterator", _wrap_map_int_string_iterator, METH_NOARGS, "" },
  { "__nonzero__", _wrap_map_int_string___nonzero__, METH_NOARGS, "" },
  { "__bool__", _wrap_map_int_string___bool__, METH_NOARGS, "" },
  { "__len__", _wrap_map_int_string___len__, METH_NOARGS, "" },
  { "iterkeys", _wrap_map_int_string_iterkeys, METH_NOARGS, "" },
  { "itervalues", _wrap_map_int_string_itervalues, METH_NOARGS, "" },
  { "iteritems", _wrap_map_int_string_iteritems, METH_NOARGS, "" },
  { "__getitem__", _wrap_map_int_string___getitem__, METH_O, "" },
  { "__delitem__", _wrap_map_int_string___delitem__, METH_O, "" },
  { "has_key", _wrap_map_int_string_has_key, METH_O, "" },
  { "keys", _wrap_map_int_string_keys, METH_NOARGS, "" },
  { "values", _wrap_map_int_string_values, METH_NOARGS, "" },
  { "items", _wrap_map_int_string_items, METH_NOARGS, "" },
  { "__contains__", _wrap_map_int_string___contains__, METH_O, "" },
  { "key_iterator", _wrap_map_int_string_key_iterator, METH_NOARGS, "" },
  { "value_iterator", _wrap_map_int_string_value_iterator, METH_NOARGS, "" },
  { "__setitem__", _wrap_map_int_string___setitem__, METH_VARARGS, "" },
  { "asdict", _wrap_map_int_string_asdict, METH_NOARGS, "" },
  { "empty", _wrap_map_int_string_empty, METH_NOARGS, "" },
  { "size", _wrap_map_int_string_size, METH_NOARGS, "" },
  { "swap", _wrap_map_int_string_swap, METH_O, "" },
  { "begin", _wrap_map_int_string_begin, METH_NOARGS, "" },
  { "end", _wrap_map_int_string_end, METH_NOARGS, "" },
  { "rbegin", _wrap_map_int_string_rbegin, METH_NOARGS, "" },
  { "rend", _wrap_map_int_string_rend, METH_NOARGS, "" },
  { "clear", _wrap_map_int_string_clear, METH_NOARGS, "" },
  { "get_allocator", _wrap_map_int_string_get_allocator, METH_NOARGS, "" },
  { "erase", _wrap_map_int_string_erase, METH_VARARGS, "" },
  { "count", _wrap_map_int_string_count, METH_O, "" },
  { "find", _wrap_map_int_string_find, METH_O, "" },
  { "lower_bound", _wrap_map_int_string_lower_bound, METH_O, "" },
  { "upper_bound", _wrap_map_int_string_upper_bound, METH_O, "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__std__mapT_int_std__string_t_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "amplpy_cplex_swig.map_int_string",       /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    _wrap_delete_map_int_string_destructor_closure,               /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__std__mapT_int_std__string_t_type.as_number,   /* tp_as_number */
    &SwigPyBuiltin__std__mapT_int_std__string_t_type.as_sequence, /* tp_as_sequence */
    &SwigPyBuiltin__std__mapT_int_std__string_t_type.as_mapping,  /* tp_as_mapping */
    SwigPyObject_hash,                        /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__std__mapT_int_std__string_t_type.as_buffer,   /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "std::map< int,std::string >",            /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    SwigPyBuiltin__std__mapT_int_std__string_t_richcompare,       /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    _wrap_map_int_string_key_iterator_getiterfunc_closure,        /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__std__mapT_int_std__string_t_methods,           /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__std__mapT_int_std__string_t_getset,            /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    offsetof(SwigPyObject, dict),             /* tp_dictoffset */
    _wrap_new_map_int_string,                 /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
    (int) 0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                       /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
    0,                                        /* tp_prev */
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    _wrap_map_int_string___nonzero___inquiry_closure,             /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
    (unaryfunc) 0,                            /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    _wrap_map_int_string___len___lenfunc_closure,                 /* mp_length */
    _wrap_map_int_string___getitem__,         /* mp_subscript */
    _wrap_map_int_string___setitem___objobjargproc_closure,       /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    _wrap_map_int_string___contains___objobjproc_closure,         /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__std__mapT_int_std__string_t_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__std__mapT_int_std__string_t_type};

static SwigPyGetSet map_string_double___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__std__mapT_std__string_double_t_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"", &map_string_double___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__std__mapT_std__string_double_t_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__std__mapT_std__string_double_t_methods[] = {
  { "iterator", _wrap_map_string_double_iterator, METH_NOARGS, "" },
  { "__nonzero__", _wrap_map_string_double___nonzero__, METH_NOARGS, "" },
  { "__bool__", _wrap_map_string_double___bool__, METH_NOARGS, "" },
  { "__len__", _wrap_map_string_double___len__, METH_NOARGS, "" },
  { "iterkeys", _wrap_map_string_double_iterkeys, METH_NOARGS, "" },
  { "itervalues", _wrap_map_string_double_itervalues, METH_NOARGS, "" },
  { "iteritems", _wrap_map_string_double_iteritems, METH_NOARGS, "" },
  { "__getitem__", _wrap_map_string_double___getitem__, METH_O, "" },
  { "__delitem__", _wrap_map_string_double___delitem__, METH_O, "" },
  { "has_key", _wrap_map_string_double_has_key, METH_O, "" },
  { "keys", _wrap_map_string_double_keys, METH_NOARGS, "" },
  { "values", _wrap_map_string_double_values, METH_NOARGS, "" },
  { "items", _wrap_map_string_double_items, METH_NOARGS, "" },
  { "__contains__", _wrap_map_string_double___contains__, METH_O, "" },
  { "key_iterator", _wrap_map_string_double_key_iterator, METH_NOARGS, "" },
  { "value_iterator", _wrap_map_string_double_value_iterator, METH_NOARGS, "" },
  { "__setitem__", _wrap_map_string_double___setitem__, METH_VARARGS, "" },
  { "asdict", _wrap_map_string_double_asdict, METH_NOARGS, "" },
  { "empty", _wrap_map_string_double_empty, METH_NOARGS, "" },
  { "size", _wrap_map_string_double_size, METH_NOARGS, "" },
  { "swap", _wrap_map_string_double_swap, METH_O, "" },
  { "begin", _wrap_map_string_double_begin, METH_NOARGS, "" },
  { "end", _wrap_map_string_double_end, METH_NOARGS, "" },
  { "rbegin", _wrap_map_string_double_rbegin, METH_NOARGS, "" },
  { "rend", _wrap_map_string_double_rend, METH_NOARGS, "" },
  { "clear", _wrap_map_string_double_clear, METH_NOARGS, "" },
  { "get_allocator", _wrap_map_string_double_get_allocator, METH_NOARGS, "" },
  { "erase", _wrap_map_string_double_erase, METH_VARARGS, "" },
  { "count", _wrap_map_string_double_count, METH_O, "" },
  { "find", _wrap_map_string_double_find, METH_O, "" },
  { "lower_bound", _wrap_map_string_double_lower_bound, METH_O, "" },
  { "upper_bound", _wrap_map_string_double_upper_bound, METH_O, "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__std__mapT_std__string_double_t_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "amplpy_cplex_swig.map_string_double",    /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    _wrap_delete_map_string_double_destructor_closure,            /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__std__mapT_std__string_double_t_type.as_number,/* tp_as_number */
    &SwigPyBuiltin__std__mapT_std__string_double_t_type.as_sequence,/* tp_as_sequence */
    &SwigPyBuiltin__std__mapT_std__string_double_t_type.as_mapping,/* tp_as_mapping */
    SwigPyObject_hash,                        /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__std__mapT_std__string_double_t_type.as_buffer,/* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "std::map< std::string,double >",         /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    SwigPyBuiltin__std__mapT_std__string_double_t_richcompare,    /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    _wrap_map_string_double_key_iterator_getiterfunc_closure,     /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__std__mapT_std__string_double_t_methods,        /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__std__mapT_std__string_double_t_getset,         /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    offsetof(SwigPyObject, dict),             /* tp_dictoffset */
    _wrap_new_map_string_double,              /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
    (int) 0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                       /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
    0,                                        /* tp_prev */
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    _wrap_map_string_double___nonzero___inquiry_closure,          /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
    (unaryfunc) 0,                            /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    _wrap_map_string_double___len___lenfunc_closure,              /* mp_length */
    _wrap_map_string_double___getitem__,      /* mp_subscript */
    _wrap_map_string_double___setitem___objobjargproc_closure,    /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    _wrap_map_string_double___contains___objobjproc_closure,      /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__std__mapT_std__string_double_t_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__std__mapT_std__string_double_t_type};

static SwigPyGetSet vector_string___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__std__vectorT_std__string_t_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"", &vector_string___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__std__vectorT_std__string_t_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__std__vectorT_std__string_t_methods[] = {
  { "iterator", _wrap_vector_string_iterator, METH_NOARGS, "" },
  { "__nonzero__", _wrap_vector_string___nonzero__, METH_NOARGS, "" },
  { "__bool__", _wrap_vector_string___bool__, METH_NOARGS, "" },
  { "__len__", _wrap_vector_string___len__, METH_NOARGS, "" },
  { "__getslice__", _wrap_vector_string___getslice__, METH_VARARGS, "" },
  { "__setslice__", _wrap_vector_string___setslice__, METH_VARARGS, "" },
  { "__delslice__", _wrap_vector_string___delslice__, METH_VARARGS, "" },
  { "__delitem__", _wrap_vector_string___delitem__, METH_VARARGS, "" },
  { "__getitem__", _wrap_vector_string___getitem__, METH_VARARGS, "" },
  { "__setitem__", _wrap_vector_string___setitem__, METH_VARARGS, "" },
  { "pop", _wrap_vector_string_pop, METH_NOARGS, "" },
  { "append", _wrap_vector_string_append, METH_O, "" },
  { "empty", _wrap_vector_string_empty, METH_NOARGS, "" },
  { "size", _wrap_vector_string_size, METH_NOARGS, "" },
  { "swap", _wrap_vector_string_swap, METH_O, "" },
  { "begin", _wrap_vector_string_begin, METH_NOARGS, "" },
  { "end", _wrap_vector_string_end, METH_NOARGS, "" },
  { "rbegin", _wrap_vector_string_rbegin, METH_NOARGS, "" },
  { "rend", _wrap_vector_string_rend, METH_NOARGS, "" },
  { "clear", _wrap_vector_string_clear, METH_NOARGS, "" },
  { "get_allocator", _wrap_vector_string_get_allocator, METH_NOARGS, "" },
  { "pop_back", _wrap_vector_string_pop_back, METH_NOARGS, "" },
  { "resize", _wrap_vector_string_resize, METH_VARARGS, "" },
  { "erase", _wrap_vector_string_erase, METH_VARARGS, "" },
  { "push_back", _wrap_vector_string_push_back, METH_O, "" },
  { "front", _wrap_vector_string_front, METH_NOARGS, "" },
  { "back", _wrap_vector_string_back, METH_NOARGS, "" },
  { "assign", _wrap_vector_string_assign, METH_VARARGS, "" },
  { "insert", _wrap_vector_string_insert, METH_VARARGS, "" },
  { "reserve", _wrap_vector_string_reserve, METH_O, "" },
  { "capacity", _wrap_vector_string_capacity, METH_NOARGS, "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__std__vectorT_std__string_t_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "amplpy_cplex_swig.vector_string",        /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    _wrap_delete_vector_string_destructor_closure,                /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__std__vectorT_std__string_t_type.as_number,    /* tp_as_number */
    &SwigPyBuiltin__std__vectorT_std__string_t_type.as_sequence,  /* tp_as_sequence */
    &SwigPyBuiltin__std__vectorT_std__string_t_type.as_mapping,   /* tp_as_mapping */
    SwigPyObject_hash,                        /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__std__vectorT_std__string_t_type.as_buffer,    /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "std::vector< std::string >",             /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    SwigPyBuiltin__std__vectorT_std__string_t_richcompare,        /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    _wrap_vector_string_iterator_getiterfunc_closure,             /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__std__vectorT_std__string_t_methods,            /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__std__vectorT_std__string_t_getset,             /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    offsetof(SwigPyObject, dict),             /* tp_dictoffset */
    _wrap_new_vector_string,                  /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
    (int) 0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                       /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
    0,                                        /* tp_prev */
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    _wrap_vector_string___nonzero___inquiry_closure,              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
    (unaryfunc) 0,                            /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    _wrap_vector_string___getitem___binaryfunc_closure,           /* mp_subscript */
    _wrap_vector_string___setitem___objobjargproc_closure,        /* mp_ass_subscript */
  },
  {
    _wrap_vector_string___len___lenfunc_closure,                  /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__std__vectorT_std__string_t_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__std__vectorT_std__string_t_type};

static SwigPyGetSet vector_double___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__std__vectorT_double_t_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"", &vector_double___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__std__vectorT_double_t_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__std__vectorT_double_t_methods[] = {
  { "iterator", _wrap_vector_double_iterator, METH_NOARGS, "" },
  { "__nonzero__", _wrap_vector_double___nonzero__, METH_NOARGS, "" },
  { "__bool__", _wrap_vector_double___bool__, METH_NOARGS, "" },
  { "__len__", _wrap_vector_double___len__, METH_NOARGS, "" },
  { "__getslice__", _wrap_vector_double___getslice__, METH_VARARGS, "" },
  { "__setslice__", _wrap_vector_double___setslice__, METH_VARARGS, "" },
  { "__delslice__", _wrap_vector_double___delslice__, METH_VARARGS, "" },
  { "__delitem__", _wrap_vector_double___delitem__, METH_VARARGS, "" },
  { "__getitem__", _wrap_vector_double___getitem__, METH_VARARGS, "" },
  { "__setitem__", _wrap_vector_double___setitem__, METH_VARARGS, "" },
  { "pop", _wrap_vector_double_pop, METH_NOARGS, "" },
  { "append", _wrap_vector_double_append, METH_O, "" },
  { "empty", _wrap_vector_double_empty, METH_NOARGS, "" },
  { "size", _wrap_vector_double_size, METH_NOARGS, "" },
  { "swap", _wrap_vector_double_swap, METH_O, "" },
  { "begin", _wrap_vector_double_begin, METH_NOARGS, "" },
  { "end", _wrap_vector_double_end, METH_NOARGS, "" },
  { "rbegin", _wrap_vector_double_rbegin, METH_NOARGS, "" },
  { "rend", _wrap_vector_double_rend, METH_NOARGS, "" },
  { "clear", _wrap_vector_double_clear, METH_NOARGS, "" },
  { "get_allocator", _wrap_vector_double_get_allocator, METH_NOARGS, "" },
  { "pop_back", _wrap_vector_double_pop_back, METH_NOARGS, "" },
  { "resize", _wrap_vector_double_resize, METH_VARARGS, "" },
  { "erase", _wrap_vector_double_erase, METH_VARARGS, "" },
  { "push_back", _wrap_vector_double_push_back, METH_O, "" },
  { "front", _wrap_vector_double_front, METH_NOARGS, "" },
  { "back", _wrap_vector_double_back, METH_NOARGS, "" },
  { "assign", _wrap_vector_double_assign, METH_VARARGS, "" },
  { "insert", _wrap_vector_double_insert, METH_VARARGS, "" },
  { "reserve", _wrap_vector_double_reserve, METH_O, "" },
  { "capacity", _wrap_vector_double_capacity, METH_NOARGS, "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__std__vectorT_double_t_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "amplpy_cplex_swig.vector_double",        /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    _wrap_delete_vector_double_destructor_closure,                /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__std__vectorT_double_t_type.as_number,         /* tp_as_number */
    &SwigPyBuiltin__std__vectorT_double_t_type.as_sequence,       /* tp_as_sequence */
    &SwigPyBuiltin__std__vectorT_double_t_type.as_mapping,        /* tp_as_mapping */
    SwigPyObject_hash,                        /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__std__vectorT_double_t_type.as_buffer,         /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "std::vector< double >",                  /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    SwigPyBuiltin__std__vectorT_double_t_richcompare,             /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    _wrap_vector_double_iterator_getiterfunc_closure,             /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__std__vectorT_double_t_methods,                 /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__std__vectorT_double_t_getset,                  /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    offsetof(SwigPyObject, dict),             /* tp_dictoffset */
    _wrap_new_vector_double,                  /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
    (int) 0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                       /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
    0,                                        /* tp_prev */
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    _wrap_vector_double___nonzero___inquiry_closure,              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
    (unaryfunc) 0,                            /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    _wrap_vector_double___getitem___binaryfunc_closure,           /* mp_subscript */
    _wrap_vector_double___setitem___objobjargproc_closure,        /* mp_ass_subscript */
  },
  {
    _wrap_vector_double___len___lenfunc_closure,                  /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__std__vectorT_double_t_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__std__vectorT_double_t_type};

static SwigPyGetSet AMPLSolverException___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__ampls__AMPLSolverException_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"", &AMPLSolverException___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__ampls__AMPLSolverException_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__ampls__AMPLSolverException_methods[] = {
  { "format", (PyCFunction)(void(*)(void))_wrap_AMPLSolverException_format, METH_STATIC|METH_VARARGS, "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__ampls__AMPLSolverException_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "amplpy_cplex_swig.AMPLSolverException",  /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    _wrap_delete_AMPLSolverException_destructor_closure,          /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__ampls__AMPLSolverException_type.as_number,    /* tp_as_number */
    &SwigPyBuiltin__ampls__AMPLSolverException_type.as_sequence,  /* tp_as_sequence */
    &SwigPyBuiltin__ampls__AMPLSolverException_type.as_mapping,   /* tp_as_mapping */
    SwigPyObject_hash,                        /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__ampls__AMPLSolverException_type.as_buffer,    /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "ampls::AMPLSolverException",             /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    SwigPyBuiltin__ampls__AMPLSolverException_richcompare,        /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__ampls__AMPLSolverException_methods,            /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__ampls__AMPLSolverException_getset,             /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    offsetof(SwigPyObject, dict),             /* tp_dictoffset */
    _wrap_new_AMPLSolverException,            /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
    (int) 0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                       /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
    0,                                        /* tp_prev */
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
    (unaryfunc) 0,                            /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__ampls__AMPLSolverException_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__ampls__AMPLSolverException_type};

static SwigPyGetSet Variant_dbl_getset = { _wrap_Variant_dbl_get, _wrap_Variant_dbl_set };
static SwigPyGetSet Variant_integer_getset = { _wrap_Variant_integer_get, _wrap_Variant_integer_set };
static SwigPyGetSet Variant___dict___getset = { SwigPyObject_get___dict__, 0 };
static SwigPyGetSet Variant_str_getset = { _wrap_Variant_str_get, _wrap_Variant_str_set };
static SwigPyGetSet Variant_type_getset = { _wrap_Variant_type_get, _wrap_Variant_type_set };
SWIGINTERN PyGetSetDef SwigPyBuiltin__ampls__Variant_getset[] = {
    { (char *)"dbl", SwigPyBuiltin_FunpackGetterClosure, SwigPyBuiltin_FunpackSetterClosure, (char *)"", &Variant_dbl_getset },
    { (char *)"integer", SwigPyBuiltin_FunpackGetterClosure, SwigPyBuiltin_FunpackSetterClosure, (char *)"", &Variant_integer_getset },
    { (char *)"__dict__", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"", &Variant___dict___getset },
    { (char *)"str", SwigPyBuiltin_FunpackGetterClosure, SwigPyBuiltin_FunpackSetterClosure, (char *)"", &Variant_str_getset },
    { (char *)"type", SwigPyBuiltin_FunpackGetterClosure, SwigPyBuiltin_FunpackSetterClosure, (char *)"", &Variant_type_getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__ampls__Variant_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__ampls__Variant_methods[] = {
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__ampls__Variant_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "amplpy_cplex_swig.Variant",              /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    _wrap_delete_Variant_destructor_closure,  /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__ampls__Variant_type.as_number,                /* tp_as_number */
    &SwigPyBuiltin__ampls__Variant_type.as_sequence,              /* tp_as_sequence */
    &SwigPyBuiltin__ampls__Variant_type.as_mapping,               /* tp_as_mapping */
    SwigPyObject_hash,                        /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__ampls__Variant_type.as_buffer,                /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "ampls::Variant",                         /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    SwigPyBuiltin__ampls__Variant_richcompare,/* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__ampls__Variant_methods,    /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__ampls__Variant_getset,     /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    offsetof(SwigPyObject, dict),             /* tp_dictoffset */
    _wrap_new_Variant,                        /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
    (int) 0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                       /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
    0,                                        /* tp_prev */
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
    (unaryfunc) 0,                            /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__ampls__Variant_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__ampls__Variant_type};

static SwigPyGetSet VarType___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__ampls__VarType_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"", &VarType___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__ampls__VarType_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__ampls__VarType_methods[] = {
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__ampls__VarType_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "amplpy_cplex_swig.VarType",              /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    _wrap_delete_VarType_destructor_closure,  /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__ampls__VarType_type.as_number,                /* tp_as_number */
    &SwigPyBuiltin__ampls__VarType_type.as_sequence,              /* tp_as_sequence */
    &SwigPyBuiltin__ampls__VarType_type.as_mapping,               /* tp_as_mapping */
    SwigPyObject_hash,                        /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__ampls__VarType_type.as_buffer,                /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "ampls::VarType",                         /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    SwigPyBuiltin__ampls__VarType_richcompare,/* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__ampls__VarType_methods,    /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__ampls__VarType_getset,     /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    offsetof(SwigPyObject, dict),             /* tp_dictoffset */
    _wrap_new_VarType,                        /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
    (int) 0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                       /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
    0,                                        /* tp_prev */
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
    (unaryfunc) 0,                            /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__ampls__VarType_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__ampls__VarType_type};

static SwigPyGetSet SolverParams___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__ampls__SolverParams_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"", &SolverParams___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__ampls__SolverParams_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__ampls__SolverParams_methods[] = {
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__ampls__SolverParams_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "amplpy_cplex_swig.SolverParams",         /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    _wrap_delete_SolverParams_destructor_closure,                 /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__ampls__SolverParams_type.as_number,           /* tp_as_number */
    &SwigPyBuiltin__ampls__SolverParams_type.as_sequence,         /* tp_as_sequence */
    &SwigPyBuiltin__ampls__SolverParams_type.as_mapping,          /* tp_as_mapping */
    SwigPyObject_hash,                        /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__ampls__SolverParams_type.as_buffer,           /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "ampls::SolverParams",                    /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    SwigPyBuiltin__ampls__SolverParams_richcompare,               /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__ampls__SolverParams_methods,                   /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__ampls__SolverParams_getset,/* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    offsetof(SwigPyObject, dict),             /* tp_dictoffset */
    _wrap_new_SolverParams,                   /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
    (int) 0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                       /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
    0,                                        /* tp_prev */
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
    (unaryfunc) 0,                            /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__ampls__SolverParams_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__ampls__SolverParams_type};

static SwigPyGetSet LPAlgorithms___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__ampls__LPAlgorithms_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"", &LPAlgorithms___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__ampls__LPAlgorithms_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__ampls__LPAlgorithms_methods[] = {
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__ampls__LPAlgorithms_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "amplpy_cplex_swig.LPAlgorithms",         /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    _wrap_delete_LPAlgorithms_destructor_closure,                 /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__ampls__LPAlgorithms_type.as_number,           /* tp_as_number */
    &SwigPyBuiltin__ampls__LPAlgorithms_type.as_sequence,         /* tp_as_sequence */
    &SwigPyBuiltin__ampls__LPAlgorithms_type.as_mapping,          /* tp_as_mapping */
    SwigPyObject_hash,                        /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__ampls__LPAlgorithms_type.as_buffer,           /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "ampls::LPAlgorithms",                    /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    SwigPyBuiltin__ampls__LPAlgorithms_richcompare,               /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__ampls__LPAlgorithms_methods,                   /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__ampls__LPAlgorithms_getset,/* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    offsetof(SwigPyObject, dict),             /* tp_dictoffset */
    _wrap_new_LPAlgorithms,                   /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
    (int) 0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                       /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
    0,                                        /* tp_prev */
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
    (unaryfunc) 0,                            /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__ampls__LPAlgorithms_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__ampls__LPAlgorithms_type};

static SwigPyGetSet Where___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__ampls__Where_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"", &Where___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__ampls__Where_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__ampls__Where_methods[] = {
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__ampls__Where_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "amplpy_cplex_swig.Where",                /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    _wrap_delete_Where_destructor_closure,    /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__ampls__Where_type.as_number,                  /* tp_as_number */
    &SwigPyBuiltin__ampls__Where_type.as_sequence,                /* tp_as_sequence */
    &SwigPyBuiltin__ampls__Where_type.as_mapping,                 /* tp_as_mapping */
    SwigPyObject_hash,                        /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__ampls__Where_type.as_buffer,                  /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "ampls::Where",                           /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    SwigPyBuiltin__ampls__Where_richcompare,  /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__ampls__Where_methods,      /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__ampls__Where_getset,       /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    offsetof(SwigPyObject, dict),             /* tp_dictoffset */
    _wrap_new_Where,                          /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
    (int) 0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                       /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
    0,                                        /* tp_prev */
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
    (unaryfunc) 0,                            /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__ampls__Where_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__ampls__Where_type};

static SwigPyGetSet Value___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__ampls__Value_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"", &Value___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__ampls__Value_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__ampls__Value_methods[] = {
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__ampls__Value_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "amplpy_cplex_swig.Value",                /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    _wrap_delete_Value_destructor_closure,    /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__ampls__Value_type.as_number,                  /* tp_as_number */
    &SwigPyBuiltin__ampls__Value_type.as_sequence,                /* tp_as_sequence */
    &SwigPyBuiltin__ampls__Value_type.as_mapping,                 /* tp_as_mapping */
    SwigPyObject_hash,                        /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__ampls__Value_type.as_buffer,                  /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "ampls::Value",                           /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    SwigPyBuiltin__ampls__Value_richcompare,  /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__ampls__Value_methods,      /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__ampls__Value_getset,       /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    offsetof(SwigPyObject, dict),             /* tp_dictoffset */
    _wrap_new_Value,                          /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
    (int) 0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                       /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
    0,                                        /* tp_prev */
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
    (unaryfunc) 0,                            /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__ampls__Value_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__ampls__Value_type};

static SwigPyGetSet CutDirection___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__ampls__CutDirection_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"", &CutDirection___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__ampls__CutDirection_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__ampls__CutDirection_methods[] = {
  { "toString", (PyCFunction)(void(*)(void))_wrap_CutDirection_toString, METH_STATIC|METH_O, "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__ampls__CutDirection_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "amplpy_cplex_swig.CutDirection",         /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    _wrap_delete_CutDirection_destructor_closure,                 /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__ampls__CutDirection_type.as_number,           /* tp_as_number */
    &SwigPyBuiltin__ampls__CutDirection_type.as_sequence,         /* tp_as_sequence */
    &SwigPyBuiltin__ampls__CutDirection_type.as_mapping,          /* tp_as_mapping */
    SwigPyObject_hash,                        /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__ampls__CutDirection_type.as_buffer,           /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "ampls::CutDirection",                    /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    SwigPyBuiltin__ampls__CutDirection_richcompare,               /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__ampls__CutDirection_methods,                   /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__ampls__CutDirection_getset,/* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    offsetof(SwigPyObject, dict),             /* tp_dictoffset */
    _wrap_new_CutDirection,                   /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
    (int) 0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                       /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
    0,                                        /* tp_prev */
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
    (unaryfunc) 0,                            /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__ampls__CutDirection_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__ampls__CutDirection_type};

static SwigPyGetSet Status___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__ampls__Status_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"", &Status___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__ampls__Status_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__ampls__Status_methods[] = {
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__ampls__Status_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "amplpy_cplex_swig.Status",               /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    _wrap_delete_Status_destructor_closure,   /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__ampls__Status_type.as_number,                 /* tp_as_number */
    &SwigPyBuiltin__ampls__Status_type.as_sequence,               /* tp_as_sequence */
    &SwigPyBuiltin__ampls__Status_type.as_mapping,                /* tp_as_mapping */
    SwigPyObject_hash,                        /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__ampls__Status_type.as_buffer,                 /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "ampls::Status",                          /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    SwigPyBuiltin__ampls__Status_richcompare, /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__ampls__Status_methods,     /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__ampls__Status_getset,      /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    offsetof(SwigPyObject, dict),             /* tp_dictoffset */
    _wrap_new_Status,                         /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
    (int) 0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                       /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
    0,                                        /* tp_prev */
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
    (unaryfunc) 0,                            /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__ampls__Status_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__ampls__Status_type};

static SwigPyGetSet Entity___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__ampls__Entity_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"", &Entity___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__ampls__Entity_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__ampls__Entity_methods[] = {
  { "name", _wrap_Entity_name, METH_NOARGS, "" },
  { "indices", _wrap_Entity_indices, METH_NOARGS, "" },
  { "coeffs", _wrap_Entity_coeffs, METH_NOARGS, "" },
  { "solverIndex", _wrap_Entity_solverIndex, METH_VARARGS, "" },
  { "value", _wrap_Entity_value, METH_VARARGS, "" },
  { "toAMPLString", _wrap_Entity_toAMPLString, METH_VARARGS, "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__ampls__Entity_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "amplpy_cplex_swig.Entity",               /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    _wrap_delete_Entity_destructor_closure,   /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__ampls__Entity_type.as_number,                 /* tp_as_number */
    &SwigPyBuiltin__ampls__Entity_type.as_sequence,               /* tp_as_sequence */
    &SwigPyBuiltin__ampls__Entity_type.as_mapping,                /* tp_as_mapping */
    SwigPyObject_hash,                        /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__ampls__Entity_type.as_buffer,                 /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "ampls::Entity",                          /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    SwigPyBuiltin__ampls__Entity_richcompare, /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__ampls__Entity_methods,     /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__ampls__Entity_getset,      /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    offsetof(SwigPyObject, dict),             /* tp_dictoffset */
    SwigPyBuiltin_BadInit,                    /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
    (int) 0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                       /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
    0,                                        /* tp_prev */
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
    (unaryfunc) 0,                            /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__ampls__Entity_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__ampls__Entity_type};

static SwigPyGetSet Constraint___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__ampls__Constraint_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"", &Constraint___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__ampls__Constraint_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__ampls__Constraint_methods[] = {
  { "sense", _wrap_Constraint_sense, METH_NOARGS, "" },
  { "rhs", _wrap_Constraint_rhs, METH_NOARGS, "" },
  { "toAMPLString", _wrap_Constraint_toAMPLString, METH_VARARGS, "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__ampls__Constraint_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "amplpy_cplex_swig.Constraint",           /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    _wrap_delete_Constraint_destructor_closure,                   /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__ampls__Constraint_type.as_number,             /* tp_as_number */
    &SwigPyBuiltin__ampls__Constraint_type.as_sequence,           /* tp_as_sequence */
    &SwigPyBuiltin__ampls__Constraint_type.as_mapping,            /* tp_as_mapping */
    SwigPyObject_hash,                        /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__ampls__Constraint_type.as_buffer,             /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "ampls::Constraint",                      /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    SwigPyBuiltin__ampls__Constraint_richcompare,                 /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__ampls__Constraint_methods, /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__ampls__Constraint_getset,  /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    offsetof(SwigPyObject, dict),             /* tp_dictoffset */
    _wrap_new_Constraint,                     /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
    (int) 0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                       /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
    0,                                        /* tp_prev */
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
    (unaryfunc) 0,                            /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__ampls__Constraint_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__ampls__Constraint_type};

static SwigPyGetSet Variable_ub__getset = { _wrap_Variable_ub__get, _wrap_Variable_ub__set };
static SwigPyGetSet Variable_obj__getset = { _wrap_Variable_obj__get, _wrap_Variable_obj__set };
static SwigPyGetSet Variable___dict___getset = { SwigPyObject_get___dict__, 0 };
static SwigPyGetSet Variable_lb__getset = { _wrap_Variable_lb__get, _wrap_Variable_lb__set };
static SwigPyGetSet Variable_type__getset = { _wrap_Variable_type__get, _wrap_Variable_type__set };
SWIGINTERN PyGetSetDef SwigPyBuiltin__ampls__Variable_getset[] = {
    { (char *)"ub_", SwigPyBuiltin_FunpackGetterClosure, SwigPyBuiltin_FunpackSetterClosure, (char *)"", &Variable_ub__getset },
    { (char *)"obj_", SwigPyBuiltin_FunpackGetterClosure, SwigPyBuiltin_FunpackSetterClosure, (char *)"", &Variable_obj__getset },
    { (char *)"__dict__", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"", &Variable___dict___getset },
    { (char *)"lb_", SwigPyBuiltin_FunpackGetterClosure, SwigPyBuiltin_FunpackSetterClosure, (char *)"", &Variable_lb__getset },
    { (char *)"type_", SwigPyBuiltin_FunpackGetterClosure, SwigPyBuiltin_FunpackSetterClosure, (char *)"", &Variable_type__getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__ampls__Variable_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__ampls__Variable_methods[] = {
  { "toAMPLString", _wrap_Variable_toAMPLString, METH_VARARGS, "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__ampls__Variable_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "amplpy_cplex_swig.Variable",             /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    _wrap_delete_Variable_destructor_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__ampls__Variable_type.as_number,               /* tp_as_number */
    &SwigPyBuiltin__ampls__Variable_type.as_sequence,             /* tp_as_sequence */
    &SwigPyBuiltin__ampls__Variable_type.as_mapping,              /* tp_as_mapping */
    SwigPyObject_hash,                        /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__ampls__Variable_type.as_buffer,               /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "ampls::Variable",                        /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    SwigPyBuiltin__ampls__Variable_richcompare,                   /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__ampls__Variable_methods,   /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__ampls__Variable_getset,    /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    offsetof(SwigPyObject, dict),             /* tp_dictoffset */
    _wrap_new_Variable,                       /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
    (int) 0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                       /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
    0,                                        /* tp_prev */
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
    (unaryfunc) 0,                            /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__ampls__Variable_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__ampls__Variable_type};

static SwigPyGetSet Records_vars__getset = { _wrap_Records_vars__get, _wrap_Records_vars__set };
static SwigPyGetSet Records_cons__getset = { _wrap_Records_cons__get, _wrap_Records_cons__set };
static SwigPyGetSet Records_entities__getset = { _wrap_Records_entities__get, _wrap_Records_entities__set };
static SwigPyGetSet Records___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__ampls__impl__Records_getset[] = {
    { (char *)"vars_", SwigPyBuiltin_FunpackGetterClosure, SwigPyBuiltin_FunpackSetterClosure, (char *)"", &Records_vars__getset },
    { (char *)"cons_", SwigPyBuiltin_FunpackGetterClosure, SwigPyBuiltin_FunpackSetterClosure, (char *)"", &Records_cons__getset },
    { (char *)"entities_", SwigPyBuiltin_FunpackGetterClosure, SwigPyBuiltin_FunpackSetterClosure, (char *)"", &Records_entities__getset },
    { (char *)"__dict__", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"", &Records___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__ampls__impl__Records_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__ampls__impl__Records_methods[] = {
  { "getRecordedEntities", _wrap_Records_getRecordedEntities, METH_VARARGS, "" },
  { "addVariable", _wrap_Records_addVariable, METH_O, "" },
  { "addConstraint", _wrap_Records_addConstraint, METH_O, "" },
  { "getVarIndices", _wrap_Records_getVarIndices, METH_NOARGS, "" },
  { "getConsIndices", _wrap_Records_getConsIndices, METH_NOARGS, "" },
  { "getNumConstraints", _wrap_Records_getNumConstraints, METH_NOARGS, "" },
  { "getNumVariables", _wrap_Records_getNumVariables, METH_NOARGS, "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__ampls__impl__Records_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "amplpy_cplex_swig.Records",              /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    _wrap_delete_Records_destructor_closure,  /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__ampls__impl__Records_type.as_number,          /* tp_as_number */
    &SwigPyBuiltin__ampls__impl__Records_type.as_sequence,        /* tp_as_sequence */
    &SwigPyBuiltin__ampls__impl__Records_type.as_mapping,         /* tp_as_mapping */
    SwigPyObject_hash,                        /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__ampls__impl__Records_type.as_buffer,          /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "ampls::impl::Records",                   /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    SwigPyBuiltin__ampls__impl__Records_richcompare,              /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__ampls__impl__Records_methods,                  /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__ampls__impl__Records_getset,                   /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    offsetof(SwigPyObject, dict),             /* tp_dictoffset */
    _wrap_new_Records,                        /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
    (int) 0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                       /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
    0,                                        /* tp_prev */
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
    (unaryfunc) 0,                            /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__ampls__impl__Records_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__ampls__impl__Records_type};

static SwigPyGetSet AMPLMutex___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__ampls__impl__AMPLMutex_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"", &AMPLMutex___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__ampls__impl__AMPLMutex_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__ampls__impl__AMPLMutex_methods[] = {
  { "Lock", _wrap_AMPLMutex_Lock, METH_NOARGS, "" },
  { "Unlock", _wrap_AMPLMutex_Unlock, METH_NOARGS, "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__ampls__impl__AMPLMutex_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "amplpy_cplex_swig.AMPLMutex",            /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    _wrap_delete_AMPLMutex_destructor_closure,/* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__ampls__impl__AMPLMutex_type.as_number,        /* tp_as_number */
    &SwigPyBuiltin__ampls__impl__AMPLMutex_type.as_sequence,      /* tp_as_sequence */
    &SwigPyBuiltin__ampls__impl__AMPLMutex_type.as_mapping,       /* tp_as_mapping */
    SwigPyObject_hash,                        /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__ampls__impl__AMPLMutex_type.as_buffer,        /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "ampls::impl::AMPLMutex",                 /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    SwigPyBuiltin__ampls__impl__AMPLMutex_richcompare,            /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__ampls__impl__AMPLMutex_methods,                /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__ampls__impl__AMPLMutex_getset,                 /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    offsetof(SwigPyObject, dict),             /* tp_dictoffset */
    _wrap_new_AMPLMutex,                      /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
    (int) 0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                       /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
    0,                                        /* tp_prev */
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
    (unaryfunc) 0,                            /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__ampls__impl__AMPLMutex_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__ampls__impl__AMPLMutex_type};

static SwigPyGetSet BaseCallback___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__ampls__impl__BaseCallback_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"", &BaseCallback___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__ampls__impl__BaseCallback_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__ampls__impl__BaseCallback_methods[] = {
  { "record", _wrap_BaseCallback_record, METH_VARARGS, "" },
  { "addVariable", _wrap_BaseCallback_addVariable, METH_VARARGS, "" },
  { "setDebugCuts", _wrap_BaseCallback_setDebugCuts, METH_VARARGS, "" },
  { "run", _wrap_BaseCallback_run, METH_NOARGS, "" },
  { "addCut", _wrap_BaseCallback_addCut, METH_VARARGS, "" },
  { "addLazy", _wrap_BaseCallback_addLazy, METH_VARARGS, "" },
  { "addCutsIndices", _wrap_BaseCallback_addCutsIndices, METH_VARARGS, "" },
  { "addLazyIndices", _wrap_BaseCallback_addLazyIndices, METH_VARARGS, "" },
  { "getSolutionVector", _wrap_BaseCallback_getSolutionVector, METH_NOARGS, "" },
  { "getSolution", _wrap_BaseCallback_getSolution, METH_VARARGS, "" },
  { "getObj", _wrap_BaseCallback_getObj, METH_NOARGS, "" },
  { "getWhere", _wrap_BaseCallback_getWhere, METH_NOARGS, "" },
  { "getWhereString", _wrap_BaseCallback_getWhereString, METH_NOARGS, "" },
  { "getMessage", _wrap_BaseCallback_getMessage, METH_NOARGS, "" },
  { "getAMPLWhere", _wrap_BaseCallback_getAMPLWhere, METH_NOARGS, "" },
  { "getValue", _wrap_BaseCallback_getValue, METH_O, "" },
  { "getSolutionDict", _wrap_BaseCallback_getSolutionDict, METH_NOARGS, "" },
  { "getVarMap", _wrap_BaseCallback_getVarMap, METH_NOARGS, "" },
  { "getVarMapInverse", _wrap_BaseCallback_getVarMapInverse, METH_NOARGS, "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__ampls__impl__BaseCallback_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "amplpy_cplex_swig.BaseCallback",         /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    _wrap_delete_BaseCallback_destructor_closure,                 /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__ampls__impl__BaseCallback_type.as_number,     /* tp_as_number */
    &SwigPyBuiltin__ampls__impl__BaseCallback_type.as_sequence,   /* tp_as_sequence */
    &SwigPyBuiltin__ampls__impl__BaseCallback_type.as_mapping,    /* tp_as_mapping */
    SwigPyObject_hash,                        /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__ampls__impl__BaseCallback_type.as_buffer,     /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "ampls::impl::BaseCallback",              /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    SwigPyBuiltin__ampls__impl__BaseCallback_richcompare,         /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__ampls__impl__BaseCallback_methods,             /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__ampls__impl__BaseCallback_getset,              /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    offsetof(SwigPyObject, dict),             /* tp_dictoffset */
    SwigPyBuiltin_BadInit,                    /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
    (int) 0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                       /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
    0,                                        /* tp_prev */
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
    (unaryfunc) 0,                            /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__ampls__impl__BaseCallback_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__ampls__impl__BaseCallback_type};

static SwigPyGetSet GenericCallback___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__ampls__GenericCallback_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"", &GenericCallback___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__ampls__GenericCallback_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__ampls__GenericCallback_methods[] = {
  { "getObj", _wrap_GenericCallback_getObj, METH_NOARGS, "" },
  { "getWhere", _wrap_GenericCallback_getWhere, METH_NOARGS, "" },
  { "getAMPLWhere", _wrap_GenericCallback_getAMPLWhere, METH_NOARGS, "" },
  { "getWhereString", _wrap_GenericCallback_getWhereString, METH_NOARGS, "" },
  { "getMessage", _wrap_GenericCallback_getMessage, METH_NOARGS, "" },
  { "getValue", _wrap_GenericCallback_getValue, METH_O, "" },
  { "__disown__", Swig::Director::swig_pyobj_disown< ampls::GenericCallback >, METH_NOARGS, "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__ampls__GenericCallback_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "amplpy_cplex_swig.GenericCallback",      /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    _wrap_delete_GenericCallback_destructor_closure,              /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__ampls__GenericCallback_type.as_number,        /* tp_as_number */
    &SwigPyBuiltin__ampls__GenericCallback_type.as_sequence,      /* tp_as_sequence */
    &SwigPyBuiltin__ampls__GenericCallback_type.as_mapping,       /* tp_as_mapping */
    SwigPyObject_hash,                        /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__ampls__GenericCallback_type.as_buffer,        /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "ampls::GenericCallback",                 /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    SwigPyBuiltin__ampls__GenericCallback_richcompare,            /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__ampls__GenericCallback_methods,                /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__ampls__GenericCallback_getset,                 /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    offsetof(SwigPyObject, dict),             /* tp_dictoffset */
    _wrap_new_GenericCallback,                /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
    (int) 0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                       /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
    0,                                        /* tp_prev */
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
    (unaryfunc) 0,                            /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__ampls__GenericCallback_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__ampls__GenericCallback_type};

static SwigPyGetSet AMPLModel___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__ampls__AMPLModel_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"", &AMPLModel___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__ampls__AMPLModel_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__ampls__AMPLModel_methods[] = {
  { "getRecordedEntities", _wrap_AMPLModel_getRecordedEntities, METH_VARARGS, "" },
  { "addConstraint", _wrap_AMPLModel_addConstraint, METH_VARARGS, "" },
  { "record", _wrap_AMPLModel_record, METH_VARARGS, "" },
  { "addVariable", _wrap_AMPLModel_addVariable, METH_VARARGS, "" },
  { "getFileName", _wrap_AMPLModel_getFileName, METH_NOARGS, "" },
  { "getConsMapInverse", _wrap_AMPLModel_getConsMapInverse, METH_NOARGS, "" },
  { "getConsMap", _wrap_AMPLModel_getConsMap, METH_NOARGS, "" },
  { "getConsMapFiltered", _wrap_AMPLModel_getConsMapFiltered, METH_O, "" },
  { "setCallback", _wrap_AMPLModel_setCallback, METH_VARARGS, "" },
  { "getSolutionVector", _wrap_AMPLModel_getSolutionVector, METH_NOARGS, "" },
  { "getNumVars", _wrap_AMPLModel_getNumVars, METH_NOARGS, "" },
  { "getNumCons", _wrap_AMPLModel_getNumCons, METH_NOARGS, "" },
  { "getStatus", _wrap_AMPLModel_getStatus, METH_NOARGS, "" },
  { "optimize", _wrap_AMPLModel_optimize, METH_NOARGS, "" },
  { "writeSol", _wrap_AMPLModel_writeSol, METH_VARARGS, "" },
  { "getSolution", _wrap_AMPLModel_getSolution, METH_VARARGS, "" },
  { "getObj", _wrap_AMPLModel_getObj, METH_NOARGS, "" },
  { "error", _wrap_AMPLModel_error, METH_O, "" },
  { "enableLazyConstraints", _wrap_AMPLModel_enableLazyConstraints, METH_NOARGS, "" },
  { "printModelVars", _wrap_AMPLModel_printModelVars, METH_O, "" },
  { "setAMPLsParameter", _wrap_AMPLModel_setAMPLsParameter, METH_VARARGS, "" },
  { "getAMPLsIntParameter", _wrap_AMPLModel_getAMPLsIntParameter, METH_O, "" },
  { "getAMPLsDoubleParameter", _wrap_AMPLModel_getAMPLsDoubleParameter, METH_O, "" },
  { "getSolutionDict", _wrap_AMPLModel_getSolutionDict, METH_NOARGS, "" },
  { "getVarMap", _wrap_AMPLModel_getVarMap, METH_NOARGS, "" },
  { "getVarMapFiltered", _wrap_AMPLModel_getVarMapFiltered, METH_O, "" },
  { "getVarMapInverse", _wrap_AMPLModel_getVarMapInverse, METH_NOARGS, "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__ampls__AMPLModel_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "amplpy_cplex_swig.AMPLModel",            /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    _wrap_delete_AMPLModel_destructor_closure,/* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__ampls__AMPLModel_type.as_number,              /* tp_as_number */
    &SwigPyBuiltin__ampls__AMPLModel_type.as_sequence,            /* tp_as_sequence */
    &SwigPyBuiltin__ampls__AMPLModel_type.as_mapping,             /* tp_as_mapping */
    SwigPyObject_hash,                        /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__ampls__AMPLModel_type.as_buffer,              /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "ampls::AMPLModel",                       /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    SwigPyBuiltin__ampls__AMPLModel_richcompare,                  /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__ampls__AMPLModel_methods,  /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__ampls__AMPLModel_getset,   /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    offsetof(SwigPyObject, dict),             /* tp_dictoffset */
    _wrap_new_AMPLModel,                      /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
    (int) 0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                       /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
    0,                                        /* tp_prev */
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
    (unaryfunc) 0,                            /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__ampls__AMPLModel_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__ampls__AMPLModel_type};

static SwigPyGetSet SolverDriverCPLEX___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__ampls__impl__SolverDriverT_ampls__CPLEXModel_t_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"", &SolverDriverCPLEX___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__ampls__impl__SolverDriverT_ampls__CPLEXModel_t_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__ampls__impl__SolverDriverT_ampls__CPLEXModel_t_methods[] = {
  { "setOptions", _wrap_SolverDriverCPLEX_setOptions, METH_O, "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__ampls__impl__SolverDriverT_ampls__CPLEXModel_t_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "amplpy_cplex_swig.SolverDriverCPLEX",    /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    _wrap_delete_SolverDriverCPLEX_destructor_closure,            /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__ampls__impl__SolverDriverT_ampls__CPLEXModel_t_type.as_number,/* tp_as_number */
    &SwigPyBuiltin__ampls__impl__SolverDriverT_ampls__CPLEXModel_t_type.as_sequence,/* tp_as_sequence */
    &SwigPyBuiltin__ampls__impl__SolverDriverT_ampls__CPLEXModel_t_type.as_mapping,/* tp_as_mapping */
    SwigPyObject_hash,                        /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__ampls__impl__SolverDriverT_ampls__CPLEXModel_t_type.as_buffer,/* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "ampls::impl::SolverDriver< ampls::CPLEXModel >",             /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    SwigPyBuiltin__ampls__impl__SolverDriverT_ampls__CPLEXModel_t_richcompare,/* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__ampls__impl__SolverDriverT_ampls__CPLEXModel_t_methods,/* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__ampls__impl__SolverDriverT_ampls__CPLEXModel_t_getset,/* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    offsetof(SwigPyObject, dict),             /* tp_dictoffset */
    SwigPyBuiltin_BadInit,                    /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
    (int) 0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                       /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
    0,                                        /* tp_prev */
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
    (unaryfunc) 0,                            /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__ampls__impl__SolverDriverT_ampls__CPLEXModel_t_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__ampls__impl__SolverDriverT_ampls__CPLEXModel_t_type};

static SwigPyGetSet cpxiodevice_cpxiodev_rewind_getset = { _wrap_cpxiodevice_cpxiodev_rewind_get, _wrap_cpxiodevice_cpxiodev_rewind_set };
static SwigPyGetSet cpxiodevice_cpxiodev_error_getset = { _wrap_cpxiodevice_cpxiodev_error_get, _wrap_cpxiodevice_cpxiodev_error_set };
static SwigPyGetSet cpxiodevice___dict___getset = { SwigPyObject_get___dict__, 0 };
static SwigPyGetSet cpxiodevice_cpxiodev_eof_getset = { _wrap_cpxiodevice_cpxiodev_eof_get, _wrap_cpxiodevice_cpxiodev_eof_set };
static SwigPyGetSet cpxiodevice_cpxiodev_putc_getset = { _wrap_cpxiodevice_cpxiodev_putc_get, _wrap_cpxiodevice_cpxiodev_putc_set };
static SwigPyGetSet cpxiodevice_cpxiodev_read_getset = { _wrap_cpxiodevice_cpxiodev_read_get, _wrap_cpxiodevice_cpxiodev_read_set };
static SwigPyGetSet cpxiodevice_cpxiodev_flush_getset = { _wrap_cpxiodevice_cpxiodev_flush_get, _wrap_cpxiodevice_cpxiodev_flush_set };
static SwigPyGetSet cpxiodevice_cpxiodev_close_getset = { _wrap_cpxiodevice_cpxiodev_close_get, _wrap_cpxiodevice_cpxiodev_close_set };
static SwigPyGetSet cpxiodevice_cpxiodev_puts_getset = { _wrap_cpxiodevice_cpxiodev_puts_get, _wrap_cpxiodevice_cpxiodev_puts_set };
static SwigPyGetSet cpxiodevice_cpxiodev_write_getset = { _wrap_cpxiodevice_cpxiodev_write_get, _wrap_cpxiodevice_cpxiodev_write_set };
SWIGINTERN PyGetSetDef SwigPyBuiltin__cpxiodevice_getset[] = {
    { (char *)"cpxiodev_rewind", SwigPyBuiltin_FunpackGetterClosure, SwigPyBuiltin_FunpackSetterClosure, (char *)"", &cpxiodevice_cpxiodev_rewind_getset },
    { (char *)"cpxiodev_error", SwigPyBuiltin_FunpackGetterClosure, SwigPyBuiltin_FunpackSetterClosure, (char *)"", &cpxiodevice_cpxiodev_error_getset },
    { (char *)"__dict__", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"", &cpxiodevice___dict___getset },
    { (char *)"cpxiodev_eof", SwigPyBuiltin_FunpackGetterClosure, SwigPyBuiltin_FunpackSetterClosure, (char *)"", &cpxiodevice_cpxiodev_eof_getset },
    { (char *)"cpxiodev_putc", SwigPyBuiltin_FunpackGetterClosure, SwigPyBuiltin_FunpackSetterClosure, (char *)"", &cpxiodevice_cpxiodev_putc_getset },
    { (char *)"cpxiodev_read", SwigPyBuiltin_FunpackGetterClosure, SwigPyBuiltin_FunpackSetterClosure, (char *)"", &cpxiodevice_cpxiodev_read_getset },
    { (char *)"cpxiodev_flush", SwigPyBuiltin_FunpackGetterClosure, SwigPyBuiltin_FunpackSetterClosure, (char *)"", &cpxiodevice_cpxiodev_flush_getset },
    { (char *)"cpxiodev_close", SwigPyBuiltin_FunpackGetterClosure, SwigPyBuiltin_FunpackSetterClosure, (char *)"", &cpxiodevice_cpxiodev_close_getset },
    { (char *)"cpxiodev_puts", SwigPyBuiltin_FunpackGetterClosure, SwigPyBuiltin_FunpackSetterClosure, (char *)"", &cpxiodevice_cpxiodev_puts_getset },
    { (char *)"cpxiodev_write", SwigPyBuiltin_FunpackGetterClosure, SwigPyBuiltin_FunpackSetterClosure, (char *)"", &cpxiodevice_cpxiodev_write_getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__cpxiodevice_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__cpxiodevice_methods[] = {
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__cpxiodevice_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "amplpy_cplex_swig.cpxiodevice",          /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    _wrap_delete_cpxiodevice_destructor_closure,                  /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__cpxiodevice_type.as_number,                   /* tp_as_number */
    &SwigPyBuiltin__cpxiodevice_type.as_sequence,                 /* tp_as_sequence */
    &SwigPyBuiltin__cpxiodevice_type.as_mapping,                  /* tp_as_mapping */
    SwigPyObject_hash,                        /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__cpxiodevice_type.as_buffer,                   /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "::cpxiodevice",                          /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    SwigPyBuiltin__cpxiodevice_richcompare,   /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__cpxiodevice_methods,       /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__cpxiodevice_getset,        /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    offsetof(SwigPyObject, dict),             /* tp_dictoffset */
    _wrap_new_cpxiodevice,                    /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
    (int) 0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                       /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
    0,                                        /* tp_prev */
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
    (unaryfunc) 0,                            /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__cpxiodevice_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__cpxiodevice_type};

static SwigPyGetSet cpxdeserializer_getbyte_getset = { _wrap_cpxdeserializer_getbyte_get, _wrap_cpxdeserializer_getbyte_set };
static SwigPyGetSet cpxdeserializer_getlongs_getset = { _wrap_cpxdeserializer_getlongs_get, _wrap_cpxdeserializer_getlongs_set };
static SwigPyGetSet cpxdeserializer_getfloat_getset = { _wrap_cpxdeserializer_getfloat_get, _wrap_cpxdeserializer_getfloat_set };
static SwigPyGetSet cpxdeserializer_getshorts_getset = { _wrap_cpxdeserializer_getshorts_get, _wrap_cpxdeserializer_getshorts_set };
static SwigPyGetSet cpxdeserializer___dict___getset = { SwigPyObject_get___dict__, 0 };
static SwigPyGetSet cpxdeserializer_getbytes_getset = { _wrap_cpxdeserializer_getbytes_get, _wrap_cpxdeserializer_getbytes_set };
static SwigPyGetSet cpxdeserializer_getdoubles_getset = { _wrap_cpxdeserializer_getdoubles_get, _wrap_cpxdeserializer_getdoubles_set };
static SwigPyGetSet cpxdeserializer_getlong_getset = { _wrap_cpxdeserializer_getlong_get, _wrap_cpxdeserializer_getlong_set };
static SwigPyGetSet cpxdeserializer_getdouble_getset = { _wrap_cpxdeserializer_getdouble_get, _wrap_cpxdeserializer_getdouble_set };
static SwigPyGetSet cpxdeserializer_getshort_getset = { _wrap_cpxdeserializer_getshort_get, _wrap_cpxdeserializer_getshort_set };
static SwigPyGetSet cpxdeserializer_getint_getset = { _wrap_cpxdeserializer_getint_get, _wrap_cpxdeserializer_getint_set };
static SwigPyGetSet cpxdeserializer_getints_getset = { _wrap_cpxdeserializer_getints_get, _wrap_cpxdeserializer_getints_set };
static SwigPyGetSet cpxdeserializer_getfloats_getset = { _wrap_cpxdeserializer_getfloats_get, _wrap_cpxdeserializer_getfloats_set };
SWIGINTERN PyGetSetDef SwigPyBuiltin__cpxdeserializer_getset[] = {
    { (char *)"getbyte", SwigPyBuiltin_FunpackGetterClosure, SwigPyBuiltin_FunpackSetterClosure, (char *)"", &cpxdeserializer_getbyte_getset },
    { (char *)"getlongs", SwigPyBuiltin_FunpackGetterClosure, SwigPyBuiltin_FunpackSetterClosure, (char *)"", &cpxdeserializer_getlongs_getset },
    { (char *)"getfloat", SwigPyBuiltin_FunpackGetterClosure, SwigPyBuiltin_FunpackSetterClosure, (char *)"", &cpxdeserializer_getfloat_getset },
    { (char *)"getshorts", SwigPyBuiltin_FunpackGetterClosure, SwigPyBuiltin_FunpackSetterClosure, (char *)"", &cpxdeserializer_getshorts_getset },
    { (char *)"__dict__", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"", &cpxdeserializer___dict___getset },
    { (char *)"getbytes", SwigPyBuiltin_FunpackGetterClosure, SwigPyBuiltin_FunpackSetterClosure, (char *)"", &cpxdeserializer_getbytes_getset },
    { (char *)"getdoubles", SwigPyBuiltin_FunpackGetterClosure, SwigPyBuiltin_FunpackSetterClosure, (char *)"", &cpxdeserializer_getdoubles_getset },
    { (char *)"getlong", SwigPyBuiltin_FunpackGetterClosure, SwigPyBuiltin_FunpackSetterClosure, (char *)"", &cpxdeserializer_getlong_getset },
    { (char *)"getdouble", SwigPyBuiltin_FunpackGetterClosure, SwigPyBuiltin_FunpackSetterClosure, (char *)"", &cpxdeserializer_getdouble_getset },
    { (char *)"getshort", SwigPyBuiltin_FunpackGetterClosure, SwigPyBuiltin_FunpackSetterClosure, (char *)"", &cpxdeserializer_getshort_getset },
    { (char *)"getint", SwigPyBuiltin_FunpackGetterClosure, SwigPyBuiltin_FunpackSetterClosure, (char *)"", &cpxdeserializer_getint_getset },
    { (char *)"getints", SwigPyBuiltin_FunpackGetterClosure, SwigPyBuiltin_FunpackSetterClosure, (char *)"", &cpxdeserializer_getints_getset },
    { (char *)"getfloats", SwigPyBuiltin_FunpackGetterClosure, SwigPyBuiltin_FunpackSetterClosure, (char *)"", &cpxdeserializer_getfloats_getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__cpxdeserializer_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__cpxdeserializer_methods[] = {
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__cpxdeserializer_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "amplpy_cplex_swig.cpxdeserializer",      /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    _wrap_delete_cpxdeserializer_destructor_closure,              /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__cpxdeserializer_type.as_number,               /* tp_as_number */
    &SwigPyBuiltin__cpxdeserializer_type.as_sequence,             /* tp_as_sequence */
    &SwigPyBuiltin__cpxdeserializer_type.as_mapping,              /* tp_as_mapping */
    SwigPyObject_hash,                        /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__cpxdeserializer_type.as_buffer,               /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "::cpxdeserializer",                      /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    SwigPyBuiltin__cpxdeserializer_richcompare,                   /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__cpxdeserializer_methods,   /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__cpxdeserializer_getset,    /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    offsetof(SwigPyObject, dict),             /* tp_dictoffset */
    _wrap_new_cpxdeserializer,                /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
    (int) 0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                       /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
    0,                                        /* tp_prev */
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
    (unaryfunc) 0,                            /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__cpxdeserializer_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__cpxdeserializer_type};

static SwigPyGetSet cpxserializer_addlong_getset = { _wrap_cpxserializer_addlong_get, _wrap_cpxserializer_addlong_set };
static SwigPyGetSet cpxserializer_addshorts_getset = { _wrap_cpxserializer_addshorts_get, _wrap_cpxserializer_addshorts_set };
static SwigPyGetSet cpxserializer___dict___getset = { SwigPyObject_get___dict__, 0 };
static SwigPyGetSet cpxserializer_addshort_getset = { _wrap_cpxserializer_addshort_get, _wrap_cpxserializer_addshort_set };
static SwigPyGetSet cpxserializer_addint_getset = { _wrap_cpxserializer_addint_get, _wrap_cpxserializer_addint_set };
static SwigPyGetSet cpxserializer_adddoubles_getset = { _wrap_cpxserializer_adddoubles_get, _wrap_cpxserializer_adddoubles_set };
static SwigPyGetSet cpxserializer_addints_getset = { _wrap_cpxserializer_addints_get, _wrap_cpxserializer_addints_set };
static SwigPyGetSet cpxserializer_addbyte_getset = { _wrap_cpxserializer_addbyte_get, _wrap_cpxserializer_addbyte_set };
static SwigPyGetSet cpxserializer_adddouble_getset = { _wrap_cpxserializer_adddouble_get, _wrap_cpxserializer_adddouble_set };
static SwigPyGetSet cpxserializer_addlongs_getset = { _wrap_cpxserializer_addlongs_get, _wrap_cpxserializer_addlongs_set };
static SwigPyGetSet cpxserializer_addfloat_getset = { _wrap_cpxserializer_addfloat_get, _wrap_cpxserializer_addfloat_set };
static SwigPyGetSet cpxserializer_addbytes_getset = { _wrap_cpxserializer_addbytes_get, _wrap_cpxserializer_addbytes_set };
static SwigPyGetSet cpxserializer_addfloats_getset = { _wrap_cpxserializer_addfloats_get, _wrap_cpxserializer_addfloats_set };
SWIGINTERN PyGetSetDef SwigPyBuiltin__cpxserializer_getset[] = {
    { (char *)"addlong", SwigPyBuiltin_FunpackGetterClosure, SwigPyBuiltin_FunpackSetterClosure, (char *)"", &cpxserializer_addlong_getset },
    { (char *)"addshorts", SwigPyBuiltin_FunpackGetterClosure, SwigPyBuiltin_FunpackSetterClosure, (char *)"", &cpxserializer_addshorts_getset },
    { (char *)"__dict__", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"", &cpxserializer___dict___getset },
    { (char *)"addshort", SwigPyBuiltin_FunpackGetterClosure, SwigPyBuiltin_FunpackSetterClosure, (char *)"", &cpxserializer_addshort_getset },
    { (char *)"addint", SwigPyBuiltin_FunpackGetterClosure, SwigPyBuiltin_FunpackSetterClosure, (char *)"", &cpxserializer_addint_getset },
    { (char *)"adddoubles", SwigPyBuiltin_FunpackGetterClosure, SwigPyBuiltin_FunpackSetterClosure, (char *)"", &cpxserializer_adddoubles_getset },
    { (char *)"addints", SwigPyBuiltin_FunpackGetterClosure, SwigPyBuiltin_FunpackSetterClosure, (char *)"", &cpxserializer_addints_getset },
    { (char *)"addbyte", SwigPyBuiltin_FunpackGetterClosure, SwigPyBuiltin_FunpackSetterClosure, (char *)"", &cpxserializer_addbyte_getset },
    { (char *)"adddouble", SwigPyBuiltin_FunpackGetterClosure, SwigPyBuiltin_FunpackSetterClosure, (char *)"", &cpxserializer_adddouble_getset },
    { (char *)"addlongs", SwigPyBuiltin_FunpackGetterClosure, SwigPyBuiltin_FunpackSetterClosure, (char *)"", &cpxserializer_addlongs_getset },
    { (char *)"addfloat", SwigPyBuiltin_FunpackGetterClosure, SwigPyBuiltin_FunpackSetterClosure, (char *)"", &cpxserializer_addfloat_getset },
    { (char *)"addbytes", SwigPyBuiltin_FunpackGetterClosure, SwigPyBuiltin_FunpackSetterClosure, (char *)"", &cpxserializer_addbytes_getset },
    { (char *)"addfloats", SwigPyBuiltin_FunpackGetterClosure, SwigPyBuiltin_FunpackSetterClosure, (char *)"", &cpxserializer_addfloats_getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__cpxserializer_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__cpxserializer_methods[] = {
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__cpxserializer_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "amplpy_cplex_swig.cpxserializer",        /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    _wrap_delete_cpxserializer_destructor_closure,                /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__cpxserializer_type.as_number,                 /* tp_as_number */
    &SwigPyBuiltin__cpxserializer_type.as_sequence,               /* tp_as_sequence */
    &SwigPyBuiltin__cpxserializer_type.as_mapping,                /* tp_as_mapping */
    SwigPyObject_hash,                        /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__cpxserializer_type.as_buffer,                 /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "::cpxserializer",                        /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    SwigPyBuiltin__cpxserializer_richcompare, /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__cpxserializer_methods,     /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__cpxserializer_getset,      /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    offsetof(SwigPyObject, dict),             /* tp_dictoffset */
    _wrap_new_cpxserializer,                  /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
    (int) 0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                       /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
    0,                                        /* tp_prev */
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
    (unaryfunc) 0,                            /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__cpxserializer_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__cpxserializer_type};

static SwigPyGetSet CBWrap___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__ampls__cpx__impl__CBWrap_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"", &CBWrap___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__ampls__cpx__impl__CBWrap_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__ampls__cpx__impl__CBWrap_methods[] = {
  { "lp_callback_wrapper", (PyCFunction)(void(*)(void))_wrap_CBWrap_lp_callback_wrapper, METH_STATIC|METH_VARARGS, "" },
  { "cut_callback_wrapper", (PyCFunction)(void(*)(void))_wrap_CBWrap_cut_callback_wrapper, METH_STATIC|METH_VARARGS, "" },
  { "msg_callback_wrapper", (PyCFunction)(void(*)(void))_wrap_CBWrap_msg_callback_wrapper, METH_STATIC|METH_VARARGS, "" },
  { "incumbent_callback_wrapper", (PyCFunction)(void(*)(void))_wrap_CBWrap_incumbent_callback_wrapper, METH_STATIC|METH_VARARGS, "" },
  { "setDefaultCB", (PyCFunction)(void(*)(void))_wrap_CBWrap_setDefaultCB, METH_STATIC|METH_VARARGS, "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__ampls__cpx__impl__CBWrap_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "amplpy_cplex_swig.CBWrap",               /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    _wrap_delete_CBWrap_destructor_closure,   /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__ampls__cpx__impl__CBWrap_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__ampls__cpx__impl__CBWrap_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__ampls__cpx__impl__CBWrap_type.as_mapping,     /* tp_as_mapping */
    SwigPyObject_hash,                        /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__ampls__cpx__impl__CBWrap_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "ampls::cpx::impl::CBWrap",               /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    SwigPyBuiltin__ampls__cpx__impl__CBWrap_richcompare,          /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__ampls__cpx__impl__CBWrap_methods,              /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__ampls__cpx__impl__CBWrap_getset,               /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    offsetof(SwigPyObject, dict),             /* tp_dictoffset */
    _wrap_new_CBWrap,                         /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
    (int) 0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                       /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
    0,                                        /* tp_prev */
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
    (unaryfunc) 0,                            /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__ampls__cpx__impl__CBWrap_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__ampls__cpx__impl__CBWrap_type};

static SwigPyGetSet CPLEXDrv___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__ampls__CPLEXDrv_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"", &CPLEXDrv___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__ampls__CPLEXDrv_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__ampls__CPLEXDrv_methods[] = {
  { "loadModel", _wrap_CPLEXDrv_loadModel, METH_O, "" },
  { "getEnv", _wrap_CPLEXDrv_getEnv, METH_NOARGS, "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__ampls__CPLEXDrv_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "amplpy_cplex_swig.CPLEXDrv",             /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    _wrap_delete_CPLEXDrv_destructor_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__ampls__CPLEXDrv_type.as_number,               /* tp_as_number */
    &SwigPyBuiltin__ampls__CPLEXDrv_type.as_sequence,             /* tp_as_sequence */
    &SwigPyBuiltin__ampls__CPLEXDrv_type.as_mapping,              /* tp_as_mapping */
    SwigPyObject_hash,                        /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__ampls__CPLEXDrv_type.as_buffer,               /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "ampls::CPLEXDrv",                        /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    SwigPyBuiltin__ampls__CPLEXDrv_richcompare,                   /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__ampls__CPLEXDrv_methods,   /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__ampls__CPLEXDrv_getset,    /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    offsetof(SwigPyObject, dict),             /* tp_dictoffset */
    _wrap_new_CPLEXDrv,                       /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
    (int) 0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                       /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
    0,                                        /* tp_prev */
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
    (unaryfunc) 0,                            /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__ampls__CPLEXDrv_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__ampls__CPLEXDrv_type};

static SwigPyGetSet CPLEXModel___dict___getset = { SwigPyObject_get___dict__, 0 };
static SwigPyGetSet CPLEXModel_toCPLEXType_getset = { _wrap_CPLEXModel_toCPLEXType_get, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__ampls__CPLEXModel_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"", &CPLEXModel___dict___getset },
    { (char *)"toCPLEXType", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"", &CPLEXModel_toCPLEXType_getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__ampls__CPLEXModel_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__ampls__CPLEXModel_methods[] = {
  { "getStatus", _wrap_CPLEXModel_getStatus, METH_NOARGS, "" },
  { "optimize", _wrap_CPLEXModel_optimize, METH_NOARGS, "" },
  { "getNumVars", _wrap_CPLEXModel_getNumVars, METH_NOARGS, "" },
  { "getNumCons", _wrap_CPLEXModel_getNumCons, METH_NOARGS, "" },
  { "getObj", _wrap_CPLEXModel_getObj, METH_NOARGS, "" },
  { "getSolution", _wrap_CPLEXModel_getSolution, METH_VARARGS, "" },
  { "error", _wrap_CPLEXModel_error, METH_O, "" },
  { "enableLazyConstraints", _wrap_CPLEXModel_enableLazyConstraints, METH_NOARGS, "" },
  { "getCPXLP", _wrap_CPLEXModel_getCPXLP, METH_NOARGS, "" },
  { "getCPXENV", _wrap_CPLEXModel_getCPXENV, METH_NOARGS, "" },
  { "setParam", _wrap_CPLEXModel_setParam, METH_VARARGS, "" },
  { "getIntParam", _wrap_CPLEXModel_getIntParam, METH_O, "" },
  { "getDoubleParam", _wrap_CPLEXModel_getDoubleParam, METH_O, "" },
  { "getAMPLsIntParameter", _wrap_CPLEXModel_getAMPLsIntParameter, METH_O, "" },
  { "getAMPLsDoubleParameter", _wrap_CPLEXModel_getAMPLsDoubleParameter, METH_O, "" },
  { "setAMPLsParameter", _wrap_CPLEXModel_setAMPLsParameter, METH_VARARGS, "" },
  { "addConstraintImpl", _wrap_CPLEXModel_addConstraintImpl, METH_VARARGS, "" },
  { "addVariableImpl", _wrap_CPLEXModel_addVariableImpl, METH_VARARGS, "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__ampls__CPLEXModel_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "amplpy_cplex_swig.CPLEXModel",           /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    _wrap_delete_CPLEXModel_destructor_closure,                   /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__ampls__CPLEXModel_type.as_number,             /* tp_as_number */
    &SwigPyBuiltin__ampls__CPLEXModel_type.as_sequence,           /* tp_as_sequence */
    &SwigPyBuiltin__ampls__CPLEXModel_type.as_mapping,            /* tp_as_mapping */
    SwigPyObject_hash,                        /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__ampls__CPLEXModel_type.as_buffer,             /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "ampls::CPLEXModel",                      /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    SwigPyBuiltin__ampls__CPLEXModel_richcompare,                 /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__ampls__CPLEXModel_methods, /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__ampls__CPLEXModel_getset,  /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    offsetof(SwigPyObject, dict),             /* tp_dictoffset */
    _wrap_new_CPLEXModel,                     /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
    (int) 0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                       /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
    0,                                        /* tp_prev */
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
    (unaryfunc) 0,                            /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__ampls__CPLEXModel_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__ampls__CPLEXModel_type};

static SwigPyGetSet CPLEXCallback___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__ampls__CPLEXCallback_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"", &CPLEXCallback___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__ampls__CPLEXCallback_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__ampls__CPLEXCallback_methods[] = {
  { "run", _wrap_CPLEXCallback_run, METH_NOARGS, "" },
  { "getObj", _wrap_CPLEXCallback_getObj, METH_NOARGS, "" },
  { "getWhereString", _wrap_CPLEXCallback_getWhereString, METH_NOARGS, "" },
  { "getMessage", _wrap_CPLEXCallback_getMessage, METH_NOARGS, "" },
  { "getAMPLWhere", _wrap_CPLEXCallback_getAMPLWhere, METH_NOARGS, "" },
  { "get", _wrap_CPLEXCallback_get, METH_O, "" },
  { "getInt", _wrap_CPLEXCallback_getInt, METH_O, "" },
  { "getDouble", _wrap_CPLEXCallback_getDouble, METH_O, "" },
  { "getValue", _wrap_CPLEXCallback_getValue, METH_O, "" },
  { "__disown__", Swig::Director::swig_pyobj_disown< ampls::CPLEXCallback >, METH_NOARGS, "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__ampls__CPLEXCallback_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "amplpy_cplex_swig.CPLEXCallback",        /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    _wrap_delete_CPLEXCallback_destructor_closure,                /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__ampls__CPLEXCallback_type.as_number,          /* tp_as_number */
    &SwigPyBuiltin__ampls__CPLEXCallback_type.as_sequence,        /* tp_as_sequence */
    &SwigPyBuiltin__ampls__CPLEXCallback_type.as_mapping,         /* tp_as_mapping */
    SwigPyObject_hash,                        /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__ampls__CPLEXCallback_type.as_buffer,          /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "ampls::CPLEXCallback",                   /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    SwigPyBuiltin__ampls__CPLEXCallback_richcompare,              /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__ampls__CPLEXCallback_methods,                  /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__ampls__CPLEXCallback_getset,                   /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    offsetof(SwigPyObject, dict),             /* tp_dictoffset */
    _wrap_new_CPLEXCallback,                  /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
    (int) 0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                       /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
    0,                                        /* tp_prev */
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
    (unaryfunc) 0,                            /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__ampls__CPLEXCallback_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__ampls__CPLEXCallback_type};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_f_p_cpxserializer_long_long_p_q_const__signed_char__intArrayTo_p_f_p_cpxserializer_long_long_p_q_const__signed_char__int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int (*)(cpxserializer *,long long,signed char const *))  ((intArray (*)(cpxserializer *,long long,signed char const *)) x));
}
static void *_p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_int_p_int__intArrayTo_p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_int_p_int__int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int (**)(cpxenv const *,void *,int,void *,int *,int *))  ((intArray (**)(cpxenv const *,void *,int,void *,int *,int *)) x));
}
static void *_p_f_p_q_const__cpxenv_p_void_int_p_void_int_int_int_int_p_q_const__int_p_q_const__int_p_q_const__char_p_q_const__double_p_q_const__double_p_int__intArrayTo_p_f_p_q_const__cpxenv_p_void_int_p_void_int_int_int_int_p_q_const__int_p_q_const__int_p_q_const__char_p_q_const__double_p_q_const__double_p_int__int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int (*)(cpxenv const *,void *,int,void *,int,int,int,int,int const *,int const *,char const *,double const *,double const *,int *))  ((intArray (*)(cpxenv const *,void *,int,void *,int,int,int,int,int const *,int const *,char const *,double const *,double const *,int *)) x));
}
static void *_p_f_p_cpxserializer_long_long_p_q_const__double__intArrayTo_p_f_p_cpxserializer_long_long_p_q_const__double__int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int (*)(cpxserializer *,long long,double const *))  ((intArray (*)(cpxserializer *,long long,double const *)) x));
}
static void *_p_f_p_q_const__cpxenv_int_p_void__intArrayTo_p_f_p_q_const__cpxenv_int_p_void__int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int (*)(cpxenv const *,int,void *))  ((intArray (*)(cpxenv const *,int,void *)) x));
}
static void *_p_f_p_q_const__cpxenv_p_void_int_p_void__intArrayTo_p_f_p_q_const__cpxenv_p_void_int_p_void__int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int (*)(cpxenv const *,void *,int,void *))  ((intArray (*)(cpxenv const *,void *,int,void *)) x));
}
static void *_p_p_f_int_p_q_const__char_p_void__intArrayTo_p_p_f_int_p_q_const__char_p_void__int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int (**)(int,char const *,void *))  ((intArray (**)(int,char const *,void *)) x));
}
static void *_p_p_f_p_q_const__cpxenv_p_void_int_p_void__intArrayTo_p_p_f_p_q_const__cpxenv_p_void_int_p_void__int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int (**)(cpxenv const *,void *,int,void *))  ((intArray (**)(cpxenv const *,void *,int,void *)) x));
}
static void *_p_p_f_p_cpxcallbackcontext_long_long_p_void__intArrayTo_p_p_f_p_cpxcallbackcontext_long_long_p_void__int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int (**)(cpxcallbackcontext *,long long,void *))  ((intArray (**)(cpxcallbackcontext *,long long,void *)) x));
}
static void *_p_f_int_p_q_const__char_p_void__intArrayTo_p_f_int_p_q_const__char_p_void__int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int (*)(int,char const *,void *))  ((intArray (*)(int,char const *,void *)) x));
}
static void *_p_f_p_cpxcallbackcontext_long_long_p_void__intArrayTo_p_f_p_cpxcallbackcontext_long_long_p_void__int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int (*)(cpxcallbackcontext *,long long,void *))  ((intArray (*)(cpxcallbackcontext *,long long,void *)) x));
}
static void *_p_f_p_q_const__cpxenv_p_void_int_p_void_p_int_p_int__intArrayTo_p_f_p_q_const__cpxenv_p_void_int_p_void_p_int_p_int__int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int (*)(cpxenv const *,void *,int,void *,int *,int *))  ((intArray (*)(cpxenv const *,void *,int,void *,int *,int *)) x));
}
static void *_p_intArrayTo_p_int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int *)  ((intArray *) x));
}
static void *_p_f_p_cpxserializer_long_long_p_q_const__long_long__intArrayTo_p_f_p_cpxserializer_long_long_p_q_const__long_long__int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int (*)(cpxserializer *,long long,long long const *))  ((intArray (*)(cpxserializer *,long long,long long const *)) x));
}
static void *_p_ampls__CPLEXDrvTo_p_ampls__impl__SolverDriverT_ampls__CPLEXModel_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ampls::impl::SolverDriver< ampls::CPLEXModel > *)  ((ampls::CPLEXDrv *) x));
}
static void *_p_f_p_cpxenv_int_long_long_p_q_const__void_long_long_p_long_long_p_void_p_void__intArrayTo_p_f_p_cpxenv_int_long_long_p_q_const__void_long_long_p_long_long_p_void_p_void__int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int (*)(cpxenv *,int,long long,void const *,long long,long long *,void *,void *))  ((intArray (*)(cpxenv *,int,long long,void const *,long long,long long *,void *,void *)) x));
}
static void *_p_ampls__GenericCallbackTo_p_ampls__impl__BaseCallback(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ampls::impl::BaseCallback *)  ((ampls::GenericCallback *) x));
}
static void *_p_ampls__CPLEXCallbackTo_p_ampls__impl__BaseCallback(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ampls::impl::BaseCallback *)  ((ampls::CPLEXCallback *) x));
}
static void *_p_a_sizeof_CPXSIZE___sizeof_size_t__1__1__intArrayTo_p_a_sizeof_CPXSIZE___sizeof_size_t__1__1__int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int (*)[sizeof(CPXSIZE)==sizeof(size_t)?1:-1])  ((intArray (*)[sizeof(CPXSIZE)==sizeof(size_t)?1:-1]) x));
}
static void *_p_a_sizeof_CPXULONG___8_1__1__intArrayTo_p_a_sizeof_CPXULONG___8_1__1__int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int (*)[sizeof(CPXULONG)==8?1:-1])  ((intArray (*)[sizeof(CPXULONG)==8?1:-1]) x));
}
static void *_p_a_sizeof_CPXLONG___8_1__1__intArrayTo_p_a_sizeof_CPXLONG___8_1__1__int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int (*)[sizeof(CPXLONG)==8?1:-1])  ((intArray (*)[sizeof(CPXLONG)==8?1:-1]) x));
}
static void *_p_a_sizeof_CPXINT___4_1__1__intArrayTo_p_a_sizeof_CPXINT___4_1__1__int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int (*)[sizeof(CPXINT)==4?1:-1])  ((intArray (*)[sizeof(CPXINT)==4?1:-1]) x));
}
static void *_p_a_sizeof_CPXSHORT___2_1__1__intArrayTo_p_a_sizeof_CPXSHORT___2_1__1__int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int (*)[sizeof(CPXSHORT)==2?1:-1])  ((intArray (*)[sizeof(CPXSHORT)==2?1:-1]) x));
}
static void *_p_a_sizeof_CPXBYTE___1_1__1__intArrayTo_p_a_sizeof_CPXBYTE___1_1__1__int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int (*)[sizeof(CPXBYTE)==1?1:-1])  ((intArray (*)[sizeof(CPXBYTE)==1?1:-1]) x));
}
static void *_p_f_p_cpxserializer_long_long__intArrayTo_p_f_p_cpxserializer_long_long__int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int (*)(cpxserializer *,long long))  ((intArray (*)(cpxserializer *,long long)) x));
}
static void *_p_f_p_cpxdeserializer_long_long_p_long_long__intArrayTo_p_f_p_cpxdeserializer_long_long_p_long_long__int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int (*)(cpxdeserializer *,long long,long long *))  ((intArray (*)(cpxdeserializer *,long long,long long *)) x));
}
static void *_p_f_p_cpxdeserializer_p_long_long__intArrayTo_p_f_p_cpxdeserializer_p_long_long__int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int (*)(cpxdeserializer *,long long *))  ((intArray (*)(cpxdeserializer *,long long *)) x));
}
static void *_p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_int__intArrayTo_p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_int__int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int (**)(cpxenv const *,void *,int,void *,int *))  ((intArray (**)(cpxenv const *,void *,int,void *,int *)) x));
}
static void *_p_ampls__CPLEXModelTo_p_ampls__AMPLModel(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ampls::AMPLModel *)  ((ampls::CPLEXModel *) x));
}
static void *_p_f_p_q_const__char_p_cpxiodevice__intArrayTo_p_f_p_q_const__char_p_cpxiodevice__int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int (*)(char const *,cpxiodevice *))  ((intArray (*)(char const *,cpxiodevice *)) x));
}
static void *_p_f_int_p_cpxiodevice__intArrayTo_p_f_int_p_cpxiodevice__int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int (*)(int,cpxiodevice *))  ((intArray (*)(int,cpxiodevice *)) x));
}
static void *_p_f_p_cpxiodevice__intArrayTo_p_f_p_cpxiodevice__int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int (*)(cpxiodevice *))  ((intArray (*)(cpxiodevice *)) x));
}
static void *_p_ampls__ConstraintTo_p_ampls__Entity(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ampls::Entity *)  ((ampls::Constraint *) x));
}
static void *_p_ampls__VariableTo_p_ampls__Entity(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ampls::Entity *)  ((ampls::Variable *) x));
}
static void *_p_f_p_cpxserializer_long_long_p_q_const__short__intArrayTo_p_f_p_cpxserializer_long_long_p_q_const__short__int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int (*)(cpxserializer *,long long,short const *))  ((intArray (*)(cpxserializer *,long long,short const *)) x));
}
static void *_p_f_p_cpxserializer_double__intArrayTo_p_f_p_cpxserializer_double__int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int (*)(cpxserializer *,double))  ((intArray (*)(cpxserializer *,double)) x));
}
static void *_p_f_p_cpxdeserializer_long_long_p_double__intArrayTo_p_f_p_cpxdeserializer_long_long_p_double__int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int (*)(cpxdeserializer *,long long,double *))  ((intArray (*)(cpxdeserializer *,long long,double *)) x));
}
static void *_p_f_p_cpxdeserializer_p_double__intArrayTo_p_f_p_cpxdeserializer_p_double__int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int (*)(cpxdeserializer *,double *))  ((intArray (*)(cpxdeserializer *,double *)) x));
}
static void *_p_f_p_cpxserializer_long_long_p_q_const__float__intArrayTo_p_f_p_cpxserializer_long_long_p_q_const__float__int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int (*)(cpxserializer *,long long,float const *))  ((intArray (*)(cpxserializer *,long long,float const *)) x));
}
static void *_p_f_p_cpxserializer_float__intArrayTo_p_f_p_cpxserializer_float__int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int (*)(cpxserializer *,float))  ((intArray (*)(cpxserializer *,float)) x));
}
static void *_p_f_p_cpxdeserializer_long_long_p_float__intArrayTo_p_f_p_cpxdeserializer_long_long_p_float__int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int (*)(cpxdeserializer *,long long,float *))  ((intArray (*)(cpxdeserializer *,long long,float *)) x));
}
static void *_p_f_p_cpxdeserializer_p_float__intArrayTo_p_f_p_cpxdeserializer_p_float__int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int (*)(cpxdeserializer *,float *))  ((intArray (*)(cpxdeserializer *,float *)) x));
}
static void *_p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_double_p_double_p_int_p_int__intArrayTo_p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_double_p_double_p_int_p_int__int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int (**)(cpxenv const *,void *,int,void *,double *,double *,int *,int *))  ((intArray (**)(cpxenv const *,void *,int,void *,double *,double *,int *,int *)) x));
}
static void *_p_dblArrayTo_p_double(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((double *)  ((dblArray *) x));
}
static void *_p_f_p_q_const__cpxenv_p_void_int_p_void_double_p_double_p_int_p_int__intArrayTo_p_f_p_q_const__cpxenv_p_void_int_p_void_double_p_double_p_int_p_int__int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int (*)(cpxenv const *,void *,int,void *,double,double *,int *,int *))  ((intArray (*)(cpxenv const *,void *,int,void *,double,double *,int *,int *)) x));
}
static void *_p_p_f_p_q_const__cpxenv_p_void_int_p_void_int_int_int_int_p_q_const__int_p_q_const__int_p_q_const__char_p_q_const__double_p_q_const__double_p_int__intArrayTo_p_p_f_p_q_const__cpxenv_p_void_int_p_void_int_int_int_int_p_q_const__int_p_q_const__int_p_q_const__char_p_q_const__double_p_q_const__double_p_int__int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int (**)(cpxenv const *,void *,int,void *,int,int,int,int,int const *,int const *,char const *,double const *,double const *,int *))  ((intArray (**)(cpxenv const *,void *,int,void *,int,int,int,int,int const *,int const *,char const *,double const *,double const *,int *)) x));
}
static void *_p_ampls__AMPLSolverExceptionTo_p_std__runtime_error(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::runtime_error *)  ((ampls::AMPLSolverException *) x));
}
static void *_p_f_p_q_const__cpxenv_p_void_int_p_void_p_double_p_double_p_int_p_int__intArrayTo_p_f_p_q_const__cpxenv_p_void_int_p_void_p_double_p_double_p_int_p_int__int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int (*)(cpxenv const *,void *,int,void *,double *,double *,int *,int *))  ((intArray (*)(cpxenv const *,void *,int,void *,double *,double *,int *,int *)) x));
}
static void *_p_p_f_p_q_const__cpxenv_p_void_int_p_void_double_p_double_p_int_p_int__intArrayTo_p_p_f_p_q_const__cpxenv_p_void_int_p_void_double_p_double_p_int_p_int__int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int (**)(cpxenv const *,void *,int,void *,double,double *,int *,int *))  ((intArray (**)(cpxenv const *,void *,int,void *,double,double *,int *,int *)) x));
}
static void *_p_f_p_q_const__cpxenv_p_void_int_p_void_p_int__intArrayTo_p_f_p_q_const__cpxenv_p_void_int_p_void_p_int__int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int (*)(cpxenv const *,void *,int,void *,int *))  ((intArray (*)(cpxenv const *,void *,int,void *,int *)) x));
}
static void *_p_f_p_cpxserializer_long_long_p_q_const__int__intArrayTo_p_f_p_cpxserializer_long_long_p_q_const__int__int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int (*)(cpxserializer *,long long,int const *))  ((intArray (*)(cpxserializer *,long long,int const *)) x));
}
static void *_p_f_p_cpxserializer_int__intArrayTo_p_f_p_cpxserializer_int__int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int (*)(cpxserializer *,int))  ((intArray (*)(cpxserializer *,int)) x));
}
static void *_p_f_p_cpxserializer_short__intArrayTo_p_f_p_cpxserializer_short__int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int (*)(cpxserializer *,short))  ((intArray (*)(cpxserializer *,short)) x));
}
static void *_p_f_p_cpxdeserializer_long_long_p_int__intArrayTo_p_f_p_cpxdeserializer_long_long_p_int__int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int (*)(cpxdeserializer *,long long,int *))  ((intArray (*)(cpxdeserializer *,long long,int *)) x));
}
static void *_p_f_p_cpxdeserializer_long_long_p_short__intArrayTo_p_f_p_cpxdeserializer_long_long_p_short__int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int (*)(cpxdeserializer *,long long,short *))  ((intArray (*)(cpxdeserializer *,long long,short *)) x));
}
static void *_p_f_p_cpxdeserializer_p_int__intArrayTo_p_f_p_cpxdeserializer_p_int__int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int (*)(cpxdeserializer *,int *))  ((intArray (*)(cpxdeserializer *,int *)) x));
}
static void *_p_f_p_cpxdeserializer_p_short__intArrayTo_p_f_p_cpxdeserializer_p_short__int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int (*)(cpxdeserializer *,short *))  ((intArray (*)(cpxdeserializer *,short *)) x));
}
static void *_p_f_p_cpxserializer_signed_char__intArrayTo_p_f_p_cpxserializer_signed_char__int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int (*)(cpxserializer *,signed char))  ((intArray (*)(cpxserializer *,signed char)) x));
}
static void *_p_f_p_cpxdeserializer_long_long_p_signed_char__intArrayTo_p_f_p_cpxdeserializer_long_long_p_signed_char__int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int (*)(cpxdeserializer *,long long,signed char *))  ((intArray (*)(cpxdeserializer *,long long,signed char *)) x));
}
static void *_p_f_p_cpxdeserializer_p_signed_char__intArrayTo_p_f_p_cpxdeserializer_p_signed_char__int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int (*)(cpxdeserializer *,signed char *))  ((intArray (*)(cpxdeserializer *,signed char *)) x));
}
static swig_type_info _swigt__p_CPXCALLBACKINFO = {"_p_CPXCALLBACKINFO", "enum CPXCALLBACKINFO *|CPXCALLBACKINFO *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CPXCALLBACKSOLUTIONSTRATEGY = {"_p_CPXCALLBACKSOLUTIONSTRATEGY", "enum CPXCALLBACKSOLUTIONSTRATEGY *|CPXCALLBACKSOLUTIONSTRATEGY *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CPXINFOTYPE = {"_p_CPXINFOTYPE", "enum CPXINFOTYPE *|CPXINFOTYPE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SwigPyObject = {"_p_SwigPyObject", "SwigPyObject *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_a_sizeof_CPXBYTE___1_1__1__int = {"_p_a_sizeof_CPXBYTE___1_1__1__int", "int (*)[sizeof(CPXBYTE)==1?1:-1]|CPXBYTE_TEST *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_a_sizeof_CPXBYTE___1_1__1__intArray = {"_p_a_sizeof_CPXBYTE___1_1__1__intArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_a_sizeof_CPXINT___4_1__1__int = {"_p_a_sizeof_CPXINT___4_1__1__int", "int (*)[sizeof(CPXINT)==4?1:-1]|CPXINT_TEST *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_a_sizeof_CPXINT___4_1__1__intArray = {"_p_a_sizeof_CPXINT___4_1__1__intArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_a_sizeof_CPXLONG___8_1__1__int = {"_p_a_sizeof_CPXLONG___8_1__1__int", "int (*)[sizeof(CPXLONG)==8?1:-1]|CPXLONG_TEST *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_a_sizeof_CPXLONG___8_1__1__intArray = {"_p_a_sizeof_CPXLONG___8_1__1__intArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_a_sizeof_CPXSHORT___2_1__1__int = {"_p_a_sizeof_CPXSHORT___2_1__1__int", "int (*)[sizeof(CPXSHORT)==2?1:-1]|CPXSHORT_TEST *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_a_sizeof_CPXSHORT___2_1__1__intArray = {"_p_a_sizeof_CPXSHORT___2_1__1__intArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_a_sizeof_CPXSIZE___sizeof_size_t__1__1__int = {"_p_a_sizeof_CPXSIZE___sizeof_size_t__1__1__int", "int (*)[sizeof(CPXSIZE)==sizeof(size_t)?1:-1]|CPXSIZE_BITS_TEST *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_a_sizeof_CPXSIZE___sizeof_size_t__1__1__intArray = {"_p_a_sizeof_CPXSIZE___sizeof_size_t__1__1__intArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_a_sizeof_CPXULONG___8_1__1__int = {"_p_a_sizeof_CPXULONG___8_1__1__int", "int (*)[sizeof(CPXULONG)==8?1:-1]|CPXULONG_TEST *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_a_sizeof_CPXULONG___8_1__1__intArray = {"_p_a_sizeof_CPXULONG___8_1__1__intArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ampls__AMPLModel = {"_p_ampls__AMPLModel", "ampls::AMPLModel *", 0, 0, (void*)&SwigPyBuiltin__ampls__AMPLModel_clientdata, 0};
static swig_type_info _swigt__p_ampls__AMPLSolverException = {"_p_ampls__AMPLSolverException", "ampls::AMPLSolverException *", 0, 0, (void*)&SwigPyBuiltin__ampls__AMPLSolverException_clientdata, 0};
static swig_type_info _swigt__p_ampls__CPLEXCallback = {"_p_ampls__CPLEXCallback", "ampls::CPLEXCallback *", 0, 0, (void*)&SwigPyBuiltin__ampls__CPLEXCallback_clientdata, 0};
static swig_type_info _swigt__p_ampls__CPLEXDrv = {"_p_ampls__CPLEXDrv", "ampls::CPLEXDrv *", 0, 0, (void*)&SwigPyBuiltin__ampls__CPLEXDrv_clientdata, 0};
static swig_type_info _swigt__p_ampls__CPLEXModel = {"_p_ampls__CPLEXModel", "ampls::CPLEXModel *", 0, 0, (void*)&SwigPyBuiltin__ampls__CPLEXModel_clientdata, 0};
static swig_type_info _swigt__p_ampls__Constraint = {"_p_ampls__Constraint", "ampls::Constraint *", 0, 0, (void*)&SwigPyBuiltin__ampls__Constraint_clientdata, 0};
static swig_type_info _swigt__p_ampls__CutDirection = {"_p_ampls__CutDirection", "ampls::CutDirection *", 0, 0, (void*)&SwigPyBuiltin__ampls__CutDirection_clientdata, 0};
static swig_type_info _swigt__p_ampls__Entity = {"_p_ampls__Entity", "ampls::Entity *", 0, 0, (void*)&SwigPyBuiltin__ampls__Entity_clientdata, 0};
static swig_type_info _swigt__p_ampls__GenericCallback = {"_p_ampls__GenericCallback", "ampls::GenericCallback *", 0, 0, (void*)&SwigPyBuiltin__ampls__GenericCallback_clientdata, 0};
static swig_type_info _swigt__p_ampls__LPAlgorithms = {"_p_ampls__LPAlgorithms", "ampls::LPAlgorithms *", 0, 0, (void*)&SwigPyBuiltin__ampls__LPAlgorithms_clientdata, 0};
static swig_type_info _swigt__p_ampls__SolverParams = {"_p_ampls__SolverParams", "ampls::SolverParams *", 0, 0, (void*)&SwigPyBuiltin__ampls__SolverParams_clientdata, 0};
static swig_type_info _swigt__p_ampls__Status = {"_p_ampls__Status", "ampls::Status *", 0, 0, (void*)&SwigPyBuiltin__ampls__Status_clientdata, 0};
static swig_type_info _swigt__p_ampls__Value = {"_p_ampls__Value", "ampls::Value *", 0, 0, (void*)&SwigPyBuiltin__ampls__Value_clientdata, 0};
static swig_type_info _swigt__p_ampls__VarType = {"_p_ampls__VarType", "ampls::VarType *", 0, 0, (void*)&SwigPyBuiltin__ampls__VarType_clientdata, 0};
static swig_type_info _swigt__p_ampls__Variable = {"_p_ampls__Variable", "ampls::Variable *", 0, 0, (void*)&SwigPyBuiltin__ampls__Variable_clientdata, 0};
static swig_type_info _swigt__p_ampls__Variant = {"_p_ampls__Variant", "ampls::Variant *", 0, 0, (void*)&SwigPyBuiltin__ampls__Variant_clientdata, 0};
static swig_type_info _swigt__p_ampls__Where = {"_p_ampls__Where", "ampls::Where *", 0, 0, (void*)&SwigPyBuiltin__ampls__Where_clientdata, 0};
static swig_type_info _swigt__p_ampls__cpx__impl__CBWrap = {"_p_ampls__cpx__impl__CBWrap", "ampls::cpx::impl::CBWrap *", 0, 0, (void*)&SwigPyBuiltin__ampls__cpx__impl__CBWrap_clientdata, 0};
static swig_type_info _swigt__p_ampls__cpx__impl__CPLEXDriverState = {"_p_ampls__cpx__impl__CPLEXDriverState", "ampls::cpx::impl::CPLEXDriverState *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ampls__impl__AMPLMutex = {"_p_ampls__impl__AMPLMutex", "ampls::impl::AMPLMutex *", 0, 0, (void*)&SwigPyBuiltin__ampls__impl__AMPLMutex_clientdata, 0};
static swig_type_info _swigt__p_ampls__impl__BaseCallback = {"_p_ampls__impl__BaseCallback", "ampls::impl::BaseCallback *", 0, 0, (void*)&SwigPyBuiltin__ampls__impl__BaseCallback_clientdata, 0};
static swig_type_info _swigt__p_ampls__impl__Records = {"_p_ampls__impl__Records", "ampls::impl::Records *", 0, 0, (void*)&SwigPyBuiltin__ampls__impl__Records_clientdata, 0};
static swig_type_info _swigt__p_ampls__impl__SolverDriverT_ampls__CPLEXModel_t = {"_p_ampls__impl__SolverDriverT_ampls__CPLEXModel_t", "ampls::impl::SolverDriver< ampls::CPLEXModel > *", 0, 0, (void*)&SwigPyBuiltin__ampls__impl__SolverDriverT_ampls__CPLEXModel_t_clientdata, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cpxcallbackcontext = {"_p_cpxcallbackcontext", "cpxcallbackcontext *|CPXCALLBACKCONTEXTptr", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cpxchannel = {"_p_cpxchannel", "cpxchannel *|CPXCHANNELptr", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cpxdeserializer = {"_p_cpxdeserializer", "CPXDESERIALIZERptr|CPXCDESERIALIZERptr|cpxdeserializer *", 0, 0, (void*)&SwigPyBuiltin__cpxdeserializer_clientdata, 0};
static swig_type_info _swigt__p_cpxenv = {"_p_cpxenv", "CPXCENVptr|cpxenv *|CPXENVptr", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cpxiodevice = {"_p_cpxiodevice", "cpxiodevice *|CPXIODEVICE *", 0, 0, (void*)&SwigPyBuiltin__cpxiodevice_clientdata, 0};
static swig_type_info _swigt__p_cpxlp = {"_p_cpxlp", "CPXLPptr|CPXCLPptr|cpxlp *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cpxnet = {"_p_cpxnet", "CPXNETptr|CPXCNETptr|cpxnet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cpxserializer = {"_p_cpxserializer", "CPXSERIALIZERptr|CPXCSERIALIZERptr|cpxserializer *", 0, 0, (void*)&SwigPyBuiltin__cpxserializer_clientdata, 0};
static swig_type_info _swigt__p_dblArray = {"_p_dblArray", "dblArray *", 0, 0, (void*)&SwigPyBuiltin__dblArray_clientdata, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_int_p_cpxiodevice__int = {"_p_f_int_p_cpxiodevice__int", "int (*)(int,cpxiodevice *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_int_p_cpxiodevice__intArray = {"_p_f_int_p_cpxiodevice__intArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_int_p_q_const__char_p_void__int = {"_p_f_int_p_q_const__char_p_void__int", "CPXMODELASSTCALLBACKFUNC *|int (*)(int,char const *,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_int_p_q_const__char_p_void__intArray = {"_p_f_int_p_q_const__char_p_void__intArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_p_cpxcallbackcontext_long_long_p_void__int = {"_p_f_p_cpxcallbackcontext_long_long_p_void__int", "CPXCALLBACKFUNC *|int (*)(cpxcallbackcontext *,long long,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_cpxcallbackcontext_long_long_p_void__intArray = {"_p_f_p_cpxcallbackcontext_long_long_p_void__intArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_p_cpxdeserializer_long_long_p_double__int = {"_p_f_p_cpxdeserializer_long_long_p_double__int", "int (*)(cpxdeserializer *,long long,double *)|int (*)(CPXDESERIALIZERptr,CPXLONG,double *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_cpxdeserializer_long_long_p_double__intArray = {"_p_f_p_cpxdeserializer_long_long_p_double__intArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_p_cpxdeserializer_long_long_p_float__int = {"_p_f_p_cpxdeserializer_long_long_p_float__int", "int (*)(cpxdeserializer *,long long,float *)|int (*)(CPXDESERIALIZERptr,CPXLONG,float *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_cpxdeserializer_long_long_p_float__intArray = {"_p_f_p_cpxdeserializer_long_long_p_float__intArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_p_cpxdeserializer_long_long_p_int__int = {"_p_f_p_cpxdeserializer_long_long_p_int__int", "int (*)(cpxdeserializer *,long long,int *)|int (*)(CPXDESERIALIZERptr,CPXLONG,CPXINT *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_cpxdeserializer_long_long_p_int__intArray = {"_p_f_p_cpxdeserializer_long_long_p_int__intArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_p_cpxdeserializer_long_long_p_long_long__int = {"_p_f_p_cpxdeserializer_long_long_p_long_long__int", "int (*)(cpxdeserializer *,long long,long long *)|int (*)(CPXDESERIALIZERptr,CPXLONG,CPXLONG *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_cpxdeserializer_long_long_p_long_long__intArray = {"_p_f_p_cpxdeserializer_long_long_p_long_long__intArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_p_cpxdeserializer_long_long_p_short__int = {"_p_f_p_cpxdeserializer_long_long_p_short__int", "int (*)(cpxdeserializer *,long long,short *)|int (*)(CPXDESERIALIZERptr,CPXLONG,CPXSHORT *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_cpxdeserializer_long_long_p_short__intArray = {"_p_f_p_cpxdeserializer_long_long_p_short__intArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_p_cpxdeserializer_long_long_p_signed_char__int = {"_p_f_p_cpxdeserializer_long_long_p_signed_char__int", "int (*)(cpxdeserializer *,long long,signed char *)|int (*)(CPXDESERIALIZERptr,CPXLONG,CPXBYTE *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_cpxdeserializer_long_long_p_signed_char__intArray = {"_p_f_p_cpxdeserializer_long_long_p_signed_char__intArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_p_cpxdeserializer_p_double__int = {"_p_f_p_cpxdeserializer_p_double__int", "int (*)(cpxdeserializer *,double *)|int (*)(CPXDESERIALIZERptr,double *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_cpxdeserializer_p_double__intArray = {"_p_f_p_cpxdeserializer_p_double__intArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_p_cpxdeserializer_p_float__int = {"_p_f_p_cpxdeserializer_p_float__int", "int (*)(cpxdeserializer *,float *)|int (*)(CPXDESERIALIZERptr,float *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_cpxdeserializer_p_float__intArray = {"_p_f_p_cpxdeserializer_p_float__intArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_p_cpxdeserializer_p_int__int = {"_p_f_p_cpxdeserializer_p_int__int", "int (*)(cpxdeserializer *,int *)|int (*)(CPXDESERIALIZERptr,CPXINT *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_cpxdeserializer_p_int__intArray = {"_p_f_p_cpxdeserializer_p_int__intArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_p_cpxdeserializer_p_long_long__int = {"_p_f_p_cpxdeserializer_p_long_long__int", "int (*)(cpxdeserializer *,long long *)|int (*)(CPXDESERIALIZERptr,CPXLONG *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_cpxdeserializer_p_long_long__intArray = {"_p_f_p_cpxdeserializer_p_long_long__intArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_p_cpxdeserializer_p_short__int = {"_p_f_p_cpxdeserializer_p_short__int", "int (*)(cpxdeserializer *,short *)|int (*)(CPXDESERIALIZERptr,CPXSHORT *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_cpxdeserializer_p_short__intArray = {"_p_f_p_cpxdeserializer_p_short__intArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_p_cpxdeserializer_p_signed_char__int = {"_p_f_p_cpxdeserializer_p_signed_char__int", "int (*)(cpxdeserializer *,signed char *)|int (*)(CPXDESERIALIZERptr,CPXBYTE *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_cpxdeserializer_p_signed_char__intArray = {"_p_f_p_cpxdeserializer_p_signed_char__intArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_p_cpxenv_enum_CPXINFOTYPE_int_long_long_p_q_const__void_p_void__void = {"_p_f_p_cpxenv_enum_CPXINFOTYPE_int_long_long_p_q_const__void_p_void__void", "void (*)(cpxenv *,enum CPXINFOTYPE,int,long long,void const *,void *)|CPXINFOHANDLER *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_cpxenv_int_long_long_p_q_const__void_long_long_p_long_long_p_void_p_void__int = {"_p_f_p_cpxenv_int_long_long_p_q_const__void_long_long_p_long_long_p_void_p_void__int", "CPXUSERFUNCTION *|int (*)(cpxenv *,int,long long,void const *,long long,long long *,void *,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_cpxenv_int_long_long_p_q_const__void_long_long_p_long_long_p_void_p_void__intArray = {"_p_f_p_cpxenv_int_long_long_p_q_const__void_long_long_p_long_long_p_void_p_void__intArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_p_cpxiodevice__int = {"_p_f_p_cpxiodevice__int", "int (*)(cpxiodevice *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_cpxiodevice__intArray = {"_p_f_p_cpxiodevice__intArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_p_cpxserializer_double__int = {"_p_f_p_cpxserializer_double__int", "int (*)(cpxserializer *,double)|int (*)(CPXSERIALIZERptr,double)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_cpxserializer_double__intArray = {"_p_f_p_cpxserializer_double__intArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_p_cpxserializer_float__int = {"_p_f_p_cpxserializer_float__int", "int (*)(cpxserializer *,float)|int (*)(CPXSERIALIZERptr,float)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_cpxserializer_float__intArray = {"_p_f_p_cpxserializer_float__intArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_p_cpxserializer_int__int = {"_p_f_p_cpxserializer_int__int", "int (*)(CPXSERIALIZERptr,CPXINT)|int (*)(cpxserializer *,int)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_cpxserializer_int__intArray = {"_p_f_p_cpxserializer_int__intArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_p_cpxserializer_long_long__int = {"_p_f_p_cpxserializer_long_long__int", "int (*)(CPXSERIALIZERptr,CPXLONG)|int (*)(cpxserializer *,long long)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_cpxserializer_long_long__intArray = {"_p_f_p_cpxserializer_long_long__intArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_p_cpxserializer_long_long_p_q_const__double__int = {"_p_f_p_cpxserializer_long_long_p_q_const__double__int", "int (*)(cpxserializer *,long long,double const *)|int (*)(CPXSERIALIZERptr,CPXLONG,double const *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_cpxserializer_long_long_p_q_const__double__intArray = {"_p_f_p_cpxserializer_long_long_p_q_const__double__intArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_p_cpxserializer_long_long_p_q_const__float__int = {"_p_f_p_cpxserializer_long_long_p_q_const__float__int", "int (*)(cpxserializer *,long long,float const *)|int (*)(CPXSERIALIZERptr,CPXLONG,float const *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_cpxserializer_long_long_p_q_const__float__intArray = {"_p_f_p_cpxserializer_long_long_p_q_const__float__intArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_p_cpxserializer_long_long_p_q_const__int__int = {"_p_f_p_cpxserializer_long_long_p_q_const__int__int", "int (*)(cpxserializer *,long long,int const *)|int (*)(CPXSERIALIZERptr,CPXLONG,CPXINT const *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_cpxserializer_long_long_p_q_const__int__intArray = {"_p_f_p_cpxserializer_long_long_p_q_const__int__intArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_p_cpxserializer_long_long_p_q_const__long_long__int = {"_p_f_p_cpxserializer_long_long_p_q_const__long_long__int", "int (*)(CPXSERIALIZERptr,CPXLONG,CPXLONG const *)|int (*)(cpxserializer *,long long,long long const *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_cpxserializer_long_long_p_q_const__long_long__intArray = {"_p_f_p_cpxserializer_long_long_p_q_const__long_long__intArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_p_cpxserializer_long_long_p_q_const__short__int = {"_p_f_p_cpxserializer_long_long_p_q_const__short__int", "int (*)(cpxserializer *,long long,short const *)|int (*)(CPXSERIALIZERptr,CPXLONG,CPXSHORT const *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_cpxserializer_long_long_p_q_const__short__intArray = {"_p_f_p_cpxserializer_long_long_p_q_const__short__intArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_p_cpxserializer_long_long_p_q_const__signed_char__int = {"_p_f_p_cpxserializer_long_long_p_q_const__signed_char__int", "int (*)(CPXSERIALIZERptr,CPXLONG,CPXBYTE const *)|int (*)(cpxserializer *,long long,signed char const *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_cpxserializer_long_long_p_q_const__signed_char__intArray = {"_p_f_p_cpxserializer_long_long_p_q_const__signed_char__intArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_p_cpxserializer_short__int = {"_p_f_p_cpxserializer_short__int", "int (*)(CPXSERIALIZERptr,CPXSHORT)|int (*)(cpxserializer *,short)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_cpxserializer_short__intArray = {"_p_f_p_cpxserializer_short__intArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_p_cpxserializer_signed_char__int = {"_p_f_p_cpxserializer_signed_char__int", "int (*)(cpxserializer *,signed char)|int (*)(CPXSERIALIZERptr,CPXBYTE)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_cpxserializer_signed_char__intArray = {"_p_f_p_cpxserializer_signed_char__intArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_p_q_const__char_p_cpxiodevice__int = {"_p_f_p_q_const__char_p_cpxiodevice__int", "int (*)(char const *,cpxiodevice *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_q_const__char_p_cpxiodevice__intArray = {"_p_f_p_q_const__char_p_cpxiodevice__intArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_p_q_const__cpxenv_int_p_void__int = {"_p_f_p_q_const__cpxenv_int_p_void__int", "int (*)(cpxenv const *,int,void *)|int (*)(CPXCENVptr,int,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_q_const__cpxenv_int_p_void__intArray = {"_p_f_p_q_const__cpxenv_int_p_void__intArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_p_q_const__cpxenv_int_p_void_int_p_void__void = {"_p_f_p_q_const__cpxenv_int_p_void_int_p_void__void", "void (*)(cpxenv const *,int,void *,int,void *)|void (*)(CPXCENVptr,int,void *,int,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_q_const__cpxenv_p_void_int_p_void__int = {"_p_f_p_q_const__cpxenv_p_void_int_p_void__int", "int (*)(cpxenv const *,void *,int,void *)|int (*)(CPXCENVptr,void *,int,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_q_const__cpxenv_p_void_int_p_void__intArray = {"_p_f_p_q_const__cpxenv_p_void_int_p_void__intArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_p_q_const__cpxenv_p_void_int_p_void_double_p_double_p_int_p_int__int = {"_p_f_p_q_const__cpxenv_p_void_int_p_void_double_p_double_p_int_p_int__int", "int (*)(cpxenv const *,void *,int,void *,double,double *,int *,int *)|int (*)(CPXCENVptr,void *,int,void *,double,double *,int *,int *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_q_const__cpxenv_p_void_int_p_void_double_p_double_p_int_p_int__intArray = {"_p_f_p_q_const__cpxenv_p_void_int_p_void_double_p_double_p_int_p_int__intArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_p_q_const__cpxenv_p_void_int_p_void_int_int_int_int_p_q_const__int_p_q_const__int_p_q_const__char_p_q_const__double_p_q_const__double_p_int__int = {"_p_f_p_q_const__cpxenv_p_void_int_p_void_int_int_int_int_p_q_const__int_p_q_const__int_p_q_const__char_p_q_const__double_p_q_const__double_p_int__int", "int (*)(cpxenv const *,void *,int,void *,int,int,int,int,int const *,int const *,char const *,double const *,double const *,int *)|int (*)(CPXCENVptr,void *,int,void *,int,int,int,int,int const *,int const *,char const *,double const *,double const *,int *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_q_const__cpxenv_p_void_int_p_void_int_int_int_int_p_q_const__int_p_q_const__int_p_q_const__char_p_q_const__double_p_q_const__double_p_int__intArray = {"_p_f_p_q_const__cpxenv_p_void_int_p_void_int_int_int_int_p_q_const__int_p_q_const__int_p_q_const__char_p_q_const__double_p_q_const__double_p_int__intArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_p_q_const__cpxenv_p_void_int_p_void_p_double_p_double_p_int_p_int__int = {"_p_f_p_q_const__cpxenv_p_void_int_p_void_p_double_p_double_p_int_p_int__int", "int (*)(CPXCENVptr,void *,int,void *,double *,double *,int *,int *)|int (*)(cpxenv const *,void *,int,void *,double *,double *,int *,int *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_q_const__cpxenv_p_void_int_p_void_p_double_p_double_p_int_p_int__intArray = {"_p_f_p_q_const__cpxenv_p_void_int_p_void_p_double_p_double_p_int_p_int__intArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_p_q_const__cpxenv_p_void_int_p_void_p_int__int = {"_p_f_p_q_const__cpxenv_p_void_int_p_void_p_int__int", "int (*)(cpxenv const *,void *,int,void *,int *)|int (*)(CPXCENVptr,void *,int,void *,int *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_q_const__cpxenv_p_void_int_p_void_p_int__intArray = {"_p_f_p_q_const__cpxenv_p_void_int_p_void_p_int__intArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_p_q_const__cpxenv_p_void_int_p_void_p_int_p_int__int = {"_p_f_p_q_const__cpxenv_p_void_int_p_void_p_int_p_int__int", "int (*)(CPXCENVptr,void *,int,void *,int *,int *)|int (*)(cpxenv const *,void *,int,void *,int *,int *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_q_const__cpxenv_p_void_int_p_void_p_int_p_int__intArray = {"_p_f_p_q_const__cpxenv_p_void_int_p_void_p_int_p_int__intArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_p_q_const__void_size_t_p_cpxiodevice__size_t = {"_p_f_p_q_const__void_size_t_p_cpxiodevice__size_t", "size_t (*)(void const *,size_t,cpxiodevice *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void_long_long_p_char__p_char = {"_p_f_p_void_long_long_p_char__p_char", "char *(*)(void *,long long,char *)|CPXNAMEFUNCTION *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void_p_q_const__char__void = {"_p_f_p_void_p_q_const__char__void", "void (*)(void *,char const *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void_size_t_p_cpxiodevice__size_t = {"_p_f_p_void_size_t_p_cpxiodevice__size_t", "size_t (*)(void *,size_t,cpxiodevice *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "CPXINT *|intptr_t *|int *|int_least32_t *|int_fast32_t *|int32_t *|int_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_intArray = {"_p_intArray", "intArray *", 0, 0, (void*)&SwigPyBuiltin__intArray_clientdata, 0};
static swig_type_info _swigt__p_key_type = {"_p_key_type", "key_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "CPXSIZE *|int_least64_t *|int_fast64_t *|int64_t *|CPXLONG *|long long *|intmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mapped_type = {"_p_mapped_type", "mapped_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_ASL = {"_p_p_ASL", "ASL **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_PyObject = {"_p_p_PyObject", "PyObject **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_char = {"_p_p_char", "char **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_cpxchannel = {"_p_p_cpxchannel", "CPXCHANNELptr *|cpxchannel **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_cpxdeserializer = {"_p_p_cpxdeserializer", "cpxdeserializer **|CPXDESERIALIZERptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_cpxenv = {"_p_p_cpxenv", "cpxenv **|CPXENVptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_cpxlp = {"_p_p_cpxlp", "CPXLPptr *|CPXCLPptr *|cpxlp **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_cpxnet = {"_p_p_cpxnet", "CPXNETptr *|cpxnet **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_cpxserializer = {"_p_p_cpxserializer", "cpxserializer **|CPXSERIALIZERptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_f_int_p_q_const__char_p_void__int = {"_p_p_f_int_p_q_const__char_p_void__int", "CPXMODELASSTCALLBACKFUNC **|int (**)(int,char const *,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_f_int_p_q_const__char_p_void__intArray = {"_p_p_f_int_p_q_const__char_p_void__intArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_f_p_cpxcallbackcontext_long_long_p_void__int = {"_p_p_f_p_cpxcallbackcontext_long_long_p_void__int", "CPXCALLBACKFUNC **|int (**)(cpxcallbackcontext *,long long,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_f_p_cpxcallbackcontext_long_long_p_void__intArray = {"_p_p_f_p_cpxcallbackcontext_long_long_p_void__intArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_f_p_q_const__cpxenv_int_p_void_int_p_void__void = {"_p_p_f_p_q_const__cpxenv_int_p_void_int_p_void__void", "void (**)(cpxenv const *,int,void *,int,void *)|void (**)(CPXCENVptr,int,void *,int,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_f_p_q_const__cpxenv_p_void_int_p_void__int = {"_p_p_f_p_q_const__cpxenv_p_void_int_p_void__int", "int (**)(cpxenv const *,void *,int,void *)|int (**)(CPXCENVptr,void *,int,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_f_p_q_const__cpxenv_p_void_int_p_void__intArray = {"_p_p_f_p_q_const__cpxenv_p_void_int_p_void__intArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_f_p_q_const__cpxenv_p_void_int_p_void_double_p_double_p_int_p_int__int = {"_p_p_f_p_q_const__cpxenv_p_void_int_p_void_double_p_double_p_int_p_int__int", "int (**)(CPXCENVptr,void *,int,void *,double,double *,int *,int *)|int (**)(cpxenv const *,void *,int,void *,double,double *,int *,int *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_f_p_q_const__cpxenv_p_void_int_p_void_double_p_double_p_int_p_int__intArray = {"_p_p_f_p_q_const__cpxenv_p_void_int_p_void_double_p_double_p_int_p_int__intArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_f_p_q_const__cpxenv_p_void_int_p_void_int_int_int_int_p_q_const__int_p_q_const__int_p_q_const__char_p_q_const__double_p_q_const__double_p_int__int = {"_p_p_f_p_q_const__cpxenv_p_void_int_p_void_int_int_int_int_p_q_const__int_p_q_const__int_p_q_const__char_p_q_const__double_p_q_const__double_p_int__int", "int (**)(cpxenv const *,void *,int,void *,int,int,int,int,int const *,int const *,char const *,double const *,double const *,int *)|int (**)(CPXCENVptr,void *,int,void *,int,int,int,int,int const *,int const *,char const *,double const *,double const *,int *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_f_p_q_const__cpxenv_p_void_int_p_void_int_int_int_int_p_q_const__int_p_q_const__int_p_q_const__char_p_q_const__double_p_q_const__double_p_int__intArray = {"_p_p_f_p_q_const__cpxenv_p_void_int_p_void_int_int_int_int_p_q_const__int_p_q_const__int_p_q_const__char_p_q_const__double_p_q_const__double_p_int__intArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_double_p_double_p_int_p_int__int = {"_p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_double_p_double_p_int_p_int__int", "int (**)(CPXCENVptr,void *,int,void *,double *,double *,int *,int *)|int (**)(cpxenv const *,void *,int,void *,double *,double *,int *,int *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_double_p_double_p_int_p_int__intArray = {"_p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_double_p_double_p_int_p_int__intArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_int__int = {"_p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_int__int", "int (**)(cpxenv const *,void *,int,void *,int *)|int (**)(CPXCENVptr,void *,int,void *,int *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_int__intArray = {"_p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_int__intArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_int_p_int__int = {"_p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_int_p_int__int", "int (**)(CPXCENVptr,void *,int,void *,int *,int *)|int (**)(cpxenv const *,void *,int,void *,int *,int *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_int_p_int__intArray = {"_p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_int_p_int__intArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_paramset = {"_p_p_paramset", "CPXCPARAMSETptr *|CPXPARAMSETptr *|paramset **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_void = {"_p_p_void", "void **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_paramset = {"_p_paramset", "paramset *|CPXPARAMSETptr|CPXCPARAMSETptr", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pthread_mutex_t = {"_p_pthread_mutex_t", "MUTEXIMPL *|pthread_mutex_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|CPXSHORT *|int_least16_t *|int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|CPXBYTE *|int_least8_t *|int_fast8_t *|int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_double_t = {"_p_std__allocatorT_double_t", "std::vector< double >::allocator_type *|std::allocator< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__pairT_int_const_std__string_t_t = {"_p_std__allocatorT_std__pairT_int_const_std__string_t_t", "std::map< int,std::string >::allocator_type *|std::allocator< std::pair< int const,std::string > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__pairT_std__string_const_double_t_t = {"_p_std__allocatorT_std__pairT_std__string_const_double_t_t", "std::map< std::string,double >::allocator_type *|std::allocator< std::pair< std::string const,double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__pairT_std__string_const_int_t_t = {"_p_std__allocatorT_std__pairT_std__string_const_int_t_t", "std::map< std::string,int >::allocator_type *|std::allocator< std::pair< std::string const,int > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__string_t = {"_p_std__allocatorT_std__string_t", "std::vector< std::string >::allocator_type *|std::allocator< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__invalid_argument = {"_p_std__invalid_argument", "std::invalid_argument *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__lessT_int_t = {"_p_std__lessT_int_t", "std::less< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__lessT_std__string_t = {"_p_std__lessT_std__string_t", "std::less< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_int_std__string_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__string_t_t_t = {"_p_std__mapT_int_std__string_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__string_t_t_t", "std::map< int,std::string > *|std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > > *", 0, 0, (void*)&SwigPyBuiltin__std__mapT_int_std__string_t_clientdata, 0};
static swig_type_info _swigt__p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t = {"_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t", "std::map< std::string,double,std::less< std::string >,std::allocator< std::pair< std::string const,double > > > *|std::map< std::string,double > *", 0, 0, (void*)&SwigPyBuiltin__std__mapT_std__string_double_t_clientdata, 0};
static swig_type_info _swigt__p_std__mapT_std__string_int_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_int_t_t_t = {"_p_std__mapT_std__string_int_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_int_t_t_t", "std::map< std::string,int,std::less< std::string >,std::allocator< std::pair< std::string const,int > > > *|std::map< std::string,int > *", 0, 0, (void*)&SwigPyBuiltin__std__mapT_std__string_int_t_clientdata, 0};
static swig_type_info _swigt__p_std__runtime_error = {"_p_std__runtime_error", "std::runtime_error *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ampls__Constraint_std__allocatorT_ampls__Constraint_t_t = {"_p_std__vectorT_ampls__Constraint_std__allocatorT_ampls__Constraint_t_t", "std::vector< ampls::Constraint,std::allocator< ampls::Constraint > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ampls__Entity_p_std__allocatorT_ampls__Entity_p_t_t = {"_p_std__vectorT_ampls__Entity_p_std__allocatorT_ampls__Entity_p_t_t", "std::vector< ampls::Entity *,std::allocator< ampls::Entity * > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ampls__Variable_std__allocatorT_ampls__Variable_t_t = {"_p_std__vectorT_ampls__Variable_std__allocatorT_ampls__Variable_t_t", "std::vector< ampls::Variable,std::allocator< ampls::Variable > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_std__allocatorT_double_t_t = {"_p_std__vectorT_double_std__allocatorT_double_t_t", "std::vector< double,std::allocator< double > > *|std::vector< double > *", 0, 0, (void*)&SwigPyBuiltin__std__vectorT_double_t_clientdata, 0};
static swig_type_info _swigt__p_std__vectorT_int_std__allocatorT_int_t_t = {"_p_std__vectorT_int_std__allocatorT_int_t_t", "std::vector< int,std::allocator< int > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t = {"_p_std__vectorT_std__string_std__allocatorT_std__string_t_t", "std::vector< std::string,std::allocator< std::string > > *|std::vector< std::string > *", 0, 0, (void*)&SwigPyBuiltin__std__vectorT_std__string_t_clientdata, 0};
static swig_type_info _swigt__p_swig__SwigPyIterator = {"_p_swig__SwigPyIterator", "swig::SwigPyIterator *", 0, 0, (void*)&SwigPyBuiltin__swig__SwigPyIterator_clientdata, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|uint_least8_t *|uint_fast8_t *|uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uintptr_t *|uint_least32_t *|uint_fast32_t *|uint32_t *|unsigned int *|uint_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint_least64_t *|uint_fast64_t *|uint64_t *|unsigned long long *|CPXULONG *|uintmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|uint_least16_t *|uint16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_CPXCALLBACKINFO,
  &_swigt__p_CPXCALLBACKSOLUTIONSTRATEGY,
  &_swigt__p_CPXINFOTYPE,
  &_swigt__p_SwigPyObject,
  &_swigt__p_a_sizeof_CPXBYTE___1_1__1__int,
  &_swigt__p_a_sizeof_CPXBYTE___1_1__1__intArray,
  &_swigt__p_a_sizeof_CPXINT___4_1__1__int,
  &_swigt__p_a_sizeof_CPXINT___4_1__1__intArray,
  &_swigt__p_a_sizeof_CPXLONG___8_1__1__int,
  &_swigt__p_a_sizeof_CPXLONG___8_1__1__intArray,
  &_swigt__p_a_sizeof_CPXSHORT___2_1__1__int,
  &_swigt__p_a_sizeof_CPXSHORT___2_1__1__intArray,
  &_swigt__p_a_sizeof_CPXSIZE___sizeof_size_t__1__1__int,
  &_swigt__p_a_sizeof_CPXSIZE___sizeof_size_t__1__1__intArray,
  &_swigt__p_a_sizeof_CPXULONG___8_1__1__int,
  &_swigt__p_a_sizeof_CPXULONG___8_1__1__intArray,
  &_swigt__p_allocator_type,
  &_swigt__p_ampls__AMPLModel,
  &_swigt__p_ampls__AMPLSolverException,
  &_swigt__p_ampls__CPLEXCallback,
  &_swigt__p_ampls__CPLEXDrv,
  &_swigt__p_ampls__CPLEXModel,
  &_swigt__p_ampls__Constraint,
  &_swigt__p_ampls__CutDirection,
  &_swigt__p_ampls__Entity,
  &_swigt__p_ampls__GenericCallback,
  &_swigt__p_ampls__LPAlgorithms,
  &_swigt__p_ampls__SolverParams,
  &_swigt__p_ampls__Status,
  &_swigt__p_ampls__Value,
  &_swigt__p_ampls__VarType,
  &_swigt__p_ampls__Variable,
  &_swigt__p_ampls__Variant,
  &_swigt__p_ampls__Where,
  &_swigt__p_ampls__cpx__impl__CBWrap,
  &_swigt__p_ampls__cpx__impl__CPLEXDriverState,
  &_swigt__p_ampls__impl__AMPLMutex,
  &_swigt__p_ampls__impl__BaseCallback,
  &_swigt__p_ampls__impl__Records,
  &_swigt__p_ampls__impl__SolverDriverT_ampls__CPLEXModel_t,
  &_swigt__p_char,
  &_swigt__p_cpxcallbackcontext,
  &_swigt__p_cpxchannel,
  &_swigt__p_cpxdeserializer,
  &_swigt__p_cpxenv,
  &_swigt__p_cpxiodevice,
  &_swigt__p_cpxlp,
  &_swigt__p_cpxnet,
  &_swigt__p_cpxserializer,
  &_swigt__p_dblArray,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_f_int_p_cpxiodevice__int,
  &_swigt__p_f_int_p_cpxiodevice__intArray,
  &_swigt__p_f_int_p_q_const__char_p_void__int,
  &_swigt__p_f_int_p_q_const__char_p_void__intArray,
  &_swigt__p_f_p_cpxcallbackcontext_long_long_p_void__int,
  &_swigt__p_f_p_cpxcallbackcontext_long_long_p_void__intArray,
  &_swigt__p_f_p_cpxdeserializer_long_long_p_double__int,
  &_swigt__p_f_p_cpxdeserializer_long_long_p_double__intArray,
  &_swigt__p_f_p_cpxdeserializer_long_long_p_float__int,
  &_swigt__p_f_p_cpxdeserializer_long_long_p_float__intArray,
  &_swigt__p_f_p_cpxdeserializer_long_long_p_int__int,
  &_swigt__p_f_p_cpxdeserializer_long_long_p_int__intArray,
  &_swigt__p_f_p_cpxdeserializer_long_long_p_long_long__int,
  &_swigt__p_f_p_cpxdeserializer_long_long_p_long_long__intArray,
  &_swigt__p_f_p_cpxdeserializer_long_long_p_short__int,
  &_swigt__p_f_p_cpxdeserializer_long_long_p_short__intArray,
  &_swigt__p_f_p_cpxdeserializer_long_long_p_signed_char__int,
  &_swigt__p_f_p_cpxdeserializer_long_long_p_signed_char__intArray,
  &_swigt__p_f_p_cpxdeserializer_p_double__int,
  &_swigt__p_f_p_cpxdeserializer_p_double__intArray,
  &_swigt__p_f_p_cpxdeserializer_p_float__int,
  &_swigt__p_f_p_cpxdeserializer_p_float__intArray,
  &_swigt__p_f_p_cpxdeserializer_p_int__int,
  &_swigt__p_f_p_cpxdeserializer_p_int__intArray,
  &_swigt__p_f_p_cpxdeserializer_p_long_long__int,
  &_swigt__p_f_p_cpxdeserializer_p_long_long__intArray,
  &_swigt__p_f_p_cpxdeserializer_p_short__int,
  &_swigt__p_f_p_cpxdeserializer_p_short__intArray,
  &_swigt__p_f_p_cpxdeserializer_p_signed_char__int,
  &_swigt__p_f_p_cpxdeserializer_p_signed_char__intArray,
  &_swigt__p_f_p_cpxenv_enum_CPXINFOTYPE_int_long_long_p_q_const__void_p_void__void,
  &_swigt__p_f_p_cpxenv_int_long_long_p_q_const__void_long_long_p_long_long_p_void_p_void__int,
  &_swigt__p_f_p_cpxenv_int_long_long_p_q_const__void_long_long_p_long_long_p_void_p_void__intArray,
  &_swigt__p_f_p_cpxiodevice__int,
  &_swigt__p_f_p_cpxiodevice__intArray,
  &_swigt__p_f_p_cpxserializer_double__int,
  &_swigt__p_f_p_cpxserializer_double__intArray,
  &_swigt__p_f_p_cpxserializer_float__int,
  &_swigt__p_f_p_cpxserializer_float__intArray,
  &_swigt__p_f_p_cpxserializer_int__int,
  &_swigt__p_f_p_cpxserializer_int__intArray,
  &_swigt__p_f_p_cpxserializer_long_long__int,
  &_swigt__p_f_p_cpxserializer_long_long__intArray,
  &_swigt__p_f_p_cpxserializer_long_long_p_q_const__double__int,
  &_swigt__p_f_p_cpxserializer_long_long_p_q_const__double__intArray,
  &_swigt__p_f_p_cpxserializer_long_long_p_q_const__float__int,
  &_swigt__p_f_p_cpxserializer_long_long_p_q_const__float__intArray,
  &_swigt__p_f_p_cpxserializer_long_long_p_q_const__int__int,
  &_swigt__p_f_p_cpxserializer_long_long_p_q_const__int__intArray,
  &_swigt__p_f_p_cpxserializer_long_long_p_q_const__long_long__int,
  &_swigt__p_f_p_cpxserializer_long_long_p_q_const__long_long__intArray,
  &_swigt__p_f_p_cpxserializer_long_long_p_q_const__short__int,
  &_swigt__p_f_p_cpxserializer_long_long_p_q_const__short__intArray,
  &_swigt__p_f_p_cpxserializer_long_long_p_q_const__signed_char__int,
  &_swigt__p_f_p_cpxserializer_long_long_p_q_const__signed_char__intArray,
  &_swigt__p_f_p_cpxserializer_short__int,
  &_swigt__p_f_p_cpxserializer_short__intArray,
  &_swigt__p_f_p_cpxserializer_signed_char__int,
  &_swigt__p_f_p_cpxserializer_signed_char__intArray,
  &_swigt__p_f_p_q_const__char_p_cpxiodevice__int,
  &_swigt__p_f_p_q_const__char_p_cpxiodevice__intArray,
  &_swigt__p_f_p_q_const__cpxenv_int_p_void__int,
  &_swigt__p_f_p_q_const__cpxenv_int_p_void__intArray,
  &_swigt__p_f_p_q_const__cpxenv_int_p_void_int_p_void__void,
  &_swigt__p_f_p_q_const__cpxenv_p_void_int_p_void__int,
  &_swigt__p_f_p_q_const__cpxenv_p_void_int_p_void__intArray,
  &_swigt__p_f_p_q_const__cpxenv_p_void_int_p_void_double_p_double_p_int_p_int__int,
  &_swigt__p_f_p_q_const__cpxenv_p_void_int_p_void_double_p_double_p_int_p_int__intArray,
  &_swigt__p_f_p_q_const__cpxenv_p_void_int_p_void_int_int_int_int_p_q_const__int_p_q_const__int_p_q_const__char_p_q_const__double_p_q_const__double_p_int__int,
  &_swigt__p_f_p_q_const__cpxenv_p_void_int_p_void_int_int_int_int_p_q_const__int_p_q_const__int_p_q_const__char_p_q_const__double_p_q_const__double_p_int__intArray,
  &_swigt__p_f_p_q_const__cpxenv_p_void_int_p_void_p_double_p_double_p_int_p_int__int,
  &_swigt__p_f_p_q_const__cpxenv_p_void_int_p_void_p_double_p_double_p_int_p_int__intArray,
  &_swigt__p_f_p_q_const__cpxenv_p_void_int_p_void_p_int__int,
  &_swigt__p_f_p_q_const__cpxenv_p_void_int_p_void_p_int__intArray,
  &_swigt__p_f_p_q_const__cpxenv_p_void_int_p_void_p_int_p_int__int,
  &_swigt__p_f_p_q_const__cpxenv_p_void_int_p_void_p_int_p_int__intArray,
  &_swigt__p_f_p_q_const__void_size_t_p_cpxiodevice__size_t,
  &_swigt__p_f_p_void_long_long_p_char__p_char,
  &_swigt__p_f_p_void_p_q_const__char__void,
  &_swigt__p_f_p_void_size_t_p_cpxiodevice__size_t,
  &_swigt__p_int,
  &_swigt__p_intArray,
  &_swigt__p_key_type,
  &_swigt__p_long_long,
  &_swigt__p_mapped_type,
  &_swigt__p_p_ASL,
  &_swigt__p_p_PyObject,
  &_swigt__p_p_char,
  &_swigt__p_p_cpxchannel,
  &_swigt__p_p_cpxdeserializer,
  &_swigt__p_p_cpxenv,
  &_swigt__p_p_cpxlp,
  &_swigt__p_p_cpxnet,
  &_swigt__p_p_cpxserializer,
  &_swigt__p_p_f_int_p_q_const__char_p_void__int,
  &_swigt__p_p_f_int_p_q_const__char_p_void__intArray,
  &_swigt__p_p_f_p_cpxcallbackcontext_long_long_p_void__int,
  &_swigt__p_p_f_p_cpxcallbackcontext_long_long_p_void__intArray,
  &_swigt__p_p_f_p_q_const__cpxenv_int_p_void_int_p_void__void,
  &_swigt__p_p_f_p_q_const__cpxenv_p_void_int_p_void__int,
  &_swigt__p_p_f_p_q_const__cpxenv_p_void_int_p_void__intArray,
  &_swigt__p_p_f_p_q_const__cpxenv_p_void_int_p_void_double_p_double_p_int_p_int__int,
  &_swigt__p_p_f_p_q_const__cpxenv_p_void_int_p_void_double_p_double_p_int_p_int__intArray,
  &_swigt__p_p_f_p_q_const__cpxenv_p_void_int_p_void_int_int_int_int_p_q_const__int_p_q_const__int_p_q_const__char_p_q_const__double_p_q_const__double_p_int__int,
  &_swigt__p_p_f_p_q_const__cpxenv_p_void_int_p_void_int_int_int_int_p_q_const__int_p_q_const__int_p_q_const__char_p_q_const__double_p_q_const__double_p_int__intArray,
  &_swigt__p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_double_p_double_p_int_p_int__int,
  &_swigt__p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_double_p_double_p_int_p_int__intArray,
  &_swigt__p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_int__int,
  &_swigt__p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_int__intArray,
  &_swigt__p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_int_p_int__int,
  &_swigt__p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_int_p_int__intArray,
  &_swigt__p_p_paramset,
  &_swigt__p_p_void,
  &_swigt__p_paramset,
  &_swigt__p_pthread_mutex_t,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_size_type,
  &_swigt__p_std__allocatorT_double_t,
  &_swigt__p_std__allocatorT_std__pairT_int_const_std__string_t_t,
  &_swigt__p_std__allocatorT_std__pairT_std__string_const_double_t_t,
  &_swigt__p_std__allocatorT_std__pairT_std__string_const_int_t_t,
  &_swigt__p_std__allocatorT_std__string_t,
  &_swigt__p_std__invalid_argument,
  &_swigt__p_std__lessT_int_t,
  &_swigt__p_std__lessT_std__string_t,
  &_swigt__p_std__mapT_int_std__string_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__string_t_t_t,
  &_swigt__p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t,
  &_swigt__p_std__mapT_std__string_int_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_int_t_t_t,
  &_swigt__p_std__runtime_error,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_ampls__Constraint_std__allocatorT_ampls__Constraint_t_t,
  &_swigt__p_std__vectorT_ampls__Entity_p_std__allocatorT_ampls__Entity_p_t_t,
  &_swigt__p_std__vectorT_ampls__Variable_std__allocatorT_ampls__Variable_t_t,
  &_swigt__p_std__vectorT_double_std__allocatorT_double_t_t,
  &_swigt__p_std__vectorT_int_std__allocatorT_int_t_t,
  &_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  &_swigt__p_swig__SwigPyIterator,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_value_type,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_CPXCALLBACKINFO[] = {  {&_swigt__p_CPXCALLBACKINFO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CPXCALLBACKSOLUTIONSTRATEGY[] = {  {&_swigt__p_CPXCALLBACKSOLUTIONSTRATEGY, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CPXINFOTYPE[] = {  {&_swigt__p_CPXINFOTYPE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SwigPyObject[] = {  {&_swigt__p_SwigPyObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_sizeof_CPXBYTE___1_1__1__intArray[] = {{&_swigt__p_a_sizeof_CPXBYTE___1_1__1__intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_sizeof_CPXBYTE___1_1__1__int[] = {  {&_swigt__p_a_sizeof_CPXBYTE___1_1__1__int, 0, 0, 0},  {&_swigt__p_a_sizeof_CPXBYTE___1_1__1__intArray, _p_a_sizeof_CPXBYTE___1_1__1__intArrayTo_p_a_sizeof_CPXBYTE___1_1__1__int, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_sizeof_CPXINT___4_1__1__intArray[] = {{&_swigt__p_a_sizeof_CPXINT___4_1__1__intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_sizeof_CPXINT___4_1__1__int[] = {  {&_swigt__p_a_sizeof_CPXINT___4_1__1__int, 0, 0, 0},  {&_swigt__p_a_sizeof_CPXINT___4_1__1__intArray, _p_a_sizeof_CPXINT___4_1__1__intArrayTo_p_a_sizeof_CPXINT___4_1__1__int, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_sizeof_CPXLONG___8_1__1__intArray[] = {{&_swigt__p_a_sizeof_CPXLONG___8_1__1__intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_sizeof_CPXLONG___8_1__1__int[] = {  {&_swigt__p_a_sizeof_CPXLONG___8_1__1__int, 0, 0, 0},  {&_swigt__p_a_sizeof_CPXLONG___8_1__1__intArray, _p_a_sizeof_CPXLONG___8_1__1__intArrayTo_p_a_sizeof_CPXLONG___8_1__1__int, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_sizeof_CPXSHORT___2_1__1__intArray[] = {{&_swigt__p_a_sizeof_CPXSHORT___2_1__1__intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_sizeof_CPXSHORT___2_1__1__int[] = {  {&_swigt__p_a_sizeof_CPXSHORT___2_1__1__int, 0, 0, 0},  {&_swigt__p_a_sizeof_CPXSHORT___2_1__1__intArray, _p_a_sizeof_CPXSHORT___2_1__1__intArrayTo_p_a_sizeof_CPXSHORT___2_1__1__int, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_sizeof_CPXSIZE___sizeof_size_t__1__1__intArray[] = {{&_swigt__p_a_sizeof_CPXSIZE___sizeof_size_t__1__1__intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_sizeof_CPXSIZE___sizeof_size_t__1__1__int[] = {  {&_swigt__p_a_sizeof_CPXSIZE___sizeof_size_t__1__1__int, 0, 0, 0},  {&_swigt__p_a_sizeof_CPXSIZE___sizeof_size_t__1__1__intArray, _p_a_sizeof_CPXSIZE___sizeof_size_t__1__1__intArrayTo_p_a_sizeof_CPXSIZE___sizeof_size_t__1__1__int, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_sizeof_CPXULONG___8_1__1__intArray[] = {{&_swigt__p_a_sizeof_CPXULONG___8_1__1__intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_sizeof_CPXULONG___8_1__1__int[] = {  {&_swigt__p_a_sizeof_CPXULONG___8_1__1__int, 0, 0, 0},  {&_swigt__p_a_sizeof_CPXULONG___8_1__1__intArray, _p_a_sizeof_CPXULONG___8_1__1__intArrayTo_p_a_sizeof_CPXULONG___8_1__1__int, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ampls__AMPLModel[] = {  {&_swigt__p_ampls__AMPLModel, 0, 0, 0},  {&_swigt__p_ampls__CPLEXModel, _p_ampls__CPLEXModelTo_p_ampls__AMPLModel, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ampls__AMPLSolverException[] = {  {&_swigt__p_ampls__AMPLSolverException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ampls__CPLEXCallback[] = {  {&_swigt__p_ampls__CPLEXCallback, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ampls__CPLEXDrv[] = {  {&_swigt__p_ampls__CPLEXDrv, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ampls__CPLEXModel[] = {  {&_swigt__p_ampls__CPLEXModel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ampls__Constraint[] = {  {&_swigt__p_ampls__Constraint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ampls__CutDirection[] = {  {&_swigt__p_ampls__CutDirection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ampls__Entity[] = {  {&_swigt__p_ampls__Constraint, _p_ampls__ConstraintTo_p_ampls__Entity, 0, 0},  {&_swigt__p_ampls__Variable, _p_ampls__VariableTo_p_ampls__Entity, 0, 0},  {&_swigt__p_ampls__Entity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ampls__GenericCallback[] = {  {&_swigt__p_ampls__GenericCallback, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ampls__LPAlgorithms[] = {  {&_swigt__p_ampls__LPAlgorithms, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ampls__SolverParams[] = {  {&_swigt__p_ampls__SolverParams, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ampls__Status[] = {  {&_swigt__p_ampls__Status, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ampls__Value[] = {  {&_swigt__p_ampls__Value, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ampls__VarType[] = {  {&_swigt__p_ampls__VarType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ampls__Variable[] = {  {&_swigt__p_ampls__Variable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ampls__Variant[] = {  {&_swigt__p_ampls__Variant, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ampls__Where[] = {  {&_swigt__p_ampls__Where, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ampls__cpx__impl__CBWrap[] = {  {&_swigt__p_ampls__cpx__impl__CBWrap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ampls__cpx__impl__CPLEXDriverState[] = {  {&_swigt__p_ampls__cpx__impl__CPLEXDriverState, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ampls__impl__AMPLMutex[] = {  {&_swigt__p_ampls__impl__AMPLMutex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ampls__impl__BaseCallback[] = {  {&_swigt__p_ampls__impl__BaseCallback, 0, 0, 0},  {&_swigt__p_ampls__GenericCallback, _p_ampls__GenericCallbackTo_p_ampls__impl__BaseCallback, 0, 0},  {&_swigt__p_ampls__CPLEXCallback, _p_ampls__CPLEXCallbackTo_p_ampls__impl__BaseCallback, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ampls__impl__Records[] = {  {&_swigt__p_ampls__impl__Records, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ampls__impl__SolverDriverT_ampls__CPLEXModel_t[] = {  {&_swigt__p_ampls__impl__SolverDriverT_ampls__CPLEXModel_t, 0, 0, 0},  {&_swigt__p_ampls__CPLEXDrv, _p_ampls__CPLEXDrvTo_p_ampls__impl__SolverDriverT_ampls__CPLEXModel_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cpxcallbackcontext[] = {  {&_swigt__p_cpxcallbackcontext, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cpxchannel[] = {  {&_swigt__p_cpxchannel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cpxdeserializer[] = {  {&_swigt__p_cpxdeserializer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cpxenv[] = {  {&_swigt__p_cpxenv, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cpxiodevice[] = {  {&_swigt__p_cpxiodevice, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cpxlp[] = {  {&_swigt__p_cpxlp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cpxnet[] = {  {&_swigt__p_cpxnet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cpxserializer[] = {  {&_swigt__p_cpxserializer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dblArray[] = {  {&_swigt__p_dblArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_dblArray, _p_dblArrayTo_p_double, 0, 0},  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_int_p_cpxiodevice__intArray[] = {{&_swigt__p_f_int_p_cpxiodevice__intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_int_p_cpxiodevice__int[] = {  {&_swigt__p_f_int_p_cpxiodevice__intArray, _p_f_int_p_cpxiodevice__intArrayTo_p_f_int_p_cpxiodevice__int, 0, 0},  {&_swigt__p_f_int_p_cpxiodevice__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_int_p_q_const__char_p_void__intArray[] = {{&_swigt__p_f_int_p_q_const__char_p_void__intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_int_p_q_const__char_p_void__int[] = {  {&_swigt__p_f_int_p_q_const__char_p_void__int, 0, 0, 0},  {&_swigt__p_f_int_p_q_const__char_p_void__intArray, _p_f_int_p_q_const__char_p_void__intArrayTo_p_f_int_p_q_const__char_p_void__int, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_cpxcallbackcontext_long_long_p_void__intArray[] = {{&_swigt__p_f_p_cpxcallbackcontext_long_long_p_void__intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_cpxcallbackcontext_long_long_p_void__int[] = {  {&_swigt__p_f_p_cpxcallbackcontext_long_long_p_void__intArray, _p_f_p_cpxcallbackcontext_long_long_p_void__intArrayTo_p_f_p_cpxcallbackcontext_long_long_p_void__int, 0, 0},  {&_swigt__p_f_p_cpxcallbackcontext_long_long_p_void__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_cpxdeserializer_long_long_p_double__intArray[] = {{&_swigt__p_f_p_cpxdeserializer_long_long_p_double__intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_cpxdeserializer_long_long_p_double__int[] = {  {&_swigt__p_f_p_cpxdeserializer_long_long_p_double__intArray, _p_f_p_cpxdeserializer_long_long_p_double__intArrayTo_p_f_p_cpxdeserializer_long_long_p_double__int, 0, 0},  {&_swigt__p_f_p_cpxdeserializer_long_long_p_double__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_cpxdeserializer_long_long_p_float__intArray[] = {{&_swigt__p_f_p_cpxdeserializer_long_long_p_float__intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_cpxdeserializer_long_long_p_float__int[] = {  {&_swigt__p_f_p_cpxdeserializer_long_long_p_float__int, 0, 0, 0},  {&_swigt__p_f_p_cpxdeserializer_long_long_p_float__intArray, _p_f_p_cpxdeserializer_long_long_p_float__intArrayTo_p_f_p_cpxdeserializer_long_long_p_float__int, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_cpxdeserializer_long_long_p_int__intArray[] = {{&_swigt__p_f_p_cpxdeserializer_long_long_p_int__intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_cpxdeserializer_long_long_p_int__int[] = {  {&_swigt__p_f_p_cpxdeserializer_long_long_p_int__int, 0, 0, 0},  {&_swigt__p_f_p_cpxdeserializer_long_long_p_int__intArray, _p_f_p_cpxdeserializer_long_long_p_int__intArrayTo_p_f_p_cpxdeserializer_long_long_p_int__int, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_cpxdeserializer_long_long_p_long_long__intArray[] = {{&_swigt__p_f_p_cpxdeserializer_long_long_p_long_long__intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_cpxdeserializer_long_long_p_long_long__int[] = {  {&_swigt__p_f_p_cpxdeserializer_long_long_p_long_long__intArray, _p_f_p_cpxdeserializer_long_long_p_long_long__intArrayTo_p_f_p_cpxdeserializer_long_long_p_long_long__int, 0, 0},  {&_swigt__p_f_p_cpxdeserializer_long_long_p_long_long__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_cpxdeserializer_long_long_p_short__intArray[] = {{&_swigt__p_f_p_cpxdeserializer_long_long_p_short__intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_cpxdeserializer_long_long_p_short__int[] = {  {&_swigt__p_f_p_cpxdeserializer_long_long_p_short__int, 0, 0, 0},  {&_swigt__p_f_p_cpxdeserializer_long_long_p_short__intArray, _p_f_p_cpxdeserializer_long_long_p_short__intArrayTo_p_f_p_cpxdeserializer_long_long_p_short__int, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_cpxdeserializer_long_long_p_signed_char__intArray[] = {{&_swigt__p_f_p_cpxdeserializer_long_long_p_signed_char__intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_cpxdeserializer_long_long_p_signed_char__int[] = {  {&_swigt__p_f_p_cpxdeserializer_long_long_p_signed_char__int, 0, 0, 0},  {&_swigt__p_f_p_cpxdeserializer_long_long_p_signed_char__intArray, _p_f_p_cpxdeserializer_long_long_p_signed_char__intArrayTo_p_f_p_cpxdeserializer_long_long_p_signed_char__int, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_cpxdeserializer_p_double__intArray[] = {{&_swigt__p_f_p_cpxdeserializer_p_double__intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_cpxdeserializer_p_double__int[] = {  {&_swigt__p_f_p_cpxdeserializer_p_double__intArray, _p_f_p_cpxdeserializer_p_double__intArrayTo_p_f_p_cpxdeserializer_p_double__int, 0, 0},  {&_swigt__p_f_p_cpxdeserializer_p_double__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_cpxdeserializer_p_float__intArray[] = {{&_swigt__p_f_p_cpxdeserializer_p_float__intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_cpxdeserializer_p_float__int[] = {  {&_swigt__p_f_p_cpxdeserializer_p_float__int, 0, 0, 0},  {&_swigt__p_f_p_cpxdeserializer_p_float__intArray, _p_f_p_cpxdeserializer_p_float__intArrayTo_p_f_p_cpxdeserializer_p_float__int, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_cpxdeserializer_p_int__intArray[] = {{&_swigt__p_f_p_cpxdeserializer_p_int__intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_cpxdeserializer_p_int__int[] = {  {&_swigt__p_f_p_cpxdeserializer_p_int__int, 0, 0, 0},  {&_swigt__p_f_p_cpxdeserializer_p_int__intArray, _p_f_p_cpxdeserializer_p_int__intArrayTo_p_f_p_cpxdeserializer_p_int__int, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_cpxdeserializer_p_long_long__intArray[] = {{&_swigt__p_f_p_cpxdeserializer_p_long_long__intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_cpxdeserializer_p_long_long__int[] = {  {&_swigt__p_f_p_cpxdeserializer_p_long_long__int, 0, 0, 0},  {&_swigt__p_f_p_cpxdeserializer_p_long_long__intArray, _p_f_p_cpxdeserializer_p_long_long__intArrayTo_p_f_p_cpxdeserializer_p_long_long__int, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_cpxdeserializer_p_short__intArray[] = {{&_swigt__p_f_p_cpxdeserializer_p_short__intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_cpxdeserializer_p_short__int[] = {  {&_swigt__p_f_p_cpxdeserializer_p_short__int, 0, 0, 0},  {&_swigt__p_f_p_cpxdeserializer_p_short__intArray, _p_f_p_cpxdeserializer_p_short__intArrayTo_p_f_p_cpxdeserializer_p_short__int, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_cpxdeserializer_p_signed_char__intArray[] = {{&_swigt__p_f_p_cpxdeserializer_p_signed_char__intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_cpxdeserializer_p_signed_char__int[] = {  {&_swigt__p_f_p_cpxdeserializer_p_signed_char__int, 0, 0, 0},  {&_swigt__p_f_p_cpxdeserializer_p_signed_char__intArray, _p_f_p_cpxdeserializer_p_signed_char__intArrayTo_p_f_p_cpxdeserializer_p_signed_char__int, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_cpxenv_enum_CPXINFOTYPE_int_long_long_p_q_const__void_p_void__void[] = {  {&_swigt__p_f_p_cpxenv_enum_CPXINFOTYPE_int_long_long_p_q_const__void_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_cpxenv_int_long_long_p_q_const__void_long_long_p_long_long_p_void_p_void__intArray[] = {{&_swigt__p_f_p_cpxenv_int_long_long_p_q_const__void_long_long_p_long_long_p_void_p_void__intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_cpxenv_int_long_long_p_q_const__void_long_long_p_long_long_p_void_p_void__int[] = {  {&_swigt__p_f_p_cpxenv_int_long_long_p_q_const__void_long_long_p_long_long_p_void_p_void__int, 0, 0, 0},  {&_swigt__p_f_p_cpxenv_int_long_long_p_q_const__void_long_long_p_long_long_p_void_p_void__intArray, _p_f_p_cpxenv_int_long_long_p_q_const__void_long_long_p_long_long_p_void_p_void__intArrayTo_p_f_p_cpxenv_int_long_long_p_q_const__void_long_long_p_long_long_p_void_p_void__int, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_cpxiodevice__intArray[] = {{&_swigt__p_f_p_cpxiodevice__intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_cpxiodevice__int[] = {  {&_swigt__p_f_p_cpxiodevice__intArray, _p_f_p_cpxiodevice__intArrayTo_p_f_p_cpxiodevice__int, 0, 0},  {&_swigt__p_f_p_cpxiodevice__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_cpxserializer_double__intArray[] = {{&_swigt__p_f_p_cpxserializer_double__intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_cpxserializer_double__int[] = {  {&_swigt__p_f_p_cpxserializer_double__intArray, _p_f_p_cpxserializer_double__intArrayTo_p_f_p_cpxserializer_double__int, 0, 0},  {&_swigt__p_f_p_cpxserializer_double__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_cpxserializer_float__intArray[] = {{&_swigt__p_f_p_cpxserializer_float__intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_cpxserializer_float__int[] = {  {&_swigt__p_f_p_cpxserializer_float__int, 0, 0, 0},  {&_swigt__p_f_p_cpxserializer_float__intArray, _p_f_p_cpxserializer_float__intArrayTo_p_f_p_cpxserializer_float__int, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_cpxserializer_int__intArray[] = {{&_swigt__p_f_p_cpxserializer_int__intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_cpxserializer_int__int[] = {  {&_swigt__p_f_p_cpxserializer_int__int, 0, 0, 0},  {&_swigt__p_f_p_cpxserializer_int__intArray, _p_f_p_cpxserializer_int__intArrayTo_p_f_p_cpxserializer_int__int, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_cpxserializer_long_long__intArray[] = {{&_swigt__p_f_p_cpxserializer_long_long__intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_cpxserializer_long_long__int[] = {  {&_swigt__p_f_p_cpxserializer_long_long__int, 0, 0, 0},  {&_swigt__p_f_p_cpxserializer_long_long__intArray, _p_f_p_cpxserializer_long_long__intArrayTo_p_f_p_cpxserializer_long_long__int, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_cpxserializer_long_long_p_q_const__double__intArray[] = {{&_swigt__p_f_p_cpxserializer_long_long_p_q_const__double__intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_cpxserializer_long_long_p_q_const__double__int[] = {  {&_swigt__p_f_p_cpxserializer_long_long_p_q_const__double__int, 0, 0, 0},  {&_swigt__p_f_p_cpxserializer_long_long_p_q_const__double__intArray, _p_f_p_cpxserializer_long_long_p_q_const__double__intArrayTo_p_f_p_cpxserializer_long_long_p_q_const__double__int, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_cpxserializer_long_long_p_q_const__float__intArray[] = {{&_swigt__p_f_p_cpxserializer_long_long_p_q_const__float__intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_cpxserializer_long_long_p_q_const__float__int[] = {  {&_swigt__p_f_p_cpxserializer_long_long_p_q_const__float__int, 0, 0, 0},  {&_swigt__p_f_p_cpxserializer_long_long_p_q_const__float__intArray, _p_f_p_cpxserializer_long_long_p_q_const__float__intArrayTo_p_f_p_cpxserializer_long_long_p_q_const__float__int, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_cpxserializer_long_long_p_q_const__int__intArray[] = {{&_swigt__p_f_p_cpxserializer_long_long_p_q_const__int__intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_cpxserializer_long_long_p_q_const__int__int[] = {  {&_swigt__p_f_p_cpxserializer_long_long_p_q_const__int__int, 0, 0, 0},  {&_swigt__p_f_p_cpxserializer_long_long_p_q_const__int__intArray, _p_f_p_cpxserializer_long_long_p_q_const__int__intArrayTo_p_f_p_cpxserializer_long_long_p_q_const__int__int, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_cpxserializer_long_long_p_q_const__long_long__intArray[] = {{&_swigt__p_f_p_cpxserializer_long_long_p_q_const__long_long__intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_cpxserializer_long_long_p_q_const__long_long__int[] = {  {&_swigt__p_f_p_cpxserializer_long_long_p_q_const__long_long__int, 0, 0, 0},  {&_swigt__p_f_p_cpxserializer_long_long_p_q_const__long_long__intArray, _p_f_p_cpxserializer_long_long_p_q_const__long_long__intArrayTo_p_f_p_cpxserializer_long_long_p_q_const__long_long__int, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_cpxserializer_long_long_p_q_const__short__intArray[] = {{&_swigt__p_f_p_cpxserializer_long_long_p_q_const__short__intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_cpxserializer_long_long_p_q_const__short__int[] = {  {&_swigt__p_f_p_cpxserializer_long_long_p_q_const__short__int, 0, 0, 0},  {&_swigt__p_f_p_cpxserializer_long_long_p_q_const__short__intArray, _p_f_p_cpxserializer_long_long_p_q_const__short__intArrayTo_p_f_p_cpxserializer_long_long_p_q_const__short__int, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_cpxserializer_long_long_p_q_const__signed_char__intArray[] = {{&_swigt__p_f_p_cpxserializer_long_long_p_q_const__signed_char__intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_cpxserializer_long_long_p_q_const__signed_char__int[] = {  {&_swigt__p_f_p_cpxserializer_long_long_p_q_const__signed_char__int, 0, 0, 0},  {&_swigt__p_f_p_cpxserializer_long_long_p_q_const__signed_char__intArray, _p_f_p_cpxserializer_long_long_p_q_const__signed_char__intArrayTo_p_f_p_cpxserializer_long_long_p_q_const__signed_char__int, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_cpxserializer_short__intArray[] = {{&_swigt__p_f_p_cpxserializer_short__intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_cpxserializer_short__int[] = {  {&_swigt__p_f_p_cpxserializer_short__int, 0, 0, 0},  {&_swigt__p_f_p_cpxserializer_short__intArray, _p_f_p_cpxserializer_short__intArrayTo_p_f_p_cpxserializer_short__int, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_cpxserializer_signed_char__intArray[] = {{&_swigt__p_f_p_cpxserializer_signed_char__intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_cpxserializer_signed_char__int[] = {  {&_swigt__p_f_p_cpxserializer_signed_char__int, 0, 0, 0},  {&_swigt__p_f_p_cpxserializer_signed_char__intArray, _p_f_p_cpxserializer_signed_char__intArrayTo_p_f_p_cpxserializer_signed_char__int, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_q_const__char_p_cpxiodevice__intArray[] = {{&_swigt__p_f_p_q_const__char_p_cpxiodevice__intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_q_const__char_p_cpxiodevice__int[] = {  {&_swigt__p_f_p_q_const__char_p_cpxiodevice__intArray, _p_f_p_q_const__char_p_cpxiodevice__intArrayTo_p_f_p_q_const__char_p_cpxiodevice__int, 0, 0},  {&_swigt__p_f_p_q_const__char_p_cpxiodevice__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_q_const__cpxenv_int_p_void__intArray[] = {{&_swigt__p_f_p_q_const__cpxenv_int_p_void__intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_q_const__cpxenv_int_p_void__int[] = {  {&_swigt__p_f_p_q_const__cpxenv_int_p_void__int, 0, 0, 0},  {&_swigt__p_f_p_q_const__cpxenv_int_p_void__intArray, _p_f_p_q_const__cpxenv_int_p_void__intArrayTo_p_f_p_q_const__cpxenv_int_p_void__int, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_q_const__cpxenv_int_p_void_int_p_void__void[] = {  {&_swigt__p_f_p_q_const__cpxenv_int_p_void_int_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_q_const__cpxenv_p_void_int_p_void__intArray[] = {{&_swigt__p_f_p_q_const__cpxenv_p_void_int_p_void__intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_q_const__cpxenv_p_void_int_p_void__int[] = {  {&_swigt__p_f_p_q_const__cpxenv_p_void_int_p_void__int, 0, 0, 0},  {&_swigt__p_f_p_q_const__cpxenv_p_void_int_p_void__intArray, _p_f_p_q_const__cpxenv_p_void_int_p_void__intArrayTo_p_f_p_q_const__cpxenv_p_void_int_p_void__int, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_q_const__cpxenv_p_void_int_p_void_double_p_double_p_int_p_int__intArray[] = {{&_swigt__p_f_p_q_const__cpxenv_p_void_int_p_void_double_p_double_p_int_p_int__intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_q_const__cpxenv_p_void_int_p_void_double_p_double_p_int_p_int__int[] = {  {&_swigt__p_f_p_q_const__cpxenv_p_void_int_p_void_double_p_double_p_int_p_int__int, 0, 0, 0},  {&_swigt__p_f_p_q_const__cpxenv_p_void_int_p_void_double_p_double_p_int_p_int__intArray, _p_f_p_q_const__cpxenv_p_void_int_p_void_double_p_double_p_int_p_int__intArrayTo_p_f_p_q_const__cpxenv_p_void_int_p_void_double_p_double_p_int_p_int__int, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_q_const__cpxenv_p_void_int_p_void_int_int_int_int_p_q_const__int_p_q_const__int_p_q_const__char_p_q_const__double_p_q_const__double_p_int__intArray[] = {{&_swigt__p_f_p_q_const__cpxenv_p_void_int_p_void_int_int_int_int_p_q_const__int_p_q_const__int_p_q_const__char_p_q_const__double_p_q_const__double_p_int__intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_q_const__cpxenv_p_void_int_p_void_int_int_int_int_p_q_const__int_p_q_const__int_p_q_const__char_p_q_const__double_p_q_const__double_p_int__int[] = {  {&_swigt__p_f_p_q_const__cpxenv_p_void_int_p_void_int_int_int_int_p_q_const__int_p_q_const__int_p_q_const__char_p_q_const__double_p_q_const__double_p_int__int, 0, 0, 0},  {&_swigt__p_f_p_q_const__cpxenv_p_void_int_p_void_int_int_int_int_p_q_const__int_p_q_const__int_p_q_const__char_p_q_const__double_p_q_const__double_p_int__intArray, _p_f_p_q_const__cpxenv_p_void_int_p_void_int_int_int_int_p_q_const__int_p_q_const__int_p_q_const__char_p_q_const__double_p_q_const__double_p_int__intArrayTo_p_f_p_q_const__cpxenv_p_void_int_p_void_int_int_int_int_p_q_const__int_p_q_const__int_p_q_const__char_p_q_const__double_p_q_const__double_p_int__int, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_q_const__cpxenv_p_void_int_p_void_p_double_p_double_p_int_p_int__intArray[] = {{&_swigt__p_f_p_q_const__cpxenv_p_void_int_p_void_p_double_p_double_p_int_p_int__intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_q_const__cpxenv_p_void_int_p_void_p_double_p_double_p_int_p_int__int[] = {  {&_swigt__p_f_p_q_const__cpxenv_p_void_int_p_void_p_double_p_double_p_int_p_int__int, 0, 0, 0},  {&_swigt__p_f_p_q_const__cpxenv_p_void_int_p_void_p_double_p_double_p_int_p_int__intArray, _p_f_p_q_const__cpxenv_p_void_int_p_void_p_double_p_double_p_int_p_int__intArrayTo_p_f_p_q_const__cpxenv_p_void_int_p_void_p_double_p_double_p_int_p_int__int, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_q_const__cpxenv_p_void_int_p_void_p_int__intArray[] = {{&_swigt__p_f_p_q_const__cpxenv_p_void_int_p_void_p_int__intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_q_const__cpxenv_p_void_int_p_void_p_int__int[] = {  {&_swigt__p_f_p_q_const__cpxenv_p_void_int_p_void_p_int__int, 0, 0, 0},  {&_swigt__p_f_p_q_const__cpxenv_p_void_int_p_void_p_int__intArray, _p_f_p_q_const__cpxenv_p_void_int_p_void_p_int__intArrayTo_p_f_p_q_const__cpxenv_p_void_int_p_void_p_int__int, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_q_const__cpxenv_p_void_int_p_void_p_int_p_int__intArray[] = {{&_swigt__p_f_p_q_const__cpxenv_p_void_int_p_void_p_int_p_int__intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_q_const__cpxenv_p_void_int_p_void_p_int_p_int__int[] = {  {&_swigt__p_f_p_q_const__cpxenv_p_void_int_p_void_p_int_p_int__int, 0, 0, 0},  {&_swigt__p_f_p_q_const__cpxenv_p_void_int_p_void_p_int_p_int__intArray, _p_f_p_q_const__cpxenv_p_void_int_p_void_p_int_p_int__intArrayTo_p_f_p_q_const__cpxenv_p_void_int_p_void_p_int_p_int__int, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_q_const__void_size_t_p_cpxiodevice__size_t[] = {  {&_swigt__p_f_p_q_const__void_size_t_p_cpxiodevice__size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void_long_long_p_char__p_char[] = {  {&_swigt__p_f_p_void_long_long_p_char__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void_p_q_const__char__void[] = {  {&_swigt__p_f_p_void_p_q_const__char__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void_size_t_p_cpxiodevice__size_t[] = {  {&_swigt__p_f_p_void_size_t_p_cpxiodevice__size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_intArray, _p_intArrayTo_p_int, 0, 0},  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_intArray[] = {  {&_swigt__p_intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_key_type[] = {  {&_swigt__p_key_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mapped_type[] = {  {&_swigt__p_mapped_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_ASL[] = {  {&_swigt__p_p_ASL, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_PyObject[] = {  {&_swigt__p_p_PyObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_char[] = {  {&_swigt__p_p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_cpxchannel[] = {  {&_swigt__p_p_cpxchannel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_cpxdeserializer[] = {  {&_swigt__p_p_cpxdeserializer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_cpxenv[] = {  {&_swigt__p_p_cpxenv, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_cpxlp[] = {  {&_swigt__p_p_cpxlp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_cpxnet[] = {  {&_swigt__p_p_cpxnet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_cpxserializer[] = {  {&_swigt__p_p_cpxserializer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_f_int_p_q_const__char_p_void__intArray[] = {{&_swigt__p_p_f_int_p_q_const__char_p_void__intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_f_int_p_q_const__char_p_void__int[] = {  {&_swigt__p_p_f_int_p_q_const__char_p_void__int, 0, 0, 0},  {&_swigt__p_p_f_int_p_q_const__char_p_void__intArray, _p_p_f_int_p_q_const__char_p_void__intArrayTo_p_p_f_int_p_q_const__char_p_void__int, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_f_p_cpxcallbackcontext_long_long_p_void__intArray[] = {{&_swigt__p_p_f_p_cpxcallbackcontext_long_long_p_void__intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_f_p_cpxcallbackcontext_long_long_p_void__int[] = {  {&_swigt__p_p_f_p_cpxcallbackcontext_long_long_p_void__intArray, _p_p_f_p_cpxcallbackcontext_long_long_p_void__intArrayTo_p_p_f_p_cpxcallbackcontext_long_long_p_void__int, 0, 0},  {&_swigt__p_p_f_p_cpxcallbackcontext_long_long_p_void__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_f_p_q_const__cpxenv_int_p_void_int_p_void__void[] = {  {&_swigt__p_p_f_p_q_const__cpxenv_int_p_void_int_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_f_p_q_const__cpxenv_p_void_int_p_void__intArray[] = {{&_swigt__p_p_f_p_q_const__cpxenv_p_void_int_p_void__intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_f_p_q_const__cpxenv_p_void_int_p_void__int[] = {  {&_swigt__p_p_f_p_q_const__cpxenv_p_void_int_p_void__intArray, _p_p_f_p_q_const__cpxenv_p_void_int_p_void__intArrayTo_p_p_f_p_q_const__cpxenv_p_void_int_p_void__int, 0, 0},  {&_swigt__p_p_f_p_q_const__cpxenv_p_void_int_p_void__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_f_p_q_const__cpxenv_p_void_int_p_void_double_p_double_p_int_p_int__intArray[] = {{&_swigt__p_p_f_p_q_const__cpxenv_p_void_int_p_void_double_p_double_p_int_p_int__intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_f_p_q_const__cpxenv_p_void_int_p_void_double_p_double_p_int_p_int__int[] = {  {&_swigt__p_p_f_p_q_const__cpxenv_p_void_int_p_void_double_p_double_p_int_p_int__int, 0, 0, 0},  {&_swigt__p_p_f_p_q_const__cpxenv_p_void_int_p_void_double_p_double_p_int_p_int__intArray, _p_p_f_p_q_const__cpxenv_p_void_int_p_void_double_p_double_p_int_p_int__intArrayTo_p_p_f_p_q_const__cpxenv_p_void_int_p_void_double_p_double_p_int_p_int__int, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_f_p_q_const__cpxenv_p_void_int_p_void_int_int_int_int_p_q_const__int_p_q_const__int_p_q_const__char_p_q_const__double_p_q_const__double_p_int__intArray[] = {{&_swigt__p_p_f_p_q_const__cpxenv_p_void_int_p_void_int_int_int_int_p_q_const__int_p_q_const__int_p_q_const__char_p_q_const__double_p_q_const__double_p_int__intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_f_p_q_const__cpxenv_p_void_int_p_void_int_int_int_int_p_q_const__int_p_q_const__int_p_q_const__char_p_q_const__double_p_q_const__double_p_int__int[] = {  {&_swigt__p_p_f_p_q_const__cpxenv_p_void_int_p_void_int_int_int_int_p_q_const__int_p_q_const__int_p_q_const__char_p_q_const__double_p_q_const__double_p_int__int, 0, 0, 0},  {&_swigt__p_p_f_p_q_const__cpxenv_p_void_int_p_void_int_int_int_int_p_q_const__int_p_q_const__int_p_q_const__char_p_q_const__double_p_q_const__double_p_int__intArray, _p_p_f_p_q_const__cpxenv_p_void_int_p_void_int_int_int_int_p_q_const__int_p_q_const__int_p_q_const__char_p_q_const__double_p_q_const__double_p_int__intArrayTo_p_p_f_p_q_const__cpxenv_p_void_int_p_void_int_int_int_int_p_q_const__int_p_q_const__int_p_q_const__char_p_q_const__double_p_q_const__double_p_int__int, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_double_p_double_p_int_p_int__intArray[] = {{&_swigt__p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_double_p_double_p_int_p_int__intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_double_p_double_p_int_p_int__int[] = {  {&_swigt__p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_double_p_double_p_int_p_int__int, 0, 0, 0},  {&_swigt__p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_double_p_double_p_int_p_int__intArray, _p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_double_p_double_p_int_p_int__intArrayTo_p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_double_p_double_p_int_p_int__int, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_int__intArray[] = {{&_swigt__p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_int__intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_int__int[] = {  {&_swigt__p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_int__int, 0, 0, 0},  {&_swigt__p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_int__intArray, _p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_int__intArrayTo_p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_int__int, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_int_p_int__intArray[] = {{&_swigt__p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_int_p_int__intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_int_p_int__int[] = {  {&_swigt__p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_int_p_int__int, 0, 0, 0},  {&_swigt__p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_int_p_int__intArray, _p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_int_p_int__intArrayTo_p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_int_p_int__int, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_paramset[] = {  {&_swigt__p_p_paramset, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_void[] = {  {&_swigt__p_p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_paramset[] = {  {&_swigt__p_paramset, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pthread_mutex_t[] = {  {&_swigt__p_pthread_mutex_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_double_t[] = {  {&_swigt__p_std__allocatorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__pairT_int_const_std__string_t_t[] = {  {&_swigt__p_std__allocatorT_std__pairT_int_const_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__pairT_std__string_const_double_t_t[] = {  {&_swigt__p_std__allocatorT_std__pairT_std__string_const_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__pairT_std__string_const_int_t_t[] = {  {&_swigt__p_std__allocatorT_std__pairT_std__string_const_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__string_t[] = {  {&_swigt__p_std__allocatorT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__invalid_argument[] = {  {&_swigt__p_std__invalid_argument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__lessT_int_t[] = {  {&_swigt__p_std__lessT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__lessT_std__string_t[] = {  {&_swigt__p_std__lessT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_int_std__string_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__string_t_t_t[] = {  {&_swigt__p_std__mapT_int_std__string_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__string_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t[] = {  {&_swigt__p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_int_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_int_t_t_t[] = {  {&_swigt__p_std__mapT_std__string_int_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_int_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__runtime_error[] = {  {&_swigt__p_std__runtime_error, 0, 0, 0},  {&_swigt__p_ampls__AMPLSolverException, _p_ampls__AMPLSolverExceptionTo_p_std__runtime_error, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ampls__Constraint_std__allocatorT_ampls__Constraint_t_t[] = {  {&_swigt__p_std__vectorT_ampls__Constraint_std__allocatorT_ampls__Constraint_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ampls__Entity_p_std__allocatorT_ampls__Entity_p_t_t[] = {  {&_swigt__p_std__vectorT_ampls__Entity_p_std__allocatorT_ampls__Entity_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ampls__Variable_std__allocatorT_ampls__Variable_t_t[] = {  {&_swigt__p_std__vectorT_ampls__Variable_std__allocatorT_ampls__Variable_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_std__allocatorT_double_t_t[] = {  {&_swigt__p_std__vectorT_double_std__allocatorT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_std__allocatorT_int_t_t[] = {  {&_swigt__p_std__vectorT_int_std__allocatorT_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t[] = {  {&_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__SwigPyIterator[] = {  {&_swigt__p_swig__SwigPyIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_CPXCALLBACKINFO,
  _swigc__p_CPXCALLBACKSOLUTIONSTRATEGY,
  _swigc__p_CPXINFOTYPE,
  _swigc__p_SwigPyObject,
  _swigc__p_a_sizeof_CPXBYTE___1_1__1__int,
  _swigc__p_a_sizeof_CPXBYTE___1_1__1__intArray,
  _swigc__p_a_sizeof_CPXINT___4_1__1__int,
  _swigc__p_a_sizeof_CPXINT___4_1__1__intArray,
  _swigc__p_a_sizeof_CPXLONG___8_1__1__int,
  _swigc__p_a_sizeof_CPXLONG___8_1__1__intArray,
  _swigc__p_a_sizeof_CPXSHORT___2_1__1__int,
  _swigc__p_a_sizeof_CPXSHORT___2_1__1__intArray,
  _swigc__p_a_sizeof_CPXSIZE___sizeof_size_t__1__1__int,
  _swigc__p_a_sizeof_CPXSIZE___sizeof_size_t__1__1__intArray,
  _swigc__p_a_sizeof_CPXULONG___8_1__1__int,
  _swigc__p_a_sizeof_CPXULONG___8_1__1__intArray,
  _swigc__p_allocator_type,
  _swigc__p_ampls__AMPLModel,
  _swigc__p_ampls__AMPLSolverException,
  _swigc__p_ampls__CPLEXCallback,
  _swigc__p_ampls__CPLEXDrv,
  _swigc__p_ampls__CPLEXModel,
  _swigc__p_ampls__Constraint,
  _swigc__p_ampls__CutDirection,
  _swigc__p_ampls__Entity,
  _swigc__p_ampls__GenericCallback,
  _swigc__p_ampls__LPAlgorithms,
  _swigc__p_ampls__SolverParams,
  _swigc__p_ampls__Status,
  _swigc__p_ampls__Value,
  _swigc__p_ampls__VarType,
  _swigc__p_ampls__Variable,
  _swigc__p_ampls__Variant,
  _swigc__p_ampls__Where,
  _swigc__p_ampls__cpx__impl__CBWrap,
  _swigc__p_ampls__cpx__impl__CPLEXDriverState,
  _swigc__p_ampls__impl__AMPLMutex,
  _swigc__p_ampls__impl__BaseCallback,
  _swigc__p_ampls__impl__Records,
  _swigc__p_ampls__impl__SolverDriverT_ampls__CPLEXModel_t,
  _swigc__p_char,
  _swigc__p_cpxcallbackcontext,
  _swigc__p_cpxchannel,
  _swigc__p_cpxdeserializer,
  _swigc__p_cpxenv,
  _swigc__p_cpxiodevice,
  _swigc__p_cpxlp,
  _swigc__p_cpxnet,
  _swigc__p_cpxserializer,
  _swigc__p_dblArray,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_f_int_p_cpxiodevice__int,
  _swigc__p_f_int_p_cpxiodevice__intArray,
  _swigc__p_f_int_p_q_const__char_p_void__int,
  _swigc__p_f_int_p_q_const__char_p_void__intArray,
  _swigc__p_f_p_cpxcallbackcontext_long_long_p_void__int,
  _swigc__p_f_p_cpxcallbackcontext_long_long_p_void__intArray,
  _swigc__p_f_p_cpxdeserializer_long_long_p_double__int,
  _swigc__p_f_p_cpxdeserializer_long_long_p_double__intArray,
  _swigc__p_f_p_cpxdeserializer_long_long_p_float__int,
  _swigc__p_f_p_cpxdeserializer_long_long_p_float__intArray,
  _swigc__p_f_p_cpxdeserializer_long_long_p_int__int,
  _swigc__p_f_p_cpxdeserializer_long_long_p_int__intArray,
  _swigc__p_f_p_cpxdeserializer_long_long_p_long_long__int,
  _swigc__p_f_p_cpxdeserializer_long_long_p_long_long__intArray,
  _swigc__p_f_p_cpxdeserializer_long_long_p_short__int,
  _swigc__p_f_p_cpxdeserializer_long_long_p_short__intArray,
  _swigc__p_f_p_cpxdeserializer_long_long_p_signed_char__int,
  _swigc__p_f_p_cpxdeserializer_long_long_p_signed_char__intArray,
  _swigc__p_f_p_cpxdeserializer_p_double__int,
  _swigc__p_f_p_cpxdeserializer_p_double__intArray,
  _swigc__p_f_p_cpxdeserializer_p_float__int,
  _swigc__p_f_p_cpxdeserializer_p_float__intArray,
  _swigc__p_f_p_cpxdeserializer_p_int__int,
  _swigc__p_f_p_cpxdeserializer_p_int__intArray,
  _swigc__p_f_p_cpxdeserializer_p_long_long__int,
  _swigc__p_f_p_cpxdeserializer_p_long_long__intArray,
  _swigc__p_f_p_cpxdeserializer_p_short__int,
  _swigc__p_f_p_cpxdeserializer_p_short__intArray,
  _swigc__p_f_p_cpxdeserializer_p_signed_char__int,
  _swigc__p_f_p_cpxdeserializer_p_signed_char__intArray,
  _swigc__p_f_p_cpxenv_enum_CPXINFOTYPE_int_long_long_p_q_const__void_p_void__void,
  _swigc__p_f_p_cpxenv_int_long_long_p_q_const__void_long_long_p_long_long_p_void_p_void__int,
  _swigc__p_f_p_cpxenv_int_long_long_p_q_const__void_long_long_p_long_long_p_void_p_void__intArray,
  _swigc__p_f_p_cpxiodevice__int,
  _swigc__p_f_p_cpxiodevice__intArray,
  _swigc__p_f_p_cpxserializer_double__int,
  _swigc__p_f_p_cpxserializer_double__intArray,
  _swigc__p_f_p_cpxserializer_float__int,
  _swigc__p_f_p_cpxserializer_float__intArray,
  _swigc__p_f_p_cpxserializer_int__int,
  _swigc__p_f_p_cpxserializer_int__intArray,
  _swigc__p_f_p_cpxserializer_long_long__int,
  _swigc__p_f_p_cpxserializer_long_long__intArray,
  _swigc__p_f_p_cpxserializer_long_long_p_q_const__double__int,
  _swigc__p_f_p_cpxserializer_long_long_p_q_const__double__intArray,
  _swigc__p_f_p_cpxserializer_long_long_p_q_const__float__int,
  _swigc__p_f_p_cpxserializer_long_long_p_q_const__float__intArray,
  _swigc__p_f_p_cpxserializer_long_long_p_q_const__int__int,
  _swigc__p_f_p_cpxserializer_long_long_p_q_const__int__intArray,
  _swigc__p_f_p_cpxserializer_long_long_p_q_const__long_long__int,
  _swigc__p_f_p_cpxserializer_long_long_p_q_const__long_long__intArray,
  _swigc__p_f_p_cpxserializer_long_long_p_q_const__short__int,
  _swigc__p_f_p_cpxserializer_long_long_p_q_const__short__intArray,
  _swigc__p_f_p_cpxserializer_long_long_p_q_const__signed_char__int,
  _swigc__p_f_p_cpxserializer_long_long_p_q_const__signed_char__intArray,
  _swigc__p_f_p_cpxserializer_short__int,
  _swigc__p_f_p_cpxserializer_short__intArray,
  _swigc__p_f_p_cpxserializer_signed_char__int,
  _swigc__p_f_p_cpxserializer_signed_char__intArray,
  _swigc__p_f_p_q_const__char_p_cpxiodevice__int,
  _swigc__p_f_p_q_const__char_p_cpxiodevice__intArray,
  _swigc__p_f_p_q_const__cpxenv_int_p_void__int,
  _swigc__p_f_p_q_const__cpxenv_int_p_void__intArray,
  _swigc__p_f_p_q_const__cpxenv_int_p_void_int_p_void__void,
  _swigc__p_f_p_q_const__cpxenv_p_void_int_p_void__int,
  _swigc__p_f_p_q_const__cpxenv_p_void_int_p_void__intArray,
  _swigc__p_f_p_q_const__cpxenv_p_void_int_p_void_double_p_double_p_int_p_int__int,
  _swigc__p_f_p_q_const__cpxenv_p_void_int_p_void_double_p_double_p_int_p_int__intArray,
  _swigc__p_f_p_q_const__cpxenv_p_void_int_p_void_int_int_int_int_p_q_const__int_p_q_const__int_p_q_const__char_p_q_const__double_p_q_const__double_p_int__int,
  _swigc__p_f_p_q_const__cpxenv_p_void_int_p_void_int_int_int_int_p_q_const__int_p_q_const__int_p_q_const__char_p_q_const__double_p_q_const__double_p_int__intArray,
  _swigc__p_f_p_q_const__cpxenv_p_void_int_p_void_p_double_p_double_p_int_p_int__int,
  _swigc__p_f_p_q_const__cpxenv_p_void_int_p_void_p_double_p_double_p_int_p_int__intArray,
  _swigc__p_f_p_q_const__cpxenv_p_void_int_p_void_p_int__int,
  _swigc__p_f_p_q_const__cpxenv_p_void_int_p_void_p_int__intArray,
  _swigc__p_f_p_q_const__cpxenv_p_void_int_p_void_p_int_p_int__int,
  _swigc__p_f_p_q_const__cpxenv_p_void_int_p_void_p_int_p_int__intArray,
  _swigc__p_f_p_q_const__void_size_t_p_cpxiodevice__size_t,
  _swigc__p_f_p_void_long_long_p_char__p_char,
  _swigc__p_f_p_void_p_q_const__char__void,
  _swigc__p_f_p_void_size_t_p_cpxiodevice__size_t,
  _swigc__p_int,
  _swigc__p_intArray,
  _swigc__p_key_type,
  _swigc__p_long_long,
  _swigc__p_mapped_type,
  _swigc__p_p_ASL,
  _swigc__p_p_PyObject,
  _swigc__p_p_char,
  _swigc__p_p_cpxchannel,
  _swigc__p_p_cpxdeserializer,
  _swigc__p_p_cpxenv,
  _swigc__p_p_cpxlp,
  _swigc__p_p_cpxnet,
  _swigc__p_p_cpxserializer,
  _swigc__p_p_f_int_p_q_const__char_p_void__int,
  _swigc__p_p_f_int_p_q_const__char_p_void__intArray,
  _swigc__p_p_f_p_cpxcallbackcontext_long_long_p_void__int,
  _swigc__p_p_f_p_cpxcallbackcontext_long_long_p_void__intArray,
  _swigc__p_p_f_p_q_const__cpxenv_int_p_void_int_p_void__void,
  _swigc__p_p_f_p_q_const__cpxenv_p_void_int_p_void__int,
  _swigc__p_p_f_p_q_const__cpxenv_p_void_int_p_void__intArray,
  _swigc__p_p_f_p_q_const__cpxenv_p_void_int_p_void_double_p_double_p_int_p_int__int,
  _swigc__p_p_f_p_q_const__cpxenv_p_void_int_p_void_double_p_double_p_int_p_int__intArray,
  _swigc__p_p_f_p_q_const__cpxenv_p_void_int_p_void_int_int_int_int_p_q_const__int_p_q_const__int_p_q_const__char_p_q_const__double_p_q_const__double_p_int__int,
  _swigc__p_p_f_p_q_const__cpxenv_p_void_int_p_void_int_int_int_int_p_q_const__int_p_q_const__int_p_q_const__char_p_q_const__double_p_q_const__double_p_int__intArray,
  _swigc__p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_double_p_double_p_int_p_int__int,
  _swigc__p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_double_p_double_p_int_p_int__intArray,
  _swigc__p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_int__int,
  _swigc__p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_int__intArray,
  _swigc__p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_int_p_int__int,
  _swigc__p_p_f_p_q_const__cpxenv_p_void_int_p_void_p_int_p_int__intArray,
  _swigc__p_p_paramset,
  _swigc__p_p_void,
  _swigc__p_paramset,
  _swigc__p_pthread_mutex_t,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_size_type,
  _swigc__p_std__allocatorT_double_t,
  _swigc__p_std__allocatorT_std__pairT_int_const_std__string_t_t,
  _swigc__p_std__allocatorT_std__pairT_std__string_const_double_t_t,
  _swigc__p_std__allocatorT_std__pairT_std__string_const_int_t_t,
  _swigc__p_std__allocatorT_std__string_t,
  _swigc__p_std__invalid_argument,
  _swigc__p_std__lessT_int_t,
  _swigc__p_std__lessT_std__string_t,
  _swigc__p_std__mapT_int_std__string_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__string_t_t_t,
  _swigc__p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t,
  _swigc__p_std__mapT_std__string_int_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_int_t_t_t,
  _swigc__p_std__runtime_error,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_ampls__Constraint_std__allocatorT_ampls__Constraint_t_t,
  _swigc__p_std__vectorT_ampls__Entity_p_std__allocatorT_ampls__Entity_p_t_t,
  _swigc__p_std__vectorT_ampls__Variable_std__allocatorT_ampls__Variable_t_t,
  _swigc__p_std__vectorT_double_std__allocatorT_double_t_t,
  _swigc__p_std__vectorT_int_std__allocatorT_int_t_t,
  _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  _swigc__p_swig__SwigPyIterator,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_value_type,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
static PyTypeObject *builtin_bases[3];

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;
    if (!type_init) {
      const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(NULL, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* ob_size */
#endif
        "swigvarlink",                      /* tp_name */
        sizeof(swig_varlinkobject),         /* tp_basicsize */
        0,                                  /* tp_itemsize */
        (destructor) swig_varlink_dealloc,  /* tp_dealloc */
        0,                                  /* tp_print */
        (getattrfunc) swig_varlink_getattr, /* tp_getattr */
        (setattrfunc) swig_varlink_setattr, /* tp_setattr */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
        0,                                  /* tp_del */
        0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
        0,                                  /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
        0,                                  /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
        0,                                  /* tp_print */
#endif
#ifdef COUNT_ALLOCS
        0,                                  /* tp_allocs */
        0,                                  /* tp_frees */
        0,                                  /* tp_maxalloc */
        0,                                  /* tp_prev */
        0                                   /* tp_next */
#endif
      };
      varlink_type = tmp;
      type_init = 1;
      if (PyType_Ready(&varlink_type) < 0)
      return NULL;
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, const char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        memcpy(gv->name, name, size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *globals = 0;
    if (!globals) {
      globals = SWIG_newvarlink();
    }
    return globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (!c) continue;
      c = strstr(c, "swig_ptr: ");
      if (c) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              memcpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              memcpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
  /* -----------------------------------------------------------------------------
   * Method creation and docstring support functions
   * ----------------------------------------------------------------------------- */
  
  /* -----------------------------------------------------------------------------
   * Function to find the method definition with the correct docstring for the
   * proxy module as opposed to the low-level API
   * ----------------------------------------------------------------------------- */
  
  SWIGINTERN PyMethodDef *SWIG_PythonGetProxyDoc(const char *name) {
    /* Find the function in the modified method table */
    size_t offset = 0;
    int found = 0;
    while (SwigMethods_proxydocs[offset].ml_meth != NULL) {
      if (strcmp(SwigMethods_proxydocs[offset].ml_name, name) == 0) {
        found = 1;
        break;
      }
      offset++;
    }
    /* Use the copy with the modified docstring if available */
    return found ? &SwigMethods_proxydocs[offset] : NULL;
  }
  
  /* -----------------------------------------------------------------------------
   * Wrapper of PyInstanceMethod_New() used in Python 3
   * It is exported to the generated module, used for -fastproxy
   * ----------------------------------------------------------------------------- */
  
  SWIGINTERN PyObject *SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func) {
    if (PyCFunction_Check(func)) {
      PyCFunctionObject *funcobj = (PyCFunctionObject *)func;
      PyMethodDef *ml = SWIG_PythonGetProxyDoc(funcobj->m_ml->ml_name);
      if (ml)
      func = PyCFunction_NewEx(ml, funcobj->m_self, funcobj->m_module);
    }
#if PY_VERSION_HEX >= 0x03000000
    return PyInstanceMethod_New(func);
#else
    return PyMethod_New(func, NULL, NULL);
#endif
  }
  
  /* -----------------------------------------------------------------------------
   * Wrapper of PyStaticMethod_New()
   * It is exported to the generated module, used for -fastproxy
   * ----------------------------------------------------------------------------- */
  
  SWIGINTERN PyObject *SWIG_PyStaticMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func) {
    if (PyCFunction_Check(func)) {
      PyCFunctionObject *funcobj = (PyCFunctionObject *)func;
      PyMethodDef *ml = SWIG_PythonGetProxyDoc(funcobj->m_ml->ml_name);
      if (ml)
      func = PyCFunction_NewEx(ml, funcobj->m_self, funcobj->m_module);
    }
    return PyStaticMethod_New(func);
  }
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md, *globals;
  
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
    PyModuleDef_HEAD_INIT,
    SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    SwigPyObject_own,
    SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  PyTypeObject *swigpyobject;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  PyObject *self = 0;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  (void)self;
  
  /* Metaclass is used to implement static member variables */
  metatype = SwigPyObjectType();
  assert(metatype);
#endif
  
  (void)globals;
  
  /* Create singletons now to avoid potential deadlocks with multi-threaded usage after module initialization */
  SWIG_This();
  SWIG_Python_TypeCache();
  SwigPyPacked_type();
#ifndef SWIGPYTHON_BUILTIN
  SwigPyObject_type();
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule(SWIG_name, SwigMethods);
#endif
  
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  swigpyobject = SwigPyObject_TypeOnce();
  
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = swigpyobject;
  } else if (swigpyobject->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  
  /* type '::dblArray' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__dblArray_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'dblArray'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "dblArray", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "dblArray");
  d = md;
  
  /* type '::intArray' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__intArray_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'intArray'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "intArray", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "intArray");
  d = md;
  
  /* type 'swig::SwigPyIterator' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__swig__SwigPyIterator_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'SwigPyIterator'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "SwigPyIterator", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "SwigPyIterator");
  d = md;
  
  /* type 'std::map< std::string,int >' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__std__mapT_std__string_int_t_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'map_string_int'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "map_string_int", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "map_string_int");
  d = md;
  
  /* type 'std::map< int,std::string >' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__std__mapT_int_std__string_t_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'map_int_string'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "map_int_string", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "map_int_string");
  d = md;
  
  /* type 'std::map< std::string,double >' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__std__mapT_std__string_double_t_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'map_string_double'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "map_string_double", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "map_string_double");
  d = md;
  
  /* type 'std::vector< std::string >' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__std__vectorT_std__string_t_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  
  // thread safe initialization
  swig::container_owner_attribute();
  
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'vector_string'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "vector_string", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "vector_string");
  d = md;
  
  /* type 'std::vector< double >' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__std__vectorT_double_t_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'vector_double'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "vector_double", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "vector_double");
  d = md;
  
  /* type 'ampls::AMPLSolverException' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__ampls__AMPLSolverException_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'AMPLSolverException'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "AMPLSolverException", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "AMPLSolverException");
  d = md;
  
  /* type 'ampls::Variant' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__ampls__Variant_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'Variant'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "Variant", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "Variant");
  d = md;
  
  /* type 'ampls::VarType' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__ampls__VarType_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "Continuous",SWIG_From_int(static_cast< int >(ampls::VarType::Continuous)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "Binary",SWIG_From_int(static_cast< int >(ampls::VarType::Binary)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "Integer",SWIG_From_int(static_cast< int >(ampls::VarType::Integer)));
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'VarType'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "VarType", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "VarType");
  d = md;
  
  /* type 'ampls::SolverParams' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__ampls__SolverParams_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "DBL_MIPGap",SWIG_From_int(static_cast< int >(ampls::SolverParams::DBL_MIPGap)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "DBL_TimeLimit",SWIG_From_int(static_cast< int >(ampls::SolverParams::DBL_TimeLimit)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "INT_SolutionLimit",SWIG_From_int(static_cast< int >(ampls::SolverParams::INT_SolutionLimit)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "INT_LP_Algorithm",SWIG_From_int(static_cast< int >(ampls::SolverParams::INT_LP_Algorithm)));
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'SolverParams'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "SolverParams", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "SolverParams");
  d = md;
  
  /* type 'ampls::LPAlgorithms' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__ampls__LPAlgorithms_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "Auto",SWIG_From_int(static_cast< int >(ampls::LPAlgorithms::Auto)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PrimalSimplex",SWIG_From_int(static_cast< int >(ampls::LPAlgorithms::PrimalSimplex)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "DualSimplex",SWIG_From_int(static_cast< int >(ampls::LPAlgorithms::DualSimplex)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "Barrier",SWIG_From_int(static_cast< int >(ampls::LPAlgorithms::Barrier)));
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'LPAlgorithms'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "LPAlgorithms", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "LPAlgorithms");
  d = md;
  
  /* type 'ampls::Where' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__ampls__Where_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "MSG",SWIG_From_int(static_cast< int >(ampls::Where::MSG)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PRESOLVE",SWIG_From_int(static_cast< int >(ampls::Where::PRESOLVE)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "LPSOLVE",SWIG_From_int(static_cast< int >(ampls::Where::LPSOLVE)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "MIPNODE",SWIG_From_int(static_cast< int >(ampls::Where::MIPNODE)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "MIPSOL",SWIG_From_int(static_cast< int >(ampls::Where::MIPSOL)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "MIP",SWIG_From_int(static_cast< int >(ampls::Where::MIP)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "NOTMAPPED",SWIG_From_int(static_cast< int >(ampls::Where::NOTMAPPED)));
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'Where'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "Where", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "Where");
  d = md;
  
  /* type 'ampls::Value' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__ampls__Value_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "OBJ",SWIG_From_int(static_cast< int >(ampls::Value::OBJ)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PRE_DELCOLS",SWIG_From_int(static_cast< int >(ampls::Value::PRE_DELCOLS)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PRE_DELROWS",SWIG_From_int(static_cast< int >(ampls::Value::PRE_DELROWS)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PRE_COEFFCHANGED",SWIG_From_int(static_cast< int >(ampls::Value::PRE_COEFFCHANGED)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ITERATIONS",SWIG_From_int(static_cast< int >(ampls::Value::ITERATIONS)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "RUNTIME",SWIG_From_int(static_cast< int >(ampls::Value::RUNTIME)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "MIP_RELATIVEGAP",SWIG_From_int(static_cast< int >(ampls::Value::MIP_RELATIVEGAP)));
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'Value'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "Value", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "Value");
  d = md;
  
  /* type 'ampls::CutDirection' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__ampls__CutDirection_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "EQ",SWIG_From_int(static_cast< int >(ampls::CutDirection::EQ)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "GE",SWIG_From_int(static_cast< int >(ampls::CutDirection::GE)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "LE",SWIG_From_int(static_cast< int >(ampls::CutDirection::LE)));
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'CutDirection'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "CutDirection", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "CutDirection");
  d = md;
  
  /* type 'ampls::Status' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__ampls__Status_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "UNKNOWN",SWIG_From_int(static_cast< int >(ampls::Status::UNKNOWN)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "OPTIMAL",SWIG_From_int(static_cast< int >(ampls::Status::OPTIMAL)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "INFEASIBLE",SWIG_From_int(static_cast< int >(ampls::Status::INFEASIBLE)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "UNBOUNDED",SWIG_From_int(static_cast< int >(ampls::Status::UNBOUNDED)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "LIMIT_ITERATION",SWIG_From_int(static_cast< int >(ampls::Status::LIMIT_ITERATION)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "LIMIT_NODE",SWIG_From_int(static_cast< int >(ampls::Status::LIMIT_NODE)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "LIMIT_TIME",SWIG_From_int(static_cast< int >(ampls::Status::LIMIT_TIME)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "LIMIT_SOLUTION",SWIG_From_int(static_cast< int >(ampls::Status::LIMIT_SOLUTION)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "INTERRUPTED",SWIG_From_int(static_cast< int >(ampls::Status::INTERRUPTED)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "NOTMAPPED",SWIG_From_int(static_cast< int >(ampls::Status::NOTMAPPED)));
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'Status'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "Status", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "Status");
  d = md;
  
  /* type 'ampls::Entity' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__ampls__Entity_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'Entity'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "Entity", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "Entity");
  d = md;
  
  /* type 'ampls::Constraint' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__ampls__Constraint_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_ampls__Entity");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData *) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData *) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'Constraint' as base 'ampls::Entity' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'Constraint'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "Constraint", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "Constraint");
  d = md;
  
  /* type 'ampls::Variable' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__ampls__Variable_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_ampls__Entity");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData *) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData *) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'Variable' as base 'ampls::Entity' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'Variable'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "Variable", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "Variable");
  d = md;
  
  /* type 'ampls::impl::Records' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__ampls__impl__Records_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'Records'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "Records", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "Records");
  d = md;
  
  /* type 'ampls::impl::AMPLMutex' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__ampls__impl__AMPLMutex_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'AMPLMutex'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "AMPLMutex", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "AMPLMutex");
  d = md;
  
  /* type 'ampls::impl::BaseCallback' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__ampls__impl__BaseCallback_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'BaseCallback'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "BaseCallback", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "BaseCallback");
  d = md;
  
  /* type 'ampls::GenericCallback' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__ampls__GenericCallback_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_ampls__impl__BaseCallback");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData *) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData *) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'GenericCallback' as base 'ampls::impl::BaseCallback' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'GenericCallback'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "GenericCallback", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "GenericCallback");
  d = md;
  
  /* type 'ampls::AMPLModel' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__ampls__AMPLModel_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'AMPLModel'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "AMPLModel", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "AMPLModel");
  d = md;
  
  /* type 'ampls::impl::SolverDriver< ampls::CPLEXModel >' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__ampls__impl__SolverDriverT_ampls__CPLEXModel_t_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'SolverDriverCPLEX'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "SolverDriverCPLEX", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "SolverDriverCPLEX");
  d = md;
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXSIZE_BITS",SWIG_From_int(static_cast< int >(64)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_FEATURES_H",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_FEATURE_REMOTE_OBJECT",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_FEATURE_DISTRIBUTED_MIP",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CPXAUTOINTTYPES_H_H",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXBYTE_DEFINED",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXINT_DEFINED",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXLONG_DEFINED",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXSHORT_DEFINED",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXULONG_DEFINED",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_STR_PARAM_MAX",SWIG_From_int(static_cast< int >(512)));
  
  /* type '::cpxiodevice' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__cpxiodevice_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'cpxiodevice'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "cpxiodevice", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "cpxiodevice");
  d = md;
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_VERSION",SWIG_From_int(static_cast< int >(20010000)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_VERSION_VERSION",SWIG_From_int(static_cast< int >(20)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_VERSION_RELEASE",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_VERSION_MODIFICATION",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_VERSION_FIX",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_INFBOUND",SWIG_From_double(static_cast< double >(1.0E+20)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MINBOUND",SWIG_From_double(static_cast< double >(1.0E-13)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PWL_MAXSLOPE",SWIG_From_double(static_cast< double >(1.0E+6)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PWL_MINSLOPE",SWIG_From_double(static_cast< double >(1.0E-6)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAMTYPE_NONE",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAMTYPE_INT",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAMTYPE_DOUBLE",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAMTYPE_STRING",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAMTYPE_LONG",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_NO_SOLN",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_AUTO_SOLN",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_BASIC_SOLN",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_NONBASIC_SOLN",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PRIMAL_SOLN",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PRECOL_LOW",SWIG_From_int(static_cast< int >(-1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PRECOL_UP",SWIG_From_int(static_cast< int >(-2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PRECOL_FIX",SWIG_From_int(static_cast< int >(-3)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PRECOL_AGG",SWIG_From_int(static_cast< int >(-4)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PRECOL_OTHER",SWIG_From_int(static_cast< int >(-5)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PREROW_RED",SWIG_From_int(static_cast< int >(-1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PREROW_AGG",SWIG_From_int(static_cast< int >(-2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PREROW_OTHER",SWIG_From_int(static_cast< int >(-3)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_AUTO",SWIG_From_int(static_cast< int >(-1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_ON",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_OFF",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MAX",SWIG_From_int(static_cast< int >(-1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MIN",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_DATACHECK_OFF",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_DATACHECK_WARN",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_DATACHECK_ASSIST",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PPRIIND_PARTIAL",SWIG_From_int(static_cast< int >(-1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PPRIIND_AUTO",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PPRIIND_DEVEX",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PPRIIND_STEEP",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PPRIIND_STEEPQSTART",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PPRIIND_FULL",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_DPRIIND_AUTO",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_DPRIIND_FULL",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_DPRIIND_STEEP",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_DPRIIND_FULLSTEEP",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_DPRIIND_STEEPQSTART",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_DPRIIND_DEVEX",SWIG_From_int(static_cast< int >(5)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARALLEL_DETERMINISTIC",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARALLEL_AUTO",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARALLEL_OPPORTUNISTIC",SWIG_From_int(static_cast< int >(-1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_WRITELEVEL_AUTO",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_WRITELEVEL_ALLVARS",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_WRITELEVEL_DISCRETEVARS",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_WRITELEVEL_NONZEROVARS",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_WRITELEVEL_NONZERODISCRETEVARS",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_OPTIMALITYTARGET_AUTO",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_OPTIMALITYTARGET_OPTIMALCONVEX",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_OPTIMALITYTARGET_FIRSTORDER",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_OPTIMALITYTARGET_OPTIMALGLOBAL",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_ALG_NONE",SWIG_From_int(static_cast< int >(-1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_ALG_AUTOMATIC",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_ALG_PRIMAL",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_ALG_DUAL",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_ALG_NET",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_ALG_BARRIER",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_ALG_SIFTING",SWIG_From_int(static_cast< int >(5)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_ALG_CONCURRENT",SWIG_From_int(static_cast< int >(6)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_ALG_BAROPT",SWIG_From_int(static_cast< int >(7)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_ALG_PIVOTIN",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_ALG_PIVOTOUT",SWIG_From_int(static_cast< int >(9)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_ALG_PIVOT",SWIG_From_int(static_cast< int >(10)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_ALG_FEASOPT",SWIG_From_int(static_cast< int >(11)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_ALG_MIP",SWIG_From_int(static_cast< int >(12)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_ALG_BENDERS",SWIG_From_int(static_cast< int >(13)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_ALG_MULTIOBJ",SWIG_From_int(static_cast< int >(14)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_ALG_ROBUST",SWIG_From_int(static_cast< int >(15)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_AT_LOWER",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_BASIC",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_AT_UPPER",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_FREE_SUPER",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_NO_VARIABLE",SWIG_From_int(static_cast< int >(2100000000)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CONTINUOUS",SWIG_From_char(static_cast< char >('C')));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_BINARY",SWIG_From_char(static_cast< char >('B')));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_INTEGER",SWIG_From_char(static_cast< char >('I')));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_SEMICONT",SWIG_From_char(static_cast< char >('S')));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_SEMIINT",SWIG_From_char(static_cast< char >('N')));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PREREDUCE_PRIMALANDDUAL",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PREREDUCE_DUALONLY",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PREREDUCE_PRIMALONLY",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PREREDUCE_NOPRIMALORDUAL",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PREREFORM_ALL",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PREREFORM_INTERFERE_CRUSH",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PREREFORM_INTERFERE_UNCRUSH",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PREREFORM_NONE",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CONFLICT_EXCLUDED",SWIG_From_int(static_cast< int >(-1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CONFLICT_POSSIBLE_MEMBER",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CONFLICT_POSSIBLE_LB",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CONFLICT_POSSIBLE_UB",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CONFLICT_MEMBER",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CONFLICT_LB",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CONFLICT_UB",SWIG_From_int(static_cast< int >(5)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CONFLICTALG_AUTO",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CONFLICTALG_FAST",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CONFLICTALG_PROPAGATE",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CONFLICTALG_PRESOLVE",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CONFLICTALG_IIS",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CONFLICTALG_LIMITSOLVE",SWIG_From_int(static_cast< int >(5)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CONFLICTALG_SOLVE",SWIG_From_int(static_cast< int >(6)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPROB_LP",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPROB_MILP",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPROB_FIXEDMILP",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPROB_NODELP",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPROB_QP",SWIG_From_int(static_cast< int >(5)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPROB_MIQP",SWIG_From_int(static_cast< int >(7)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPROB_FIXEDMIQP",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPROB_NODEQP",SWIG_From_int(static_cast< int >(9)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPROB_QCP",SWIG_From_int(static_cast< int >(10)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPROB_MIQCP",SWIG_From_int(static_cast< int >(11)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPROB_NODEQCP",SWIG_From_int(static_cast< int >(12)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_LPREADER_LEGACY",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_LPREADER_NEW",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_ALL_MIN",SWIG_From_int(static_cast< int >(1000)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_ALL_MAX",SWIG_From_int(static_cast< int >(6000)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_PRIMAL",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_DUAL",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_NETWORK",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_PRIMAL_CROSSOVER",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_DUAL_CROSSOVER",SWIG_From_int(static_cast< int >(5)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_BARRIER",SWIG_From_int(static_cast< int >(6)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_PRESOLVE",SWIG_From_int(static_cast< int >(7)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_QPBARRIER",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_QPSIMPLEX",SWIG_From_int(static_cast< int >(9)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_TUNING",SWIG_From_int(static_cast< int >(10)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_PRIMAL_OBJ",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_DUAL_OBJ",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_PRIMAL_INFMEAS",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_DUAL_INFMEAS",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_PRIMAL_FEAS",SWIG_From_int(static_cast< int >(5)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_DUAL_FEAS",SWIG_From_int(static_cast< int >(6)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_ITCOUNT",SWIG_From_int(static_cast< int >(7)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_CROSSOVER_PPUSH",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_CROSSOVER_PEXCH",SWIG_From_int(static_cast< int >(9)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_CROSSOVER_DPUSH",SWIG_From_int(static_cast< int >(10)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_CROSSOVER_DEXCH",SWIG_From_int(static_cast< int >(11)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_CROSSOVER_SBCNT",SWIG_From_int(static_cast< int >(12)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_PRESOLVE_ROWSGONE",SWIG_From_int(static_cast< int >(13)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_PRESOLVE_COLSGONE",SWIG_From_int(static_cast< int >(14)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_PRESOLVE_AGGSUBST",SWIG_From_int(static_cast< int >(15)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_PRESOLVE_COEFFS",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_USER_PROBLEM",SWIG_From_int(static_cast< int >(17)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_TUNING_PROGRESS",SWIG_From_int(static_cast< int >(18)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_ENDTIME",SWIG_From_int(static_cast< int >(19)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_ITCOUNT_LONG",SWIG_From_int(static_cast< int >(20)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_CROSSOVER_PPUSH_LONG",SWIG_From_int(static_cast< int >(21)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_CROSSOVER_PEXCH_LONG",SWIG_From_int(static_cast< int >(22)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_CROSSOVER_DPUSH_LONG",SWIG_From_int(static_cast< int >(23)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_CROSSOVER_DEXCH_LONG",SWIG_From_int(static_cast< int >(24)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_PRESOLVE_AGGSUBST_LONG",SWIG_From_int(static_cast< int >(25)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_PRESOLVE_COEFFS_LONG",SWIG_From_int(static_cast< int >(26)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_ENDDETTIME",SWIG_From_int(static_cast< int >(27)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_STARTTIME",SWIG_From_int(static_cast< int >(28)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_STARTDETTIME",SWIG_From_int(static_cast< int >(29)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_TUNE_AVERAGE",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_TUNE_MINMAX",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_TUNE_ABORT",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_TUNE_TILIM",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_TUNE_DETTILIM",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_FEASOPT_MIN_SUM",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_FEASOPT_OPT_SUM",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_FEASOPT_MIN_INF",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_FEASOPT_OPT_INF",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_FEASOPT_MIN_QUAD",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_FEASOPT_OPT_QUAD",SWIG_From_int(static_cast< int >(5)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_BENDERSSTRATEGY_OFF",SWIG_From_int(static_cast< int >(-1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_BENDERSSTRATEGY_AUTO",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_BENDERSSTRATEGY_USER",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_BENDERSSTRATEGY_WORKERS",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_BENDERSSTRATEGY_FULL",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_ANNOTATIONDATA_LONG",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_ANNOTATIONDATA_DOUBLE",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_ANNOTATIONOBJ_OBJ",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_ANNOTATIONOBJ_COL",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_ANNOTATIONOBJ_ROW",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_ANNOTATIONOBJ_SOS",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_ANNOTATIONOBJ_IND",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_ANNOTATIONOBJ_QC",SWIG_From_int(static_cast< int >(5)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_ANNOTATIONOBJ_LAST",SWIG_From_int(static_cast< int >(6)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXIIS_COMPLETE",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXIIS_PARTIAL",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXIIS_AT_LOWER",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXIIS_FIXED",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXIIS_AT_UPPER",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_BARORDER_AUTO",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_BARORDER_AMD",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_BARORDER_AMF",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_BARORDER_ND",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MIPEMPHASIS_BALANCED",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MIPEMPHASIS_FEASIBILITY",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MIPEMPHASIS_OPTIMALITY",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MIPEMPHASIS_BESTBOUND",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MIPEMPHASIS_HIDDENFEAS",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MIPEMPHASIS_HEURISTIC",SWIG_From_int(static_cast< int >(5)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_TYPE_VAR",SWIG_From_char(static_cast< char >('0')));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_TYPE_SOS1",SWIG_From_char(static_cast< char >('1')));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_TYPE_SOS2",SWIG_From_char(static_cast< char >('2')));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_TYPE_USER",SWIG_From_char(static_cast< char >('X')));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_TYPE_ANY",SWIG_From_char(static_cast< char >('A')));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_VARSEL_MININFEAS",SWIG_From_int(static_cast< int >(-1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_VARSEL_DEFAULT",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_VARSEL_MAXINFEAS",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_VARSEL_PSEUDO",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_VARSEL_STRONG",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_VARSEL_PSEUDOREDUCED",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_NODESEL_DFS",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_NODESEL_BESTBOUND",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_NODESEL_BESTEST",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_NODESEL_BESTEST_ALT",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MIPORDER_COST",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MIPORDER_BOUNDS",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MIPORDER_SCALEDCOST",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_BRANCH_GLOBAL",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_BRANCH_DOWN",SWIG_From_int(static_cast< int >(-1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_BRANCH_UP",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_BRDIR_DOWN",SWIG_From_int(static_cast< int >(-1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_BRDIR_AUTO",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_BRDIR_UP",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CUT_COVER",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CUT_GUBCOVER",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CUT_FLOWCOVER",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CUT_CLIQUE",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CUT_FRAC",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CUT_MIR",SWIG_From_int(static_cast< int >(5)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CUT_FLOWPATH",SWIG_From_int(static_cast< int >(6)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CUT_DISJ",SWIG_From_int(static_cast< int >(7)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CUT_IMPLBD",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CUT_ZEROHALF",SWIG_From_int(static_cast< int >(9)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CUT_MCF",SWIG_From_int(static_cast< int >(10)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CUT_LOCALCOVER",SWIG_From_int(static_cast< int >(11)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CUT_TIGHTEN",SWIG_From_int(static_cast< int >(12)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CUT_OBJDISJ",SWIG_From_int(static_cast< int >(13)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CUT_LANDP",SWIG_From_int(static_cast< int >(14)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CUT_USER",SWIG_From_int(static_cast< int >(15)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CUT_TABLE",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CUT_SOLNPOOL",SWIG_From_int(static_cast< int >(17)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CUT_LOCALIMPLBD",SWIG_From_int(static_cast< int >(18)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CUT_BQP",SWIG_From_int(static_cast< int >(19)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CUT_RLT",SWIG_From_int(static_cast< int >(20)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CUT_BENDERS",SWIG_From_int(static_cast< int >(21)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CUT_NUM_TYPES",SWIG_From_int(static_cast< int >(22)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MIPSEARCH_AUTO",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MIPSEARCH_TRADITIONAL",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MIPSEARCH_DYNAMIC",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MIPKAPPA_OFF",SWIG_From_int(static_cast< int >(-1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MIPKAPPA_AUTO",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MIPKAPPA_SAMPLE",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MIPKAPPA_FULL",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MIPSTART_AUTO",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MIPSTART_CHECKFEAS",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MIPSTART_SOLVEFIXED",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MIPSTART_SOLVEMIP",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MIPSTART_REPAIR",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MIPSTART_NOCHECK",SWIG_From_int(static_cast< int >(5)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_MIP",SWIG_From_int(static_cast< int >(101)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_MIP_BRANCH",SWIG_From_int(static_cast< int >(102)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_MIP_NODE",SWIG_From_int(static_cast< int >(103)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_MIP_HEURISTIC",SWIG_From_int(static_cast< int >(104)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_MIP_SOLVE",SWIG_From_int(static_cast< int >(105)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_MIP_CUT_LOOP",SWIG_From_int(static_cast< int >(106)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_MIP_PROBE",SWIG_From_int(static_cast< int >(107)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_MIP_FRACCUT",SWIG_From_int(static_cast< int >(108)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_MIP_DISJCUT",SWIG_From_int(static_cast< int >(109)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_MIP_FLOWMIR",SWIG_From_int(static_cast< int >(110)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_MIP_INCUMBENT_NODESOLN",SWIG_From_int(static_cast< int >(111)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_MIP_DELETENODE",SWIG_From_int(static_cast< int >(112)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_MIP_BRANCH_NOSOLN",SWIG_From_int(static_cast< int >(113)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_MIP_CUT_LAST",SWIG_From_int(static_cast< int >(114)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_MIP_CUT_FEAS",SWIG_From_int(static_cast< int >(115)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_MIP_CUT_UNBD",SWIG_From_int(static_cast< int >(116)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_MIP_INCUMBENT_HEURSOLN",SWIG_From_int(static_cast< int >(117)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_MIP_INCUMBENT_USERSOLN",SWIG_From_int(static_cast< int >(118)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_MIP_INCUMBENT_MIPSTART",SWIG_From_int(static_cast< int >(119)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_BEST_INTEGER",SWIG_From_int(static_cast< int >(101)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_BEST_REMAINING",SWIG_From_int(static_cast< int >(102)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_NODE_COUNT",SWIG_From_int(static_cast< int >(103)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_NODES_LEFT",SWIG_From_int(static_cast< int >(104)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_MIP_ITERATIONS",SWIG_From_int(static_cast< int >(105)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_CUTOFF",SWIG_From_int(static_cast< int >(106)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_CLIQUE_COUNT",SWIG_From_int(static_cast< int >(107)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_COVER_COUNT",SWIG_From_int(static_cast< int >(108)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_MIP_FEAS",SWIG_From_int(static_cast< int >(109)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_FLOWCOVER_COUNT",SWIG_From_int(static_cast< int >(110)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_GUBCOVER_COUNT",SWIG_From_int(static_cast< int >(111)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_IMPLBD_COUNT",SWIG_From_int(static_cast< int >(112)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_PROBE_PHASE",SWIG_From_int(static_cast< int >(113)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_PROBE_PROGRESS",SWIG_From_int(static_cast< int >(114)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_FRACCUT_COUNT",SWIG_From_int(static_cast< int >(115)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_FRACCUT_PROGRESS",SWIG_From_int(static_cast< int >(116)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_DISJCUT_COUNT",SWIG_From_int(static_cast< int >(117)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_DISJCUT_PROGRESS",SWIG_From_int(static_cast< int >(118)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_FLOWPATH_COUNT",SWIG_From_int(static_cast< int >(119)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_MIRCUT_COUNT",SWIG_From_int(static_cast< int >(120)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_FLOWMIR_PROGRESS",SWIG_From_int(static_cast< int >(121)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_ZEROHALFCUT_COUNT",SWIG_From_int(static_cast< int >(122)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_MY_THREAD_NUM",SWIG_From_int(static_cast< int >(123)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_USER_THREADS",SWIG_From_int(static_cast< int >(124)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_MIP_REL_GAP",SWIG_From_int(static_cast< int >(125)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_MCFCUT_COUNT",SWIG_From_int(static_cast< int >(126)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_KAPPA_STABLE",SWIG_From_int(static_cast< int >(127)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_KAPPA_SUSPICIOUS",SWIG_From_int(static_cast< int >(128)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_KAPPA_UNSTABLE",SWIG_From_int(static_cast< int >(129)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_KAPPA_ILLPOSED",SWIG_From_int(static_cast< int >(130)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_KAPPA_MAX",SWIG_From_int(static_cast< int >(131)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_KAPPA_ATTENTION",SWIG_From_int(static_cast< int >(132)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_LANDPCUT_COUNT",SWIG_From_int(static_cast< int >(133)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_USERCUT_COUNT",SWIG_From_int(static_cast< int >(134)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_TABLECUT_COUNT",SWIG_From_int(static_cast< int >(135)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_SOLNPOOLCUT_COUNT",SWIG_From_int(static_cast< int >(136)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_BENDERS_COUNT",SWIG_From_int(static_cast< int >(137)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_NODE_COUNT_LONG",SWIG_From_int(static_cast< int >(140)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_NODES_LEFT_LONG",SWIG_From_int(static_cast< int >(141)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_MIP_ITERATIONS_LONG",SWIG_From_int(static_cast< int >(142)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_LAZY_SOURCE",SWIG_From_int(static_cast< int >(143)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_NODE_SIINF",SWIG_From_int(static_cast< int >(201)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_NODE_NIINF",SWIG_From_int(static_cast< int >(202)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_NODE_ESTIMATE",SWIG_From_int(static_cast< int >(203)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_NODE_DEPTH",SWIG_From_int(static_cast< int >(204)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_NODE_OBJVAL",SWIG_From_int(static_cast< int >(205)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_NODE_TYPE",SWIG_From_int(static_cast< int >(206)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_NODE_VAR",SWIG_From_int(static_cast< int >(207)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_NODE_SOS",SWIG_From_int(static_cast< int >(208)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_NODE_SEQNUM",SWIG_From_int(static_cast< int >(209)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_NODE_USERHANDLE",SWIG_From_int(static_cast< int >(210)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_NODE_NODENUM",SWIG_From_int(static_cast< int >(211)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_NODE_SEQNUM_LONG",SWIG_From_int(static_cast< int >(220)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_NODE_NODENUM_LONG",SWIG_From_int(static_cast< int >(221)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_NODE_DEPTH_LONG",SWIG_From_int(static_cast< int >(222)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_SOS_TYPE",SWIG_From_int(static_cast< int >(240)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_SOS_SIZE",SWIG_From_int(static_cast< int >(241)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_SOS_IS_FEASIBLE",SWIG_From_int(static_cast< int >(242)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_SOS_MEMBER_INDEX",SWIG_From_int(static_cast< int >(244)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_SOS_MEMBER_REFVAL",SWIG_From_int(static_cast< int >(246)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_SOS_NUM",SWIG_From_int(static_cast< int >(247)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_IC_NUM",SWIG_From_int(static_cast< int >(260)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_IC_IMPLYING_VAR",SWIG_From_int(static_cast< int >(261)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_IC_IMPLIED_VAR",SWIG_From_int(static_cast< int >(262)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_IC_SENSE",SWIG_From_int(static_cast< int >(263)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_IC_COMPL",SWIG_From_int(static_cast< int >(264)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_IC_RHS",SWIG_From_int(static_cast< int >(265)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_INFO_IC_IS_FEASIBLE",SWIG_From_int(static_cast< int >(266)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_INCUMBENT_ID",SWIG_From_int(static_cast< int >(-1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_RAMPUP_DISABLED",SWIG_From_int(static_cast< int >(-1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_RAMPUP_AUTO",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_RAMPUP_DYNAMIC",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_RAMPUP_INFINITE",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_DEFAULT",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_FAIL",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_SET",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACK_ABORT_CUT_LOOP",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_USECUT_FORCE",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_USECUT_PURGE",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_USECUT_FILTER",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_INTEGER_FEASIBLE",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_INTEGER_INFEASIBLE",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_IMPLIED_INTEGER_FEASIBLE",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CON_LOWER_BOUND",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CON_UPPER_BOUND",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CON_LINEAR",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CON_QUADRATIC",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CON_SOS",SWIG_From_int(static_cast< int >(5)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CON_INDICATOR",SWIG_From_int(static_cast< int >(6)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CON_PWL",SWIG_From_int(static_cast< int >(7)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CON_ABS",SWIG_From_int(static_cast< int >(7)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CON_MINEXPR",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CON_MAXEXPR",SWIG_From_int(static_cast< int >(9)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CON_LAST_CONTYPE",SWIG_From_int(static_cast< int >(10)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_INDICATOR_IF",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_INDICATOR_ONLYIF",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_INDICATOR_IFANDONLYIF",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXNET_NO_DISPLAY_OBJECTIVE",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXNET_TRUE_OBJECTIVE",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXNET_PENALIZED_OBJECTIVE",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXNET_PRICE_AUTO",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXNET_PRICE_PARTIAL",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXNET_PRICE_MULT_PART",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXNET_PRICE_SORT_MULT_PART",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_NETFIND_PURE",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_NETFIND_REFLECT",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_NETFIND_SCALE",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_QCPDUALS_NO",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_QCPDUALS_IFPOSSIBLE",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_QCPDUALS_FORCE",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CPXAUTOCONSTANTS_H_H",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_BENDERS_ANNOTATION",SWIG_FromCharPtr("cpxBendersPartition"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_BENDERS_MASTERVALUE",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_BIGINT",SWIG_From_int(static_cast< int >(2100000000)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_BIGLONG",SWIG_From_long_SS_long(static_cast< long long >(9223372036800000000LL)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACKCONTEXT_BRANCHING",SWIG_From_int(static_cast< int >(0x0080)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACKCONTEXT_CANDIDATE",SWIG_From_int(static_cast< int >(0x0020)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACKCONTEXT_GLOBAL_PROGRESS",SWIG_From_int(static_cast< int >(0x0010)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACKCONTEXT_LOCAL_PROGRESS",SWIG_From_int(static_cast< int >(0x0008)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACKCONTEXT_RELAXATION",SWIG_From_int(static_cast< int >(0x0040)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACKCONTEXT_THREAD_DOWN",SWIG_From_int(static_cast< int >(0x0004)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CALLBACKCONTEXT_THREAD_UP",SWIG_From_int(static_cast< int >(0x0002)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_DUAL_OBJ",SWIG_From_int(static_cast< int >(41)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_EXACT_KAPPA",SWIG_From_int(static_cast< int >(51)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_KAPPA",SWIG_From_int(static_cast< int >(39)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_KAPPA_ATTENTION",SWIG_From_int(static_cast< int >(57)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_KAPPA_ILLPOSED",SWIG_From_int(static_cast< int >(55)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_KAPPA_MAX",SWIG_From_int(static_cast< int >(56)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_KAPPA_STABLE",SWIG_From_int(static_cast< int >(52)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_KAPPA_SUSPICIOUS",SWIG_From_int(static_cast< int >(53)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_KAPPA_UNSTABLE",SWIG_From_int(static_cast< int >(54)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_LAZYCONSTRAINTCALLBACK_HEUR",SWIG_From_int(static_cast< int >(117)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_LAZYCONSTRAINTCALLBACK_MIPSTART",SWIG_From_int(static_cast< int >(119)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_LAZYCONSTRAINTCALLBACK_NODE",SWIG_From_int(static_cast< int >(111)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_LAZYCONSTRAINTCALLBACK_USER",SWIG_From_int(static_cast< int >(118)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MAX_COMP_SLACK",SWIG_From_int(static_cast< int >(19)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MAX_DUAL_INFEAS",SWIG_From_int(static_cast< int >(5)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MAX_DUAL_RESIDUAL",SWIG_From_int(static_cast< int >(15)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MAX_INDSLACK_INFEAS",SWIG_From_int(static_cast< int >(49)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MAX_INT_INFEAS",SWIG_From_int(static_cast< int >(9)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MAX_PI",SWIG_From_int(static_cast< int >(25)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MAX_PRIMAL_INFEAS",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MAX_PRIMAL_RESIDUAL",SWIG_From_int(static_cast< int >(11)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MAX_PWLSLACK_INFEAS",SWIG_From_int(static_cast< int >(58)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MAX_QCPRIMAL_RESIDUAL",SWIG_From_int(static_cast< int >(43)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MAX_QCSLACK",SWIG_From_int(static_cast< int >(47)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MAX_QCSLACK_INFEAS",SWIG_From_int(static_cast< int >(45)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MAX_RED_COST",SWIG_From_int(static_cast< int >(29)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MAX_SCALED_DUAL_INFEAS",SWIG_From_int(static_cast< int >(6)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MAX_SCALED_DUAL_RESIDUAL",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MAX_SCALED_PI",SWIG_From_int(static_cast< int >(26)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MAX_SCALED_PRIMAL_INFEAS",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MAX_SCALED_PRIMAL_RESIDUAL",SWIG_From_int(static_cast< int >(12)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MAX_SCALED_RED_COST",SWIG_From_int(static_cast< int >(30)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MAX_SCALED_SLACK",SWIG_From_int(static_cast< int >(28)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MAX_SCALED_X",SWIG_From_int(static_cast< int >(24)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MAX_SLACK",SWIG_From_int(static_cast< int >(27)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MAX_X",SWIG_From_int(static_cast< int >(23)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MULTIOBJ_BARITCNT",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MULTIOBJ_BESTOBJVAL",SWIG_From_int(static_cast< int >(15)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MULTIOBJ_BLEND",SWIG_From_int(static_cast< int >(20)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MULTIOBJ_DEGCNT",SWIG_From_int(static_cast< int >(7)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MULTIOBJ_DETTIME",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MULTIOBJ_DEXCH",SWIG_From_int(static_cast< int >(13)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MULTIOBJ_DPUSH",SWIG_From_int(static_cast< int >(12)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MULTIOBJ_ERROR",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MULTIOBJ_ITCNT",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MULTIOBJ_METHOD",SWIG_From_int(static_cast< int >(18)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MULTIOBJ_NODECNT",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MULTIOBJ_NODELEFTCNT",SWIG_From_int(static_cast< int >(19)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MULTIOBJ_OBJVAL",SWIG_From_int(static_cast< int >(14)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MULTIOBJ_PEXCH",SWIG_From_int(static_cast< int >(11)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MULTIOBJ_PHASE1CNT",SWIG_From_int(static_cast< int >(9)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MULTIOBJ_PPUSH",SWIG_From_int(static_cast< int >(10)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MULTIOBJ_PRIORITY",SWIG_From_int(static_cast< int >(17)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MULTIOBJ_SIFTITCNT",SWIG_From_int(static_cast< int >(5)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MULTIOBJ_SIFTPHASE1CNT",SWIG_From_int(static_cast< int >(6)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MULTIOBJ_STATUS",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_MULTIOBJ_TIME",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_NO_PRIORITY_CHANGE",SWIG_From_int(static_cast< int >(-1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_OBJ_GAP",SWIG_From_int(static_cast< int >(40)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PRIMAL_OBJ",SWIG_From_int(static_cast< int >(42)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_RELAXATION_FLAG_NOSOLVE",SWIG_From_int(static_cast< int >(0x0001)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_SOLNPOOL_DIV",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_SOLNPOOL_FIFO",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_SOLNPOOL_FILTER_DIVERSITY",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_SOLNPOOL_FILTER_RANGE",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_SOLNPOOL_OBJ",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_STAT_ABORT_DETTIME_LIM",SWIG_From_int(static_cast< int >(25)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_STAT_ABORT_DUAL_OBJ_LIM",SWIG_From_int(static_cast< int >(22)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_STAT_ABORT_IT_LIM",SWIG_From_int(static_cast< int >(10)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_STAT_ABORT_OBJ_LIM",SWIG_From_int(static_cast< int >(12)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_STAT_ABORT_PRIM_OBJ_LIM",SWIG_From_int(static_cast< int >(21)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_STAT_ABORT_TIME_LIM",SWIG_From_int(static_cast< int >(11)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_STAT_ABORT_USER",SWIG_From_int(static_cast< int >(13)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_STAT_BENDERS_NUM_BEST",SWIG_From_int(static_cast< int >(41)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_STAT_CONFLICT_ABORT_CONTRADICTION",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_STAT_CONFLICT_ABORT_DETTIME_LIM",SWIG_From_int(static_cast< int >(39)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_STAT_CONFLICT_ABORT_IT_LIM",SWIG_From_int(static_cast< int >(34)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_STAT_CONFLICT_ABORT_MEM_LIM",SWIG_From_int(static_cast< int >(37)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_STAT_CONFLICT_ABORT_NODE_LIM",SWIG_From_int(static_cast< int >(35)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_STAT_CONFLICT_ABORT_OBJ_LIM",SWIG_From_int(static_cast< int >(36)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_STAT_CONFLICT_ABORT_TIME_LIM",SWIG_From_int(static_cast< int >(33)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_STAT_CONFLICT_ABORT_USER",SWIG_From_int(static_cast< int >(38)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_STAT_CONFLICT_FEASIBLE",SWIG_From_int(static_cast< int >(30)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_STAT_CONFLICT_MINIMAL",SWIG_From_int(static_cast< int >(31)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_STAT_FEASIBLE",SWIG_From_int(static_cast< int >(23)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_STAT_FEASIBLE_RELAXED_INF",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_STAT_FEASIBLE_RELAXED_QUAD",SWIG_From_int(static_cast< int >(18)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_STAT_FEASIBLE_RELAXED_SUM",SWIG_From_int(static_cast< int >(14)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_STAT_FIRSTORDER",SWIG_From_int(static_cast< int >(24)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_STAT_INFEASIBLE",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_STAT_INForUNBD",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_STAT_MULTIOBJ_INFEASIBLE",SWIG_From_int(static_cast< int >(302)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_STAT_MULTIOBJ_INForUNBD",SWIG_From_int(static_cast< int >(303)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_STAT_MULTIOBJ_NON_OPTIMAL",SWIG_From_int(static_cast< int >(305)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_STAT_MULTIOBJ_OPTIMAL",SWIG_From_int(static_cast< int >(301)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_STAT_MULTIOBJ_STOPPED",SWIG_From_int(static_cast< int >(306)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_STAT_MULTIOBJ_UNBOUNDED",SWIG_From_int(static_cast< int >(304)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_STAT_NUM_BEST",SWIG_From_int(static_cast< int >(6)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_STAT_OPTIMAL",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_STAT_OPTIMAL_FACE_UNBOUNDED",SWIG_From_int(static_cast< int >(20)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_STAT_OPTIMAL_INFEAS",SWIG_From_int(static_cast< int >(5)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_STAT_OPTIMAL_RELAXED_INF",SWIG_From_int(static_cast< int >(17)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_STAT_OPTIMAL_RELAXED_QUAD",SWIG_From_int(static_cast< int >(19)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_STAT_OPTIMAL_RELAXED_SUM",SWIG_From_int(static_cast< int >(15)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_STAT_UNBOUNDED",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_SUM_COMP_SLACK",SWIG_From_int(static_cast< int >(21)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_SUM_DUAL_INFEAS",SWIG_From_int(static_cast< int >(7)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_SUM_DUAL_RESIDUAL",SWIG_From_int(static_cast< int >(17)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_SUM_INDSLACK_INFEAS",SWIG_From_int(static_cast< int >(50)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_SUM_INT_INFEAS",SWIG_From_int(static_cast< int >(10)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_SUM_PI",SWIG_From_int(static_cast< int >(33)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_SUM_PRIMAL_INFEAS",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_SUM_PRIMAL_RESIDUAL",SWIG_From_int(static_cast< int >(13)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_SUM_PWLSLACK_INFEAS",SWIG_From_int(static_cast< int >(59)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_SUM_QCPRIMAL_RESIDUAL",SWIG_From_int(static_cast< int >(44)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_SUM_QCSLACK",SWIG_From_int(static_cast< int >(48)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_SUM_QCSLACK_INFEAS",SWIG_From_int(static_cast< int >(46)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_SUM_RED_COST",SWIG_From_int(static_cast< int >(37)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_SUM_SCALED_DUAL_INFEAS",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_SUM_SCALED_DUAL_RESIDUAL",SWIG_From_int(static_cast< int >(18)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_SUM_SCALED_PI",SWIG_From_int(static_cast< int >(34)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_SUM_SCALED_PRIMAL_INFEAS",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_SUM_SCALED_PRIMAL_RESIDUAL",SWIG_From_int(static_cast< int >(14)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_SUM_SCALED_RED_COST",SWIG_From_int(static_cast< int >(38)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_SUM_SCALED_SLACK",SWIG_From_int(static_cast< int >(36)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_SUM_SCALED_X",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_SUM_SLACK",SWIG_From_int(static_cast< int >(35)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_SUM_X",SWIG_From_int(static_cast< int >(31)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_ABORT_STRONGBRANCH",SWIG_From_int(static_cast< int >(1263)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_ADJ_SIGN_QUAD",SWIG_From_int(static_cast< int >(1606)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_ADJ_SIGN_SENSE",SWIG_From_int(static_cast< int >(1604)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_ADJ_SIGNS",SWIG_From_int(static_cast< int >(1602)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_ARC_INDEX_RANGE",SWIG_From_int(static_cast< int >(1231)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_ARRAY_BAD_SOS_TYPE",SWIG_From_int(static_cast< int >(3009)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_ARRAY_NOT_ASCENDING",SWIG_From_int(static_cast< int >(1226)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_ARRAY_TOO_LONG",SWIG_From_int(static_cast< int >(1208)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_BAD_ARGUMENT",SWIG_From_int(static_cast< int >(1003)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_BAD_BOUND_SENSE",SWIG_From_int(static_cast< int >(1622)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_BAD_BOUND_TYPE",SWIG_From_int(static_cast< int >(1457)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_BAD_CHAR",SWIG_From_int(static_cast< int >(1537)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_BAD_CTYPE",SWIG_From_int(static_cast< int >(3021)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_BAD_DECOMPOSITION",SWIG_From_int(static_cast< int >(2002)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_BAD_DIRECTION",SWIG_From_int(static_cast< int >(3012)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_BAD_EXPO_RANGE",SWIG_From_int(static_cast< int >(1435)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_BAD_EXPONENT",SWIG_From_int(static_cast< int >(1618)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_BAD_FILETYPE",SWIG_From_int(static_cast< int >(1424)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_BAD_ID",SWIG_From_int(static_cast< int >(1617)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_BAD_INDCONSTR",SWIG_From_int(static_cast< int >(1439)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_BAD_INDICATOR",SWIG_From_int(static_cast< int >(1551)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_BAD_INDTYPE",SWIG_From_int(static_cast< int >(1216)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_BAD_LAZY_UCUT",SWIG_From_int(static_cast< int >(1438)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_BAD_LUB",SWIG_From_int(static_cast< int >(1229)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_BAD_METHOD",SWIG_From_int(static_cast< int >(1292)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_BAD_MULTIOBJ_ATTR",SWIG_From_int(static_cast< int >(1488)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_BAD_NAME",SWIG_From_int(static_cast< int >(1220)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_BAD_NUMBER",SWIG_From_int(static_cast< int >(1434)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_BAD_OBJ_SENSE",SWIG_From_int(static_cast< int >(1487)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_BAD_PARAM_NAME",SWIG_From_int(static_cast< int >(1028)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_BAD_PARAM_NUM",SWIG_From_int(static_cast< int >(1013)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_BAD_PIVOT",SWIG_From_int(static_cast< int >(1267)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_BAD_PRIORITY",SWIG_From_int(static_cast< int >(3006)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_BAD_PROB_TYPE",SWIG_From_int(static_cast< int >(1022)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_BAD_ROW_ID",SWIG_From_int(static_cast< int >(1532)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_BAD_SECTION_BOUNDS",SWIG_From_int(static_cast< int >(1473)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_BAD_SECTION_ENDATA",SWIG_From_int(static_cast< int >(1462)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_BAD_SECTION_QMATRIX",SWIG_From_int(static_cast< int >(1475)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_BAD_SENSE",SWIG_From_int(static_cast< int >(1215)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_BAD_SOS_TYPE",SWIG_From_int(static_cast< int >(1442)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_BAD_STATUS",SWIG_From_int(static_cast< int >(1253)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_BAS_FILE_SHORT",SWIG_From_int(static_cast< int >(1550)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_BAS_FILE_SIZE",SWIG_From_int(static_cast< int >(1555)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_BENDERS_MASTER_SOLVE",SWIG_From_int(static_cast< int >(2001)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_CALLBACK",SWIG_From_int(static_cast< int >(1006)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_CALLBACK_INCONSISTENT",SWIG_From_int(static_cast< int >(1060)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_CAND_NOT_POINT",SWIG_From_int(static_cast< int >(3025)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_CAND_NOT_RAY",SWIG_From_int(static_cast< int >(3026)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_CNTRL_IN_NAME",SWIG_From_int(static_cast< int >(1236)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_COL_INDEX_RANGE",SWIG_From_int(static_cast< int >(1201)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_COL_REPEAT_PRINT",SWIG_From_int(static_cast< int >(1478)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_COL_REPEATS",SWIG_From_int(static_cast< int >(1446)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_COL_ROW_REPEATS",SWIG_From_int(static_cast< int >(1443)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_COL_UNKNOWN",SWIG_From_int(static_cast< int >(1449)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_CONFLICT_UNSTABLE",SWIG_From_int(static_cast< int >(1720)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_COUNT_OVERLAP",SWIG_From_int(static_cast< int >(1228)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_COUNT_RANGE",SWIG_From_int(static_cast< int >(1227)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_CPUBINDING_FAILURE",SWIG_From_int(static_cast< int >(3700)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_DBL_MAX",SWIG_From_int(static_cast< int >(1233)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_DECOMPRESSION",SWIG_From_int(static_cast< int >(1027)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_DETTILIM_STRONGBRANCH",SWIG_From_int(static_cast< int >(1270)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_DUP_ENTRY",SWIG_From_int(static_cast< int >(1222)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_DYNFUNC",SWIG_From_int(static_cast< int >(1815)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_DYNLOAD",SWIG_From_int(static_cast< int >(1814)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_ENCODING_CONVERSION",SWIG_From_int(static_cast< int >(1235)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_EXTRA_BV_BOUND",SWIG_From_int(static_cast< int >(1456)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_EXTRA_FR_BOUND",SWIG_From_int(static_cast< int >(1455)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_EXTRA_FX_BOUND",SWIG_From_int(static_cast< int >(1454)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_EXTRA_INTEND",SWIG_From_int(static_cast< int >(1481)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_EXTRA_INTORG",SWIG_From_int(static_cast< int >(1480)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_EXTRA_SOSEND",SWIG_From_int(static_cast< int >(1483)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_EXTRA_SOSORG",SWIG_From_int(static_cast< int >(1482)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_FAIL_OPEN_READ",SWIG_From_int(static_cast< int >(1423)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_FAIL_OPEN_WRITE",SWIG_From_int(static_cast< int >(1422)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_FILE_ENTRIES",SWIG_From_int(static_cast< int >(1553)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_FILE_FORMAT",SWIG_From_int(static_cast< int >(1563)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_FILE_IO",SWIG_From_int(static_cast< int >(1426)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_FILTER_VARIABLE_TYPE",SWIG_From_int(static_cast< int >(3414)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_ILL_DEFINED_PWL",SWIG_From_int(static_cast< int >(1213)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_IN_INFOCALLBACK",SWIG_From_int(static_cast< int >(1804)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_INDEX_NOT_BASIC",SWIG_From_int(static_cast< int >(1251)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_INDEX_RANGE",SWIG_From_int(static_cast< int >(1200)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_INDEX_RANGE_HIGH",SWIG_From_int(static_cast< int >(1206)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_INDEX_RANGE_LOW",SWIG_From_int(static_cast< int >(1205)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_INT_TOO_BIG",SWIG_From_int(static_cast< int >(3018)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_INT_TOO_BIG_INPUT",SWIG_From_int(static_cast< int >(1463)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_INVALID_NUMBER",SWIG_From_int(static_cast< int >(1650)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_LIMITS_TOO_BIG",SWIG_From_int(static_cast< int >(1012)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_LINE_TOO_LONG",SWIG_From_int(static_cast< int >(1465)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_LO_BOUND_REPEATS",SWIG_From_int(static_cast< int >(1459)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_LOCK_CREATE",SWIG_From_int(static_cast< int >(1808)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_LP_NOT_IN_ENVIRONMENT",SWIG_From_int(static_cast< int >(1806)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_LP_PARSE",SWIG_From_int(static_cast< int >(1427)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_MASTER_SOLVE",SWIG_From_int(static_cast< int >(2005)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_MIPSEARCH_WITH_CALLBACKS",SWIG_From_int(static_cast< int >(1805)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_MISS_SOS_TYPE",SWIG_From_int(static_cast< int >(3301)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_MSG_NO_CHANNEL",SWIG_From_int(static_cast< int >(1051)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_MSG_NO_FILEPTR",SWIG_From_int(static_cast< int >(1052)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_MSG_NO_FUNCTION",SWIG_From_int(static_cast< int >(1053)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_MULTIOBJ_SUBPROB_SOLVE",SWIG_From_int(static_cast< int >(1300)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_MULTIPLE_PROBS_IN_REMOTE_ENVIRONMENT",SWIG_From_int(static_cast< int >(1816)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NAME_CREATION",SWIG_From_int(static_cast< int >(1209)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NAME_NOT_FOUND",SWIG_From_int(static_cast< int >(1210)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NAME_TOO_LONG",SWIG_From_int(static_cast< int >(1464)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NAN",SWIG_From_int(static_cast< int >(1225)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NEED_OPT_SOLN",SWIG_From_int(static_cast< int >(1252)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NEGATIVE_SURPLUS",SWIG_From_int(static_cast< int >(1207)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NET_DATA",SWIG_From_int(static_cast< int >(1530)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NET_FILE_SHORT",SWIG_From_int(static_cast< int >(1538)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NO_BARRIER_SOLN",SWIG_From_int(static_cast< int >(1223)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NO_BASIC_SOLN",SWIG_From_int(static_cast< int >(1261)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NO_BASIS",SWIG_From_int(static_cast< int >(1262)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NO_BOUND_SENSE",SWIG_From_int(static_cast< int >(1621)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NO_BOUND_TYPE",SWIG_From_int(static_cast< int >(1460)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NO_COLUMNS_SECTION",SWIG_From_int(static_cast< int >(1472)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NO_CONFLICT",SWIG_From_int(static_cast< int >(1719)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NO_DECOMPOSITION",SWIG_From_int(static_cast< int >(2000)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NO_DUAL_SOLN",SWIG_From_int(static_cast< int >(1232)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NO_ENDATA",SWIG_From_int(static_cast< int >(1552)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NO_ENVIRONMENT",SWIG_From_int(static_cast< int >(1002)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NO_FILENAME",SWIG_From_int(static_cast< int >(1421)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NO_ID",SWIG_From_int(static_cast< int >(1616)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NO_ID_FIRST",SWIG_From_int(static_cast< int >(1609)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NO_INT_X",SWIG_From_int(static_cast< int >(3023)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NO_KAPPASTATS",SWIG_From_int(static_cast< int >(1269)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NO_LU_FACTOR",SWIG_From_int(static_cast< int >(1258)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NO_MEMORY",SWIG_From_int(static_cast< int >(1001)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NO_MIPSTART",SWIG_From_int(static_cast< int >(3020)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NO_NAME_SECTION",SWIG_From_int(static_cast< int >(1441)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NO_NAMES",SWIG_From_int(static_cast< int >(1219)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NO_NORMS",SWIG_From_int(static_cast< int >(1264)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NO_NUMBER",SWIG_From_int(static_cast< int >(1615)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NO_NUMBER_BOUND",SWIG_From_int(static_cast< int >(1623)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NO_NUMBER_FIRST",SWIG_From_int(static_cast< int >(1611)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NO_OBJ_NAME",SWIG_From_int(static_cast< int >(1489)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NO_OBJ_SENSE",SWIG_From_int(static_cast< int >(1436)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NO_OBJECTIVE",SWIG_From_int(static_cast< int >(1476)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NO_OP_OR_SENSE",SWIG_From_int(static_cast< int >(1608)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NO_OPERATOR",SWIG_From_int(static_cast< int >(1607)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NO_ORDER",SWIG_From_int(static_cast< int >(3016)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NO_PROBLEM",SWIG_From_int(static_cast< int >(1009)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NO_QP_OPERATOR",SWIG_From_int(static_cast< int >(1614)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NO_QUAD_EXP",SWIG_From_int(static_cast< int >(1612)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NO_RHS_COEFF",SWIG_From_int(static_cast< int >(1610)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NO_RHS_IN_OBJ",SWIG_From_int(static_cast< int >(1211)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NO_ROW_NAME",SWIG_From_int(static_cast< int >(1486)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NO_ROW_SENSE",SWIG_From_int(static_cast< int >(1453)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NO_ROWS_SECTION",SWIG_From_int(static_cast< int >(1471)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NO_SENSIT",SWIG_From_int(static_cast< int >(1260)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NO_SOLN",SWIG_From_int(static_cast< int >(1217)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NO_SOLNPOOL",SWIG_From_int(static_cast< int >(3024)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NO_SOS",SWIG_From_int(static_cast< int >(3015)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NO_TREE",SWIG_From_int(static_cast< int >(3412)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NO_VECTOR_SOLN",SWIG_From_int(static_cast< int >(1556)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NODE_INDEX_RANGE",SWIG_From_int(static_cast< int >(1230)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NODE_ON_DISK",SWIG_From_int(static_cast< int >(3504)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NOT_DUAL_UNBOUNDED",SWIG_From_int(static_cast< int >(1265)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NOT_FIXED",SWIG_From_int(static_cast< int >(1221)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NOT_FOR_BENDERS",SWIG_From_int(static_cast< int >(2004)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NOT_FOR_DISTMIP",SWIG_From_int(static_cast< int >(1071)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NOT_FOR_MIP",SWIG_From_int(static_cast< int >(1017)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NOT_FOR_MULTIOBJ",SWIG_From_int(static_cast< int >(1070)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NOT_FOR_QCP",SWIG_From_int(static_cast< int >(1031)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NOT_FOR_QP",SWIG_From_int(static_cast< int >(1018)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NOT_MILPCLASS",SWIG_From_int(static_cast< int >(1024)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NOT_MIN_COST_FLOW",SWIG_From_int(static_cast< int >(1531)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NOT_MIP",SWIG_From_int(static_cast< int >(3003)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NOT_MIQPCLASS",SWIG_From_int(static_cast< int >(1029)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NOT_ONE_PROBLEM",SWIG_From_int(static_cast< int >(1023)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NOT_QP",SWIG_From_int(static_cast< int >(5004)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NOT_SAV_FILE",SWIG_From_int(static_cast< int >(1560)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NOT_UNBOUNDED",SWIG_From_int(static_cast< int >(1254)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_NULL_POINTER",SWIG_From_int(static_cast< int >(1004)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_ORDER_BAD_DIRECTION",SWIG_From_int(static_cast< int >(3007)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_OVERFLOW",SWIG_From_int(static_cast< int >(1810)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_PARAM_INCOMPATIBLE",SWIG_From_int(static_cast< int >(1807)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_PARAM_TOO_BIG",SWIG_From_int(static_cast< int >(1015)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_PARAM_TOO_SMALL",SWIG_From_int(static_cast< int >(1014)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_PRESLV_ABORT",SWIG_From_int(static_cast< int >(1106)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_PRESLV_BAD_PARAM",SWIG_From_int(static_cast< int >(1122)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_PRESLV_BASIS_MEM",SWIG_From_int(static_cast< int >(1107)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_PRESLV_COPYORDER",SWIG_From_int(static_cast< int >(1109)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_PRESLV_COPYSOS",SWIG_From_int(static_cast< int >(1108)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_PRESLV_CRUSHFORM",SWIG_From_int(static_cast< int >(1121)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_PRESLV_DETTIME_LIM",SWIG_From_int(static_cast< int >(1124)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_PRESLV_DUAL",SWIG_From_int(static_cast< int >(1119)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_PRESLV_FAIL_BASIS",SWIG_From_int(static_cast< int >(1114)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_PRESLV_INF",SWIG_From_int(static_cast< int >(1117)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_PRESLV_INForUNBD",SWIG_From_int(static_cast< int >(1101)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_PRESLV_NO_BASIS",SWIG_From_int(static_cast< int >(1115)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_PRESLV_NO_PROB",SWIG_From_int(static_cast< int >(1103)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_PRESLV_SOLN_MIP",SWIG_From_int(static_cast< int >(1110)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_PRESLV_SOLN_QP",SWIG_From_int(static_cast< int >(1111)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_PRESLV_START_LP",SWIG_From_int(static_cast< int >(1112)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_PRESLV_TIME_LIM",SWIG_From_int(static_cast< int >(1123)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_PRESLV_UNBD",SWIG_From_int(static_cast< int >(1118)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_PRESLV_UNCRUSHFORM",SWIG_From_int(static_cast< int >(1120)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_PRIIND",SWIG_From_int(static_cast< int >(1257)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_PRM_DATA",SWIG_From_int(static_cast< int >(1660)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_PROTOCOL",SWIG_From_int(static_cast< int >(1812)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_Q_DIVISOR",SWIG_From_int(static_cast< int >(1619)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_Q_DUP_ENTRY",SWIG_From_int(static_cast< int >(5011)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_Q_NOT_INDEF",SWIG_From_int(static_cast< int >(5014)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_Q_NOT_POS_DEF",SWIG_From_int(static_cast< int >(5002)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_Q_NOT_SYMMETRIC",SWIG_From_int(static_cast< int >(5012)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_QCP_SENSE",SWIG_From_int(static_cast< int >(6002)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_QCP_SENSE_FILE",SWIG_From_int(static_cast< int >(1437)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_QUAD_EXP_NOT_2",SWIG_From_int(static_cast< int >(1613)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_QUAD_IN_ROW",SWIG_From_int(static_cast< int >(1605)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_RANGE_SECTION_ORDER",SWIG_From_int(static_cast< int >(1474)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_RESTRICTED_VERSION",SWIG_From_int(static_cast< int >(1016)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_RHS_IN_OBJ",SWIG_From_int(static_cast< int >(1603)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_RIM_REPEATS",SWIG_From_int(static_cast< int >(1447)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_RIM_ROW_REPEATS",SWIG_From_int(static_cast< int >(1444)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_RIMNZ_REPEATS",SWIG_From_int(static_cast< int >(1479)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_ROW_INDEX_RANGE",SWIG_From_int(static_cast< int >(1203)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_ROW_REPEAT_PRINT",SWIG_From_int(static_cast< int >(1477)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_ROW_REPEATS",SWIG_From_int(static_cast< int >(1445)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_ROW_UNKNOWN",SWIG_From_int(static_cast< int >(1448)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_SAV_FILE_DATA",SWIG_From_int(static_cast< int >(1561)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_SAV_FILE_VALUE",SWIG_From_int(static_cast< int >(1564)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_SAV_FILE_WRITE",SWIG_From_int(static_cast< int >(1562)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_SBASE_ILLEGAL",SWIG_From_int(static_cast< int >(1554)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_SBASE_INCOMPAT",SWIG_From_int(static_cast< int >(1255)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_SINGULAR",SWIG_From_int(static_cast< int >(1256)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_STR_PARAM_TOO_LONG",SWIG_From_int(static_cast< int >(1026)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_SUBPROB_SOLVE",SWIG_From_int(static_cast< int >(3019)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_SYNCPRIM_CREATE",SWIG_From_int(static_cast< int >(1809)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_SYSCALL",SWIG_From_int(static_cast< int >(1813)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_THREAD_FAILED",SWIG_From_int(static_cast< int >(1234)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_TILIM_CONDITION_NO",SWIG_From_int(static_cast< int >(1268)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_TILIM_STRONGBRANCH",SWIG_From_int(static_cast< int >(1266)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_TOO_MANY_COEFFS",SWIG_From_int(static_cast< int >(1433)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_TOO_MANY_COLS",SWIG_From_int(static_cast< int >(1432)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_TOO_MANY_RIMNZ",SWIG_From_int(static_cast< int >(1485)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_TOO_MANY_RIMS",SWIG_From_int(static_cast< int >(1484)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_TOO_MANY_ROWS",SWIG_From_int(static_cast< int >(1431)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_TOO_MANY_THREADS",SWIG_From_int(static_cast< int >(1020)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_TREE_MEMORY_LIMIT",SWIG_From_int(static_cast< int >(3413)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_TUNE_MIXED",SWIG_From_int(static_cast< int >(1730)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_UNIQUE_WEIGHTS",SWIG_From_int(static_cast< int >(3010)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_UNSUPPORTED_CONSTRAINT_TYPE",SWIG_From_int(static_cast< int >(1212)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_UNSUPPORTED_OPERATION",SWIG_From_int(static_cast< int >(1811)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_UP_BOUND_REPEATS",SWIG_From_int(static_cast< int >(1458)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_WORK_FILE_OPEN",SWIG_From_int(static_cast< int >(1801)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_WORK_FILE_READ",SWIG_From_int(static_cast< int >(1802)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_WORK_FILE_WRITE",SWIG_From_int(static_cast< int >(1803)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXERR_XMLPARSE",SWIG_From_int(static_cast< int >(1425)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMESSAGEBUFSIZE",SWIG_From_int(static_cast< int >(1024)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_BIGM_COEF",SWIG_From_int(static_cast< int >(1040)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_BIGM_TO_IND",SWIG_From_int(static_cast< int >(1041)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_BIGM_VARBOUND",SWIG_From_int(static_cast< int >(1042)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_CANCEL_TOL",SWIG_From_int(static_cast< int >(1045)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_EPGAP_LARGE",SWIG_From_int(static_cast< int >(1038)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_EPGAP_OBJOFFSET",SWIG_From_int(static_cast< int >(1037)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_FEAS_TOL",SWIG_From_int(static_cast< int >(1043)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_FRACTION_SCALING",SWIG_From_int(static_cast< int >(1047)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_IND_NZ_LARGE_NUM",SWIG_From_int(static_cast< int >(1019)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_IND_NZ_SMALL_NUM",SWIG_From_int(static_cast< int >(1020)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_IND_RHS_LARGE_NUM",SWIG_From_int(static_cast< int >(1021)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_IND_RHS_SMALL_NUM",SWIG_From_int(static_cast< int >(1022)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_KAPPA_ILLPOSED",SWIG_From_int(static_cast< int >(1035)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_KAPPA_SUSPICIOUS",SWIG_From_int(static_cast< int >(1033)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_KAPPA_UNSTABLE",SWIG_From_int(static_cast< int >(1034)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_LB_LARGE_NUM",SWIG_From_int(static_cast< int >(1003)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_LB_SMALL_NUM",SWIG_From_int(static_cast< int >(1004)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_LC_NZ_LARGE_NUM",SWIG_From_int(static_cast< int >(1023)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_LC_NZ_SMALL_NUM",SWIG_From_int(static_cast< int >(1024)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_LC_RHS_LARGE_NUM",SWIG_From_int(static_cast< int >(1025)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_LC_RHS_SMALL_NUM",SWIG_From_int(static_cast< int >(1026)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_MULTIOBJ_COEFFS",SWIG_From_int(static_cast< int >(1062)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_MULTIOBJ_LARGE_NUM",SWIG_From_int(static_cast< int >(1058)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_MULTIOBJ_MIX",SWIG_From_int(static_cast< int >(1063)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_MULTIOBJ_OPT_TOL",SWIG_From_int(static_cast< int >(1060)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_MULTIOBJ_SMALL_NUM",SWIG_From_int(static_cast< int >(1059)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_NZ_LARGE_NUM",SWIG_From_int(static_cast< int >(1009)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_NZ_SMALL_NUM",SWIG_From_int(static_cast< int >(1010)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_OBJ_LARGE_NUM",SWIG_From_int(static_cast< int >(1001)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_OBJ_SMALL_NUM",SWIG_From_int(static_cast< int >(1002)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_OPT_TOL",SWIG_From_int(static_cast< int >(1044)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_PWL_SLOPE_LARGE_NUM",SWIG_From_int(static_cast< int >(1064)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_PWL_SLOPE_SMALL_NUM",SWIG_From_int(static_cast< int >(1065)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_QC_LINNZ_LARGE_NUM",SWIG_From_int(static_cast< int >(1015)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_QC_LINNZ_SMALL_NUM",SWIG_From_int(static_cast< int >(1016)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_QC_QNZ_LARGE_NUM",SWIG_From_int(static_cast< int >(1017)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_QC_QNZ_SMALL_NUM",SWIG_From_int(static_cast< int >(1018)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_QC_RHS_LARGE_NUM",SWIG_From_int(static_cast< int >(1013)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_QC_RHS_SMALL_NUM",SWIG_From_int(static_cast< int >(1014)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_QOBJ_LARGE_NUM",SWIG_From_int(static_cast< int >(1011)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_QOBJ_SMALL_NUM",SWIG_From_int(static_cast< int >(1012)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_QOPT_TOL",SWIG_From_int(static_cast< int >(1046)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_RHS_LARGE_NUM",SWIG_From_int(static_cast< int >(1007)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_RHS_SMALL_NUM",SWIG_From_int(static_cast< int >(1008)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_SAMECOEFF_COL",SWIG_From_int(static_cast< int >(1050)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_SAMECOEFF_IND",SWIG_From_int(static_cast< int >(1051)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_SAMECOEFF_LAZY",SWIG_From_int(static_cast< int >(1054)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_SAMECOEFF_MULTIOBJ",SWIG_From_int(static_cast< int >(1061)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_SAMECOEFF_OBJ",SWIG_From_int(static_cast< int >(1057)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_SAMECOEFF_QLIN",SWIG_From_int(static_cast< int >(1052)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_SAMECOEFF_QUAD",SWIG_From_int(static_cast< int >(1053)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_SAMECOEFF_RHS",SWIG_From_int(static_cast< int >(1056)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_SAMECOEFF_ROW",SWIG_From_int(static_cast< int >(1049)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_SAMECOEFF_UCUT",SWIG_From_int(static_cast< int >(1055)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_SINGLE_PRECISION",SWIG_From_int(static_cast< int >(1036)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_SYMMETRY_BREAKING_INEQ",SWIG_From_int(static_cast< int >(1039)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_UB_LARGE_NUM",SWIG_From_int(static_cast< int >(1005)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_UB_SMALL_NUM",SWIG_From_int(static_cast< int >(1006)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_UC_NZ_LARGE_NUM",SWIG_From_int(static_cast< int >(1027)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_UC_NZ_SMALL_NUM",SWIG_From_int(static_cast< int >(1028)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_UC_RHS_LARGE_NUM",SWIG_From_int(static_cast< int >(1029)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_UC_RHS_SMALL_NUM",SWIG_From_int(static_cast< int >(1030)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMI_WIDE_COEFF_RANGE",SWIG_From_int(static_cast< int >(1048)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMIP_ABORT_FEAS",SWIG_From_int(static_cast< int >(113)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMIP_ABORT_INFEAS",SWIG_From_int(static_cast< int >(114)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMIP_ABORT_RELAXATION_UNBOUNDED",SWIG_From_int(static_cast< int >(133)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMIP_ABORT_RELAXED",SWIG_From_int(static_cast< int >(126)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMIP_DETTIME_LIM_FEAS",SWIG_From_int(static_cast< int >(131)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMIP_DETTIME_LIM_INFEAS",SWIG_From_int(static_cast< int >(132)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMIP_FAIL_FEAS",SWIG_From_int(static_cast< int >(109)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMIP_FAIL_FEAS_NO_TREE",SWIG_From_int(static_cast< int >(116)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMIP_FAIL_INFEAS",SWIG_From_int(static_cast< int >(110)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMIP_FAIL_INFEAS_NO_TREE",SWIG_From_int(static_cast< int >(117)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMIP_FEASIBLE",SWIG_From_int(static_cast< int >(127)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMIP_FEASIBLE_RELAXED_INF",SWIG_From_int(static_cast< int >(122)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMIP_FEASIBLE_RELAXED_QUAD",SWIG_From_int(static_cast< int >(124)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMIP_FEASIBLE_RELAXED_SUM",SWIG_From_int(static_cast< int >(120)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMIP_INFEASIBLE",SWIG_From_int(static_cast< int >(103)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMIP_INForUNBD",SWIG_From_int(static_cast< int >(119)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMIP_MEM_LIM_FEAS",SWIG_From_int(static_cast< int >(111)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMIP_MEM_LIM_INFEAS",SWIG_From_int(static_cast< int >(112)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMIP_NODE_LIM_FEAS",SWIG_From_int(static_cast< int >(105)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMIP_NODE_LIM_INFEAS",SWIG_From_int(static_cast< int >(106)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMIP_OPTIMAL",SWIG_From_int(static_cast< int >(101)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMIP_OPTIMAL_INFEAS",SWIG_From_int(static_cast< int >(115)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMIP_OPTIMAL_POPULATED",SWIG_From_int(static_cast< int >(129)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMIP_OPTIMAL_POPULATED_TOL",SWIG_From_int(static_cast< int >(130)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMIP_OPTIMAL_RELAXED_INF",SWIG_From_int(static_cast< int >(123)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMIP_OPTIMAL_RELAXED_QUAD",SWIG_From_int(static_cast< int >(125)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMIP_OPTIMAL_RELAXED_SUM",SWIG_From_int(static_cast< int >(121)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMIP_OPTIMAL_TOL",SWIG_From_int(static_cast< int >(102)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMIP_POPULATESOL_LIM",SWIG_From_int(static_cast< int >(128)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMIP_SOL_LIM",SWIG_From_int(static_cast< int >(104)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMIP_TIME_LIM_FEAS",SWIG_From_int(static_cast< int >(107)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMIP_TIME_LIM_INFEAS",SWIG_From_int(static_cast< int >(108)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMIP_UNBOUNDED",SWIG_From_int(static_cast< int >(118)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CPXAUTOENUMS_H_H",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXCALLBACKINFO_THREADID",SWIG_From_int(static_cast< int >(CPXCALLBACKINFO_THREADID)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXCALLBACKINFO_NODECOUNT",SWIG_From_int(static_cast< int >(CPXCALLBACKINFO_NODECOUNT)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXCALLBACKINFO_ITCOUNT",SWIG_From_int(static_cast< int >(CPXCALLBACKINFO_ITCOUNT)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXCALLBACKINFO_BEST_SOL",SWIG_From_int(static_cast< int >(CPXCALLBACKINFO_BEST_SOL)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXCALLBACKINFO_BEST_BND",SWIG_From_int(static_cast< int >(CPXCALLBACKINFO_BEST_BND)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXCALLBACKINFO_THREADS",SWIG_From_int(static_cast< int >(CPXCALLBACKINFO_THREADS)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXCALLBACKINFO_FEASIBLE",SWIG_From_int(static_cast< int >(CPXCALLBACKINFO_FEASIBLE)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXCALLBACKINFO_TIME",SWIG_From_int(static_cast< int >(CPXCALLBACKINFO_TIME)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXCALLBACKINFO_DETTIME",SWIG_From_int(static_cast< int >(CPXCALLBACKINFO_DETTIME)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXCALLBACKINFO_NODEUID",SWIG_From_int(static_cast< int >(CPXCALLBACKINFO_NODEUID)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXCALLBACKINFO_NODEDEPTH",SWIG_From_int(static_cast< int >(CPXCALLBACKINFO_NODEDEPTH)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXCALLBACKINFO_CANDIDATE_SOURCE",SWIG_From_int(static_cast< int >(CPXCALLBACKINFO_CANDIDATE_SOURCE)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXCALLBACKINFO_RESTARTS",SWIG_From_int(static_cast< int >(CPXCALLBACKINFO_RESTARTS)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXCALLBACKINFO_AFTERCUTLOOP",SWIG_From_int(static_cast< int >(CPXCALLBACKINFO_AFTERCUTLOOP)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXCALLBACKINFO_NODESLEFT",SWIG_From_int(static_cast< int >(CPXCALLBACKINFO_NODESLEFT)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXCALLBACKSOLUTION_NOCHECK",SWIG_From_int(static_cast< int >(CPXCALLBACKSOLUTION_NOCHECK)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXCALLBACKSOLUTION_CHECKFEAS",SWIG_From_int(static_cast< int >(CPXCALLBACKSOLUTION_CHECKFEAS)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXCALLBACKSOLUTION_PROPAGATE",SWIG_From_int(static_cast< int >(CPXCALLBACKSOLUTION_PROPAGATE)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXCALLBACKSOLUTION_SOLVE",SWIG_From_int(static_cast< int >(CPXCALLBACKSOLUTION_SOLVE)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXINFO_BYTE",SWIG_From_int(static_cast< int >(CPXINFO_BYTE)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXINFO_SHORT",SWIG_From_int(static_cast< int >(CPXINFO_SHORT)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXINFO_INT",SWIG_From_int(static_cast< int >(CPXINFO_INT)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXINFO_LONG",SWIG_From_int(static_cast< int >(CPXINFO_LONG)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXINFO_DOUBLE",SWIG_From_int(static_cast< int >(CPXINFO_DOUBLE)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_H",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Advance",SWIG_From_int(static_cast< int >(1001)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Barrier_Algorithm",SWIG_From_int(static_cast< int >(3007)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Barrier_ColNonzeros",SWIG_From_int(static_cast< int >(3009)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Barrier_ConvergeTol",SWIG_From_int(static_cast< int >(3002)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Barrier_Crossover",SWIG_From_int(static_cast< int >(3018)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Barrier_Display",SWIG_From_int(static_cast< int >(3010)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Barrier_Limits_Corrections",SWIG_From_int(static_cast< int >(3013)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Barrier_Limits_Growth",SWIG_From_int(static_cast< int >(3003)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Barrier_Limits_Iteration",SWIG_From_int(static_cast< int >(3012)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Barrier_Limits_ObjRange",SWIG_From_int(static_cast< int >(3004)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Barrier_Ordering",SWIG_From_int(static_cast< int >(3014)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Barrier_QCPConvergeTol",SWIG_From_int(static_cast< int >(3020)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Barrier_StartAlg",SWIG_From_int(static_cast< int >(3017)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Benders_Strategy",SWIG_From_int(static_cast< int >(1501)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Benders_Tolerances_feasibilitycut",SWIG_From_int(static_cast< int >(1509)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Benders_Tolerances_FeasibilityCut",SWIG_From_int(static_cast< int >(1509)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Benders_Tolerances_optimalitycut",SWIG_From_int(static_cast< int >(1510)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Benders_Tolerances_OptimalityCut",SWIG_From_int(static_cast< int >(1510)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Benders_WorkerAlgorithm",SWIG_From_int(static_cast< int >(1500)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_ClockType",SWIG_From_int(static_cast< int >(1006)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Conflict_Algorithm",SWIG_From_int(static_cast< int >(1073)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Conflict_Display",SWIG_From_int(static_cast< int >(1074)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_CPUmask",SWIG_From_int(static_cast< int >(1144)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_DetTimeLimit",SWIG_From_int(static_cast< int >(1127)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_DistMIP_Rampup_DetTimeLimit",SWIG_From_int(static_cast< int >(2164)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_DistMIP_Rampup_Duration",SWIG_From_int(static_cast< int >(2163)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_DistMIP_Rampup_TimeLimit",SWIG_From_int(static_cast< int >(2165)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Emphasis_Memory",SWIG_From_int(static_cast< int >(1082)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Emphasis_MIP",SWIG_From_int(static_cast< int >(2058)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Emphasis_Numerical",SWIG_From_int(static_cast< int >(1083)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Feasopt_Mode",SWIG_From_int(static_cast< int >(1084)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Feasopt_Tolerance",SWIG_From_int(static_cast< int >(2073)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_LPMethod",SWIG_From_int(static_cast< int >(1062)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Cuts_BQP",SWIG_From_int(static_cast< int >(2195)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Cuts_Cliques",SWIG_From_int(static_cast< int >(2003)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Cuts_Covers",SWIG_From_int(static_cast< int >(2005)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Cuts_Disjunctive",SWIG_From_int(static_cast< int >(2053)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Cuts_FlowCovers",SWIG_From_int(static_cast< int >(2040)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Cuts_Gomory",SWIG_From_int(static_cast< int >(2049)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Cuts_GUBCovers",SWIG_From_int(static_cast< int >(2044)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Cuts_Implied",SWIG_From_int(static_cast< int >(2041)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Cuts_LiftProj",SWIG_From_int(static_cast< int >(2152)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Cuts_LocalImplied",SWIG_From_int(static_cast< int >(2181)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Cuts_MCFCut",SWIG_From_int(static_cast< int >(2134)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Cuts_MIRCut",SWIG_From_int(static_cast< int >(2052)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Cuts_Nodecuts",SWIG_From_int(static_cast< int >(2157)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Cuts_PathCut",SWIG_From_int(static_cast< int >(2051)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Cuts_RLT",SWIG_From_int(static_cast< int >(2196)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Cuts_ZeroHalfCut",SWIG_From_int(static_cast< int >(2111)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Display",SWIG_From_int(static_cast< int >(2012)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Interval",SWIG_From_int(static_cast< int >(2013)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Limits_AggForCut",SWIG_From_int(static_cast< int >(2054)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Limits_AuxRootThreads",SWIG_From_int(static_cast< int >(2139)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Limits_CutPasses",SWIG_From_int(static_cast< int >(2056)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Limits_CutsFactor",SWIG_From_int(static_cast< int >(2033)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Limits_EachCutLimit",SWIG_From_int(static_cast< int >(2102)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Limits_GomoryCand",SWIG_From_int(static_cast< int >(2048)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Limits_GomoryPass",SWIG_From_int(static_cast< int >(2050)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Limits_Nodes",SWIG_From_int(static_cast< int >(2017)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Limits_PolishTime",SWIG_From_int(static_cast< int >(2066)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Limits_Populate",SWIG_From_int(static_cast< int >(2108)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Limits_ProbeDetTime",SWIG_From_int(static_cast< int >(2150)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Limits_ProbeTime",SWIG_From_int(static_cast< int >(2065)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Limits_RepairTries",SWIG_From_int(static_cast< int >(2067)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Limits_Solutions",SWIG_From_int(static_cast< int >(2015)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Limits_StrongCand",SWIG_From_int(static_cast< int >(2045)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Limits_StrongIt",SWIG_From_int(static_cast< int >(2046)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Limits_TreeMemory",SWIG_From_int(static_cast< int >(2027)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_OrderType",SWIG_From_int(static_cast< int >(2032)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_PolishAfter_AbsMIPGap",SWIG_From_int(static_cast< int >(2126)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_PolishAfter_DetTime",SWIG_From_int(static_cast< int >(2151)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_PolishAfter_MIPGap",SWIG_From_int(static_cast< int >(2127)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_PolishAfter_Nodes",SWIG_From_int(static_cast< int >(2128)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_PolishAfter_Solutions",SWIG_From_int(static_cast< int >(2129)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_PolishAfter_Time",SWIG_From_int(static_cast< int >(2130)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Pool_AbsGap",SWIG_From_int(static_cast< int >(2106)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Pool_Capacity",SWIG_From_int(static_cast< int >(2103)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Pool_Intensity",SWIG_From_int(static_cast< int >(2107)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Pool_RelGap",SWIG_From_int(static_cast< int >(2105)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Pool_Replace",SWIG_From_int(static_cast< int >(2104)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Strategy_Backtrack",SWIG_From_int(static_cast< int >(2002)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Strategy_BBInterval",SWIG_From_int(static_cast< int >(2039)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Strategy_Branch",SWIG_From_int(static_cast< int >(2001)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Strategy_CallbackReducedLP",SWIG_From_int(static_cast< int >(2055)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Strategy_Dive",SWIG_From_int(static_cast< int >(2060)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Strategy_File",SWIG_From_int(static_cast< int >(2016)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Strategy_FPHeur",SWIG_From_int(static_cast< int >(2098)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Strategy_HeuristicEffort",SWIG_From_int(static_cast< int >(2120)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Strategy_HeuristicFreq",SWIG_From_int(static_cast< int >(2031)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Strategy_KappaStats",SWIG_From_int(static_cast< int >(2137)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Strategy_LBHeur",SWIG_From_int(static_cast< int >(2063)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Strategy_MIQCPStrat",SWIG_From_int(static_cast< int >(2110)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Strategy_NodeSelect",SWIG_From_int(static_cast< int >(2018)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Strategy_Order",SWIG_From_int(static_cast< int >(2020)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Strategy_PresolveNode",SWIG_From_int(static_cast< int >(2037)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Strategy_Probe",SWIG_From_int(static_cast< int >(2042)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Strategy_RINSHeur",SWIG_From_int(static_cast< int >(2061)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Strategy_Search",SWIG_From_int(static_cast< int >(2109)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Strategy_StartAlgorithm",SWIG_From_int(static_cast< int >(2025)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Strategy_SubAlgorithm",SWIG_From_int(static_cast< int >(2026)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Strategy_VariableSelect",SWIG_From_int(static_cast< int >(2028)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_SubMIP_StartAlg",SWIG_From_int(static_cast< int >(2205)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_SubMIP_SubAlg",SWIG_From_int(static_cast< int >(2206)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_SubMIP_NodeLimit",SWIG_From_int(static_cast< int >(2212)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_SubMIP_Scale",SWIG_From_int(static_cast< int >(2207)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Tolerances_AbsMIPGap",SWIG_From_int(static_cast< int >(2008)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Tolerances_Linearization",SWIG_From_int(static_cast< int >(2068)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Tolerances_Integrality",SWIG_From_int(static_cast< int >(2010)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Tolerances_LowerCutoff",SWIG_From_int(static_cast< int >(2006)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Tolerances_MIPGap",SWIG_From_int(static_cast< int >(2009)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Tolerances_ObjDifference",SWIG_From_int(static_cast< int >(2019)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Tolerances_RelObjDifference",SWIG_From_int(static_cast< int >(2022)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MIP_Tolerances_UpperCutoff",SWIG_From_int(static_cast< int >(2007)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_MultiObjective_Display",SWIG_From_int(static_cast< int >(1600)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Network_Display",SWIG_From_int(static_cast< int >(5005)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Network_Iterations",SWIG_From_int(static_cast< int >(5001)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Network_NetFind",SWIG_From_int(static_cast< int >(1022)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Network_Pricing",SWIG_From_int(static_cast< int >(5004)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Network_Tolerances_Feasibility",SWIG_From_int(static_cast< int >(5003)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Network_Tolerances_Optimality",SWIG_From_int(static_cast< int >(5002)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_OptimalityTarget",SWIG_From_int(static_cast< int >(1131)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Output_CloneLog",SWIG_From_int(static_cast< int >(1132)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Output_IntSolFilePrefix",SWIG_From_int(static_cast< int >(2143)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Output_MPSLong",SWIG_From_int(static_cast< int >(1081)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Output_WriteLevel",SWIG_From_int(static_cast< int >(1114)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Parallel",SWIG_From_int(static_cast< int >(1109)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_ParamDisplay",SWIG_From_int(static_cast< int >(1163)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Preprocessing_Aggregator",SWIG_From_int(static_cast< int >(1003)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Preprocessing_BoundStrength",SWIG_From_int(static_cast< int >(2029)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Preprocessing_CoeffReduce",SWIG_From_int(static_cast< int >(2004)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Preprocessing_Dependency",SWIG_From_int(static_cast< int >(1008)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Preprocessing_Dual",SWIG_From_int(static_cast< int >(1044)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Preprocessing_Fill",SWIG_From_int(static_cast< int >(1002)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Preprocessing_Folding",SWIG_From_int(static_cast< int >(1164)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Preprocessing_Linear",SWIG_From_int(static_cast< int >(1058)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Preprocessing_NumPass",SWIG_From_int(static_cast< int >(1052)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Preprocessing_Presolve",SWIG_From_int(static_cast< int >(1030)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Preprocessing_QCPDuals",SWIG_From_int(static_cast< int >(4003)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Preprocessing_QPMakePSD",SWIG_From_int(static_cast< int >(4010)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Preprocessing_QToLin",SWIG_From_int(static_cast< int >(4012)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Preprocessing_Reduce",SWIG_From_int(static_cast< int >(1057)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Preprocessing_Reformulations",SWIG_From_int(static_cast< int >(1167)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Preprocessing_Relax",SWIG_From_int(static_cast< int >(2034)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Preprocessing_RepeatPresolve",SWIG_From_int(static_cast< int >(2064)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Preprocessing_SOS1Reform",SWIG_From_int(static_cast< int >(2230)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Preprocessing_SOS2Reform",SWIG_From_int(static_cast< int >(2231)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Preprocessing_Symmetry",SWIG_From_int(static_cast< int >(2059)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_QPMethod",SWIG_From_int(static_cast< int >(1063)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_RandomSeed",SWIG_From_int(static_cast< int >(1124)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Read_APIEncoding",SWIG_From_int(static_cast< int >(1130)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Read_Constraints",SWIG_From_int(static_cast< int >(1021)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Read_DataCheck",SWIG_From_int(static_cast< int >(1056)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Read_FileEncoding",SWIG_From_int(static_cast< int >(1129)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Read_Nonzeros",SWIG_From_int(static_cast< int >(1024)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Read_QPNonzeros",SWIG_From_int(static_cast< int >(4001)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Read_Scale",SWIG_From_int(static_cast< int >(1034)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Read_Variables",SWIG_From_int(static_cast< int >(1023)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Read_WarningLimit",SWIG_From_int(static_cast< int >(1157)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Record",SWIG_From_int(static_cast< int >(1162)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_ScreenOutput",SWIG_From_int(static_cast< int >(1035)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Sifting_Algorithm",SWIG_From_int(static_cast< int >(1077)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Sifting_Simplex",SWIG_From_int(static_cast< int >(1158)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Sifting_Display",SWIG_From_int(static_cast< int >(1076)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Sifting_Iterations",SWIG_From_int(static_cast< int >(1078)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Simplex_Crash",SWIG_From_int(static_cast< int >(1007)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Simplex_DGradient",SWIG_From_int(static_cast< int >(1009)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Simplex_Display",SWIG_From_int(static_cast< int >(1019)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Simplex_DynamicRows",SWIG_From_int(static_cast< int >(1161)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Simplex_Limits_Iterations",SWIG_From_int(static_cast< int >(1020)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Simplex_Limits_LowerObj",SWIG_From_int(static_cast< int >(1025)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Simplex_Limits_Perturbation",SWIG_From_int(static_cast< int >(1028)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Simplex_Limits_Singularity",SWIG_From_int(static_cast< int >(1037)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Simplex_Limits_UpperObj",SWIG_From_int(static_cast< int >(1026)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Simplex_Perturbation_Constant",SWIG_From_int(static_cast< int >(1015)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Simplex_Perturbation_Indicator",SWIG_From_int(static_cast< int >(1027)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Simplex_PGradient",SWIG_From_int(static_cast< int >(1029)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Simplex_Pricing",SWIG_From_int(static_cast< int >(1010)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Simplex_Refactor",SWIG_From_int(static_cast< int >(1031)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Simplex_Tolerances_Feasibility",SWIG_From_int(static_cast< int >(1016)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Simplex_Tolerances_Markowitz",SWIG_From_int(static_cast< int >(1013)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Simplex_Tolerances_Optimality",SWIG_From_int(static_cast< int >(1014)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_SolutionType",SWIG_From_int(static_cast< int >(1147)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Threads",SWIG_From_int(static_cast< int >(1067)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_TimeLimit",SWIG_From_int(static_cast< int >(1039)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Tune_DetTimeLimit",SWIG_From_int(static_cast< int >(1139)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Tune_Display",SWIG_From_int(static_cast< int >(1113)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Tune_Measure",SWIG_From_int(static_cast< int >(1110)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Tune_Repeat",SWIG_From_int(static_cast< int >(1111)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_Tune_TimeLimit",SWIG_From_int(static_cast< int >(1112)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_WorkDir",SWIG_From_int(static_cast< int >(1064)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPARAM_WorkMem",SWIG_From_int(static_cast< int >(1065)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXPUBLICPARAMS_H",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_ADVIND",SWIG_From_int(static_cast< int >(1001)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_AGGFILL",SWIG_From_int(static_cast< int >(1002)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_AGGIND",SWIG_From_int(static_cast< int >(1003)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_CLOCKTYPE",SWIG_From_int(static_cast< int >(1006)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_CRAIND",SWIG_From_int(static_cast< int >(1007)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_DEPIND",SWIG_From_int(static_cast< int >(1008)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_DPRIIND",SWIG_From_int(static_cast< int >(1009)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_PRICELIM",SWIG_From_int(static_cast< int >(1010)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_EPMRK",SWIG_From_int(static_cast< int >(1013)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_EPOPT",SWIG_From_int(static_cast< int >(1014)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_EPPER",SWIG_From_int(static_cast< int >(1015)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_EPRHS",SWIG_From_int(static_cast< int >(1016)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_SIMDISPLAY",SWIG_From_int(static_cast< int >(1019)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_ITLIM",SWIG_From_int(static_cast< int >(1020)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_ROWREADLIM",SWIG_From_int(static_cast< int >(1021)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_NETFIND",SWIG_From_int(static_cast< int >(1022)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_COLREADLIM",SWIG_From_int(static_cast< int >(1023)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_NZREADLIM",SWIG_From_int(static_cast< int >(1024)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_OBJLLIM",SWIG_From_int(static_cast< int >(1025)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_OBJULIM",SWIG_From_int(static_cast< int >(1026)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_PERIND",SWIG_From_int(static_cast< int >(1027)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_PERLIM",SWIG_From_int(static_cast< int >(1028)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_PPRIIND",SWIG_From_int(static_cast< int >(1029)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_PREIND",SWIG_From_int(static_cast< int >(1030)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_REINV",SWIG_From_int(static_cast< int >(1031)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_SCAIND",SWIG_From_int(static_cast< int >(1034)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_SCRIND",SWIG_From_int(static_cast< int >(1035)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_SINGLIM",SWIG_From_int(static_cast< int >(1037)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_TILIM",SWIG_From_int(static_cast< int >(1039)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_PREDUAL",SWIG_From_int(static_cast< int >(1044)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_PREPASS",SWIG_From_int(static_cast< int >(1052)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_DATACHECK",SWIG_From_int(static_cast< int >(1056)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_REDUCE",SWIG_From_int(static_cast< int >(1057)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_PRELINEAR",SWIG_From_int(static_cast< int >(1058)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_LPMETHOD",SWIG_From_int(static_cast< int >(1062)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_QPMETHOD",SWIG_From_int(static_cast< int >(1063)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_WORKDIR",SWIG_From_int(static_cast< int >(1064)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_WORKMEM",SWIG_From_int(static_cast< int >(1065)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_THREADS",SWIG_From_int(static_cast< int >(1067)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_CONFLICTALG",SWIG_From_int(static_cast< int >(1073)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_CONFLICTDISPLAY",SWIG_From_int(static_cast< int >(1074)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_SIFTDISPLAY",SWIG_From_int(static_cast< int >(1076)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_SIFTALG",SWIG_From_int(static_cast< int >(1077)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_SIFTITLIM",SWIG_From_int(static_cast< int >(1078)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_MPSLONGNUM",SWIG_From_int(static_cast< int >(1081)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_MEMORYEMPHASIS",SWIG_From_int(static_cast< int >(1082)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_NUMERICALEMPHASIS",SWIG_From_int(static_cast< int >(1083)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_FEASOPTMODE",SWIG_From_int(static_cast< int >(1084)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_PARALLELMODE",SWIG_From_int(static_cast< int >(1109)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_TUNINGMEASURE",SWIG_From_int(static_cast< int >(1110)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_TUNINGREPEAT",SWIG_From_int(static_cast< int >(1111)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_TUNINGTILIM",SWIG_From_int(static_cast< int >(1112)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_TUNINGDISPLAY",SWIG_From_int(static_cast< int >(1113)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_WRITELEVEL",SWIG_From_int(static_cast< int >(1114)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_RANDOMSEED",SWIG_From_int(static_cast< int >(1124)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_DETTILIM",SWIG_From_int(static_cast< int >(1127)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_FILEENCODING",SWIG_From_int(static_cast< int >(1129)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_APIENCODING",SWIG_From_int(static_cast< int >(1130)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_OPTIMALITYTARGET",SWIG_From_int(static_cast< int >(1131)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_CLONELOG",SWIG_From_int(static_cast< int >(1132)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_TUNINGDETTILIM",SWIG_From_int(static_cast< int >(1139)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_CPUMASK",SWIG_From_int(static_cast< int >(1144)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_SOLUTIONTYPE",SWIG_From_int(static_cast< int >(1147)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_WARNLIM",SWIG_From_int(static_cast< int >(1157)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_SIFTSIM",SWIG_From_int(static_cast< int >(1158)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_DYNAMICROWS",SWIG_From_int(static_cast< int >(1161)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_RECORD",SWIG_From_int(static_cast< int >(1162)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_PARAMDISPLAY",SWIG_From_int(static_cast< int >(1163)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_FOLDING",SWIG_From_int(static_cast< int >(1164)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_PREREFORM",SWIG_From_int(static_cast< int >(1167)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_WORKERALG",SWIG_From_int(static_cast< int >(1500)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_BENDERSSTRATEGY",SWIG_From_int(static_cast< int >(1501)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_BENDERSFEASCUTTOL",SWIG_From_int(static_cast< int >(1509)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_BENDERSOPTCUTTOL",SWIG_From_int(static_cast< int >(1510)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_MULTIOBJDISPLAY",SWIG_From_int(static_cast< int >(1600)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_BRDIR",SWIG_From_int(static_cast< int >(2001)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_BTTOL",SWIG_From_int(static_cast< int >(2002)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_CLIQUES",SWIG_From_int(static_cast< int >(2003)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_COEREDIND",SWIG_From_int(static_cast< int >(2004)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_COVERS",SWIG_From_int(static_cast< int >(2005)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_CUTLO",SWIG_From_int(static_cast< int >(2006)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_CUTUP",SWIG_From_int(static_cast< int >(2007)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_EPAGAP",SWIG_From_int(static_cast< int >(2008)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_EPGAP",SWIG_From_int(static_cast< int >(2009)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_EPINT",SWIG_From_int(static_cast< int >(2010)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_MIPDISPLAY",SWIG_From_int(static_cast< int >(2012)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_MIPINTERVAL",SWIG_From_int(static_cast< int >(2013)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_INTSOLLIM",SWIG_From_int(static_cast< int >(2015)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_NODEFILEIND",SWIG_From_int(static_cast< int >(2016)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_NODELIM",SWIG_From_int(static_cast< int >(2017)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_NODESEL",SWIG_From_int(static_cast< int >(2018)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_OBJDIF",SWIG_From_int(static_cast< int >(2019)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_MIPORDIND",SWIG_From_int(static_cast< int >(2020)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_RELOBJDIF",SWIG_From_int(static_cast< int >(2022)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_STARTALG",SWIG_From_int(static_cast< int >(2025)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_SUBALG",SWIG_From_int(static_cast< int >(2026)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_TRELIM",SWIG_From_int(static_cast< int >(2027)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_VARSEL",SWIG_From_int(static_cast< int >(2028)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_BNDSTRENIND",SWIG_From_int(static_cast< int >(2029)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_HEURFREQ",SWIG_From_int(static_cast< int >(2031)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_MIPORDTYPE",SWIG_From_int(static_cast< int >(2032)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_CUTSFACTOR",SWIG_From_int(static_cast< int >(2033)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_RELAXPREIND",SWIG_From_int(static_cast< int >(2034)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_PRESLVND",SWIG_From_int(static_cast< int >(2037)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_BBINTERVAL",SWIG_From_int(static_cast< int >(2039)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_FLOWCOVERS",SWIG_From_int(static_cast< int >(2040)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_IMPLBD",SWIG_From_int(static_cast< int >(2041)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_PROBE",SWIG_From_int(static_cast< int >(2042)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_GUBCOVERS",SWIG_From_int(static_cast< int >(2044)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_STRONGCANDLIM",SWIG_From_int(static_cast< int >(2045)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_STRONGITLIM",SWIG_From_int(static_cast< int >(2046)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_FRACCAND",SWIG_From_int(static_cast< int >(2048)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_FRACCUTS",SWIG_From_int(static_cast< int >(2049)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_FRACPASS",SWIG_From_int(static_cast< int >(2050)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_FLOWPATHS",SWIG_From_int(static_cast< int >(2051)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_MIRCUTS",SWIG_From_int(static_cast< int >(2052)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_DISJCUTS",SWIG_From_int(static_cast< int >(2053)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_AGGCUTLIM",SWIG_From_int(static_cast< int >(2054)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_MIPCBREDLP",SWIG_From_int(static_cast< int >(2055)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_CUTPASS",SWIG_From_int(static_cast< int >(2056)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_MIPEMPHASIS",SWIG_From_int(static_cast< int >(2058)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_SYMMETRY",SWIG_From_int(static_cast< int >(2059)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_DIVETYPE",SWIG_From_int(static_cast< int >(2060)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_RINSHEUR",SWIG_From_int(static_cast< int >(2061)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_LBHEUR",SWIG_From_int(static_cast< int >(2063)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_REPEATPRESOLVE",SWIG_From_int(static_cast< int >(2064)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_PROBETIME",SWIG_From_int(static_cast< int >(2065)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_POLISHTIME",SWIG_From_int(static_cast< int >(2066)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_REPAIRTRIES",SWIG_From_int(static_cast< int >(2067)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_EPLIN",SWIG_From_int(static_cast< int >(2068)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_EPRELAX",SWIG_From_int(static_cast< int >(2073)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_FPHEUR",SWIG_From_int(static_cast< int >(2098)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_EACHCUTLIM",SWIG_From_int(static_cast< int >(2102)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_SOLNPOOLCAPACITY",SWIG_From_int(static_cast< int >(2103)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_SOLNPOOLREPLACE",SWIG_From_int(static_cast< int >(2104)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_SOLNPOOLGAP",SWIG_From_int(static_cast< int >(2105)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_SOLNPOOLAGAP",SWIG_From_int(static_cast< int >(2106)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_SOLNPOOLINTENSITY",SWIG_From_int(static_cast< int >(2107)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_POPULATELIM",SWIG_From_int(static_cast< int >(2108)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_MIPSEARCH",SWIG_From_int(static_cast< int >(2109)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_MIQCPSTRAT",SWIG_From_int(static_cast< int >(2110)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_ZEROHALFCUTS",SWIG_From_int(static_cast< int >(2111)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_HEUREFFORT",SWIG_From_int(static_cast< int >(2120)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_POLISHAFTEREPAGAP",SWIG_From_int(static_cast< int >(2126)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_POLISHAFTEREPGAP",SWIG_From_int(static_cast< int >(2127)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_POLISHAFTERNODE",SWIG_From_int(static_cast< int >(2128)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_POLISHAFTERINTSOL",SWIG_From_int(static_cast< int >(2129)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_POLISHAFTERTIME",SWIG_From_int(static_cast< int >(2130)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_MCFCUTS",SWIG_From_int(static_cast< int >(2134)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_MIPKAPPASTATS",SWIG_From_int(static_cast< int >(2137)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_AUXROOTTHREADS",SWIG_From_int(static_cast< int >(2139)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_INTSOLFILEPREFIX",SWIG_From_int(static_cast< int >(2143)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_PROBEDETTIME",SWIG_From_int(static_cast< int >(2150)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_POLISHAFTERDETTIME",SWIG_From_int(static_cast< int >(2151)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_LANDPCUTS",SWIG_From_int(static_cast< int >(2152)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_NODECUTS",SWIG_From_int(static_cast< int >(2157)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_RAMPUPDURATION",SWIG_From_int(static_cast< int >(2163)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_RAMPUPDETTILIM",SWIG_From_int(static_cast< int >(2164)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_RAMPUPTILIM",SWIG_From_int(static_cast< int >(2165)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_LOCALIMPLBD",SWIG_From_int(static_cast< int >(2181)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_BQPCUTS",SWIG_From_int(static_cast< int >(2195)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_RLTCUTS",SWIG_From_int(static_cast< int >(2196)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_SUBMIPSTARTALG",SWIG_From_int(static_cast< int >(2205)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_SUBMIPSUBALG",SWIG_From_int(static_cast< int >(2206)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_SUBMIPSCAIND",SWIG_From_int(static_cast< int >(2207)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_SUBMIPNODELIMIT",SWIG_From_int(static_cast< int >(2212)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_SOS1REFORM",SWIG_From_int(static_cast< int >(2230)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_SOS2REFORM",SWIG_From_int(static_cast< int >(2231)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_BAREPCOMP",SWIG_From_int(static_cast< int >(3002)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_BARGROWTH",SWIG_From_int(static_cast< int >(3003)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_BAROBJRNG",SWIG_From_int(static_cast< int >(3004)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_BARALG",SWIG_From_int(static_cast< int >(3007)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_BARCOLNZ",SWIG_From_int(static_cast< int >(3009)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_BARDISPLAY",SWIG_From_int(static_cast< int >(3010)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_BARITLIM",SWIG_From_int(static_cast< int >(3012)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_BARMAXCOR",SWIG_From_int(static_cast< int >(3013)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_BARORDER",SWIG_From_int(static_cast< int >(3014)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_BARSTARTALG",SWIG_From_int(static_cast< int >(3017)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_BARCROSSALG",SWIG_From_int(static_cast< int >(3018)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_BARQCPEPCOMP",SWIG_From_int(static_cast< int >(3020)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_QPNZREADLIM",SWIG_From_int(static_cast< int >(4001)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_CALCQCPDUALS",SWIG_From_int(static_cast< int >(4003)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_QPMAKEPSDIND",SWIG_From_int(static_cast< int >(4010)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_QTOLININD",SWIG_From_int(static_cast< int >(4012)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_NETITLIM",SWIG_From_int(static_cast< int >(5001)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_NETEPOPT",SWIG_From_int(static_cast< int >(5002)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_NETEPRHS",SWIG_From_int(static_cast< int >(5003)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_NETPPRIIND",SWIG_From_int(static_cast< int >(5004)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_PARAM_NETDISPLAY",SWIG_From_int(static_cast< int >(5005)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CPXAUTOTYPES_H_H",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_CPXAUTOSTRUCTS_H_H",SWIG_From_int(static_cast< int >(1)));
  
  /* type '::cpxdeserializer' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__cpxdeserializer_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'cpxdeserializer'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "cpxdeserializer", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "cpxdeserializer");
  d = md;
  
  /* type '::cpxserializer' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__cpxserializer_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'cpxserializer'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "cpxserializer", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "cpxserializer");
  d = md;
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPX_H",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXBAR_H",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXMIP_H",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXGC_H",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXNET_H",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXQP_H",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPXSOCP_H",SWIG_From_int(static_cast< int >(1)));
  
  /* type 'ampls::cpx::impl::CBWrap' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__ampls__cpx__impl__CBWrap_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'CBWrap'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "CBWrap", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "CBWrap");
  d = md;
  
  /* type 'ampls::CPLEXDrv' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__ampls__CPLEXDrv_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_ampls__impl__SolverDriverT_ampls__CPLEXModel_t");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData *) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData *) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'CPLEXDrv' as base 'ampls::impl::SolverDriver<(ampls::CPLEXModel)>' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'CPLEXDrv'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "CPLEXDrv", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "CPLEXDrv");
  d = md;
  
  /* type 'ampls::CPLEXModel' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__ampls__CPLEXModel_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_ampls__AMPLModel");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData *) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData *) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'CPLEXModel' as base 'ampls::AMPLModel' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'CPLEXModel'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "CPLEXModel", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "CPLEXModel");
  d = md;
  
  /* type 'ampls::CPLEXCallback' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__ampls__CPLEXCallback_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_ampls__impl__BaseCallback");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData *) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData *) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'CPLEXCallback' as base 'ampls::impl::BaseCallback' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'CPLEXCallback'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "CPLEXCallback", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "CPLEXCallback");
  d = md;
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

