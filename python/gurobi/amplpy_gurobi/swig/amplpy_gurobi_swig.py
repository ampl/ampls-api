# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _amplpy_gurobi_swig
else:
    import _amplpy_gurobi_swig

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class dblArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _amplpy_gurobi_swig.dblArray_swiginit(self, _amplpy_gurobi_swig.new_dblArray(nelements))
    __swig_destroy__ = _amplpy_gurobi_swig.delete_dblArray

    def __getitem__(self, index):
        return _amplpy_gurobi_swig.dblArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _amplpy_gurobi_swig.dblArray___setitem__(self, index, value)

    def cast(self):
        return _amplpy_gurobi_swig.dblArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _amplpy_gurobi_swig.dblArray_frompointer(t)

# Register dblArray in _amplpy_gurobi_swig:
_amplpy_gurobi_swig.dblArray_swigregister(dblArray)

def dblArray_frompointer(t):
    return _amplpy_gurobi_swig.dblArray_frompointer(t)

class intArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _amplpy_gurobi_swig.intArray_swiginit(self, _amplpy_gurobi_swig.new_intArray(nelements))
    __swig_destroy__ = _amplpy_gurobi_swig.delete_intArray

    def __getitem__(self, index):
        return _amplpy_gurobi_swig.intArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _amplpy_gurobi_swig.intArray___setitem__(self, index, value)

    def cast(self):
        return _amplpy_gurobi_swig.intArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _amplpy_gurobi_swig.intArray_frompointer(t)

# Register intArray in _amplpy_gurobi_swig:
_amplpy_gurobi_swig.intArray_swigregister(intArray)

def intArray_frompointer(t):
    return _amplpy_gurobi_swig.intArray_frompointer(t)

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _amplpy_gurobi_swig.delete_SwigPyIterator

    def value(self):
        return _amplpy_gurobi_swig.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _amplpy_gurobi_swig.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _amplpy_gurobi_swig.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _amplpy_gurobi_swig.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _amplpy_gurobi_swig.SwigPyIterator_equal(self, x)

    def copy(self):
        return _amplpy_gurobi_swig.SwigPyIterator_copy(self)

    def next(self):
        return _amplpy_gurobi_swig.SwigPyIterator_next(self)

    def __next__(self):
        return _amplpy_gurobi_swig.SwigPyIterator___next__(self)

    def previous(self):
        return _amplpy_gurobi_swig.SwigPyIterator_previous(self)

    def advance(self, n):
        return _amplpy_gurobi_swig.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _amplpy_gurobi_swig.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _amplpy_gurobi_swig.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _amplpy_gurobi_swig.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _amplpy_gurobi_swig.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _amplpy_gurobi_swig.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _amplpy_gurobi_swig.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _amplpy_gurobi_swig:
_amplpy_gurobi_swig.SwigPyIterator_swigregister(SwigPyIterator)

class map_string_int(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _amplpy_gurobi_swig.map_string_int_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _amplpy_gurobi_swig.map_string_int___nonzero__(self)

    def __bool__(self):
        return _amplpy_gurobi_swig.map_string_int___bool__(self)

    def __len__(self):
        return _amplpy_gurobi_swig.map_string_int___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _amplpy_gurobi_swig.map_string_int___getitem__(self, key)

    def __delitem__(self, key):
        return _amplpy_gurobi_swig.map_string_int___delitem__(self, key)

    def has_key(self, key):
        return _amplpy_gurobi_swig.map_string_int_has_key(self, key)

    def keys(self):
        return _amplpy_gurobi_swig.map_string_int_keys(self)

    def values(self):
        return _amplpy_gurobi_swig.map_string_int_values(self)

    def items(self):
        return _amplpy_gurobi_swig.map_string_int_items(self)

    def __contains__(self, key):
        return _amplpy_gurobi_swig.map_string_int___contains__(self, key)

    def key_iterator(self):
        return _amplpy_gurobi_swig.map_string_int_key_iterator(self)

    def value_iterator(self):
        return _amplpy_gurobi_swig.map_string_int_value_iterator(self)

    def __setitem__(self, *args):
        return _amplpy_gurobi_swig.map_string_int___setitem__(self, *args)

    def asdict(self):
        return _amplpy_gurobi_swig.map_string_int_asdict(self)

    def __init__(self, *args):
        _amplpy_gurobi_swig.map_string_int_swiginit(self, _amplpy_gurobi_swig.new_map_string_int(*args))

    def empty(self):
        return _amplpy_gurobi_swig.map_string_int_empty(self)

    def size(self):
        return _amplpy_gurobi_swig.map_string_int_size(self)

    def swap(self, v):
        return _amplpy_gurobi_swig.map_string_int_swap(self, v)

    def begin(self):
        return _amplpy_gurobi_swig.map_string_int_begin(self)

    def end(self):
        return _amplpy_gurobi_swig.map_string_int_end(self)

    def rbegin(self):
        return _amplpy_gurobi_swig.map_string_int_rbegin(self)

    def rend(self):
        return _amplpy_gurobi_swig.map_string_int_rend(self)

    def clear(self):
        return _amplpy_gurobi_swig.map_string_int_clear(self)

    def get_allocator(self):
        return _amplpy_gurobi_swig.map_string_int_get_allocator(self)

    def count(self, x):
        return _amplpy_gurobi_swig.map_string_int_count(self, x)

    def erase(self, *args):
        return _amplpy_gurobi_swig.map_string_int_erase(self, *args)

    def find(self, x):
        return _amplpy_gurobi_swig.map_string_int_find(self, x)

    def lower_bound(self, x):
        return _amplpy_gurobi_swig.map_string_int_lower_bound(self, x)

    def upper_bound(self, x):
        return _amplpy_gurobi_swig.map_string_int_upper_bound(self, x)
    __swig_destroy__ = _amplpy_gurobi_swig.delete_map_string_int

# Register map_string_int in _amplpy_gurobi_swig:
_amplpy_gurobi_swig.map_string_int_swigregister(map_string_int)

class map_int_string(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _amplpy_gurobi_swig.map_int_string_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _amplpy_gurobi_swig.map_int_string___nonzero__(self)

    def __bool__(self):
        return _amplpy_gurobi_swig.map_int_string___bool__(self)

    def __len__(self):
        return _amplpy_gurobi_swig.map_int_string___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _amplpy_gurobi_swig.map_int_string___getitem__(self, key)

    def __delitem__(self, key):
        return _amplpy_gurobi_swig.map_int_string___delitem__(self, key)

    def has_key(self, key):
        return _amplpy_gurobi_swig.map_int_string_has_key(self, key)

    def keys(self):
        return _amplpy_gurobi_swig.map_int_string_keys(self)

    def values(self):
        return _amplpy_gurobi_swig.map_int_string_values(self)

    def items(self):
        return _amplpy_gurobi_swig.map_int_string_items(self)

    def __contains__(self, key):
        return _amplpy_gurobi_swig.map_int_string___contains__(self, key)

    def key_iterator(self):
        return _amplpy_gurobi_swig.map_int_string_key_iterator(self)

    def value_iterator(self):
        return _amplpy_gurobi_swig.map_int_string_value_iterator(self)

    def __setitem__(self, *args):
        return _amplpy_gurobi_swig.map_int_string___setitem__(self, *args)

    def asdict(self):
        return _amplpy_gurobi_swig.map_int_string_asdict(self)

    def __init__(self, *args):
        _amplpy_gurobi_swig.map_int_string_swiginit(self, _amplpy_gurobi_swig.new_map_int_string(*args))

    def empty(self):
        return _amplpy_gurobi_swig.map_int_string_empty(self)

    def size(self):
        return _amplpy_gurobi_swig.map_int_string_size(self)

    def swap(self, v):
        return _amplpy_gurobi_swig.map_int_string_swap(self, v)

    def begin(self):
        return _amplpy_gurobi_swig.map_int_string_begin(self)

    def end(self):
        return _amplpy_gurobi_swig.map_int_string_end(self)

    def rbegin(self):
        return _amplpy_gurobi_swig.map_int_string_rbegin(self)

    def rend(self):
        return _amplpy_gurobi_swig.map_int_string_rend(self)

    def clear(self):
        return _amplpy_gurobi_swig.map_int_string_clear(self)

    def get_allocator(self):
        return _amplpy_gurobi_swig.map_int_string_get_allocator(self)

    def count(self, x):
        return _amplpy_gurobi_swig.map_int_string_count(self, x)

    def erase(self, *args):
        return _amplpy_gurobi_swig.map_int_string_erase(self, *args)

    def find(self, x):
        return _amplpy_gurobi_swig.map_int_string_find(self, x)

    def lower_bound(self, x):
        return _amplpy_gurobi_swig.map_int_string_lower_bound(self, x)

    def upper_bound(self, x):
        return _amplpy_gurobi_swig.map_int_string_upper_bound(self, x)
    __swig_destroy__ = _amplpy_gurobi_swig.delete_map_int_string

# Register map_int_string in _amplpy_gurobi_swig:
_amplpy_gurobi_swig.map_int_string_swigregister(map_int_string)

class vector_string(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _amplpy_gurobi_swig.vector_string_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _amplpy_gurobi_swig.vector_string___nonzero__(self)

    def __bool__(self):
        return _amplpy_gurobi_swig.vector_string___bool__(self)

    def __len__(self):
        return _amplpy_gurobi_swig.vector_string___len__(self)

    def __getslice__(self, i, j):
        return _amplpy_gurobi_swig.vector_string___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _amplpy_gurobi_swig.vector_string___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _amplpy_gurobi_swig.vector_string___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _amplpy_gurobi_swig.vector_string___delitem__(self, *args)

    def __getitem__(self, *args):
        return _amplpy_gurobi_swig.vector_string___getitem__(self, *args)

    def __setitem__(self, *args):
        return _amplpy_gurobi_swig.vector_string___setitem__(self, *args)

    def pop(self):
        return _amplpy_gurobi_swig.vector_string_pop(self)

    def append(self, x):
        return _amplpy_gurobi_swig.vector_string_append(self, x)

    def empty(self):
        return _amplpy_gurobi_swig.vector_string_empty(self)

    def size(self):
        return _amplpy_gurobi_swig.vector_string_size(self)

    def swap(self, v):
        return _amplpy_gurobi_swig.vector_string_swap(self, v)

    def begin(self):
        return _amplpy_gurobi_swig.vector_string_begin(self)

    def end(self):
        return _amplpy_gurobi_swig.vector_string_end(self)

    def rbegin(self):
        return _amplpy_gurobi_swig.vector_string_rbegin(self)

    def rend(self):
        return _amplpy_gurobi_swig.vector_string_rend(self)

    def clear(self):
        return _amplpy_gurobi_swig.vector_string_clear(self)

    def get_allocator(self):
        return _amplpy_gurobi_swig.vector_string_get_allocator(self)

    def pop_back(self):
        return _amplpy_gurobi_swig.vector_string_pop_back(self)

    def erase(self, *args):
        return _amplpy_gurobi_swig.vector_string_erase(self, *args)

    def __init__(self, *args):
        _amplpy_gurobi_swig.vector_string_swiginit(self, _amplpy_gurobi_swig.new_vector_string(*args))

    def push_back(self, x):
        return _amplpy_gurobi_swig.vector_string_push_back(self, x)

    def front(self):
        return _amplpy_gurobi_swig.vector_string_front(self)

    def back(self):
        return _amplpy_gurobi_swig.vector_string_back(self)

    def assign(self, n, x):
        return _amplpy_gurobi_swig.vector_string_assign(self, n, x)

    def resize(self, *args):
        return _amplpy_gurobi_swig.vector_string_resize(self, *args)

    def insert(self, *args):
        return _amplpy_gurobi_swig.vector_string_insert(self, *args)

    def reserve(self, n):
        return _amplpy_gurobi_swig.vector_string_reserve(self, n)

    def capacity(self):
        return _amplpy_gurobi_swig.vector_string_capacity(self)
    __swig_destroy__ = _amplpy_gurobi_swig.delete_vector_string

# Register vector_string in _amplpy_gurobi_swig:
_amplpy_gurobi_swig.vector_string_swigregister(vector_string)

class vector_double(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _amplpy_gurobi_swig.vector_double_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _amplpy_gurobi_swig.vector_double___nonzero__(self)

    def __bool__(self):
        return _amplpy_gurobi_swig.vector_double___bool__(self)

    def __len__(self):
        return _amplpy_gurobi_swig.vector_double___len__(self)

    def __getslice__(self, i, j):
        return _amplpy_gurobi_swig.vector_double___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _amplpy_gurobi_swig.vector_double___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _amplpy_gurobi_swig.vector_double___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _amplpy_gurobi_swig.vector_double___delitem__(self, *args)

    def __getitem__(self, *args):
        return _amplpy_gurobi_swig.vector_double___getitem__(self, *args)

    def __setitem__(self, *args):
        return _amplpy_gurobi_swig.vector_double___setitem__(self, *args)

    def pop(self):
        return _amplpy_gurobi_swig.vector_double_pop(self)

    def append(self, x):
        return _amplpy_gurobi_swig.vector_double_append(self, x)

    def empty(self):
        return _amplpy_gurobi_swig.vector_double_empty(self)

    def size(self):
        return _amplpy_gurobi_swig.vector_double_size(self)

    def swap(self, v):
        return _amplpy_gurobi_swig.vector_double_swap(self, v)

    def begin(self):
        return _amplpy_gurobi_swig.vector_double_begin(self)

    def end(self):
        return _amplpy_gurobi_swig.vector_double_end(self)

    def rbegin(self):
        return _amplpy_gurobi_swig.vector_double_rbegin(self)

    def rend(self):
        return _amplpy_gurobi_swig.vector_double_rend(self)

    def clear(self):
        return _amplpy_gurobi_swig.vector_double_clear(self)

    def get_allocator(self):
        return _amplpy_gurobi_swig.vector_double_get_allocator(self)

    def pop_back(self):
        return _amplpy_gurobi_swig.vector_double_pop_back(self)

    def erase(self, *args):
        return _amplpy_gurobi_swig.vector_double_erase(self, *args)

    def __init__(self, *args):
        _amplpy_gurobi_swig.vector_double_swiginit(self, _amplpy_gurobi_swig.new_vector_double(*args))

    def push_back(self, x):
        return _amplpy_gurobi_swig.vector_double_push_back(self, x)

    def front(self):
        return _amplpy_gurobi_swig.vector_double_front(self)

    def back(self):
        return _amplpy_gurobi_swig.vector_double_back(self)

    def assign(self, n, x):
        return _amplpy_gurobi_swig.vector_double_assign(self, n, x)

    def resize(self, *args):
        return _amplpy_gurobi_swig.vector_double_resize(self, *args)

    def insert(self, *args):
        return _amplpy_gurobi_swig.vector_double_insert(self, *args)

    def reserve(self, n):
        return _amplpy_gurobi_swig.vector_double_reserve(self, n)

    def capacity(self):
        return _amplpy_gurobi_swig.vector_double_capacity(self)
    __swig_destroy__ = _amplpy_gurobi_swig.delete_vector_double

# Register vector_double in _amplpy_gurobi_swig:
_amplpy_gurobi_swig.vector_double_swigregister(vector_double)

class AMPLSolverException(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _amplpy_gurobi_swig.AMPLSolverException_swiginit(self, _amplpy_gurobi_swig.new_AMPLSolverException(*args))

    @staticmethod
    def format(*args):
        return _amplpy_gurobi_swig.AMPLSolverException_format(*args)
    __swig_destroy__ = _amplpy_gurobi_swig.delete_AMPLSolverException

# Register AMPLSolverException in _amplpy_gurobi_swig:
_amplpy_gurobi_swig.AMPLSolverException_swigregister(AMPLSolverException)

def AMPLSolverException_format(*args):
    return _amplpy_gurobi_swig.AMPLSolverException_format(*args)

class Variant(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    str = property(_amplpy_gurobi_swig.Variant_str_get, _amplpy_gurobi_swig.Variant_str_set)
    integer = property(_amplpy_gurobi_swig.Variant_integer_get, _amplpy_gurobi_swig.Variant_integer_set)
    dbl = property(_amplpy_gurobi_swig.Variant_dbl_get, _amplpy_gurobi_swig.Variant_dbl_set)
    type = property(_amplpy_gurobi_swig.Variant_type_get, _amplpy_gurobi_swig.Variant_type_set)

    def __init__(self, *args):
        _amplpy_gurobi_swig.Variant_swiginit(self, _amplpy_gurobi_swig.new_Variant(*args))
    __swig_destroy__ = _amplpy_gurobi_swig.delete_Variant

# Register Variant in _amplpy_gurobi_swig:
_amplpy_gurobi_swig.Variant_swigregister(Variant)


def generateArguments(modelName, options):
    return _amplpy_gurobi_swig.generateArguments(modelName, options)

def deleteParams(params):
    return _amplpy_gurobi_swig.deleteParams(params)
class SolverParams(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DBL_MIPGap = _amplpy_gurobi_swig.SolverParams_DBL_MIPGap
    DBL_TimeLimit = _amplpy_gurobi_swig.SolverParams_DBL_TimeLimit
    INT_SolutionLimit = _amplpy_gurobi_swig.SolverParams_INT_SolutionLimit

    def __init__(self):
        _amplpy_gurobi_swig.SolverParams_swiginit(self, _amplpy_gurobi_swig.new_SolverParams())
    __swig_destroy__ = _amplpy_gurobi_swig.delete_SolverParams

# Register SolverParams in _amplpy_gurobi_swig:
_amplpy_gurobi_swig.SolverParams_swigregister(SolverParams)

class Where(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    MSG = _amplpy_gurobi_swig.Where_MSG
    PRESOLVE = _amplpy_gurobi_swig.Where_PRESOLVE
    LPSOLVE = _amplpy_gurobi_swig.Where_LPSOLVE
    MIPNODE = _amplpy_gurobi_swig.Where_MIPNODE
    MIPSOL = _amplpy_gurobi_swig.Where_MIPSOL
    MIP = _amplpy_gurobi_swig.Where_MIP
    NOTMAPPED = _amplpy_gurobi_swig.Where_NOTMAPPED

    def __init__(self):
        _amplpy_gurobi_swig.Where_swiginit(self, _amplpy_gurobi_swig.new_Where())
    __swig_destroy__ = _amplpy_gurobi_swig.delete_Where

# Register Where in _amplpy_gurobi_swig:
_amplpy_gurobi_swig.Where_swigregister(Where)

class Value(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    OBJ = _amplpy_gurobi_swig.Value_OBJ
    PRE_DELCOLS = _amplpy_gurobi_swig.Value_PRE_DELCOLS
    PRE_DELROWS = _amplpy_gurobi_swig.Value_PRE_DELROWS
    PRE_COEFFCHANGED = _amplpy_gurobi_swig.Value_PRE_COEFFCHANGED
    ITERATIONS = _amplpy_gurobi_swig.Value_ITERATIONS
    RUNTIME = _amplpy_gurobi_swig.Value_RUNTIME
    MIP_RELATIVEGAP = _amplpy_gurobi_swig.Value_MIP_RELATIVEGAP

    def __init__(self):
        _amplpy_gurobi_swig.Value_swiginit(self, _amplpy_gurobi_swig.new_Value())
    __swig_destroy__ = _amplpy_gurobi_swig.delete_Value

# Register Value in _amplpy_gurobi_swig:
_amplpy_gurobi_swig.Value_swigregister(Value)

class CutDirection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    EQ = _amplpy_gurobi_swig.CutDirection_EQ
    GE = _amplpy_gurobi_swig.CutDirection_GE
    LE = _amplpy_gurobi_swig.CutDirection_LE

    def __init__(self):
        _amplpy_gurobi_swig.CutDirection_swiginit(self, _amplpy_gurobi_swig.new_CutDirection())
    __swig_destroy__ = _amplpy_gurobi_swig.delete_CutDirection

# Register CutDirection in _amplpy_gurobi_swig:
_amplpy_gurobi_swig.CutDirection_swigregister(CutDirection)

class Status(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    UNKNOWN = _amplpy_gurobi_swig.Status_UNKNOWN
    OPTIMAL = _amplpy_gurobi_swig.Status_OPTIMAL
    INFEASIBLE = _amplpy_gurobi_swig.Status_INFEASIBLE
    UNBOUNDED = _amplpy_gurobi_swig.Status_UNBOUNDED
    LIMIT_ITERATION = _amplpy_gurobi_swig.Status_LIMIT_ITERATION
    LIMIT_NODE = _amplpy_gurobi_swig.Status_LIMIT_NODE
    LIMIT_TIME = _amplpy_gurobi_swig.Status_LIMIT_TIME
    LIMIT_SOLUTION = _amplpy_gurobi_swig.Status_LIMIT_SOLUTION
    INTERRUPTED = _amplpy_gurobi_swig.Status_INTERRUPTED
    NOTMAPPED = _amplpy_gurobi_swig.Status_NOTMAPPED

    def __init__(self):
        _amplpy_gurobi_swig.Status_swiginit(self, _amplpy_gurobi_swig.new_Status())
    __swig_destroy__ = _amplpy_gurobi_swig.delete_Status

# Register Status in _amplpy_gurobi_swig:
_amplpy_gurobi_swig.Status_swigregister(Status)

class AMPLMutex(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _amplpy_gurobi_swig.AMPLMutex_swiginit(self, _amplpy_gurobi_swig.new_AMPLMutex())
    __swig_destroy__ = _amplpy_gurobi_swig.delete_AMPLMutex

    def Lock(self):
        return _amplpy_gurobi_swig.AMPLMutex_Lock(self)

    def Unlock(self):
        return _amplpy_gurobi_swig.AMPLMutex_Unlock(self)

# Register AMPLMutex in _amplpy_gurobi_swig:
_amplpy_gurobi_swig.AMPLMutex_swigregister(AMPLMutex)

class BaseCallback(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def run(self):
        return _amplpy_gurobi_swig.BaseCallback_run(self)

    def getVarMap(self):
        return _amplpy_gurobi_swig.BaseCallback_getVarMap(self)

    def getVarMapInverse(self):
        return _amplpy_gurobi_swig.BaseCallback_getVarMapInverse(self)
    __swig_destroy__ = _amplpy_gurobi_swig.delete_BaseCallback

    def addCut(self, vars, coeffs, direction, rhs):
        return _amplpy_gurobi_swig.BaseCallback_addCut(self, vars, coeffs, direction, rhs)

    def addLazy(self, vars, coeffs, direction, rhs):
        return _amplpy_gurobi_swig.BaseCallback_addLazy(self, vars, coeffs, direction, rhs)

    def addCutsIndices(self, nvars, coeffs, direction, rhs):
        return _amplpy_gurobi_swig.BaseCallback_addCutsIndices(self, nvars, coeffs, direction, rhs)

    def addLazyIndices(self, nvars, coeffs, direction, rhs):
        return _amplpy_gurobi_swig.BaseCallback_addLazyIndices(self, nvars, coeffs, direction, rhs)

    def getSolutionVector(self):
        return _amplpy_gurobi_swig.BaseCallback_getSolutionVector(self)

    def getSolution(self, len, sol):
        return _amplpy_gurobi_swig.BaseCallback_getSolution(self, len, sol)

    def getObj(self):
        return _amplpy_gurobi_swig.BaseCallback_getObj(self)

    def getWhere(self):
        return _amplpy_gurobi_swig.BaseCallback_getWhere(self)

    def getWhereString(self):
        return _amplpy_gurobi_swig.BaseCallback_getWhereString(self)

    def getMessage(self):
        return _amplpy_gurobi_swig.BaseCallback_getMessage(self)

    def getAMPLWhere(self):
        return _amplpy_gurobi_swig.BaseCallback_getAMPLWhere(self)

    def getValue(self, v):
        return _amplpy_gurobi_swig.BaseCallback_getValue(self, v)

# Register BaseCallback in _amplpy_gurobi_swig:
_amplpy_gurobi_swig.BaseCallback_swigregister(BaseCallback)

class GenericCallback(BaseCallback):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getObj(self):
        return _amplpy_gurobi_swig.GenericCallback_getObj(self)

    def getWhere(self):
        return _amplpy_gurobi_swig.GenericCallback_getWhere(self)

    def getAMPLWhere(self):
        return _amplpy_gurobi_swig.GenericCallback_getAMPLWhere(self)

    def getWhereString(self):
        return _amplpy_gurobi_swig.GenericCallback_getWhereString(self)

    def getMessage(self):
        return _amplpy_gurobi_swig.GenericCallback_getMessage(self)

    def getValue(self, v):
        return _amplpy_gurobi_swig.GenericCallback_getValue(self, v)

    def __init__(self):
        if self.__class__ == GenericCallback:
            _self = None
        else:
            _self = self
        _amplpy_gurobi_swig.GenericCallback_swiginit(self, _amplpy_gurobi_swig.new_GenericCallback(_self, ))
    __swig_destroy__ = _amplpy_gurobi_swig.delete_GenericCallback
    def __disown__(self):
        self.this.disown()
        _amplpy_gurobi_swig.disown_GenericCallback(self)
        return weakref.proxy(self)

# Register GenericCallback in _amplpy_gurobi_swig:
_amplpy_gurobi_swig.GenericCallback_swigregister(GenericCallback)

class AMPLModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getFileName(self):
        return _amplpy_gurobi_swig.AMPLModel_getFileName(self)

    def __init__(self, other):
        _amplpy_gurobi_swig.AMPLModel_swiginit(self, _amplpy_gurobi_swig.new_AMPLModel(other))

    def getVarMapInverse(self):
        return _amplpy_gurobi_swig.AMPLModel_getVarMapInverse(self)

    def getVarMap(self):
        return _amplpy_gurobi_swig.AMPLModel_getVarMap(self)

    def getVarMapFiltered(self, beginWith):
        return _amplpy_gurobi_swig.AMPLModel_getVarMapFiltered(self, beginWith)

    def setCallback(self, *args):
        return _amplpy_gurobi_swig.AMPLModel_setCallback(self, *args)

    def getSolutionVector(self):
        return _amplpy_gurobi_swig.AMPLModel_getSolutionVector(self)

    def getNumVars(self):
        return _amplpy_gurobi_swig.AMPLModel_getNumVars(self)

    def getStatus(self):
        return _amplpy_gurobi_swig.AMPLModel_getStatus(self)

    def optimize(self):
        return _amplpy_gurobi_swig.AMPLModel_optimize(self)

    def writeSol(self, *args):
        return _amplpy_gurobi_swig.AMPLModel_writeSol(self, *args)

    def getSolution(self, first, length, sol):
        return _amplpy_gurobi_swig.AMPLModel_getSolution(self, first, length, sol)

    def getObj(self):
        return _amplpy_gurobi_swig.AMPLModel_getObj(self)

    def error(self, code):
        return _amplpy_gurobi_swig.AMPLModel_error(self, code)

    def enableLazyConstraints(self):
        return _amplpy_gurobi_swig.AMPLModel_enableLazyConstraints(self)

    def printModelVars(self, onlyNonZero):
        return _amplpy_gurobi_swig.AMPLModel_printModelVars(self, onlyNonZero)

    def setParameter(self, *args):
        return _amplpy_gurobi_swig.AMPLModel_setParameter(self, *args)
    __swig_destroy__ = _amplpy_gurobi_swig.delete_AMPLModel

# Register AMPLModel in _amplpy_gurobi_swig:
_amplpy_gurobi_swig.AMPLModel_swigregister(AMPLModel)

class SolverDriverGrb(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _amplpy_gurobi_swig.delete_SolverDriverGrb

    def setOptions(self, options):
        return _amplpy_gurobi_swig.SolverDriverGrb_setOptions(self, options)

# Register SolverDriverGrb in _amplpy_gurobi_swig:
_amplpy_gurobi_swig.SolverDriverGrb_swigregister(SolverDriverGrb)

GRB_VERSION_MAJOR = _amplpy_gurobi_swig.GRB_VERSION_MAJOR
GRB_VERSION_MINOR = _amplpy_gurobi_swig.GRB_VERSION_MINOR
GRB_VERSION_TECHNICAL = _amplpy_gurobi_swig.GRB_VERSION_TECHNICAL
DEFAULT_CS_PRIORITY = _amplpy_gurobi_swig.DEFAULT_CS_PRIORITY
MAX_CS_PRIORITY = _amplpy_gurobi_swig.MAX_CS_PRIORITY
DEFAULT_CS_PORT = _amplpy_gurobi_swig.DEFAULT_CS_PORT
DEFAULT_CS_HANGUP = _amplpy_gurobi_swig.DEFAULT_CS_HANGUP
GRB_ERROR_OUT_OF_MEMORY = _amplpy_gurobi_swig.GRB_ERROR_OUT_OF_MEMORY
GRB_ERROR_NULL_ARGUMENT = _amplpy_gurobi_swig.GRB_ERROR_NULL_ARGUMENT
GRB_ERROR_INVALID_ARGUMENT = _amplpy_gurobi_swig.GRB_ERROR_INVALID_ARGUMENT
GRB_ERROR_UNKNOWN_ATTRIBUTE = _amplpy_gurobi_swig.GRB_ERROR_UNKNOWN_ATTRIBUTE
GRB_ERROR_DATA_NOT_AVAILABLE = _amplpy_gurobi_swig.GRB_ERROR_DATA_NOT_AVAILABLE
GRB_ERROR_INDEX_OUT_OF_RANGE = _amplpy_gurobi_swig.GRB_ERROR_INDEX_OUT_OF_RANGE
GRB_ERROR_UNKNOWN_PARAMETER = _amplpy_gurobi_swig.GRB_ERROR_UNKNOWN_PARAMETER
GRB_ERROR_VALUE_OUT_OF_RANGE = _amplpy_gurobi_swig.GRB_ERROR_VALUE_OUT_OF_RANGE
GRB_ERROR_NO_LICENSE = _amplpy_gurobi_swig.GRB_ERROR_NO_LICENSE
GRB_ERROR_SIZE_LIMIT_EXCEEDED = _amplpy_gurobi_swig.GRB_ERROR_SIZE_LIMIT_EXCEEDED
GRB_ERROR_CALLBACK = _amplpy_gurobi_swig.GRB_ERROR_CALLBACK
GRB_ERROR_FILE_READ = _amplpy_gurobi_swig.GRB_ERROR_FILE_READ
GRB_ERROR_FILE_WRITE = _amplpy_gurobi_swig.GRB_ERROR_FILE_WRITE
GRB_ERROR_NUMERIC = _amplpy_gurobi_swig.GRB_ERROR_NUMERIC
GRB_ERROR_IIS_NOT_INFEASIBLE = _amplpy_gurobi_swig.GRB_ERROR_IIS_NOT_INFEASIBLE
GRB_ERROR_NOT_FOR_MIP = _amplpy_gurobi_swig.GRB_ERROR_NOT_FOR_MIP
GRB_ERROR_OPTIMIZATION_IN_PROGRESS = _amplpy_gurobi_swig.GRB_ERROR_OPTIMIZATION_IN_PROGRESS
GRB_ERROR_DUPLICATES = _amplpy_gurobi_swig.GRB_ERROR_DUPLICATES
GRB_ERROR_NODEFILE = _amplpy_gurobi_swig.GRB_ERROR_NODEFILE
GRB_ERROR_Q_NOT_PSD = _amplpy_gurobi_swig.GRB_ERROR_Q_NOT_PSD
GRB_ERROR_QCP_EQUALITY_CONSTRAINT = _amplpy_gurobi_swig.GRB_ERROR_QCP_EQUALITY_CONSTRAINT
GRB_ERROR_NETWORK = _amplpy_gurobi_swig.GRB_ERROR_NETWORK
GRB_ERROR_JOB_REJECTED = _amplpy_gurobi_swig.GRB_ERROR_JOB_REJECTED
GRB_ERROR_NOT_SUPPORTED = _amplpy_gurobi_swig.GRB_ERROR_NOT_SUPPORTED
GRB_ERROR_EXCEED_2B_NONZEROS = _amplpy_gurobi_swig.GRB_ERROR_EXCEED_2B_NONZEROS
GRB_ERROR_INVALID_PIECEWISE_OBJ = _amplpy_gurobi_swig.GRB_ERROR_INVALID_PIECEWISE_OBJ
GRB_ERROR_UPDATEMODE_CHANGE = _amplpy_gurobi_swig.GRB_ERROR_UPDATEMODE_CHANGE
GRB_ERROR_CLOUD = _amplpy_gurobi_swig.GRB_ERROR_CLOUD
GRB_ERROR_MODEL_MODIFICATION = _amplpy_gurobi_swig.GRB_ERROR_MODEL_MODIFICATION
GRB_ERROR_CSWORKER = _amplpy_gurobi_swig.GRB_ERROR_CSWORKER
GRB_ERROR_TUNE_MODEL_TYPES = _amplpy_gurobi_swig.GRB_ERROR_TUNE_MODEL_TYPES
GRB_ERROR_SECURITY = _amplpy_gurobi_swig.GRB_ERROR_SECURITY
GRB_LESS_EQUAL = _amplpy_gurobi_swig.GRB_LESS_EQUAL
GRB_GREATER_EQUAL = _amplpy_gurobi_swig.GRB_GREATER_EQUAL
GRB_EQUAL = _amplpy_gurobi_swig.GRB_EQUAL
GRB_CONTINUOUS = _amplpy_gurobi_swig.GRB_CONTINUOUS
GRB_BINARY = _amplpy_gurobi_swig.GRB_BINARY
GRB_INTEGER = _amplpy_gurobi_swig.GRB_INTEGER
GRB_SEMICONT = _amplpy_gurobi_swig.GRB_SEMICONT
GRB_SEMIINT = _amplpy_gurobi_swig.GRB_SEMIINT
GRB_MINIMIZE = _amplpy_gurobi_swig.GRB_MINIMIZE
GRB_MAXIMIZE = _amplpy_gurobi_swig.GRB_MAXIMIZE
GRB_SOS_TYPE1 = _amplpy_gurobi_swig.GRB_SOS_TYPE1
GRB_SOS_TYPE2 = _amplpy_gurobi_swig.GRB_SOS_TYPE2
GRB_INFINITY = _amplpy_gurobi_swig.GRB_INFINITY
GRB_UNDEFINED = _amplpy_gurobi_swig.GRB_UNDEFINED
GRB_MAXINT = _amplpy_gurobi_swig.GRB_MAXINT
GRB_MAX_NAMELEN = _amplpy_gurobi_swig.GRB_MAX_NAMELEN
GRB_MAX_STRLEN = _amplpy_gurobi_swig.GRB_MAX_STRLEN
GRB_MAX_TAGLEN = _amplpy_gurobi_swig.GRB_MAX_TAGLEN
GRB_MAX_CONCURRENT = _amplpy_gurobi_swig.GRB_MAX_CONCURRENT

def GRBgetattrinfo(model, attrname, datatypeP, attrtypeP, settableP):
    return _amplpy_gurobi_swig.GRBgetattrinfo(model, attrname, datatypeP, attrtypeP, settableP)

def GRBisattravailable(model, attrname):
    return _amplpy_gurobi_swig.GRBisattravailable(model, attrname)

def GRBgetintattr(model, attrname, valueP):
    return _amplpy_gurobi_swig.GRBgetintattr(model, attrname, valueP)

def GRBsetintattr(model, attrname, newvalue):
    return _amplpy_gurobi_swig.GRBsetintattr(model, attrname, newvalue)

def GRBgetintattrelement(model, attrname, element, valueP):
    return _amplpy_gurobi_swig.GRBgetintattrelement(model, attrname, element, valueP)

def GRBsetintattrelement(model, attrname, element, newvalue):
    return _amplpy_gurobi_swig.GRBsetintattrelement(model, attrname, element, newvalue)

def GRBgetintattrarray(model, attrname, first, len, values):
    return _amplpy_gurobi_swig.GRBgetintattrarray(model, attrname, first, len, values)

def GRBsetintattrarray(model, attrname, first, len, newvalues):
    return _amplpy_gurobi_swig.GRBsetintattrarray(model, attrname, first, len, newvalues)

def GRBgetintattrlist(model, attrname, len, ind, values):
    return _amplpy_gurobi_swig.GRBgetintattrlist(model, attrname, len, ind, values)

def GRBsetintattrlist(model, attrname, len, ind, newvalues):
    return _amplpy_gurobi_swig.GRBsetintattrlist(model, attrname, len, ind, newvalues)

def GRBgetcharattrelement(model, attrname, element, valueP):
    return _amplpy_gurobi_swig.GRBgetcharattrelement(model, attrname, element, valueP)

def GRBsetcharattrelement(model, attrname, element, newvalue):
    return _amplpy_gurobi_swig.GRBsetcharattrelement(model, attrname, element, newvalue)

def GRBgetcharattrarray(model, attrname, first, len, values):
    return _amplpy_gurobi_swig.GRBgetcharattrarray(model, attrname, first, len, values)

def GRBsetcharattrarray(model, attrname, first, len, newvalues):
    return _amplpy_gurobi_swig.GRBsetcharattrarray(model, attrname, first, len, newvalues)

def GRBgetcharattrlist(model, attrname, len, ind, values):
    return _amplpy_gurobi_swig.GRBgetcharattrlist(model, attrname, len, ind, values)

def GRBsetcharattrlist(model, attrname, len, ind, newvalues):
    return _amplpy_gurobi_swig.GRBsetcharattrlist(model, attrname, len, ind, newvalues)

def GRBgetdblattr(model, attrname, valueP):
    return _amplpy_gurobi_swig.GRBgetdblattr(model, attrname, valueP)

def GRBsetdblattr(model, attrname, newvalue):
    return _amplpy_gurobi_swig.GRBsetdblattr(model, attrname, newvalue)

def GRBgetdblattrelement(model, attrname, element, valueP):
    return _amplpy_gurobi_swig.GRBgetdblattrelement(model, attrname, element, valueP)

def GRBsetdblattrelement(model, attrname, element, newvalue):
    return _amplpy_gurobi_swig.GRBsetdblattrelement(model, attrname, element, newvalue)

def GRBgetdblattrarray(model, attrname, first, len, values):
    return _amplpy_gurobi_swig.GRBgetdblattrarray(model, attrname, first, len, values)

def GRBsetdblattrarray(model, attrname, first, len, newvalues):
    return _amplpy_gurobi_swig.GRBsetdblattrarray(model, attrname, first, len, newvalues)

def GRBgetdblattrlist(model, attrname, len, ind, values):
    return _amplpy_gurobi_swig.GRBgetdblattrlist(model, attrname, len, ind, values)

def GRBsetdblattrlist(model, attrname, len, ind, newvalues):
    return _amplpy_gurobi_swig.GRBsetdblattrlist(model, attrname, len, ind, newvalues)

def GRBgetstrattr(model, attrname, valueP):
    return _amplpy_gurobi_swig.GRBgetstrattr(model, attrname, valueP)

def GRBsetstrattr(model, attrname, newvalue):
    return _amplpy_gurobi_swig.GRBsetstrattr(model, attrname, newvalue)

def GRBgetstrattrelement(model, attrname, element, valueP):
    return _amplpy_gurobi_swig.GRBgetstrattrelement(model, attrname, element, valueP)

def GRBsetstrattrelement(model, attrname, element, newvalue):
    return _amplpy_gurobi_swig.GRBsetstrattrelement(model, attrname, element, newvalue)

def GRBgetstrattrarray(model, attrname, first, len, values):
    return _amplpy_gurobi_swig.GRBgetstrattrarray(model, attrname, first, len, values)

def GRBsetstrattrarray(model, attrname, first, len, newvalues):
    return _amplpy_gurobi_swig.GRBsetstrattrarray(model, attrname, first, len, newvalues)

def GRBgetstrattrlist(model, attrname, len, ind, values):
    return _amplpy_gurobi_swig.GRBgetstrattrlist(model, attrname, len, ind, values)

def GRBsetstrattrlist(model, attrname, len, ind, newvalues):
    return _amplpy_gurobi_swig.GRBsetstrattrlist(model, attrname, len, ind, newvalues)

def GRBsetcallbackfunc(model, cb, usrdata):
    return _amplpy_gurobi_swig.GRBsetcallbackfunc(model, cb, usrdata)

def GRBgetcallbackfunc(model, cbP):
    return _amplpy_gurobi_swig.GRBgetcallbackfunc(model, cbP)

def GRBsetlogcallbackfunc(model, cb):
    return _amplpy_gurobi_swig.GRBsetlogcallbackfunc(model, cb)

def GRBsetlogcallbackfuncenv(env, cb):
    return _amplpy_gurobi_swig.GRBsetlogcallbackfuncenv(env, cb)

def GRBcbget(cbdata, where, what, resultP):
    return _amplpy_gurobi_swig.GRBcbget(cbdata, where, what, resultP)

def GRBcbsetparam(cbdata, paramname, newvalue):
    return _amplpy_gurobi_swig.GRBcbsetparam(cbdata, paramname, newvalue)

def GRBcbsolution(cbdata, solution, objvalP):
    return _amplpy_gurobi_swig.GRBcbsolution(cbdata, solution, objvalP)

def GRBcbcut(cbdata, cutlen, cutind, cutval, cutsense, cutrhs):
    return _amplpy_gurobi_swig.GRBcbcut(cbdata, cutlen, cutind, cutval, cutsense, cutrhs)

def GRBcblazy(cbdata, lazylen, lazyind, lazyval, lazysense, lazyrhs):
    return _amplpy_gurobi_swig.GRBcblazy(cbdata, lazylen, lazyind, lazyval, lazysense, lazyrhs)
GRB_INT_ATTR_NUMCONSTRS = _amplpy_gurobi_swig.GRB_INT_ATTR_NUMCONSTRS
GRB_INT_ATTR_NUMVARS = _amplpy_gurobi_swig.GRB_INT_ATTR_NUMVARS
GRB_INT_ATTR_NUMSOS = _amplpy_gurobi_swig.GRB_INT_ATTR_NUMSOS
GRB_INT_ATTR_NUMQCONSTRS = _amplpy_gurobi_swig.GRB_INT_ATTR_NUMQCONSTRS
GRB_INT_ATTR_NUMGENCONSTRS = _amplpy_gurobi_swig.GRB_INT_ATTR_NUMGENCONSTRS
GRB_INT_ATTR_NUMNZS = _amplpy_gurobi_swig.GRB_INT_ATTR_NUMNZS
GRB_DBL_ATTR_DNUMNZS = _amplpy_gurobi_swig.GRB_DBL_ATTR_DNUMNZS
GRB_INT_ATTR_NUMQNZS = _amplpy_gurobi_swig.GRB_INT_ATTR_NUMQNZS
GRB_INT_ATTR_NUMQCNZS = _amplpy_gurobi_swig.GRB_INT_ATTR_NUMQCNZS
GRB_INT_ATTR_NUMINTVARS = _amplpy_gurobi_swig.GRB_INT_ATTR_NUMINTVARS
GRB_INT_ATTR_NUMBINVARS = _amplpy_gurobi_swig.GRB_INT_ATTR_NUMBINVARS
GRB_INT_ATTR_NUMPWLOBJVARS = _amplpy_gurobi_swig.GRB_INT_ATTR_NUMPWLOBJVARS
GRB_STR_ATTR_MODELNAME = _amplpy_gurobi_swig.GRB_STR_ATTR_MODELNAME
GRB_INT_ATTR_MODELSENSE = _amplpy_gurobi_swig.GRB_INT_ATTR_MODELSENSE
GRB_DBL_ATTR_OBJCON = _amplpy_gurobi_swig.GRB_DBL_ATTR_OBJCON
GRB_INT_ATTR_IS_MIP = _amplpy_gurobi_swig.GRB_INT_ATTR_IS_MIP
GRB_INT_ATTR_IS_QP = _amplpy_gurobi_swig.GRB_INT_ATTR_IS_QP
GRB_INT_ATTR_IS_QCP = _amplpy_gurobi_swig.GRB_INT_ATTR_IS_QCP
GRB_INT_ATTR_IS_MULTIOBJ = _amplpy_gurobi_swig.GRB_INT_ATTR_IS_MULTIOBJ
GRB_STR_ATTR_SERVER = _amplpy_gurobi_swig.GRB_STR_ATTR_SERVER
GRB_STR_ATTR_JOBID = _amplpy_gurobi_swig.GRB_STR_ATTR_JOBID
GRB_INT_ATTR_LICENSE_EXPIRATION = _amplpy_gurobi_swig.GRB_INT_ATTR_LICENSE_EXPIRATION
GRB_INT_ATTR_NUMTAGGED = _amplpy_gurobi_swig.GRB_INT_ATTR_NUMTAGGED
GRB_INT_ATTR_FINGERPRINT = _amplpy_gurobi_swig.GRB_INT_ATTR_FINGERPRINT
GRB_INT_ATTR_BATCHERRORCODE = _amplpy_gurobi_swig.GRB_INT_ATTR_BATCHERRORCODE
GRB_STR_ATTR_BATCHERRORMESSAGE = _amplpy_gurobi_swig.GRB_STR_ATTR_BATCHERRORMESSAGE
GRB_STR_ATTR_BATCHID = _amplpy_gurobi_swig.GRB_STR_ATTR_BATCHID
GRB_INT_ATTR_BATCHSTATUS = _amplpy_gurobi_swig.GRB_INT_ATTR_BATCHSTATUS
GRB_DBL_ATTR_LB = _amplpy_gurobi_swig.GRB_DBL_ATTR_LB
GRB_DBL_ATTR_UB = _amplpy_gurobi_swig.GRB_DBL_ATTR_UB
GRB_DBL_ATTR_OBJ = _amplpy_gurobi_swig.GRB_DBL_ATTR_OBJ
GRB_CHAR_ATTR_VTYPE = _amplpy_gurobi_swig.GRB_CHAR_ATTR_VTYPE
GRB_DBL_ATTR_START = _amplpy_gurobi_swig.GRB_DBL_ATTR_START
GRB_DBL_ATTR_PSTART = _amplpy_gurobi_swig.GRB_DBL_ATTR_PSTART
GRB_INT_ATTR_BRANCHPRIORITY = _amplpy_gurobi_swig.GRB_INT_ATTR_BRANCHPRIORITY
GRB_STR_ATTR_VARNAME = _amplpy_gurobi_swig.GRB_STR_ATTR_VARNAME
GRB_INT_ATTR_PWLOBJCVX = _amplpy_gurobi_swig.GRB_INT_ATTR_PWLOBJCVX
GRB_DBL_ATTR_VARHINTVAL = _amplpy_gurobi_swig.GRB_DBL_ATTR_VARHINTVAL
GRB_INT_ATTR_VARHINTPRI = _amplpy_gurobi_swig.GRB_INT_ATTR_VARHINTPRI
GRB_INT_ATTR_PARTITION = _amplpy_gurobi_swig.GRB_INT_ATTR_PARTITION
GRB_STR_ATTR_VTAG = _amplpy_gurobi_swig.GRB_STR_ATTR_VTAG
GRB_STR_ATTR_CTAG = _amplpy_gurobi_swig.GRB_STR_ATTR_CTAG
GRB_DBL_ATTR_RHS = _amplpy_gurobi_swig.GRB_DBL_ATTR_RHS
GRB_DBL_ATTR_DSTART = _amplpy_gurobi_swig.GRB_DBL_ATTR_DSTART
GRB_CHAR_ATTR_SENSE = _amplpy_gurobi_swig.GRB_CHAR_ATTR_SENSE
GRB_STR_ATTR_CONSTRNAME = _amplpy_gurobi_swig.GRB_STR_ATTR_CONSTRNAME
GRB_INT_ATTR_LAZY = _amplpy_gurobi_swig.GRB_INT_ATTR_LAZY
GRB_STR_ATTR_QCTAG = _amplpy_gurobi_swig.GRB_STR_ATTR_QCTAG
GRB_DBL_ATTR_QCRHS = _amplpy_gurobi_swig.GRB_DBL_ATTR_QCRHS
GRB_CHAR_ATTR_QCSENSE = _amplpy_gurobi_swig.GRB_CHAR_ATTR_QCSENSE
GRB_STR_ATTR_QCNAME = _amplpy_gurobi_swig.GRB_STR_ATTR_QCNAME
GRB_INT_ATTR_GENCONSTRTYPE = _amplpy_gurobi_swig.GRB_INT_ATTR_GENCONSTRTYPE
GRB_STR_ATTR_GENCONSTRNAME = _amplpy_gurobi_swig.GRB_STR_ATTR_GENCONSTRNAME
GRB_INT_ATTR_FUNCPIECES = _amplpy_gurobi_swig.GRB_INT_ATTR_FUNCPIECES
GRB_DBL_ATTR_FUNCPIECEERROR = _amplpy_gurobi_swig.GRB_DBL_ATTR_FUNCPIECEERROR
GRB_DBL_ATTR_FUNCPIECELENGTH = _amplpy_gurobi_swig.GRB_DBL_ATTR_FUNCPIECELENGTH
GRB_DBL_ATTR_FUNCPIECERATIO = _amplpy_gurobi_swig.GRB_DBL_ATTR_FUNCPIECERATIO
GRB_DBL_ATTR_MAX_COEFF = _amplpy_gurobi_swig.GRB_DBL_ATTR_MAX_COEFF
GRB_DBL_ATTR_MIN_COEFF = _amplpy_gurobi_swig.GRB_DBL_ATTR_MIN_COEFF
GRB_DBL_ATTR_MAX_BOUND = _amplpy_gurobi_swig.GRB_DBL_ATTR_MAX_BOUND
GRB_DBL_ATTR_MIN_BOUND = _amplpy_gurobi_swig.GRB_DBL_ATTR_MIN_BOUND
GRB_DBL_ATTR_MAX_OBJ_COEFF = _amplpy_gurobi_swig.GRB_DBL_ATTR_MAX_OBJ_COEFF
GRB_DBL_ATTR_MIN_OBJ_COEFF = _amplpy_gurobi_swig.GRB_DBL_ATTR_MIN_OBJ_COEFF
GRB_DBL_ATTR_MAX_RHS = _amplpy_gurobi_swig.GRB_DBL_ATTR_MAX_RHS
GRB_DBL_ATTR_MIN_RHS = _amplpy_gurobi_swig.GRB_DBL_ATTR_MIN_RHS
GRB_DBL_ATTR_MAX_QCCOEFF = _amplpy_gurobi_swig.GRB_DBL_ATTR_MAX_QCCOEFF
GRB_DBL_ATTR_MIN_QCCOEFF = _amplpy_gurobi_swig.GRB_DBL_ATTR_MIN_QCCOEFF
GRB_DBL_ATTR_MAX_QOBJ_COEFF = _amplpy_gurobi_swig.GRB_DBL_ATTR_MAX_QOBJ_COEFF
GRB_DBL_ATTR_MIN_QOBJ_COEFF = _amplpy_gurobi_swig.GRB_DBL_ATTR_MIN_QOBJ_COEFF
GRB_DBL_ATTR_MAX_QCLCOEFF = _amplpy_gurobi_swig.GRB_DBL_ATTR_MAX_QCLCOEFF
GRB_DBL_ATTR_MIN_QCLCOEFF = _amplpy_gurobi_swig.GRB_DBL_ATTR_MIN_QCLCOEFF
GRB_DBL_ATTR_MAX_QCRHS = _amplpy_gurobi_swig.GRB_DBL_ATTR_MAX_QCRHS
GRB_DBL_ATTR_MIN_QCRHS = _amplpy_gurobi_swig.GRB_DBL_ATTR_MIN_QCRHS
GRB_DBL_ATTR_RUNTIME = _amplpy_gurobi_swig.GRB_DBL_ATTR_RUNTIME
GRB_INT_ATTR_STATUS = _amplpy_gurobi_swig.GRB_INT_ATTR_STATUS
GRB_DBL_ATTR_OBJVAL = _amplpy_gurobi_swig.GRB_DBL_ATTR_OBJVAL
GRB_DBL_ATTR_OBJBOUND = _amplpy_gurobi_swig.GRB_DBL_ATTR_OBJBOUND
GRB_DBL_ATTR_OBJBOUNDC = _amplpy_gurobi_swig.GRB_DBL_ATTR_OBJBOUNDC
GRB_DBL_ATTR_POOLOBJBOUND = _amplpy_gurobi_swig.GRB_DBL_ATTR_POOLOBJBOUND
GRB_DBL_ATTR_POOLOBJVAL = _amplpy_gurobi_swig.GRB_DBL_ATTR_POOLOBJVAL
GRB_DBL_ATTR_MIPGAP = _amplpy_gurobi_swig.GRB_DBL_ATTR_MIPGAP
GRB_INT_ATTR_SOLCOUNT = _amplpy_gurobi_swig.GRB_INT_ATTR_SOLCOUNT
GRB_DBL_ATTR_ITERCOUNT = _amplpy_gurobi_swig.GRB_DBL_ATTR_ITERCOUNT
GRB_INT_ATTR_BARITERCOUNT = _amplpy_gurobi_swig.GRB_INT_ATTR_BARITERCOUNT
GRB_DBL_ATTR_NODECOUNT = _amplpy_gurobi_swig.GRB_DBL_ATTR_NODECOUNT
GRB_DBL_ATTR_OPENNODECOUNT = _amplpy_gurobi_swig.GRB_DBL_ATTR_OPENNODECOUNT
GRB_INT_ATTR_HASDUALNORM = _amplpy_gurobi_swig.GRB_INT_ATTR_HASDUALNORM
GRB_DBL_ATTR_X = _amplpy_gurobi_swig.GRB_DBL_ATTR_X
GRB_DBL_ATTR_XN = _amplpy_gurobi_swig.GRB_DBL_ATTR_XN
GRB_DBL_ATTR_BARX = _amplpy_gurobi_swig.GRB_DBL_ATTR_BARX
GRB_DBL_ATTR_RC = _amplpy_gurobi_swig.GRB_DBL_ATTR_RC
GRB_DBL_ATTR_VDUALNORM = _amplpy_gurobi_swig.GRB_DBL_ATTR_VDUALNORM
GRB_INT_ATTR_VBASIS = _amplpy_gurobi_swig.GRB_INT_ATTR_VBASIS
GRB_DBL_ATTR_PI = _amplpy_gurobi_swig.GRB_DBL_ATTR_PI
GRB_DBL_ATTR_QCPI = _amplpy_gurobi_swig.GRB_DBL_ATTR_QCPI
GRB_DBL_ATTR_SLACK = _amplpy_gurobi_swig.GRB_DBL_ATTR_SLACK
GRB_DBL_ATTR_QCSLACK = _amplpy_gurobi_swig.GRB_DBL_ATTR_QCSLACK
GRB_DBL_ATTR_CDUALNORM = _amplpy_gurobi_swig.GRB_DBL_ATTR_CDUALNORM
GRB_INT_ATTR_CBASIS = _amplpy_gurobi_swig.GRB_INT_ATTR_CBASIS
GRB_DBL_ATTR_BOUND_VIO = _amplpy_gurobi_swig.GRB_DBL_ATTR_BOUND_VIO
GRB_DBL_ATTR_BOUND_SVIO = _amplpy_gurobi_swig.GRB_DBL_ATTR_BOUND_SVIO
GRB_INT_ATTR_BOUND_VIO_INDEX = _amplpy_gurobi_swig.GRB_INT_ATTR_BOUND_VIO_INDEX
GRB_INT_ATTR_BOUND_SVIO_INDEX = _amplpy_gurobi_swig.GRB_INT_ATTR_BOUND_SVIO_INDEX
GRB_DBL_ATTR_BOUND_VIO_SUM = _amplpy_gurobi_swig.GRB_DBL_ATTR_BOUND_VIO_SUM
GRB_DBL_ATTR_BOUND_SVIO_SUM = _amplpy_gurobi_swig.GRB_DBL_ATTR_BOUND_SVIO_SUM
GRB_DBL_ATTR_CONSTR_VIO = _amplpy_gurobi_swig.GRB_DBL_ATTR_CONSTR_VIO
GRB_DBL_ATTR_CONSTR_SVIO = _amplpy_gurobi_swig.GRB_DBL_ATTR_CONSTR_SVIO
GRB_INT_ATTR_CONSTR_VIO_INDEX = _amplpy_gurobi_swig.GRB_INT_ATTR_CONSTR_VIO_INDEX
GRB_INT_ATTR_CONSTR_SVIO_INDEX = _amplpy_gurobi_swig.GRB_INT_ATTR_CONSTR_SVIO_INDEX
GRB_DBL_ATTR_CONSTR_VIO_SUM = _amplpy_gurobi_swig.GRB_DBL_ATTR_CONSTR_VIO_SUM
GRB_DBL_ATTR_CONSTR_SVIO_SUM = _amplpy_gurobi_swig.GRB_DBL_ATTR_CONSTR_SVIO_SUM
GRB_DBL_ATTR_CONSTR_RESIDUAL = _amplpy_gurobi_swig.GRB_DBL_ATTR_CONSTR_RESIDUAL
GRB_DBL_ATTR_CONSTR_SRESIDUAL = _amplpy_gurobi_swig.GRB_DBL_ATTR_CONSTR_SRESIDUAL
GRB_INT_ATTR_CONSTR_RESIDUAL_INDEX = _amplpy_gurobi_swig.GRB_INT_ATTR_CONSTR_RESIDUAL_INDEX
GRB_INT_ATTR_CONSTR_SRESIDUAL_INDEX = _amplpy_gurobi_swig.GRB_INT_ATTR_CONSTR_SRESIDUAL_INDEX
GRB_DBL_ATTR_CONSTR_RESIDUAL_SUM = _amplpy_gurobi_swig.GRB_DBL_ATTR_CONSTR_RESIDUAL_SUM
GRB_DBL_ATTR_CONSTR_SRESIDUAL_SUM = _amplpy_gurobi_swig.GRB_DBL_ATTR_CONSTR_SRESIDUAL_SUM
GRB_DBL_ATTR_DUAL_VIO = _amplpy_gurobi_swig.GRB_DBL_ATTR_DUAL_VIO
GRB_DBL_ATTR_DUAL_SVIO = _amplpy_gurobi_swig.GRB_DBL_ATTR_DUAL_SVIO
GRB_INT_ATTR_DUAL_VIO_INDEX = _amplpy_gurobi_swig.GRB_INT_ATTR_DUAL_VIO_INDEX
GRB_INT_ATTR_DUAL_SVIO_INDEX = _amplpy_gurobi_swig.GRB_INT_ATTR_DUAL_SVIO_INDEX
GRB_DBL_ATTR_DUAL_VIO_SUM = _amplpy_gurobi_swig.GRB_DBL_ATTR_DUAL_VIO_SUM
GRB_DBL_ATTR_DUAL_SVIO_SUM = _amplpy_gurobi_swig.GRB_DBL_ATTR_DUAL_SVIO_SUM
GRB_DBL_ATTR_DUAL_RESIDUAL = _amplpy_gurobi_swig.GRB_DBL_ATTR_DUAL_RESIDUAL
GRB_DBL_ATTR_DUAL_SRESIDUAL = _amplpy_gurobi_swig.GRB_DBL_ATTR_DUAL_SRESIDUAL
GRB_INT_ATTR_DUAL_RESIDUAL_INDEX = _amplpy_gurobi_swig.GRB_INT_ATTR_DUAL_RESIDUAL_INDEX
GRB_INT_ATTR_DUAL_SRESIDUAL_INDEX = _amplpy_gurobi_swig.GRB_INT_ATTR_DUAL_SRESIDUAL_INDEX
GRB_DBL_ATTR_DUAL_RESIDUAL_SUM = _amplpy_gurobi_swig.GRB_DBL_ATTR_DUAL_RESIDUAL_SUM
GRB_DBL_ATTR_DUAL_SRESIDUAL_SUM = _amplpy_gurobi_swig.GRB_DBL_ATTR_DUAL_SRESIDUAL_SUM
GRB_DBL_ATTR_INT_VIO = _amplpy_gurobi_swig.GRB_DBL_ATTR_INT_VIO
GRB_INT_ATTR_INT_VIO_INDEX = _amplpy_gurobi_swig.GRB_INT_ATTR_INT_VIO_INDEX
GRB_DBL_ATTR_INT_VIO_SUM = _amplpy_gurobi_swig.GRB_DBL_ATTR_INT_VIO_SUM
GRB_DBL_ATTR_COMPL_VIO = _amplpy_gurobi_swig.GRB_DBL_ATTR_COMPL_VIO
GRB_INT_ATTR_COMPL_VIO_INDEX = _amplpy_gurobi_swig.GRB_INT_ATTR_COMPL_VIO_INDEX
GRB_DBL_ATTR_COMPL_VIO_SUM = _amplpy_gurobi_swig.GRB_DBL_ATTR_COMPL_VIO_SUM
GRB_DBL_ATTR_KAPPA = _amplpy_gurobi_swig.GRB_DBL_ATTR_KAPPA
GRB_DBL_ATTR_KAPPA_EXACT = _amplpy_gurobi_swig.GRB_DBL_ATTR_KAPPA_EXACT
GRB_DBL_ATTR_N2KAPPA = _amplpy_gurobi_swig.GRB_DBL_ATTR_N2KAPPA
GRB_DBL_ATTR_SA_OBJLOW = _amplpy_gurobi_swig.GRB_DBL_ATTR_SA_OBJLOW
GRB_DBL_ATTR_SA_OBJUP = _amplpy_gurobi_swig.GRB_DBL_ATTR_SA_OBJUP
GRB_DBL_ATTR_SA_LBLOW = _amplpy_gurobi_swig.GRB_DBL_ATTR_SA_LBLOW
GRB_DBL_ATTR_SA_LBUP = _amplpy_gurobi_swig.GRB_DBL_ATTR_SA_LBUP
GRB_DBL_ATTR_SA_UBLOW = _amplpy_gurobi_swig.GRB_DBL_ATTR_SA_UBLOW
GRB_DBL_ATTR_SA_UBUP = _amplpy_gurobi_swig.GRB_DBL_ATTR_SA_UBUP
GRB_DBL_ATTR_SA_RHSLOW = _amplpy_gurobi_swig.GRB_DBL_ATTR_SA_RHSLOW
GRB_DBL_ATTR_SA_RHSUP = _amplpy_gurobi_swig.GRB_DBL_ATTR_SA_RHSUP
GRB_INT_ATTR_IIS_MINIMAL = _amplpy_gurobi_swig.GRB_INT_ATTR_IIS_MINIMAL
GRB_INT_ATTR_IIS_LB = _amplpy_gurobi_swig.GRB_INT_ATTR_IIS_LB
GRB_INT_ATTR_IIS_UB = _amplpy_gurobi_swig.GRB_INT_ATTR_IIS_UB
GRB_INT_ATTR_IIS_CONSTR = _amplpy_gurobi_swig.GRB_INT_ATTR_IIS_CONSTR
GRB_INT_ATTR_IIS_SOS = _amplpy_gurobi_swig.GRB_INT_ATTR_IIS_SOS
GRB_INT_ATTR_IIS_QCONSTR = _amplpy_gurobi_swig.GRB_INT_ATTR_IIS_QCONSTR
GRB_INT_ATTR_IIS_GENCONSTR = _amplpy_gurobi_swig.GRB_INT_ATTR_IIS_GENCONSTR
GRB_INT_ATTR_TUNE_RESULTCOUNT = _amplpy_gurobi_swig.GRB_INT_ATTR_TUNE_RESULTCOUNT
GRB_DBL_ATTR_FARKASDUAL = _amplpy_gurobi_swig.GRB_DBL_ATTR_FARKASDUAL
GRB_DBL_ATTR_FARKASPROOF = _amplpy_gurobi_swig.GRB_DBL_ATTR_FARKASPROOF
GRB_DBL_ATTR_UNBDRAY = _amplpy_gurobi_swig.GRB_DBL_ATTR_UNBDRAY
GRB_INT_ATTR_INFEASVAR = _amplpy_gurobi_swig.GRB_INT_ATTR_INFEASVAR
GRB_INT_ATTR_UNBDVAR = _amplpy_gurobi_swig.GRB_INT_ATTR_UNBDVAR
GRB_INT_ATTR_VARPRESTAT = _amplpy_gurobi_swig.GRB_INT_ATTR_VARPRESTAT
GRB_DBL_ATTR_PREFIXVAL = _amplpy_gurobi_swig.GRB_DBL_ATTR_PREFIXVAL
GRB_DBL_ATTR_OBJN = _amplpy_gurobi_swig.GRB_DBL_ATTR_OBJN
GRB_DBL_ATTR_OBJNVAL = _amplpy_gurobi_swig.GRB_DBL_ATTR_OBJNVAL
GRB_DBL_ATTR_OBJNCON = _amplpy_gurobi_swig.GRB_DBL_ATTR_OBJNCON
GRB_DBL_ATTR_OBJNWEIGHT = _amplpy_gurobi_swig.GRB_DBL_ATTR_OBJNWEIGHT
GRB_INT_ATTR_OBJNPRIORITY = _amplpy_gurobi_swig.GRB_INT_ATTR_OBJNPRIORITY
GRB_DBL_ATTR_OBJNRELTOL = _amplpy_gurobi_swig.GRB_DBL_ATTR_OBJNRELTOL
GRB_DBL_ATTR_OBJNABSTOL = _amplpy_gurobi_swig.GRB_DBL_ATTR_OBJNABSTOL
GRB_STR_ATTR_OBJNNAME = _amplpy_gurobi_swig.GRB_STR_ATTR_OBJNNAME
GRB_DBL_ATTR_SCENNLB = _amplpy_gurobi_swig.GRB_DBL_ATTR_SCENNLB
GRB_DBL_ATTR_SCENNUB = _amplpy_gurobi_swig.GRB_DBL_ATTR_SCENNUB
GRB_DBL_ATTR_SCENNOBJ = _amplpy_gurobi_swig.GRB_DBL_ATTR_SCENNOBJ
GRB_DBL_ATTR_SCENNRHS = _amplpy_gurobi_swig.GRB_DBL_ATTR_SCENNRHS
GRB_STR_ATTR_SCENNNAME = _amplpy_gurobi_swig.GRB_STR_ATTR_SCENNNAME
GRB_DBL_ATTR_SCENNX = _amplpy_gurobi_swig.GRB_DBL_ATTR_SCENNX
GRB_DBL_ATTR_SCENNOBJBOUND = _amplpy_gurobi_swig.GRB_DBL_ATTR_SCENNOBJBOUND
GRB_DBL_ATTR_SCENNOBJVAL = _amplpy_gurobi_swig.GRB_DBL_ATTR_SCENNOBJVAL
GRB_INT_ATTR_NUMOBJ = _amplpy_gurobi_swig.GRB_INT_ATTR_NUMOBJ
GRB_INT_ATTR_NUMSCENARIOS = _amplpy_gurobi_swig.GRB_INT_ATTR_NUMSCENARIOS
GRB_INT_ATTR_NUMSTART = _amplpy_gurobi_swig.GRB_INT_ATTR_NUMSTART
GRB_DBL_ATTR_Xn = _amplpy_gurobi_swig.GRB_DBL_ATTR_Xn
GRB_GENCONSTR_MAX = _amplpy_gurobi_swig.GRB_GENCONSTR_MAX
GRB_GENCONSTR_MIN = _amplpy_gurobi_swig.GRB_GENCONSTR_MIN
GRB_GENCONSTR_ABS = _amplpy_gurobi_swig.GRB_GENCONSTR_ABS
GRB_GENCONSTR_AND = _amplpy_gurobi_swig.GRB_GENCONSTR_AND
GRB_GENCONSTR_OR = _amplpy_gurobi_swig.GRB_GENCONSTR_OR
GRB_GENCONSTR_INDICATOR = _amplpy_gurobi_swig.GRB_GENCONSTR_INDICATOR
GRB_GENCONSTR_PWL = _amplpy_gurobi_swig.GRB_GENCONSTR_PWL
GRB_GENCONSTR_POLY = _amplpy_gurobi_swig.GRB_GENCONSTR_POLY
GRB_GENCONSTR_EXP = _amplpy_gurobi_swig.GRB_GENCONSTR_EXP
GRB_GENCONSTR_EXPA = _amplpy_gurobi_swig.GRB_GENCONSTR_EXPA
GRB_GENCONSTR_LOG = _amplpy_gurobi_swig.GRB_GENCONSTR_LOG
GRB_GENCONSTR_LOGA = _amplpy_gurobi_swig.GRB_GENCONSTR_LOGA
GRB_GENCONSTR_POW = _amplpy_gurobi_swig.GRB_GENCONSTR_POW
GRB_GENCONSTR_SIN = _amplpy_gurobi_swig.GRB_GENCONSTR_SIN
GRB_GENCONSTR_COS = _amplpy_gurobi_swig.GRB_GENCONSTR_COS
GRB_GENCONSTR_TAN = _amplpy_gurobi_swig.GRB_GENCONSTR_TAN
GRB_CB_POLLING = _amplpy_gurobi_swig.GRB_CB_POLLING
GRB_CB_PRESOLVE = _amplpy_gurobi_swig.GRB_CB_PRESOLVE
GRB_CB_SIMPLEX = _amplpy_gurobi_swig.GRB_CB_SIMPLEX
GRB_CB_MIP = _amplpy_gurobi_swig.GRB_CB_MIP
GRB_CB_MIPSOL = _amplpy_gurobi_swig.GRB_CB_MIPSOL
GRB_CB_MIPNODE = _amplpy_gurobi_swig.GRB_CB_MIPNODE
GRB_CB_MESSAGE = _amplpy_gurobi_swig.GRB_CB_MESSAGE
GRB_CB_BARRIER = _amplpy_gurobi_swig.GRB_CB_BARRIER
GRB_CB_MULTIOBJ = _amplpy_gurobi_swig.GRB_CB_MULTIOBJ
GRB_CB_PRE_COLDEL = _amplpy_gurobi_swig.GRB_CB_PRE_COLDEL
GRB_CB_PRE_ROWDEL = _amplpy_gurobi_swig.GRB_CB_PRE_ROWDEL
GRB_CB_PRE_SENCHG = _amplpy_gurobi_swig.GRB_CB_PRE_SENCHG
GRB_CB_PRE_BNDCHG = _amplpy_gurobi_swig.GRB_CB_PRE_BNDCHG
GRB_CB_PRE_COECHG = _amplpy_gurobi_swig.GRB_CB_PRE_COECHG
GRB_CB_SPX_ITRCNT = _amplpy_gurobi_swig.GRB_CB_SPX_ITRCNT
GRB_CB_SPX_OBJVAL = _amplpy_gurobi_swig.GRB_CB_SPX_OBJVAL
GRB_CB_SPX_PRIMINF = _amplpy_gurobi_swig.GRB_CB_SPX_PRIMINF
GRB_CB_SPX_DUALINF = _amplpy_gurobi_swig.GRB_CB_SPX_DUALINF
GRB_CB_SPX_ISPERT = _amplpy_gurobi_swig.GRB_CB_SPX_ISPERT
GRB_CB_MIP_OBJBST = _amplpy_gurobi_swig.GRB_CB_MIP_OBJBST
GRB_CB_MIP_OBJBND = _amplpy_gurobi_swig.GRB_CB_MIP_OBJBND
GRB_CB_MIP_NODCNT = _amplpy_gurobi_swig.GRB_CB_MIP_NODCNT
GRB_CB_MIP_SOLCNT = _amplpy_gurobi_swig.GRB_CB_MIP_SOLCNT
GRB_CB_MIP_CUTCNT = _amplpy_gurobi_swig.GRB_CB_MIP_CUTCNT
GRB_CB_MIP_NODLFT = _amplpy_gurobi_swig.GRB_CB_MIP_NODLFT
GRB_CB_MIP_ITRCNT = _amplpy_gurobi_swig.GRB_CB_MIP_ITRCNT
GRB_CB_MIP_OBJBNDC = _amplpy_gurobi_swig.GRB_CB_MIP_OBJBNDC
GRB_CB_MIPSOL_SOL = _amplpy_gurobi_swig.GRB_CB_MIPSOL_SOL
GRB_CB_MIPSOL_OBJ = _amplpy_gurobi_swig.GRB_CB_MIPSOL_OBJ
GRB_CB_MIPSOL_OBJBST = _amplpy_gurobi_swig.GRB_CB_MIPSOL_OBJBST
GRB_CB_MIPSOL_OBJBND = _amplpy_gurobi_swig.GRB_CB_MIPSOL_OBJBND
GRB_CB_MIPSOL_NODCNT = _amplpy_gurobi_swig.GRB_CB_MIPSOL_NODCNT
GRB_CB_MIPSOL_SOLCNT = _amplpy_gurobi_swig.GRB_CB_MIPSOL_SOLCNT
GRB_CB_MIPSOL_OBJBNDC = _amplpy_gurobi_swig.GRB_CB_MIPSOL_OBJBNDC
GRB_CB_MIPNODE_STATUS = _amplpy_gurobi_swig.GRB_CB_MIPNODE_STATUS
GRB_CB_MIPNODE_REL = _amplpy_gurobi_swig.GRB_CB_MIPNODE_REL
GRB_CB_MIPNODE_OBJBST = _amplpy_gurobi_swig.GRB_CB_MIPNODE_OBJBST
GRB_CB_MIPNODE_OBJBND = _amplpy_gurobi_swig.GRB_CB_MIPNODE_OBJBND
GRB_CB_MIPNODE_NODCNT = _amplpy_gurobi_swig.GRB_CB_MIPNODE_NODCNT
GRB_CB_MIPNODE_SOLCNT = _amplpy_gurobi_swig.GRB_CB_MIPNODE_SOLCNT
GRB_CB_MIPNODE_BRVAR = _amplpy_gurobi_swig.GRB_CB_MIPNODE_BRVAR
GRB_CB_MIPNODE_OBJBNDC = _amplpy_gurobi_swig.GRB_CB_MIPNODE_OBJBNDC
GRB_CB_MSG_STRING = _amplpy_gurobi_swig.GRB_CB_MSG_STRING
GRB_CB_RUNTIME = _amplpy_gurobi_swig.GRB_CB_RUNTIME
GRB_CB_BARRIER_ITRCNT = _amplpy_gurobi_swig.GRB_CB_BARRIER_ITRCNT
GRB_CB_BARRIER_PRIMOBJ = _amplpy_gurobi_swig.GRB_CB_BARRIER_PRIMOBJ
GRB_CB_BARRIER_DUALOBJ = _amplpy_gurobi_swig.GRB_CB_BARRIER_DUALOBJ
GRB_CB_BARRIER_PRIMINF = _amplpy_gurobi_swig.GRB_CB_BARRIER_PRIMINF
GRB_CB_BARRIER_DUALINF = _amplpy_gurobi_swig.GRB_CB_BARRIER_DUALINF
GRB_CB_BARRIER_COMPL = _amplpy_gurobi_swig.GRB_CB_BARRIER_COMPL
GRB_CB_MULTIOBJ_OBJCNT = _amplpy_gurobi_swig.GRB_CB_MULTIOBJ_OBJCNT
GRB_CB_MULTIOBJ_SOLCNT = _amplpy_gurobi_swig.GRB_CB_MULTIOBJ_SOLCNT
GRB_CB_MULTIOBJ_SOL = _amplpy_gurobi_swig.GRB_CB_MULTIOBJ_SOL
GRB_FEASRELAX_LINEAR = _amplpy_gurobi_swig.GRB_FEASRELAX_LINEAR
GRB_FEASRELAX_QUADRATIC = _amplpy_gurobi_swig.GRB_FEASRELAX_QUADRATIC
GRB_FEASRELAX_CARDINALITY = _amplpy_gurobi_swig.GRB_FEASRELAX_CARDINALITY

def GRBgetcoeff(model, constr, var, valP):
    return _amplpy_gurobi_swig.GRBgetcoeff(model, constr, var, valP)

def GRBgetconstrs(model, numnzP, cbeg, cind, cval, start, len):
    return _amplpy_gurobi_swig.GRBgetconstrs(model, numnzP, cbeg, cind, cval, start, len)

def GRBXgetconstrs(model, numnzP, cbeg, cind, cval, start, len):
    return _amplpy_gurobi_swig.GRBXgetconstrs(model, numnzP, cbeg, cind, cval, start, len)

def GRBgetvars(model, numnzP, vbeg, vind, vval, start, len):
    return _amplpy_gurobi_swig.GRBgetvars(model, numnzP, vbeg, vind, vval, start, len)

def GRBXgetvars(model, numnzP, vbeg, vind, vval, start, len):
    return _amplpy_gurobi_swig.GRBXgetvars(model, numnzP, vbeg, vind, vval, start, len)

def GRBgetsos(model, nummembersP, sostype, beg, ind, weight, start, len):
    return _amplpy_gurobi_swig.GRBgetsos(model, nummembersP, sostype, beg, ind, weight, start, len)

def GRBgetgenconstrMax(model, genconstr, resvarP, nvarsP, vars, constantP):
    return _amplpy_gurobi_swig.GRBgetgenconstrMax(model, genconstr, resvarP, nvarsP, vars, constantP)

def GRBgetgenconstrMin(model, genconstr, resvarP, nvarsP, vars, constantP):
    return _amplpy_gurobi_swig.GRBgetgenconstrMin(model, genconstr, resvarP, nvarsP, vars, constantP)

def GRBgetgenconstrAbs(model, genconstr, resvarP, argvarP):
    return _amplpy_gurobi_swig.GRBgetgenconstrAbs(model, genconstr, resvarP, argvarP)

def GRBgetgenconstrAnd(model, genconstr, resvarP, nvarsP, vars):
    return _amplpy_gurobi_swig.GRBgetgenconstrAnd(model, genconstr, resvarP, nvarsP, vars)

def GRBgetgenconstrOr(model, genconstr, resvarP, nvarsP, vars):
    return _amplpy_gurobi_swig.GRBgetgenconstrOr(model, genconstr, resvarP, nvarsP, vars)

def GRBgetgenconstrIndicator(model, genconstr, binvarP, binvalP, nvarsP, vars, vals, senseP, rhsP):
    return _amplpy_gurobi_swig.GRBgetgenconstrIndicator(model, genconstr, binvarP, binvalP, nvarsP, vars, vals, senseP, rhsP)

def GRBgetgenconstrPWL(model, genconstr, xvarP, yvarP, nptsP, xpts, ypts):
    return _amplpy_gurobi_swig.GRBgetgenconstrPWL(model, genconstr, xvarP, yvarP, nptsP, xpts, ypts)

def GRBgetgenconstrPoly(model, genconstr, xvarP, yvarP, plenP, p):
    return _amplpy_gurobi_swig.GRBgetgenconstrPoly(model, genconstr, xvarP, yvarP, plenP, p)

def GRBgetgenconstrExpA(model, genconstr, xvarP, yvarP, aP):
    return _amplpy_gurobi_swig.GRBgetgenconstrExpA(model, genconstr, xvarP, yvarP, aP)

def GRBgetgenconstrLogA(model, genconstr, xvarP, yvarP, aP):
    return _amplpy_gurobi_swig.GRBgetgenconstrLogA(model, genconstr, xvarP, yvarP, aP)

def GRBgetgenconstrPow(model, genconstr, xvarP, yvarP, aP):
    return _amplpy_gurobi_swig.GRBgetgenconstrPow(model, genconstr, xvarP, yvarP, aP)

def GRBgetgenconstrExp(model, genconstr, xvarP, yvarP):
    return _amplpy_gurobi_swig.GRBgetgenconstrExp(model, genconstr, xvarP, yvarP)

def GRBgetgenconstrLog(model, genconstr, xvarP, yvarP):
    return _amplpy_gurobi_swig.GRBgetgenconstrLog(model, genconstr, xvarP, yvarP)

def GRBgetgenconstrSin(model, genconstr, xvarP, yvarP):
    return _amplpy_gurobi_swig.GRBgetgenconstrSin(model, genconstr, xvarP, yvarP)

def GRBgetgenconstrCos(model, genconstr, xvarP, yvarP):
    return _amplpy_gurobi_swig.GRBgetgenconstrCos(model, genconstr, xvarP, yvarP)

def GRBgetgenconstrTan(model, genconstr, xvarP, yvarP):
    return _amplpy_gurobi_swig.GRBgetgenconstrTan(model, genconstr, xvarP, yvarP)

def GRBgetq(model, numqnzP, qrow, qcol, qval):
    return _amplpy_gurobi_swig.GRBgetq(model, numqnzP, qrow, qcol, qval)

def GRBgetqconstr(model, qconstr, numlnzP, lind, lval, numqnzP, qrow, qcol, qval):
    return _amplpy_gurobi_swig.GRBgetqconstr(model, qconstr, numlnzP, lind, lval, numqnzP, qrow, qcol, qval)

def GRBgetvarbyname(model, name, indexP):
    return _amplpy_gurobi_swig.GRBgetvarbyname(model, name, indexP)

def GRBgetconstrbyname(model, name, indexP):
    return _amplpy_gurobi_swig.GRBgetconstrbyname(model, name, indexP)

def GRBgetqconstrbyname(model, name, indexP):
    return _amplpy_gurobi_swig.GRBgetqconstrbyname(model, name, indexP)

def GRBgetpwlobj(model, var, pointsP, x, y):
    return _amplpy_gurobi_swig.GRBgetpwlobj(model, var, pointsP, x, y)

def GRBoptimize(model):
    return _amplpy_gurobi_swig.GRBoptimize(model)

def GRBoptimizeasync(model):
    return _amplpy_gurobi_swig.GRBoptimizeasync(model)

def GRBoptimizebatch(model, batchid):
    return _amplpy_gurobi_swig.GRBoptimizebatch(model, batchid)

def GRBcopymodel(model):
    return _amplpy_gurobi_swig.GRBcopymodel(model)

def GRBfixmodel(model, fixedP):
    return _amplpy_gurobi_swig.GRBfixmodel(model, fixedP)

def GRBfeasrelax(model, relaxobjtype, minrelax, lbpen, ubpen, rhspen, feasobjP):
    return _amplpy_gurobi_swig.GRBfeasrelax(model, relaxobjtype, minrelax, lbpen, ubpen, rhspen, feasobjP)

def GRBsinglescenariomodel(model, singlescenarioP):
    return _amplpy_gurobi_swig.GRBsinglescenariomodel(model, singlescenarioP)

def GRBgetcbwhatinfo(cbdata, what, typeP, sizeP):
    return _amplpy_gurobi_swig.GRBgetcbwhatinfo(cbdata, what, typeP, sizeP)

def GRBrelaxmodel(model, relaxedP):
    return _amplpy_gurobi_swig.GRBrelaxmodel(model, relaxedP)

def GRBconverttofixed(model):
    return _amplpy_gurobi_swig.GRBconverttofixed(model)

def GRBpresolvemodel(model, presolvedP):
    return _amplpy_gurobi_swig.GRBpresolvemodel(model, presolvedP)

def GRBiismodel(model, iisP):
    return _amplpy_gurobi_swig.GRBiismodel(model, iisP)

def GRBfeasibility(model, feasP):
    return _amplpy_gurobi_swig.GRBfeasibility(model, feasP)

def GRBlinearizemodel(model, linearizedP):
    return _amplpy_gurobi_swig.GRBlinearizemodel(model, linearizedP)

def GRBresultmodel(model, type, resultP):
    return _amplpy_gurobi_swig.GRBresultmodel(model, type, resultP)

def GRBfixedmodel(model):
    return _amplpy_gurobi_swig.GRBfixedmodel(model)

def GRBloadenvsyscb(envP, logfilename, malloccb, calloccb, realloccb, freecb, threadcreatecb, threadjoincb, syscbusrdata):
    return _amplpy_gurobi_swig.GRBloadenvsyscb(envP, logfilename, malloccb, calloccb, realloccb, freecb, threadcreatecb, threadjoincb, syscbusrdata)

def GRBemptyenvadv(envP, apitype, major, minor, tech, malloccb, calloccb, realloccb, freecb, threadcreatecb, threadjoincb, syscbusrdata):
    return _amplpy_gurobi_swig.GRBemptyenvadv(envP, apitype, major, minor, tech, malloccb, calloccb, realloccb, freecb, threadcreatecb, threadjoincb, syscbusrdata)

def GRBreadmodel(env, filename, modelP):
    return _amplpy_gurobi_swig.GRBreadmodel(env, filename, modelP)

def GRBread(model, filename):
    return _amplpy_gurobi_swig.GRBread(model, filename)

def GRBwrite(model, filename):
    return _amplpy_gurobi_swig.GRBwrite(model, filename)

def GRBismodelfile(filename):
    return _amplpy_gurobi_swig.GRBismodelfile(filename)

def GRBisattrfile(filename):
    return _amplpy_gurobi_swig.GRBisattrfile(filename)

def GRBfiletype(filename):
    return _amplpy_gurobi_swig.GRBfiletype(filename)

def GRBisrecordfile(filename):
    return _amplpy_gurobi_swig.GRBisrecordfile(filename)

def GRBgetjsonsolution(model, buffP):
    return _amplpy_gurobi_swig.GRBgetjsonsolution(model, buffP)

def GRBloadjson(env, fname, buffP):
    return _amplpy_gurobi_swig.GRBloadjson(env, fname, buffP)

def GRBnewmodel(env, modelP, Pname, numvars, obj, lb, ub, vtype, varnames):
    return _amplpy_gurobi_swig.GRBnewmodel(env, modelP, Pname, numvars, obj, lb, ub, vtype, varnames)

def GRBloadmodel(env, modelP, Pname, numvars, numconstrs, objsense, objcon, obj, sense, rhs, vbeg, vlen, vind, vval, lb, ub, vtype, varnames, constrnames):
    return _amplpy_gurobi_swig.GRBloadmodel(env, modelP, Pname, numvars, numconstrs, objsense, objcon, obj, sense, rhs, vbeg, vlen, vind, vval, lb, ub, vtype, varnames, constrnames)

def GRBXloadmodel(env, modelP, Pname, numvars, numconstrs, objsense, objcon, obj, sense, rhs, vbeg, vlen, vind, vval, lb, ub, vtype, varnames, constrnames):
    return _amplpy_gurobi_swig.GRBXloadmodel(env, modelP, Pname, numvars, numconstrs, objsense, objcon, obj, sense, rhs, vbeg, vlen, vind, vval, lb, ub, vtype, varnames, constrnames)

def GRBaddvar(model, numnz, vind, vval, obj, lb, ub, vtype, varname):
    return _amplpy_gurobi_swig.GRBaddvar(model, numnz, vind, vval, obj, lb, ub, vtype, varname)

def GRBaddvars(model, numvars, numnz, vbeg, vind, vval, obj, lb, ub, vtype, varnames):
    return _amplpy_gurobi_swig.GRBaddvars(model, numvars, numnz, vbeg, vind, vval, obj, lb, ub, vtype, varnames)

def GRBXaddvars(model, numvars, numnz, vbeg, vind, vval, obj, lb, ub, vtype, varnames):
    return _amplpy_gurobi_swig.GRBXaddvars(model, numvars, numnz, vbeg, vind, vval, obj, lb, ub, vtype, varnames)

def GRBaddconstr(model, numnz, cind, cval, sense, rhs, constrname):
    return _amplpy_gurobi_swig.GRBaddconstr(model, numnz, cind, cval, sense, rhs, constrname)

def GRBaddconstrs(model, numconstrs, numnz, cbeg, cind, cval, sense, rhs, constrnames):
    return _amplpy_gurobi_swig.GRBaddconstrs(model, numconstrs, numnz, cbeg, cind, cval, sense, rhs, constrnames)

def GRBXaddconstrs(model, numconstrs, numnz, cbeg, cind, cval, sense, rhs, constrnames):
    return _amplpy_gurobi_swig.GRBXaddconstrs(model, numconstrs, numnz, cbeg, cind, cval, sense, rhs, constrnames)

def GRBaddrangeconstr(model, numnz, cind, cval, lower, upper, constrname):
    return _amplpy_gurobi_swig.GRBaddrangeconstr(model, numnz, cind, cval, lower, upper, constrname)

def GRBaddrangeconstrs(model, numconstrs, numnz, cbeg, cind, cval, lower, upper, constrnames):
    return _amplpy_gurobi_swig.GRBaddrangeconstrs(model, numconstrs, numnz, cbeg, cind, cval, lower, upper, constrnames)

def GRBXaddrangeconstrs(model, numconstrs, numnz, cbeg, cind, cval, lower, upper, constrnames):
    return _amplpy_gurobi_swig.GRBXaddrangeconstrs(model, numconstrs, numnz, cbeg, cind, cval, lower, upper, constrnames)

def GRBaddsos(model, numsos, nummembers, types, beg, ind, weight):
    return _amplpy_gurobi_swig.GRBaddsos(model, numsos, nummembers, types, beg, ind, weight)

def GRBaddgenconstrMax(model, name, resvar, nvars, constant):
    return _amplpy_gurobi_swig.GRBaddgenconstrMax(model, name, resvar, nvars, constant)

def GRBaddgenconstrMin(model, name, resvar, nvars, constant):
    return _amplpy_gurobi_swig.GRBaddgenconstrMin(model, name, resvar, nvars, constant)

def GRBaddgenconstrAbs(model, name, resvar, argvar):
    return _amplpy_gurobi_swig.GRBaddgenconstrAbs(model, name, resvar, argvar)

def GRBaddgenconstrAnd(model, name, resvar, nvars):
    return _amplpy_gurobi_swig.GRBaddgenconstrAnd(model, name, resvar, nvars)

def GRBaddgenconstrOr(model, name, resvar, nvars):
    return _amplpy_gurobi_swig.GRBaddgenconstrOr(model, name, resvar, nvars)

def GRBaddgenconstrIndicator(model, name, binvar, binval, nvars, vals, sense, rhs):
    return _amplpy_gurobi_swig.GRBaddgenconstrIndicator(model, name, binvar, binval, nvars, vals, sense, rhs)

def GRBaddgenconstrPWL(model, name, xvar, yvar, npts, xpts, ypts):
    return _amplpy_gurobi_swig.GRBaddgenconstrPWL(model, name, xvar, yvar, npts, xpts, ypts)

def GRBaddgenconstrPoly(model, name, xvar, yvar, plen, p, options):
    return _amplpy_gurobi_swig.GRBaddgenconstrPoly(model, name, xvar, yvar, plen, p, options)

def GRBaddgenconstrExpA(model, name, xvar, yvar, a, options):
    return _amplpy_gurobi_swig.GRBaddgenconstrExpA(model, name, xvar, yvar, a, options)

def GRBaddgenconstrLogA(model, name, xvar, yvar, a, options):
    return _amplpy_gurobi_swig.GRBaddgenconstrLogA(model, name, xvar, yvar, a, options)

def GRBaddgenconstrPow(model, name, xvar, yvar, a, options):
    return _amplpy_gurobi_swig.GRBaddgenconstrPow(model, name, xvar, yvar, a, options)

def GRBaddgenconstrExp(model, name, xvar, yvar, options):
    return _amplpy_gurobi_swig.GRBaddgenconstrExp(model, name, xvar, yvar, options)

def GRBaddgenconstrLog(model, name, xvar, yvar, options):
    return _amplpy_gurobi_swig.GRBaddgenconstrLog(model, name, xvar, yvar, options)

def GRBaddgenconstrSin(model, name, xvar, yvar, options):
    return _amplpy_gurobi_swig.GRBaddgenconstrSin(model, name, xvar, yvar, options)

def GRBaddgenconstrCos(model, name, xvar, yvar, options):
    return _amplpy_gurobi_swig.GRBaddgenconstrCos(model, name, xvar, yvar, options)

def GRBaddgenconstrTan(model, name, xvar, yvar, options):
    return _amplpy_gurobi_swig.GRBaddgenconstrTan(model, name, xvar, yvar, options)

def GRBaddqconstr(model, numlnz, lind, lval, numqnz, qrow, qcol, qval, sense, rhs, QCname):
    return _amplpy_gurobi_swig.GRBaddqconstr(model, numlnz, lind, lval, numqnz, qrow, qcol, qval, sense, rhs, QCname)

def GRBaddcone(model, nummembers, members):
    return _amplpy_gurobi_swig.GRBaddcone(model, nummembers, members)

def GRBaddqpterms(model, numqnz, qrow, qcol, qval):
    return _amplpy_gurobi_swig.GRBaddqpterms(model, numqnz, qrow, qcol, qval)

def GRBdelvars(model, len, ind):
    return _amplpy_gurobi_swig.GRBdelvars(model, len, ind)

def GRBdelconstrs(model, len, ind):
    return _amplpy_gurobi_swig.GRBdelconstrs(model, len, ind)

def GRBdelsos(model, len, ind):
    return _amplpy_gurobi_swig.GRBdelsos(model, len, ind)

def GRBdelgenconstrs(model, len, ind):
    return _amplpy_gurobi_swig.GRBdelgenconstrs(model, len, ind)

def GRBdelqconstrs(model, len, ind):
    return _amplpy_gurobi_swig.GRBdelqconstrs(model, len, ind)

def GRBdelq(model):
    return _amplpy_gurobi_swig.GRBdelq(model)

def GRBchgcoeffs(model, cnt, cind, vind, val):
    return _amplpy_gurobi_swig.GRBchgcoeffs(model, cnt, cind, vind, val)

def GRBXchgcoeffs(model, cnt, cind, vind, val):
    return _amplpy_gurobi_swig.GRBXchgcoeffs(model, cnt, cind, vind, val)

def GRBsetpwlobj(model, var, points, x, y):
    return _amplpy_gurobi_swig.GRBsetpwlobj(model, var, points, x, y)

def GRBupdatemodel(model):
    return _amplpy_gurobi_swig.GRBupdatemodel(model)

def GRBreset(model, clearall):
    return _amplpy_gurobi_swig.GRBreset(model, clearall)

def GRBresetmodel(model):
    return _amplpy_gurobi_swig.GRBresetmodel(model)

def GRBfreemodel(model):
    return _amplpy_gurobi_swig.GRBfreemodel(model)

def GRBcomputeIIS(model):
    return _amplpy_gurobi_swig.GRBcomputeIIS(model)
class GRBsvec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    len = property(_amplpy_gurobi_swig.GRBsvec_len_get, _amplpy_gurobi_swig.GRBsvec_len_set)
    ind = property(_amplpy_gurobi_swig.GRBsvec_ind_get, _amplpy_gurobi_swig.GRBsvec_ind_set)
    val = property(_amplpy_gurobi_swig.GRBsvec_val_get, _amplpy_gurobi_swig.GRBsvec_val_set)

    def __init__(self):
        _amplpy_gurobi_swig.GRBsvec_swiginit(self, _amplpy_gurobi_swig.new_GRBsvec())
    __swig_destroy__ = _amplpy_gurobi_swig.delete_GRBsvec

# Register GRBsvec in _amplpy_gurobi_swig:
_amplpy_gurobi_swig.GRBsvec_swigregister(GRBsvec)


def GRBFSolve(model, b, x):
    return _amplpy_gurobi_swig.GRBFSolve(model, b, x)

def GRBBinvColj(model, j, x):
    return _amplpy_gurobi_swig.GRBBinvColj(model, j, x)

def GRBBinvj(model, j, x):
    return _amplpy_gurobi_swig.GRBBinvj(model, j, x)

def GRBBSolve(model, b, x):
    return _amplpy_gurobi_swig.GRBBSolve(model, b, x)

def GRBBinvi(model, i, x):
    return _amplpy_gurobi_swig.GRBBinvi(model, i, x)

def GRBBinvRowi(model, i, x):
    return _amplpy_gurobi_swig.GRBBinvRowi(model, i, x)

def GRBgetBasisHead(model, bhead):
    return _amplpy_gurobi_swig.GRBgetBasisHead(model, bhead)

def GRBcbstoponemultiobj(model, cbdata, objnum):
    return _amplpy_gurobi_swig.GRBcbstoponemultiobj(model, cbdata, objnum)
GRB_LOADED = _amplpy_gurobi_swig.GRB_LOADED
GRB_OPTIMAL = _amplpy_gurobi_swig.GRB_OPTIMAL
GRB_INFEASIBLE = _amplpy_gurobi_swig.GRB_INFEASIBLE
GRB_INF_OR_UNBD = _amplpy_gurobi_swig.GRB_INF_OR_UNBD
GRB_UNBOUNDED = _amplpy_gurobi_swig.GRB_UNBOUNDED
GRB_CUTOFF = _amplpy_gurobi_swig.GRB_CUTOFF
GRB_ITERATION_LIMIT = _amplpy_gurobi_swig.GRB_ITERATION_LIMIT
GRB_NODE_LIMIT = _amplpy_gurobi_swig.GRB_NODE_LIMIT
GRB_TIME_LIMIT = _amplpy_gurobi_swig.GRB_TIME_LIMIT
GRB_SOLUTION_LIMIT = _amplpy_gurobi_swig.GRB_SOLUTION_LIMIT
GRB_INTERRUPTED = _amplpy_gurobi_swig.GRB_INTERRUPTED
GRB_NUMERIC = _amplpy_gurobi_swig.GRB_NUMERIC
GRB_SUBOPTIMAL = _amplpy_gurobi_swig.GRB_SUBOPTIMAL
GRB_INPROGRESS = _amplpy_gurobi_swig.GRB_INPROGRESS
GRB_USER_OBJ_LIMIT = _amplpy_gurobi_swig.GRB_USER_OBJ_LIMIT
GRB_BASIC = _amplpy_gurobi_swig.GRB_BASIC
GRB_NONBASIC_LOWER = _amplpy_gurobi_swig.GRB_NONBASIC_LOWER
GRB_NONBASIC_UPPER = _amplpy_gurobi_swig.GRB_NONBASIC_UPPER
GRB_SUPERBASIC = _amplpy_gurobi_swig.GRB_SUPERBASIC

def GRBstrongbranch(model, num, cand, downobjbd, upobjbd, statusP):
    return _amplpy_gurobi_swig.GRBstrongbranch(model, num, cand, downobjbd, upobjbd, statusP)
GRB_INT_PAR_BARITERLIMIT = _amplpy_gurobi_swig.GRB_INT_PAR_BARITERLIMIT
GRB_DBL_PAR_CUTOFF = _amplpy_gurobi_swig.GRB_DBL_PAR_CUTOFF
GRB_DBL_PAR_ITERATIONLIMIT = _amplpy_gurobi_swig.GRB_DBL_PAR_ITERATIONLIMIT
GRB_DBL_PAR_NODELIMIT = _amplpy_gurobi_swig.GRB_DBL_PAR_NODELIMIT
GRB_INT_PAR_SOLUTIONLIMIT = _amplpy_gurobi_swig.GRB_INT_PAR_SOLUTIONLIMIT
GRB_DBL_PAR_TIMELIMIT = _amplpy_gurobi_swig.GRB_DBL_PAR_TIMELIMIT
GRB_DBL_PAR_BESTOBJSTOP = _amplpy_gurobi_swig.GRB_DBL_PAR_BESTOBJSTOP
GRB_DBL_PAR_BESTBDSTOP = _amplpy_gurobi_swig.GRB_DBL_PAR_BESTBDSTOP
GRB_DBL_PAR_FEASIBILITYTOL = _amplpy_gurobi_swig.GRB_DBL_PAR_FEASIBILITYTOL
GRB_DBL_PAR_INTFEASTOL = _amplpy_gurobi_swig.GRB_DBL_PAR_INTFEASTOL
GRB_DBL_PAR_MARKOWITZTOL = _amplpy_gurobi_swig.GRB_DBL_PAR_MARKOWITZTOL
GRB_DBL_PAR_MIPGAP = _amplpy_gurobi_swig.GRB_DBL_PAR_MIPGAP
GRB_DBL_PAR_MIPGAPABS = _amplpy_gurobi_swig.GRB_DBL_PAR_MIPGAPABS
GRB_DBL_PAR_OPTIMALITYTOL = _amplpy_gurobi_swig.GRB_DBL_PAR_OPTIMALITYTOL
GRB_DBL_PAR_PSDTOL = _amplpy_gurobi_swig.GRB_DBL_PAR_PSDTOL
GRB_INT_PAR_METHOD = _amplpy_gurobi_swig.GRB_INT_PAR_METHOD
GRB_DBL_PAR_PERTURBVALUE = _amplpy_gurobi_swig.GRB_DBL_PAR_PERTURBVALUE
GRB_DBL_PAR_OBJSCALE = _amplpy_gurobi_swig.GRB_DBL_PAR_OBJSCALE
GRB_INT_PAR_SCALEFLAG = _amplpy_gurobi_swig.GRB_INT_PAR_SCALEFLAG
GRB_INT_PAR_SIMPLEXPRICING = _amplpy_gurobi_swig.GRB_INT_PAR_SIMPLEXPRICING
GRB_INT_PAR_QUAD = _amplpy_gurobi_swig.GRB_INT_PAR_QUAD
GRB_INT_PAR_NORMADJUST = _amplpy_gurobi_swig.GRB_INT_PAR_NORMADJUST
GRB_INT_PAR_SIFTING = _amplpy_gurobi_swig.GRB_INT_PAR_SIFTING
GRB_INT_PAR_SIFTMETHOD = _amplpy_gurobi_swig.GRB_INT_PAR_SIFTMETHOD
GRB_DBL_PAR_BARCONVTOL = _amplpy_gurobi_swig.GRB_DBL_PAR_BARCONVTOL
GRB_INT_PAR_BARCORRECTORS = _amplpy_gurobi_swig.GRB_INT_PAR_BARCORRECTORS
GRB_INT_PAR_BARHOMOGENEOUS = _amplpy_gurobi_swig.GRB_INT_PAR_BARHOMOGENEOUS
GRB_INT_PAR_BARORDER = _amplpy_gurobi_swig.GRB_INT_PAR_BARORDER
GRB_DBL_PAR_BARQCPCONVTOL = _amplpy_gurobi_swig.GRB_DBL_PAR_BARQCPCONVTOL
GRB_INT_PAR_CROSSOVER = _amplpy_gurobi_swig.GRB_INT_PAR_CROSSOVER
GRB_INT_PAR_CROSSOVERBASIS = _amplpy_gurobi_swig.GRB_INT_PAR_CROSSOVERBASIS
GRB_INT_PAR_BRANCHDIR = _amplpy_gurobi_swig.GRB_INT_PAR_BRANCHDIR
GRB_INT_PAR_DEGENMOVES = _amplpy_gurobi_swig.GRB_INT_PAR_DEGENMOVES
GRB_INT_PAR_DISCONNECTED = _amplpy_gurobi_swig.GRB_INT_PAR_DISCONNECTED
GRB_DBL_PAR_HEURISTICS = _amplpy_gurobi_swig.GRB_DBL_PAR_HEURISTICS
GRB_DBL_PAR_IMPROVESTARTGAP = _amplpy_gurobi_swig.GRB_DBL_PAR_IMPROVESTARTGAP
GRB_DBL_PAR_IMPROVESTARTTIME = _amplpy_gurobi_swig.GRB_DBL_PAR_IMPROVESTARTTIME
GRB_DBL_PAR_IMPROVESTARTNODES = _amplpy_gurobi_swig.GRB_DBL_PAR_IMPROVESTARTNODES
GRB_INT_PAR_INTEGRALITYFOCUS = _amplpy_gurobi_swig.GRB_INT_PAR_INTEGRALITYFOCUS
GRB_INT_PAR_MINRELNODES = _amplpy_gurobi_swig.GRB_INT_PAR_MINRELNODES
GRB_INT_PAR_MIPFOCUS = _amplpy_gurobi_swig.GRB_INT_PAR_MIPFOCUS
GRB_STR_PAR_NODEFILEDIR = _amplpy_gurobi_swig.GRB_STR_PAR_NODEFILEDIR
GRB_DBL_PAR_NODEFILESTART = _amplpy_gurobi_swig.GRB_DBL_PAR_NODEFILESTART
GRB_INT_PAR_NODEMETHOD = _amplpy_gurobi_swig.GRB_INT_PAR_NODEMETHOD
GRB_DBL_PAR_NORELHEURTIME = _amplpy_gurobi_swig.GRB_DBL_PAR_NORELHEURTIME
GRB_DBL_PAR_NORELHEURWORK = _amplpy_gurobi_swig.GRB_DBL_PAR_NORELHEURWORK
GRB_INT_PAR_PUMPPASSES = _amplpy_gurobi_swig.GRB_INT_PAR_PUMPPASSES
GRB_INT_PAR_RINS = _amplpy_gurobi_swig.GRB_INT_PAR_RINS
GRB_STR_PAR_SOLFILES = _amplpy_gurobi_swig.GRB_STR_PAR_SOLFILES
GRB_INT_PAR_STARTNODELIMIT = _amplpy_gurobi_swig.GRB_INT_PAR_STARTNODELIMIT
GRB_INT_PAR_SUBMIPNODES = _amplpy_gurobi_swig.GRB_INT_PAR_SUBMIPNODES
GRB_INT_PAR_SYMMETRY = _amplpy_gurobi_swig.GRB_INT_PAR_SYMMETRY
GRB_INT_PAR_VARBRANCH = _amplpy_gurobi_swig.GRB_INT_PAR_VARBRANCH
GRB_INT_PAR_SOLUTIONNUMBER = _amplpy_gurobi_swig.GRB_INT_PAR_SOLUTIONNUMBER
GRB_INT_PAR_ZEROOBJNODES = _amplpy_gurobi_swig.GRB_INT_PAR_ZEROOBJNODES
GRB_INT_PAR_CUTS = _amplpy_gurobi_swig.GRB_INT_PAR_CUTS
GRB_INT_PAR_CLIQUECUTS = _amplpy_gurobi_swig.GRB_INT_PAR_CLIQUECUTS
GRB_INT_PAR_COVERCUTS = _amplpy_gurobi_swig.GRB_INT_PAR_COVERCUTS
GRB_INT_PAR_FLOWCOVERCUTS = _amplpy_gurobi_swig.GRB_INT_PAR_FLOWCOVERCUTS
GRB_INT_PAR_FLOWPATHCUTS = _amplpy_gurobi_swig.GRB_INT_PAR_FLOWPATHCUTS
GRB_INT_PAR_GUBCOVERCUTS = _amplpy_gurobi_swig.GRB_INT_PAR_GUBCOVERCUTS
GRB_INT_PAR_IMPLIEDCUTS = _amplpy_gurobi_swig.GRB_INT_PAR_IMPLIEDCUTS
GRB_INT_PAR_PROJIMPLIEDCUTS = _amplpy_gurobi_swig.GRB_INT_PAR_PROJIMPLIEDCUTS
GRB_INT_PAR_MIPSEPCUTS = _amplpy_gurobi_swig.GRB_INT_PAR_MIPSEPCUTS
GRB_INT_PAR_MIRCUTS = _amplpy_gurobi_swig.GRB_INT_PAR_MIRCUTS
GRB_INT_PAR_STRONGCGCUTS = _amplpy_gurobi_swig.GRB_INT_PAR_STRONGCGCUTS
GRB_INT_PAR_MODKCUTS = _amplpy_gurobi_swig.GRB_INT_PAR_MODKCUTS
GRB_INT_PAR_ZEROHALFCUTS = _amplpy_gurobi_swig.GRB_INT_PAR_ZEROHALFCUTS
GRB_INT_PAR_NETWORKCUTS = _amplpy_gurobi_swig.GRB_INT_PAR_NETWORKCUTS
GRB_INT_PAR_SUBMIPCUTS = _amplpy_gurobi_swig.GRB_INT_PAR_SUBMIPCUTS
GRB_INT_PAR_INFPROOFCUTS = _amplpy_gurobi_swig.GRB_INT_PAR_INFPROOFCUTS
GRB_INT_PAR_RLTCUTS = _amplpy_gurobi_swig.GRB_INT_PAR_RLTCUTS
GRB_INT_PAR_RELAXLIFTCUTS = _amplpy_gurobi_swig.GRB_INT_PAR_RELAXLIFTCUTS
GRB_INT_PAR_BQPCUTS = _amplpy_gurobi_swig.GRB_INT_PAR_BQPCUTS
GRB_INT_PAR_PSDCUTS = _amplpy_gurobi_swig.GRB_INT_PAR_PSDCUTS
GRB_INT_PAR_CUTAGGPASSES = _amplpy_gurobi_swig.GRB_INT_PAR_CUTAGGPASSES
GRB_INT_PAR_CUTPASSES = _amplpy_gurobi_swig.GRB_INT_PAR_CUTPASSES
GRB_INT_PAR_GOMORYPASSES = _amplpy_gurobi_swig.GRB_INT_PAR_GOMORYPASSES
GRB_STR_PAR_WORKERPOOL = _amplpy_gurobi_swig.GRB_STR_PAR_WORKERPOOL
GRB_STR_PAR_WORKERPASSWORD = _amplpy_gurobi_swig.GRB_STR_PAR_WORKERPASSWORD
GRB_STR_PAR_COMPUTESERVER = _amplpy_gurobi_swig.GRB_STR_PAR_COMPUTESERVER
GRB_STR_PAR_TOKENSERVER = _amplpy_gurobi_swig.GRB_STR_PAR_TOKENSERVER
GRB_STR_PAR_SERVERPASSWORD = _amplpy_gurobi_swig.GRB_STR_PAR_SERVERPASSWORD
GRB_INT_PAR_SERVERTIMEOUT = _amplpy_gurobi_swig.GRB_INT_PAR_SERVERTIMEOUT
GRB_STR_PAR_CSROUTER = _amplpy_gurobi_swig.GRB_STR_PAR_CSROUTER
GRB_STR_PAR_CSGROUP = _amplpy_gurobi_swig.GRB_STR_PAR_CSGROUP
GRB_DBL_PAR_CSQUEUETIMEOUT = _amplpy_gurobi_swig.GRB_DBL_PAR_CSQUEUETIMEOUT
GRB_INT_PAR_CSPRIORITY = _amplpy_gurobi_swig.GRB_INT_PAR_CSPRIORITY
GRB_INT_PAR_CSIDLETIMEOUT = _amplpy_gurobi_swig.GRB_INT_PAR_CSIDLETIMEOUT
GRB_INT_PAR_CSTLSINSECURE = _amplpy_gurobi_swig.GRB_INT_PAR_CSTLSINSECURE
GRB_INT_PAR_TSPORT = _amplpy_gurobi_swig.GRB_INT_PAR_TSPORT
GRB_STR_PAR_CLOUDACCESSID = _amplpy_gurobi_swig.GRB_STR_PAR_CLOUDACCESSID
GRB_STR_PAR_CLOUDSECRETKEY = _amplpy_gurobi_swig.GRB_STR_PAR_CLOUDSECRETKEY
GRB_STR_PAR_CLOUDPOOL = _amplpy_gurobi_swig.GRB_STR_PAR_CLOUDPOOL
GRB_STR_PAR_CLOUDHOST = _amplpy_gurobi_swig.GRB_STR_PAR_CLOUDHOST
GRB_STR_PAR_CSMANAGER = _amplpy_gurobi_swig.GRB_STR_PAR_CSMANAGER
GRB_STR_PAR_CSAUTHTOKEN = _amplpy_gurobi_swig.GRB_STR_PAR_CSAUTHTOKEN
GRB_STR_PAR_CSAPIACCESSID = _amplpy_gurobi_swig.GRB_STR_PAR_CSAPIACCESSID
GRB_STR_PAR_CSAPISECRET = _amplpy_gurobi_swig.GRB_STR_PAR_CSAPISECRET
GRB_INT_PAR_CSBATCHMODE = _amplpy_gurobi_swig.GRB_INT_PAR_CSBATCHMODE
GRB_STR_PAR_USERNAME = _amplpy_gurobi_swig.GRB_STR_PAR_USERNAME
GRB_STR_PAR_CSAPPNAME = _amplpy_gurobi_swig.GRB_STR_PAR_CSAPPNAME
GRB_INT_PAR_CSCLIENTLOG = _amplpy_gurobi_swig.GRB_INT_PAR_CSCLIENTLOG
GRB_INT_PAR_AGGREGATE = _amplpy_gurobi_swig.GRB_INT_PAR_AGGREGATE
GRB_INT_PAR_AGGFILL = _amplpy_gurobi_swig.GRB_INT_PAR_AGGFILL
GRB_INT_PAR_CONCURRENTMIP = _amplpy_gurobi_swig.GRB_INT_PAR_CONCURRENTMIP
GRB_INT_PAR_CONCURRENTJOBS = _amplpy_gurobi_swig.GRB_INT_PAR_CONCURRENTJOBS
GRB_INT_PAR_DISPLAYINTERVAL = _amplpy_gurobi_swig.GRB_INT_PAR_DISPLAYINTERVAL
GRB_INT_PAR_DISTRIBUTEDMIPJOBS = _amplpy_gurobi_swig.GRB_INT_PAR_DISTRIBUTEDMIPJOBS
GRB_INT_PAR_DUALREDUCTIONS = _amplpy_gurobi_swig.GRB_INT_PAR_DUALREDUCTIONS
GRB_DBL_PAR_FEASRELAXBIGM = _amplpy_gurobi_swig.GRB_DBL_PAR_FEASRELAXBIGM
GRB_INT_PAR_IISMETHOD = _amplpy_gurobi_swig.GRB_INT_PAR_IISMETHOD
GRB_INT_PAR_INFUNBDINFO = _amplpy_gurobi_swig.GRB_INT_PAR_INFUNBDINFO
GRB_INT_PAR_JSONSOLDETAIL = _amplpy_gurobi_swig.GRB_INT_PAR_JSONSOLDETAIL
GRB_INT_PAR_LAZYCONSTRAINTS = _amplpy_gurobi_swig.GRB_INT_PAR_LAZYCONSTRAINTS
GRB_STR_PAR_LOGFILE = _amplpy_gurobi_swig.GRB_STR_PAR_LOGFILE
GRB_INT_PAR_LOGTOCONSOLE = _amplpy_gurobi_swig.GRB_INT_PAR_LOGTOCONSOLE
GRB_INT_PAR_MIQCPMETHOD = _amplpy_gurobi_swig.GRB_INT_PAR_MIQCPMETHOD
GRB_INT_PAR_NONCONVEX = _amplpy_gurobi_swig.GRB_INT_PAR_NONCONVEX
GRB_INT_PAR_NUMERICFOCUS = _amplpy_gurobi_swig.GRB_INT_PAR_NUMERICFOCUS
GRB_INT_PAR_OUTPUTFLAG = _amplpy_gurobi_swig.GRB_INT_PAR_OUTPUTFLAG
GRB_INT_PAR_PRECRUSH = _amplpy_gurobi_swig.GRB_INT_PAR_PRECRUSH
GRB_INT_PAR_PREDEPROW = _amplpy_gurobi_swig.GRB_INT_PAR_PREDEPROW
GRB_INT_PAR_PREDUAL = _amplpy_gurobi_swig.GRB_INT_PAR_PREDUAL
GRB_INT_PAR_PREPASSES = _amplpy_gurobi_swig.GRB_INT_PAR_PREPASSES
GRB_INT_PAR_PREQLINEARIZE = _amplpy_gurobi_swig.GRB_INT_PAR_PREQLINEARIZE
GRB_INT_PAR_PRESOLVE = _amplpy_gurobi_swig.GRB_INT_PAR_PRESOLVE
GRB_DBL_PAR_PRESOS1BIGM = _amplpy_gurobi_swig.GRB_DBL_PAR_PRESOS1BIGM
GRB_DBL_PAR_PRESOS2BIGM = _amplpy_gurobi_swig.GRB_DBL_PAR_PRESOS2BIGM
GRB_INT_PAR_PRESPARSIFY = _amplpy_gurobi_swig.GRB_INT_PAR_PRESPARSIFY
GRB_INT_PAR_PREMIQCPFORM = _amplpy_gurobi_swig.GRB_INT_PAR_PREMIQCPFORM
GRB_INT_PAR_QCPDUAL = _amplpy_gurobi_swig.GRB_INT_PAR_QCPDUAL
GRB_INT_PAR_RECORD = _amplpy_gurobi_swig.GRB_INT_PAR_RECORD
GRB_STR_PAR_RESULTFILE = _amplpy_gurobi_swig.GRB_STR_PAR_RESULTFILE
GRB_INT_PAR_SEED = _amplpy_gurobi_swig.GRB_INT_PAR_SEED
GRB_INT_PAR_THREADS = _amplpy_gurobi_swig.GRB_INT_PAR_THREADS
GRB_DBL_PAR_TUNETIMELIMIT = _amplpy_gurobi_swig.GRB_DBL_PAR_TUNETIMELIMIT
GRB_INT_PAR_TUNERESULTS = _amplpy_gurobi_swig.GRB_INT_PAR_TUNERESULTS
GRB_INT_PAR_TUNECRITERION = _amplpy_gurobi_swig.GRB_INT_PAR_TUNECRITERION
GRB_INT_PAR_TUNETRIALS = _amplpy_gurobi_swig.GRB_INT_PAR_TUNETRIALS
GRB_INT_PAR_TUNEOUTPUT = _amplpy_gurobi_swig.GRB_INT_PAR_TUNEOUTPUT
GRB_INT_PAR_TUNEJOBS = _amplpy_gurobi_swig.GRB_INT_PAR_TUNEJOBS
GRB_DBL_PAR_TUNECLEANUP = _amplpy_gurobi_swig.GRB_DBL_PAR_TUNECLEANUP
GRB_INT_PAR_UPDATEMODE = _amplpy_gurobi_swig.GRB_INT_PAR_UPDATEMODE
GRB_INT_PAR_OBJNUMBER = _amplpy_gurobi_swig.GRB_INT_PAR_OBJNUMBER
GRB_INT_PAR_MULTIOBJMETHOD = _amplpy_gurobi_swig.GRB_INT_PAR_MULTIOBJMETHOD
GRB_INT_PAR_MULTIOBJPRE = _amplpy_gurobi_swig.GRB_INT_PAR_MULTIOBJPRE
GRB_INT_PAR_SCENARIONUMBER = _amplpy_gurobi_swig.GRB_INT_PAR_SCENARIONUMBER
GRB_INT_PAR_POOLSOLUTIONS = _amplpy_gurobi_swig.GRB_INT_PAR_POOLSOLUTIONS
GRB_DBL_PAR_POOLGAP = _amplpy_gurobi_swig.GRB_DBL_PAR_POOLGAP
GRB_DBL_PAR_POOLGAPABS = _amplpy_gurobi_swig.GRB_DBL_PAR_POOLGAPABS
GRB_INT_PAR_POOLSEARCHMODE = _amplpy_gurobi_swig.GRB_INT_PAR_POOLSEARCHMODE
GRB_INT_PAR_IGNORENAMES = _amplpy_gurobi_swig.GRB_INT_PAR_IGNORENAMES
GRB_INT_PAR_STARTNUMBER = _amplpy_gurobi_swig.GRB_INT_PAR_STARTNUMBER
GRB_INT_PAR_PARTITIONPLACE = _amplpy_gurobi_swig.GRB_INT_PAR_PARTITIONPLACE
GRB_INT_PAR_FUNCPIECES = _amplpy_gurobi_swig.GRB_INT_PAR_FUNCPIECES
GRB_DBL_PAR_FUNCPIECELENGTH = _amplpy_gurobi_swig.GRB_DBL_PAR_FUNCPIECELENGTH
GRB_DBL_PAR_FUNCPIECEERROR = _amplpy_gurobi_swig.GRB_DBL_PAR_FUNCPIECEERROR
GRB_DBL_PAR_FUNCPIECERATIO = _amplpy_gurobi_swig.GRB_DBL_PAR_FUNCPIECERATIO
GRB_DBL_PAR_FUNCMAXVAL = _amplpy_gurobi_swig.GRB_DBL_PAR_FUNCMAXVAL
GRB_STR_PAR_DUMMY = _amplpy_gurobi_swig.GRB_STR_PAR_DUMMY
GRB_STR_PAR_JOBID = _amplpy_gurobi_swig.GRB_STR_PAR_JOBID
GRB_CUTS_AUTO = _amplpy_gurobi_swig.GRB_CUTS_AUTO
GRB_CUTS_OFF = _amplpy_gurobi_swig.GRB_CUTS_OFF
GRB_CUTS_CONSERVATIVE = _amplpy_gurobi_swig.GRB_CUTS_CONSERVATIVE
GRB_CUTS_AGGRESSIVE = _amplpy_gurobi_swig.GRB_CUTS_AGGRESSIVE
GRB_CUTS_VERYAGGRESSIVE = _amplpy_gurobi_swig.GRB_CUTS_VERYAGGRESSIVE
GRB_PRESOLVE_AUTO = _amplpy_gurobi_swig.GRB_PRESOLVE_AUTO
GRB_PRESOLVE_OFF = _amplpy_gurobi_swig.GRB_PRESOLVE_OFF
GRB_PRESOLVE_CONSERVATIVE = _amplpy_gurobi_swig.GRB_PRESOLVE_CONSERVATIVE
GRB_PRESOLVE_AGGRESSIVE = _amplpy_gurobi_swig.GRB_PRESOLVE_AGGRESSIVE
GRB_METHOD_AUTO = _amplpy_gurobi_swig.GRB_METHOD_AUTO
GRB_METHOD_PRIMAL = _amplpy_gurobi_swig.GRB_METHOD_PRIMAL
GRB_METHOD_DUAL = _amplpy_gurobi_swig.GRB_METHOD_DUAL
GRB_METHOD_BARRIER = _amplpy_gurobi_swig.GRB_METHOD_BARRIER
GRB_METHOD_CONCURRENT = _amplpy_gurobi_swig.GRB_METHOD_CONCURRENT
GRB_METHOD_DETERMINISTIC_CONCURRENT = _amplpy_gurobi_swig.GRB_METHOD_DETERMINISTIC_CONCURRENT
GRB_METHOD_DETERMINISTIC_CONCURRENT_SIMPLEX = _amplpy_gurobi_swig.GRB_METHOD_DETERMINISTIC_CONCURRENT_SIMPLEX
GRB_BARHOMOGENEOUS_AUTO = _amplpy_gurobi_swig.GRB_BARHOMOGENEOUS_AUTO
GRB_BARHOMOGENEOUS_OFF = _amplpy_gurobi_swig.GRB_BARHOMOGENEOUS_OFF
GRB_BARHOMOGENEOUS_ON = _amplpy_gurobi_swig.GRB_BARHOMOGENEOUS_ON
GRB_MIPFOCUS_BALANCED = _amplpy_gurobi_swig.GRB_MIPFOCUS_BALANCED
GRB_MIPFOCUS_FEASIBILITY = _amplpy_gurobi_swig.GRB_MIPFOCUS_FEASIBILITY
GRB_MIPFOCUS_OPTIMALITY = _amplpy_gurobi_swig.GRB_MIPFOCUS_OPTIMALITY
GRB_MIPFOCUS_BESTBOUND = _amplpy_gurobi_swig.GRB_MIPFOCUS_BESTBOUND
GRB_BARORDER_AUTOMATIC = _amplpy_gurobi_swig.GRB_BARORDER_AUTOMATIC
GRB_BARORDER_AMD = _amplpy_gurobi_swig.GRB_BARORDER_AMD
GRB_BARORDER_NESTEDDISSECTION = _amplpy_gurobi_swig.GRB_BARORDER_NESTEDDISSECTION
GRB_SIMPLEXPRICING_AUTO = _amplpy_gurobi_swig.GRB_SIMPLEXPRICING_AUTO
GRB_SIMPLEXPRICING_PARTIAL = _amplpy_gurobi_swig.GRB_SIMPLEXPRICING_PARTIAL
GRB_SIMPLEXPRICING_STEEPEST_EDGE = _amplpy_gurobi_swig.GRB_SIMPLEXPRICING_STEEPEST_EDGE
GRB_SIMPLEXPRICING_DEVEX = _amplpy_gurobi_swig.GRB_SIMPLEXPRICING_DEVEX
GRB_SIMPLEXPRICING_STEEPEST_QUICK = _amplpy_gurobi_swig.GRB_SIMPLEXPRICING_STEEPEST_QUICK
GRB_VARBRANCH_AUTO = _amplpy_gurobi_swig.GRB_VARBRANCH_AUTO
GRB_VARBRANCH_PSEUDO_REDUCED = _amplpy_gurobi_swig.GRB_VARBRANCH_PSEUDO_REDUCED
GRB_VARBRANCH_PSEUDO_SHADOW = _amplpy_gurobi_swig.GRB_VARBRANCH_PSEUDO_SHADOW
GRB_VARBRANCH_MAX_INFEAS = _amplpy_gurobi_swig.GRB_VARBRANCH_MAX_INFEAS
GRB_VARBRANCH_STRONG = _amplpy_gurobi_swig.GRB_VARBRANCH_STRONG
GRB_PARTITION_EARLY = _amplpy_gurobi_swig.GRB_PARTITION_EARLY
GRB_PARTITION_ROOTSTART = _amplpy_gurobi_swig.GRB_PARTITION_ROOTSTART
GRB_PARTITION_ROOTEND = _amplpy_gurobi_swig.GRB_PARTITION_ROOTEND
GRB_PARTITION_NODES = _amplpy_gurobi_swig.GRB_PARTITION_NODES
GRB_PARTITION_CLEANUP = _amplpy_gurobi_swig.GRB_PARTITION_CLEANUP

def GRBcheckmodel(model):
    return _amplpy_gurobi_swig.GRBcheckmodel(model)

def GRBsetsignal(model):
    return _amplpy_gurobi_swig.GRBsetsignal(model)

def GRBterminate(model):
    return _amplpy_gurobi_swig.GRBterminate(model)

def GRBreplay(filename):
    return _amplpy_gurobi_swig.GRBreplay(filename)

def GRBsetobjective(model, sense, constant, lnz, lind, lval, qnz, qrow, qcol, qval):
    return _amplpy_gurobi_swig.GRBsetobjective(model, sense, constant, lnz, lind, lval, qnz, qrow, qcol, qval)

def GRBsetobjectiven(model, index, priority, weight, abstol, reltol, name, constant, lnz, lind, lval):
    return _amplpy_gurobi_swig.GRBsetobjectiven(model, index, priority, weight, abstol, reltol, name, constant, lnz, lind, lval)

def GRBclean2(lenP, ind, val):
    return _amplpy_gurobi_swig.GRBclean2(lenP, ind, val)

def GRBclean3(lenP, ind0, ind1, val):
    return _amplpy_gurobi_swig.GRBclean3(lenP, ind0, ind1, val)

def GRBmsg(env, message):
    return _amplpy_gurobi_swig.GRBmsg(env, message)

def GRBgetlogfile(env, logfileP):
    return _amplpy_gurobi_swig.GRBgetlogfile(env, logfileP)

def GRBsetlogfile(env, logfile):
    return _amplpy_gurobi_swig.GRBsetlogfile(env, logfile)

def GRBgetintparam(env, paramname, valueP):
    return _amplpy_gurobi_swig.GRBgetintparam(env, paramname, valueP)

def GRBgetdblparam(env, paramname, valueP):
    return _amplpy_gurobi_swig.GRBgetdblparam(env, paramname, valueP)

def GRBgetstrparam(env, paramname, valueP):
    return _amplpy_gurobi_swig.GRBgetstrparam(env, paramname, valueP)

def GRBgetlongstrparam(env, paramname, valueP, size, requiredlenP):
    return _amplpy_gurobi_swig.GRBgetlongstrparam(env, paramname, valueP, size, requiredlenP)

def GRBgetintparaminfo(env, paramname, valueP, minP, maxP, defP):
    return _amplpy_gurobi_swig.GRBgetintparaminfo(env, paramname, valueP, minP, maxP, defP)

def GRBgetdblparaminfo(env, paramname, valueP, minP, maxP, defP):
    return _amplpy_gurobi_swig.GRBgetdblparaminfo(env, paramname, valueP, minP, maxP, defP)

def GRBgetstrparaminfo(env, paramname, valueP, defP):
    return _amplpy_gurobi_swig.GRBgetstrparaminfo(env, paramname, valueP, defP)

def GRBgetparamflags(env, parname, valueP):
    return _amplpy_gurobi_swig.GRBgetparamflags(env, parname, valueP)

def GRBsetparam(env, paramname, value):
    return _amplpy_gurobi_swig.GRBsetparam(env, paramname, value)

def GRBsetintparam(env, paramname, value):
    return _amplpy_gurobi_swig.GRBsetintparam(env, paramname, value)

def GRBsetdblparam(env, paramname, value):
    return _amplpy_gurobi_swig.GRBsetdblparam(env, paramname, value)

def GRBsetstrparam(env, paramname, value):
    return _amplpy_gurobi_swig.GRBsetstrparam(env, paramname, value)

def GRBgetparamtype(env, paramname):
    return _amplpy_gurobi_swig.GRBgetparamtype(env, paramname)

def GRBresetparams(env):
    return _amplpy_gurobi_swig.GRBresetparams(env)

def GRBcopyparams(dest, src):
    return _amplpy_gurobi_swig.GRBcopyparams(dest, src)

def GRBwriteparams(env, filename):
    return _amplpy_gurobi_swig.GRBwriteparams(env, filename)

def GRBreadparams(env, filename):
    return _amplpy_gurobi_swig.GRBreadparams(env, filename)

def GRBgetnumparams(env):
    return _amplpy_gurobi_swig.GRBgetnumparams(env)

def GRBgetparamname(env, i, paramnameP):
    return _amplpy_gurobi_swig.GRBgetparamname(env, i, paramnameP)

def GRBgetnumattributes(model):
    return _amplpy_gurobi_swig.GRBgetnumattributes(model)

def GRBgetattrname(model, i, attrnameP):
    return _amplpy_gurobi_swig.GRBgetattrname(model, i, attrnameP)

def GRBloadenv(envP, logfilename):
    return _amplpy_gurobi_swig.GRBloadenv(envP, logfilename)

def GRBemptyenv(envP):
    return _amplpy_gurobi_swig.GRBemptyenv(envP)

def GRBstartenv(env):
    return _amplpy_gurobi_swig.GRBstartenv(env)

def GRBloadenvadv(envP, logfilename, apitype, major, minor, tech, server, router, password, group, priority, idletimeout, accessid, secretkey, cb, usrdata, logcb):
    return _amplpy_gurobi_swig.GRBloadenvadv(envP, logfilename, apitype, major, minor, tech, server, router, password, group, priority, idletimeout, accessid, secretkey, cb, usrdata, logcb)

def GRBloadclientenv(envP, logfilename, computeserver, router, password, group, CStlsinsecure, priority, timeout):
    return _amplpy_gurobi_swig.GRBloadclientenv(envP, logfilename, computeserver, router, password, group, CStlsinsecure, priority, timeout)

def GRBloadclientenvadv(envP, logfilename, computeserver, router, password, group, CStlsinsecure, priority, timeout, apitype, major, minor, tech, cb, usrdata):
    return _amplpy_gurobi_swig.GRBloadclientenvadv(envP, logfilename, computeserver, router, password, group, CStlsinsecure, priority, timeout, apitype, major, minor, tech, cb, usrdata)

def GRBloadcloudenv(envP, logfilename, accessID, secretKey, pool, priority):
    return _amplpy_gurobi_swig.GRBloadcloudenv(envP, logfilename, accessID, secretKey, pool, priority)

def GRBloadcloudenvadv(envP, logfilename, accessID, secretKey, pool, priority, apitype, major, minor, tech, cb, usrdata):
    return _amplpy_gurobi_swig.GRBloadcloudenvadv(envP, logfilename, accessID, secretKey, pool, priority, apitype, major, minor, tech, cb, usrdata)

def GRBgetenv(model):
    return _amplpy_gurobi_swig.GRBgetenv(model)

def GRBgetconcurrentenv(model, num):
    return _amplpy_gurobi_swig.GRBgetconcurrentenv(model, num)

def GRBdiscardconcurrentenvs(model):
    return _amplpy_gurobi_swig.GRBdiscardconcurrentenvs(model)

def GRBgetmultiobjenv(model, num):
    return _amplpy_gurobi_swig.GRBgetmultiobjenv(model, num)

def GRBdiscardmultiobjenvs(model):
    return _amplpy_gurobi_swig.GRBdiscardmultiobjenvs(model)

def GRBgettuneenv(model, num):
    return _amplpy_gurobi_swig.GRBgettuneenv(model, num)

def GRBdiscardtuneenvs(model):
    return _amplpy_gurobi_swig.GRBdiscardtuneenvs(model)

def GRBreleaselicense(env):
    return _amplpy_gurobi_swig.GRBreleaselicense(env)

def GRBfreeenv(env):
    return _amplpy_gurobi_swig.GRBfreeenv(env)

def GRBgeterrormsg(env):
    return _amplpy_gurobi_swig.GRBgeterrormsg(env)

def GRBgetmerrormsg(model):
    return _amplpy_gurobi_swig.GRBgetmerrormsg(model)

def GRBgetcommstats(env, recvtimeP, recvbytesP, recvmsgsP, sendtimeP, sendbytesP, sendmsgsP):
    return _amplpy_gurobi_swig.GRBgetcommstats(env, recvtimeP, recvbytesP, recvmsgsP, sendtimeP, sendbytesP, sendmsgsP)

def GRBversion(majorP, minorP, technicalP):
    return _amplpy_gurobi_swig.GRBversion(majorP, minorP, technicalP)

def GRBplatform():
    return _amplpy_gurobi_swig.GRBplatform()

def GRBlisttokens():
    return _amplpy_gurobi_swig.GRBlisttokens()

def GRBprinttuneparams():
    return _amplpy_gurobi_swig.GRBprinttuneparams()

def GRBtunemodel(model):
    return _amplpy_gurobi_swig.GRBtunemodel(model)

def GRBtunemodels(nummodels, models, ignore):
    return _amplpy_gurobi_swig.GRBtunemodels(nummodels, models, ignore)

def GRBgettuneresult(model, i):
    return _amplpy_gurobi_swig.GRBgettuneresult(model, i)

def GRBgettunelog(model, i, logP):
    return _amplpy_gurobi_swig.GRBgettunelog(model, i, logP)

def GRBtunemodeladv(model, ignore):
    return _amplpy_gurobi_swig.GRBtunemodeladv(model, ignore)

def GRBsortIDi(len, ind, val):
    return _amplpy_gurobi_swig.GRBsortIDi(len, ind, val)

def GRBabortbatch(batch):
    return _amplpy_gurobi_swig.GRBabortbatch(batch)

def GRBdiscardbatch(batch):
    return _amplpy_gurobi_swig.GRBdiscardbatch(batch)

def GRBretrybatch(batch):
    return _amplpy_gurobi_swig.GRBretrybatch(batch)

def GRBfreebatch(batch):
    return _amplpy_gurobi_swig.GRBfreebatch(batch)

def GRBgetbatch(env, batchID, batchP):
    return _amplpy_gurobi_swig.GRBgetbatch(env, batchID, batchP)

def GRBgetbatchjsonsolution(batch, jsonsolP):
    return _amplpy_gurobi_swig.GRBgetbatchjsonsolution(batch, jsonsolP)

def GRBgetbatchintattr(batch, attrname, valueP):
    return _amplpy_gurobi_swig.GRBgetbatchintattr(batch, attrname, valueP)

def GRBgetbatchstrattr(batch, attrname, valueP):
    return _amplpy_gurobi_swig.GRBgetbatchstrattr(batch, attrname, valueP)

def GRBgetbatchattrname(env, n, attrnameP):
    return _amplpy_gurobi_swig.GRBgetbatchattrname(env, n, attrnameP)

def GRBgetbatchattrflags(batch, attrname, flagsP):
    return _amplpy_gurobi_swig.GRBgetbatchattrflags(batch, attrname, flagsP)

def GRBgetbatchattrinfo(batch, attrname, datatypeP, settableP):
    return _amplpy_gurobi_swig.GRBgetbatchattrinfo(batch, attrname, datatypeP, settableP)

def GRBupdatebatch(batch):
    return _amplpy_gurobi_swig.GRBupdatebatch(batch)

def GRBwritebatchjsonsolution(batch, filename):
    return _amplpy_gurobi_swig.GRBwritebatchjsonsolution(batch, filename)

def GRBgetnumbatchattributes(env):
    return _amplpy_gurobi_swig.GRBgetnumbatchattributes(env)

def GRBgetbatchenv(batch):
    return _amplpy_gurobi_swig.GRBgetbatchenv(batch)

def GRBfree(ptr):
    return _amplpy_gurobi_swig.GRBfree(ptr)
GRB_BATCH_STATUS_UNKNOWN = _amplpy_gurobi_swig.GRB_BATCH_STATUS_UNKNOWN
GRB_BATCH_CREATED = _amplpy_gurobi_swig.GRB_BATCH_CREATED
GRB_BATCH_SUBMITTED = _amplpy_gurobi_swig.GRB_BATCH_SUBMITTED
GRB_BATCH_ABORTED = _amplpy_gurobi_swig.GRB_BATCH_ABORTED
GRB_BATCH_FAILED = _amplpy_gurobi_swig.GRB_BATCH_FAILED
GRB_BATCH_COMPLETED = _amplpy_gurobi_swig.GRB_BATCH_COMPLETED

def GRBsync(model):
    return _amplpy_gurobi_swig.GRBsync(model)

def GRBpingserver(server, password):
    return _amplpy_gurobi_swig.GRBpingserver(server, password)

def GRBprefetchattr(model, attrname):
    return _amplpy_gurobi_swig.GRBprefetchattr(model, attrname)

def callback_wrapper(model, cbdata, where, usrdata):
    return _amplpy_gurobi_swig.callback_wrapper(model, cbdata, where, usrdata)
class GurobiCallback(BaseCallback):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == GurobiCallback:
            _self = None
        else:
            _self = self
        _amplpy_gurobi_swig.GurobiCallback_swiginit(self, _amplpy_gurobi_swig.new_GurobiCallback(_self, ))

    def where(self):
        return _amplpy_gurobi_swig.GurobiCallback_where(self)

    def run(self):
        return _amplpy_gurobi_swig.GurobiCallback_run(self)

    def getWhereString(self):
        return _amplpy_gurobi_swig.GurobiCallback_getWhereString(self)

    def getMessage(self):
        return _amplpy_gurobi_swig.GurobiCallback_getMessage(self)

    def getObj(self):
        return _amplpy_gurobi_swig.GurobiCallback_getObj(self)

    def getCBData(self):
        return _amplpy_gurobi_swig.GurobiCallback_getCBData(self)

    def getGRBModel(self):
        return _amplpy_gurobi_swig.GurobiCallback_getGRBModel(self)

    def terminate(self):
        return _amplpy_gurobi_swig.GurobiCallback_terminate(self)

    def getInt(self, what):
        return _amplpy_gurobi_swig.GurobiCallback_getInt(self, what)

    def getDouble(self, what):
        return _amplpy_gurobi_swig.GurobiCallback_getDouble(self, what)

    def getDoubleArray(self, what):
        return _amplpy_gurobi_swig.GurobiCallback_getDoubleArray(self, what)

    def setSolution(self, x):
        return _amplpy_gurobi_swig.GurobiCallback_setSolution(self, x)

    def getAMPLWhere(self):
        return _amplpy_gurobi_swig.GurobiCallback_getAMPLWhere(self)

    def get(self, what):
        return _amplpy_gurobi_swig.GurobiCallback_get(self, what)

    def getValue(self, v):
        return _amplpy_gurobi_swig.GurobiCallback_getValue(self, v)
    __swig_destroy__ = _amplpy_gurobi_swig.delete_GurobiCallback
    def __disown__(self):
        self.this.disown()
        _amplpy_gurobi_swig.disown_GurobiCallback(self)
        return weakref.proxy(self)

# Register GurobiCallback in _amplpy_gurobi_swig:
_amplpy_gurobi_swig.GurobiCallback_swigregister(GurobiCallback)


def AMPLloadmodel(argc, argv, asl):
    return _amplpy_gurobi_swig.AMPLloadmodel(argc, argv, asl)

def AMPLwritesol(m, asl, lastoptimizerun, solFileName):
    return _amplpy_gurobi_swig.AMPLwritesol(m, asl, lastoptimizerun, solFileName)

def freeEnvironment():
    return _amplpy_gurobi_swig.freeEnvironment()

def freeASL(aslp):
    return _amplpy_gurobi_swig.freeASL(aslp)
class GurobiDrv(SolverDriverGrb):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def loadModel(self, modelName):
        return _amplpy_gurobi_swig.GurobiDrv_loadModel(self, modelName)
    __swig_destroy__ = _amplpy_gurobi_swig.delete_GurobiDrv

    def __init__(self):
        _amplpy_gurobi_swig.GurobiDrv_swiginit(self, _amplpy_gurobi_swig.new_GurobiDrv())

# Register GurobiDrv in _amplpy_gurobi_swig:
_amplpy_gurobi_swig.GurobiDrv_swigregister(GurobiDrv)

class GurobiModel(AMPLModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def enableLazyConstraints(self):
        return _amplpy_gurobi_swig.GurobiModel_enableLazyConstraints(self)

    def __init__(self, other):
        _amplpy_gurobi_swig.GurobiModel_swiginit(self, _amplpy_gurobi_swig.new_GurobiModel(other))

    def getSolutionVector(self):
        return _amplpy_gurobi_swig.GurobiModel_getSolutionVector(self)

    def optimize(self):
        return _amplpy_gurobi_swig.GurobiModel_optimize(self)

    def getStatus(self):
        return _amplpy_gurobi_swig.GurobiModel_getStatus(self)

    def getNumVars(self):
        return _amplpy_gurobi_swig.GurobiModel_getNumVars(self)

    def getObj(self):
        return _amplpy_gurobi_swig.GurobiModel_getObj(self)

    def getSolution(self, first, length, sol):
        return _amplpy_gurobi_swig.GurobiModel_getSolution(self, first, length, sol)

    def error(self, code):
        return _amplpy_gurobi_swig.GurobiModel_error(self, code)

    def getIntAttr(self, name):
        return _amplpy_gurobi_swig.GurobiModel_getIntAttr(self, name)

    def getDoubleAttr(self, name):
        return _amplpy_gurobi_swig.GurobiModel_getDoubleAttr(self, name)

    def getIntAttrArray(self, name, first, length, arr):
        return _amplpy_gurobi_swig.GurobiModel_getIntAttrArray(self, name, first, length, arr)

    def getDoubleAttrArray(self, name, first, length, arr):
        return _amplpy_gurobi_swig.GurobiModel_getDoubleAttrArray(self, name, first, length, arr)

    def getIntParam(self, name):
        return _amplpy_gurobi_swig.GurobiModel_getIntParam(self, name)

    def getDoubleParam(self, name):
        return _amplpy_gurobi_swig.GurobiModel_getDoubleParam(self, name)

    def getStrParam(self, name):
        return _amplpy_gurobi_swig.GurobiModel_getStrParam(self, name)

    def setIntParam(self, name, value):
        return _amplpy_gurobi_swig.GurobiModel_setIntParam(self, name, value)

    def setDoubleParam(self, name, value):
        return _amplpy_gurobi_swig.GurobiModel_setDoubleParam(self, name, value)

    def setStrParam(self, name, value):
        return _amplpy_gurobi_swig.GurobiModel_setStrParam(self, name, value)

    def getGRBmodel(self):
        return _amplpy_gurobi_swig.GurobiModel_getGRBmodel(self)

    def getGRBenv(self):
        return _amplpy_gurobi_swig.GurobiModel_getGRBenv(self)
    __swig_destroy__ = _amplpy_gurobi_swig.delete_GurobiModel

    def setParameter(self, *args):
        return _amplpy_gurobi_swig.GurobiModel_setParameter(self, *args)

# Register GurobiModel in _amplpy_gurobi_swig:
_amplpy_gurobi_swig.GurobiModel_swigregister(GurobiModel)



