variables:
  CIBW_SKIP: pp* cp27-* *_i686 *-win32 *musllinux* cp312-*
  CIBW_TEST_REQUIRES: --index-url https://pypi.ampl.com --extra-index-url https://pypi.org/simple amplpy ampl_module_base pandas
  CIBW_ENVIRONMENT_PASS_LINUX: AMPLKEY_UUID

stages:
- stage: build
  jobs:
  - job: linux
    pool: {vmImage: 'ubuntu-latest'}
    strategy:
      matrix:
        gurobi:
          solver: 'gurobi'
          CIBW_TEST_COMMAND: python -m amplpy_gurobi.tests
        cplex:
          solver: 'cplex'
          CIBW_MANYLINUX_X86_64_IMAGE: 'manylinux2014'
          CIBW_TEST_COMMAND: python -m amplpy_cplex.tests
        xpress:
          solver: 'xpress'
          CIBW_MANYLINUX_X86_64_IMAGE: 'manylinux2014'
          CIBW_TEST_COMMAND: python -m amplpy_xpress.tests
        copt:
          solver: 'copt'
          CIBW_MANYLINUX_X86_64_IMAGE: 'manylinux2014'
          CIBW_TEST_COMMAND: python -m amplpy_copt.tests
        #highs:
        #  solver: 'highs'
        #  CIBW_TEST_COMMAND: python -m amplpy_highs.tests
    variables:
      wheelhouse: $(Build.ArtifactStagingDirectory)
    steps:
      - task: UsePythonVersion@0
      # - script: |
      #     sudo apt-get install swig
      #   displayName: Install SWIG
      - bash: |
          bash libs/download.sh
        displayName: Download libraries
      - bash: |
          python -m pip install setuptools
          set -ex
          mkdir -p tmp
          TMP=`pwd`/tmp
          cp support/twine.sh $WHEELHOUSE/twine.sh
          cd python/$SOLVER
          bash prepare.sh linux64
          bash swig.sh
          pip install --upgrade pip
          pip install urllib3[secure] --upgrade
          python -m pip install --upgrade cibuildwheel==2.16.2
          cibuildwheel --platform linux --output-dir $TMP .
          ls -l $TMP
          test "$(ls -A $TMP)" || exit 1
          mv $TMP/* $WHEELHOUSE/
          bash prepare.sh # to package libs for all platforms
          python setup.py sdist -d $WHEELHOUSE
          # pip install twine
          # twine upload -u $(TWINE_USERNAME) -p $(TWINE_PASSWORD) $WHEELHOUSE/* || true
        env:
          CIBW_ENVIRONMENT: AMPLKEY_UUID=$(AMPLKEY_UUID)
        displayName: Build wheels
      - task: PublishBuildArtifacts@1
        inputs: {pathtoPublish: '$(Build.ArtifactStagingDirectory)'}
  - job: macos
    pool: {vmImage: 'macOS-latest'}
    strategy:
      matrix:
        gurobi:
          solver: 'gurobi'
          CIBW_TEST_COMMAND: python -m amplpy_gurobi.tests
        #highs:
        #  solver: 'highs'
        #  CIBW_TEST_COMMAND: python -m amplpy_highs.tests
        cplex:
          solver: 'cplex'
          CIBW_TEST_COMMAND: python -m amplpy_cplex.tests
        xpress:
          solver: 'xpress'
          CIBW_TEST_COMMAND: python -m amplpy_xpress.tests
        copt:
          solver: 'copt'
          CIBW_TEST_COMMAND: python -m amplpy_copt.tests
    variables:
      wheelhouse: $(Build.ArtifactStagingDirectory)
    steps:
      - task: UsePythonVersion@0
      # - script: |
      #     brew install swig
      #   displayName: Install SWIG
      - bash: |
          bash libs/download.sh
        displayName: Download libraries
      - bash: |
          set -ex
          mkdir -p tmp
          TMP=`pwd`/tmp
          cd python/$SOLVER
          bash prepare.sh osx64
          bash swig.sh
          pip install --upgrade pip
          pip install urllib3[secure] --upgrade
          python -m pip install --upgrade cibuildwheel==2.16.2
          cibuildwheel --platform macos --output-dir $TMP .
          ls -l $TMP
          test "$(ls -A $TMP)" || exit 1
          mv $TMP/* $WHEELHOUSE/
          # pip install twine
          # twine upload -u $(TWINE_USERNAME) -p $(TWINE_PASSWORD) $WHEELHOUSE/*.whl || true
        env:
          CIBW_ENVIRONMENT: AMPLKEY_UUID=$(AMPLKEY_UUID)
        displayName: Build wheels
      - task: PublishBuildArtifacts@1
        inputs: {pathtoPublish: '$(Build.ArtifactStagingDirectory)'}
  - job: windows
    pool: {vmImage: 'windows-latest'}
    strategy:
      matrix:
        gurobi:
          solver: 'gurobi'
          CIBW_TEST_COMMAND: python -m amplpy_gurobi.tests
        cplex:
          solver: 'cplex'
          CIBW_TEST_COMMAND: python -m amplpy_cplex.tests
        xpress:
          solver: 'xpress'
          CIBW_TEST_COMMAND: python -m amplpy_xpress.tests
        copt:
          solver: 'copt'
          CIBW_TEST_COMMAND: python -m amplpy_copt.tests
        #highs:
        #  solver: 'highs'
        #  CIBW_TEST_COMMAND: python -m amplpy_highs.tests
    variables:
      wheelhouse: $(Build.ArtifactStagingDirectory)
    steps:
      - task: UsePythonVersion@0
      # - script: |
      #     choco install vcpython27 -f -y
      #   displayName: Install Visual C++ for Python 2.7
      # - script: |
      #     choco install -y --x86 swig
      #   displayName: Install SWIG
      - bash: |
          bash libs/download.sh
        displayName: Download libraries
      - bash: |
          set -ex
          mkdir -p tmp
          cd python/$SOLVER
          bash prepare.sh win64
          bash swig.sh
          python -m pip install --user --upgrade pip
          python -m pip install urllib3[secure] --upgrade
          python -m pip install --upgrade cibuildwheel==2.16.2
          cibuildwheel --platform windows --output-dir tmp .
          cp tmp/* $WHEELHOUSE/
          # python -m pip install twine
          # python -m twine upload -u $(TWINE_USERNAME) -p $(TWINE_PASSWORD) $WHEELHOUSE/*.whl || true
        env:
          CIBW_ENVIRONMENT: AMPLKEY_UUID=$(AMPLKEY_UUID)
        displayName: Build wheels
      - task: PublishBuildArtifacts@1
        inputs: {pathtoPublish: '$(Build.ArtifactStagingDirectory)'}

- stage: publish
  jobs:
    - job: upload
      pool: {vmImage: 'ubuntu-latest'}
      steps:
        - task: DownloadBuildArtifacts@0
          inputs:
              buildType: 'current'
              downloadPath: 'artifacts/ampls-api'
              artifactName: 'drop'
          displayName: 'Download current pipeline artifacts'
        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: 'artifacts/'
            artifact: 'release'
            artifactType: 'pipeline'
