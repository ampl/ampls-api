jobs:
- job: linux
  pool: {vmImage: 'Ubuntu-16.04'}
  variables:
    wheelhouse: $(Build.ArtifactStagingDirectory)
  steps:
    - task: UsePythonVersion@0
    - script: |
        sudo apt-get install swig
      displayName: Install SWIG
    - bash: |
        curl -O curl -O https://www.ampl.online/~fdabrandao/gurobi81.zip
        unzip gurobi81.zip
        mv gurobi81 amplpy_gurobi/amplpy_gurobi/
      displayName: Download GUROBI libraries
    - bash: |
        export GUROBI_HOME=`pwd`/amplpy_gurobi/amplpy_gurobi/gurobi81/
        export GUROBI_INCLUDE_DIR=$GUROBI_HOME/include/
        export GUROBI_LIBRARY=$GUROBI_HOME/linux64/
        cd manylinux
        ./create.sh
        ./run.sh
        cd lib64
        unzip solvers.zip
      displayName: Prepare base package
    - bash: |
        cd manylinux/lib64/solvers/amplpy_gurobi
        bash swig.sh
        pip install --upgrade pip
        pip install urllib3[secure] --upgrade
        pip install cibuildwheel==0.12.0
        CIBW_SKIP='*-manylinux*_i686' cibuildwheel --platform linux --output-dir $WHEELHOUSE .
        # python setup.py sdist -d $WHEELHOUSE
        pip install twine
        twine upload -u $(TWINE_USERNAME) -p $(TWINE_PASSWORD) $WHEELHOUSE/*.whl || true
      displayName: Build wheels
    - task: PublishBuildArtifacts@1
      inputs: {pathtoPublish: '$(Build.ArtifactStagingDirectory)'}
- job: macos
  pool: {vmImage: 'macOS-10.13'}
  variables:
    wheelhouse: $(Build.ArtifactStagingDirectory)
  steps: 
    - task: UsePythonVersion@0
    - script: |
        brew install swig
      displayName: Install SWIG
    - bash: |
        curl -O curl -O https://www.ampl.online/~fdabrandao/gurobi81.zip
        unzip gurobi81.zip
        mv gurobi81 amplpy_gurobi/amplpy_gurobi/
      displayName: Download GUROBI libraries
    - bash: |
        export GUROBI_HOME=`pwd`/amplpy_gurobi/amplpy_gurobi/gurobi81/
        export GUROBI_INCLUDE_DIR=$GUROBI_HOME/include/
        export GUROBI_LIBRARY=$GUROBI_HOME/macos64/
        install_name_tool -id @rpath/libgurobi81.dylib $GUROBI_LIBRARY/libgurobi81.dylib
        mkdir build
        cd build
        cmake .. -DARCH=64
        make package
        unzip solvers.zip
      displayName: Prepare base package
    - bash: |
        cd build/solvers/amplpy_gurobi
        bash swig.sh
        pip install --upgrade pip
        pip install urllib3[secure] --upgrade
        pip install cibuildwheel==0.12.0
        cibuildwheel --platform macos --output-dir $WHEELHOUSE .
        pip install twine
        twine upload -u $(TWINE_USERNAME) -p $(TWINE_PASSWORD) $WHEELHOUSE/*.whl || true
      displayName: Build wheels
    - task: PublishBuildArtifacts@1
      inputs: {pathtoPublish: '$(Build.ArtifactStagingDirectory)'}
- job: windows
  pool: {vmImage: 'vs2017-win2016'}
  variables:
    wheelhouse: $(Build.ArtifactStagingDirectory)
  steps:
    - {task: UsePythonVersion@0, inputs: {versionSpec: '2.7', architecture: x64}}
    - {task: UsePythonVersion@0, inputs: {versionSpec: '3.4', architecture: x64}}
    - {task: UsePythonVersion@0, inputs: {versionSpec: '3.5', architecture: x64}}
    - {task: UsePythonVersion@0, inputs: {versionSpec: '3.6', architecture: x64}}
    - {task: UsePythonVersion@0, inputs: {versionSpec: '3.7', architecture: x64}}
    - script: |
        choco install vcpython27 -f -y
      displayName: Install Visual C++ for Python 2.7
    - script: |
        choco install -y --x86 swig
      displayName: Install SWIG
    - bash: |
        curl -O curl -O https://www.ampl.online/~fdabrandao/gurobi81.zip
        unzip gurobi81.zip
        mv gurobi81 amplpy_gurobi/amplpy_gurobi/
      displayName: Download GUROBI libraries
    - bash: |
        export PATH="/c/Program Files/CMake/bin:$PATH"
        export GUROBI_HOME=`pwd`/amplpy_gurobi/amplpy_gurobi/gurobi81/
        export GUROBI_INCLUDE_DIR=$GUROBI_HOME/include/
        export GUROBI_LIBRARY=$GUROBI_HOME/win64/
        curl -o amplpy_gurobi/amplpy_gurobi/swig/stdint.h https://raw.githubusercontent.com/mattn/gntp-send/master/include/msinttypes/stdint.h
        mkdir build
        cd build
        cmake .. -DARCH=64 -A x64
        cmake --build . --config Release
        cpack
        unzip solvers.zip
      displayName: Prepare base package
    - bash: |
        cd build/solvers/amplpy_gurobi
        bash swig.sh
        python -m pip install --user --upgrade pip
        python -m pip install urllib3[secure] --upgrade
        python -m pip install cibuildwheel==0.12.0
        CIBW_SKIP='*-win32' cibuildwheel --platform windows --output-dir $WHEELHOUSE .
        python -m pip install twine
        python -m twine upload -u $(TWINE_USERNAME) -p $(TWINE_PASSWORD) $WHEELHOUSE/*.whl || true
        echo $WHEELHOUSE
        ls $WHEELHOUSE
      displayName: Build wheels
    - task: PublishBuildArtifacts@1
      inputs: {pathtoPublish: '$(Build.ArtifactStagingDirectory)'}
